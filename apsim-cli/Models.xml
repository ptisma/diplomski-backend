<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Models</name>
    </assembly>
    <members>
        <member name="T:Models.AgPasture.AGPBiomass">
            <summary>AgPasture class for holding a biomass weight, N content and digestibility.</summary>
        </member>
        <member name="P:Models.AgPasture.AGPBiomass.Wt">
            <summary>Dry matter weight.</summary>
        </member>
        <member name="P:Models.AgPasture.AGPBiomass.N">
            <summary>N content of biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.AGPBiomass.NConc">
            <summary>N concentration.</summary>
        </member>
        <member name="P:Models.AgPasture.AGPBiomass.Digestibility">
            <summary>Digestibility of biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.AGPBiomass.ME">
            <summary>Average metabolisable energy concentration of standing herbage (MJ/kgDM).</summary>
        </member>
        <member name="T:Models.AgPasture.BiomassAndN">
            <summary>Amount of biomass and nitrogen (kg/ha)</summary>
        </member>
        <member name="F:Models.AgPasture.BiomassAndN.Wt">
            <summary>Amount of biomass (kg/ha)</summary>
        </member>
        <member name="F:Models.AgPasture.BiomassAndN.N">
            <summary>Amount of nitrogen (kg/ha)</summary>
        </member>
        <member name="T:Models.AgPasture.BiomassAndNLayered">
            <summary>Amount of biomass and nitrogen (kg/ha)</summary>
        </member>
        <member name="F:Models.AgPasture.BiomassAndNLayered.Wt">
            <summary>Amount of biomass (kg/ha)</summary>
        </member>
        <member name="F:Models.AgPasture.BiomassAndNLayered.N">
            <summary>Amount of nitrogen (kg/ha)</summary>
        </member>
        <member name="T:Models.AgPasture.GenericTissue">
            <summary>Describes a generic tissue of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.species">
            <summary>Name of species.</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.surfaceOrganicMatter">
            <summary>The surface organic matter model.</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.CarbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.CNratioProtein">
            <summary>Carbon to nitrogen ratio of proteins (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.CNratioCellWall">
            <summary>Carbon to nitrogen ratio of cell walls (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.FractionNLuxuryRemobilisable">
            <summary>Fraction of luxury N remobilisable per day (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.FractionSugarNewGrowth">
            <summary>Sugar fraction on new growth, i.e. soluble carbohydrate (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DigestibilityCellWall">
            <summary>Digestibility of cell walls (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DigestibilityProtein">
            <summary>Digestibility of proteins (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DMTransferedIn">
            <summary>DM transferred into this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DMTransferedOut">
            <summary>DM transferred out of this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NTransferedIn">
            <summary>N transferred into this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NTransferedOut">
            <summary>N transferred out of this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NRemobilisable">
            <summary>N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NRemobilised">
            <summary>N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DM">
            <summary>Dry matter biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DMRemoved">
            <summary>DM removed from this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.FractionRemoved">
            <summary>The fraction of DM removed from this tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NRemoved">
            <summary>N removed from this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.Digestibility">
            <summary>Digestibility of this tissue (kg/kg).</summary>
            <remarks>Digestibility of sugars is assumed to be 100%.</remarks>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.OnDoDailyInitialisation">
            <summary>Preparation before the main daily processes.</summary>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.SetBiomass(System.Double,System.Double)">
            <summary>Sets the biomass of this tissue.</summary>
            <param name="dmAmount">The DM amount to set to (kg/ha).</param>
            <param name="nAmount">The amount of N to set to (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.AddBiomass(System.Double,System.Double)">
            <summary>Adds an amount of biomass to this tissue.</summary>
            <param name="dmAmount">The amount of dry matter to add (kg/ha).</param>
            <param name="nAmount">The amount of nitrogen to add (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.RemoveBiomass(System.Double,System.Double)">
            <summary>Removes a fraction of the biomass from this tissue.</summary>
            <param name="fractionToRemove">The fraction of biomass to remove.</param>
            <param name="fractionToSoil">The fraction of removed biomass to send to soil.</param>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.Update">
            <summary>Updates the tissue state, make changes in DM and N effective.</summary>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.ClearDailyTransferredAmounts">
            <summary>Clear the daily flows of DM and N.</summary>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.CalculateDigestibility">
            <summary>Calculate the values for calculated states.</summary>
        </member>
        <member name="T:Models.AgPasture.IAGPBiomass">
            <summary>An interface that defines a readonly AgPasture biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.IAGPBiomass.Wt">
            <summary>Dry matter weight.</summary>
        </member>
        <member name="P:Models.AgPasture.IAGPBiomass.N">
            <summary>N content of biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.IAGPBiomass.NConc">
            <summary>N concentration.</summary>
        </member>
        <member name="P:Models.AgPasture.IAGPBiomass.Digestibility">
            <summary>Digestibility of biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.IAGPBiomass.ME">
            <summary>Average metabolisable energy concentration of standing herbage (MJ/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.IOrganDigestibility.LiveDigestibility">
            <summary>Digestibility of live biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.IOrganDigestibility.DeadDigestibility">
            <summary>Digestibility of dead biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="T:Models.AgPasture.PastureAboveGroundOrgan">
            <summary>Describes a generic above ground organ of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.Tissue">
            <summary>The collection of tissues for this organ.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.EmergingTissue">
            <summary>The emerging tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DevelopingTissue">
            <summary>The developing tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.MatureTissue">
            <summary>The mature tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DeadTissue">
            <summary>The mature tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NConcOptimum">
            <summary>N concentration for optimum growth (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NConcMinimum">
            <summary>Minimum N concentration, structural N (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NConcMaximum">
            <summary>Maximum N concentration, for luxury uptake (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.FractionStanding">
            <summary>Proportion of organ DM that is standing, available to harvest (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.LiveTissue">
            <summary>Array of live tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.MinimumLiveDM">
            <summary>Minimum DM amount of live tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.IsAboveGround">
            <summary>Flag indicating whether the biomass is above ground or not.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.Live">
            <summary>Return live biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.LiveDigestibility">
            <summary>Digestibility of live biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.Dead">
            <summary>Dead biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DeadDigestibility">
            <summary>Digestibility of dead biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMTotal">
            <summary>Total dry matter in this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMLive">
            <summary>Dry matter in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMDead">
            <summary>Dry matter in the dead tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingHerbageWt">
            <summary>Standing herbage weight (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingLiveHerbageWt">
            <summary>Standing live herbage weight (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingLiveDigestibility">
            <summary>Standing live digestibility (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingDeadDigestibility">
            <summary>Standing live digestibility (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingDeadHerbageWt">
            <summary>Standing dead herbage weight (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingLiveHerbageN">
            <summary>Standing live herbage weight (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingDeadHerbageN">
            <summary>Standing dead herbage weight (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingHerbageN">
            <summary>Standing herbage nitrogen (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMTotalHarvestable">
            <summary>Total harvestable dry matter (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMLiveHarvestable">
            <summary>Harvestable dry matter in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMDeadHarvestable">
            <summary>Dry matter in the dead tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NTotalHarvestable">
            <summary>N in the total harvestable dry matter (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLiveHarvestable">
            <summary>N in the harvestable dry matter in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NDeadHarvestable">
            <summary>N in the harvestable dry matter in the dead tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NTotal">
            <summary>Total N in this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLive">
            <summary>N in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NDead">
            <summary>N amount in the dead tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NConcTotal">
            <summary>Average N concentration.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NConcLive">
            <summary>Average N concentration in the live tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NConcDead">
            <summary>Average N concentration in dead tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLuxuryRemobilisable">
            <summary>Luxury N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLuxuryRemobilised">
            <summary>Luxury N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMGrowth">
            <summary>DM added to this organ via growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NGrowth">
            <summary>N added to this organ via growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMSenesced">
            <summary>DM senescing from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NSenesced">
            <summary>N senescing from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMDetached">
            <summary>DM detached from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NDetached">
            <summary>N detached from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NSenescedRemobilisable">
            <summary>Senesced N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NSenescedRemobilised">
            <summary>Senesced N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMRemoved">
            <summary>DM removed from this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NRemoved">
            <summary>N removed from this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.FractionRemoved">
            <summary>Fraction of DM removed from organ.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DigestibilityTotal">
            <summary>Average digestibility of all biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DigestibilityLive">
            <summary>Average digestibility of live biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DigestibilityDead">
            <summary>Average digestibility of dead biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.StandingDigestibility">
            <summary>Digestibility of standing herbage.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.Initialise(System.Double)">
            <summary>Initialisation</summary>
            <param name="minimumLiveWt">Minimum live dry matter (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.SetBiomassState(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Set this organ's biomass state.</summary>
            <param name="emergingWt">The DM amount of emerging biomass (kg/ha).</param>
            <param name="emergingN">The amount of N in emerging biomass (kg/ha).</param>
            <param name="developingWt">The DM amount of developing biomass (kg/ha).</param>
            <param name="developingN">The amount of N in developing biomass (kg/ha).</param>
            <param name="matureWt">The DM amount of developing biomass (kg/ha).</param>
            <param name="matureN">The amount of N in developing biomass (kg/ha).</param>
            <param name="deadWt">The DM amount of developing biomass (kg/ha).</param>
            <param name="deadN">The amount of N in developing biomass (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.RemoveBiomass(Models.PMF.OrganBiomassRemovalType)">
            <summary>Remove biomass from organ.</summary>
            <param name="biomassToRemove">The fraction of the harvestable biomass to remove</param>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.ClearDailyTransferredAmounts">
            <summary>Reset the transfer amounts in all tissues of this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.OnDoDailyInitialisation">
            <summary>Preparation before the main daily processes.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.KillOrgan(System.Double)">
            <summary>Kills part of the organ (transfer DM and N to dead tissue).</summary>
            <param name="fractionToRemove">The fraction to kill in each tissue</param>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.CalculateTissueTurnover(System.Double[])">
            <summary>Computes the DM and N amounts turned over for all tissues.</summary>
            <param name="turnoverRate">The turnover rate for each tissue</param>
            <returns>The DM and N amount detached from this organ</returns>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.Update">
            <summary>Updates each tissue, make changes in DM and N effective.</summary>
            <returns>A flag whether mass balance was maintained or not</returns>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.CalculateStates">
            <summary>Calculate the values for calculated states.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureBelowGroundOrgan">
            <summary>Describes a generic below ground organ of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.species">
            <summary>Nutrient model.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.tissue">
            <summary>Collection of tissues for this organ.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.soil">
            <summary>Soil object where these roots are growing.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.soilPhysical">
            <summary>Soil physical parameterisation.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.soilCropData">
            <summary>Soil-plant parameterisation.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.waterBalance">
            <summary>Water balance model.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.nutrient">
            <summary>Soil nutrient model.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.no3">
            <summary>NO3 solute in the soil.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.nh4">
            <summary>NH4 solute in the soil.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.zoneName">
            <summary>Name of zone where roots are growing.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.minimumLiveDM">
            <summary>Minimum DM amount of live tissues (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.nLayers">
            <summary>Number of layers in the soil.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.Initialise(Models.Core.Zone,System.Double,System.Double,System.Double)">
            <summary>Constructor, initialise tissues for the roots.</summary>
            <param name="zone">The zone the roots belong in.</param>
            <param name="initialDM">Initial dry matter weight</param>
            <param name="initialDepth">Initial root depth</param>
            <param name="minLiveDM">The minimum biomass for this organ</param>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootDepthMinimum">
            <summary>Minimum rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootDepthMaximum">
            <summary>Maximum rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootElongationRate">
            <summary>Daily root elongation rate at optimum temperature (mm/day).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootDistributionDepthParam">
            <summary>Depth from surface where root proportion starts to decrease (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootDistributionExponent">
            <summary>Exponent controlling the root distribution as function of depth (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootBottomDistributionFactor">
            <summary>Factor for root distribution; controls where the function is zero below maxRootDepth.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.SpecificRootLength">
            <summary>Specific root length (m/gDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NConcOptimum">
            <summary>N concentration for optimum growth (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NConcMinimum">
            <summary>Minimum N concentration, structural N (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NConcMaximum">
            <summary>Maximum N concentration, for luxury uptake (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.KNH4">
            <summary>Ammonium uptake coefficient (/ppm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.KNO3">
            <summary>Nitrate uptake coefficient (/ppm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.MaximumNUptake">
            <summary>Maximum daily amount of N that can be taken up by the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.ExponentSoilMoisture">
            <summary>Exponent controlling the effect of soil moisture variations on water extractability.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.Depth">
            <summary>Rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.BottomLayer">
            <summary>Soil layer at the bottom of the root zone.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.TargetDistribution">
            <summary>Target (idealised) DM fractions for each layer (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.Live">
            <summary>Root live tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.Dead">
            <summary>Root dead tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMTotal">
            <summary>Total dry matter in this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMLive">
            <summary>Dry matter in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMDead">
            <summary>Dry matter in the dead tissues (kg/ha).</summary>
            <remarks>Last tissue is assumed to represent dead material.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMFractions">
            <summary>Proportion of dry matter in each soil layer (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NTotal">
            <summary>Total N amount in this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NLive">
            <summary>N amount in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NDead">
            <summary>N amount in the dead tissues (kg/ha).</summary>
            <remarks>Last tissues is assumed to represent dead material.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NconcTotal">
            <summary>Average N concentration in this organ (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NconcLive">
            <summary>Average N concentration in the live tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NconcDead">
            <summary>Average N concentration in dead tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NSenescedRemobilisable">
            <summary>Amount of senesced N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NLuxuryRemobilisable">
            <summary>Amount of luxury N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.EvaluateSoilWaterAvailable(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Finds out the amount of plant available water in the soil.</summary>
            <param name="myZone">The soil information</param>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.LengthDensity">
            <summary>Root length density by volume (mm/mm^3).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NLiveRemobilisable">
            <summary>N remobilised from live tissue.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.mySoilWaterAvailable">
            <summary>Amount of plant available water in the soil (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.mySoilNH4Available">
            <summary>Amount of NH4-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.mySoilNO3Available">
            <summary>Amount of NO3-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.IsKLModiferDueToDamageActive">
            <summary>Returns true if the KL modifier due to root damage is active or not.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.KLModiferDueToDamage(System.Int32)">
            <summary>KL modifier due to root damage (0-1).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.Reset(System.Double,System.Double)">
            <summary>Reset this root organ's state.</summary>
            <param name="rootWt">The amount of root biomass (kg/ha).</param>
            <param name="rootDepth">The depth of roots to reset to(mm).</param>
            <remarks>It is assumed that N is at optimum content.</remarks>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.SetBiomassState(System.Double,System.Double,System.Double)">
            <summary>Set this root organ's biomass state.</summary>
            <param name="rootWt">The DM amount of root biomass (kg/ha).</param>
            <param name="rootN">The amount of N in root biomass (kg/ha).</param>
            <param name="rootDepth">The depth of root zone (mm).</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from root layers when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.ClearDailyTransferredAmounts">
            <summary>Reset the transfer amounts in all tissues of this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.KillOrgan(System.Double)">
            <summary>Kills part of the organ (transfer DM and N to dead tissue).</summary>
            <param name="fractionToRemove">The fraction to kill in each tissue</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoTissueTurnover(System.Double[])">
            <summary>Computes the DM and N amounts turned over for all tissues.</summary>
            <param name="turnoverRate">The turnover rate for each tissue</param>
            <returns>The DM and N amount detached from this organ</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoOrganUpdate">
            <summary>Updates each tissue, make changes in DM and N effective.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.EvaluateSoilNitrogenAvailable(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[])">
            <summary>Finds out the amount of plant available nitrogen (NH4 and NO3) in the soil.</summary>
            <param name="myZone">The soil information</param>
            <param name="mySoilWaterUptake">Soil water uptake</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.FractionLayerWithRoots(System.Int32)">
            <summary>Computes how much of the layer is actually explored by roots (considering depth only).</summary>
            <param name="layer">The index for the layer being considered</param>
            <returns>The fraction of the layer that is explored by roots (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.CalculateRootZoneBottomLayer">
            <summary>Gets the index of the layer at the bottom of the root zone.</summary>
            <returns>The index of a layer</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.RootDistributionTarget">
            <summary>Computes the target (or ideal) distribution of roots in the soil profile.</summary>
            <remarks>
            This distribution is solely based on root parameters (maximum depth and distribution parameters)
            These values will be used to allocate initial rootDM as well as any growth over the profile
            </remarks>
            <returns>A weighting factor for each soil layer (mm equivalent)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.CurrentRootDistributionTarget">
            <summary>Computes the current target distribution of roots in the soil profile.</summary>
            <remarks>
            This distribution is a correction of the target distribution, taking into account the depth of soil
            as well as the current rooting depth
            </remarks>
            <returns>The proportion of root mass expected in each soil layer (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoRootGrowthAllocation(System.Double,System.Double)">
            <summary>Computes the allocation of new growth to roots for each layer.</summary>
            <remarks>
            The current target distribution for roots changes whenever then root depth changes, this is then used to allocate 
             new growth to each layer within the root zone. The existing distribution is used on any DM removal, so it may
             take some time for the actual distribution to evolve to be equal to the target.
            </remarks>
            <param name="dGrowthRootDM">Root growth dry matter (kg/ha).</param>
            <param name="dGrowthRootN">Root growth nitrogen (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.EvaluateRootElongation(System.Double,System.Double,System.Double)">
            <summary>Computes the variations in root depth.</summary>
            <remarks>
            Root depth will increase if it is smaller than maximumRootDepth and there is a positive net DM accumulation.
            The depth increase rate is of zero-order type, given by the RootElongationRate, but it is adjusted for temperature
             in a similar fashion as plant DM growth. Note that currently root depth never decreases.
             - The effect of temperature was reduced (average between that of growth DM and one) as soil temp varies less than air
            </remarks>
            <param name="dGrowthRootDM">Root growth dry matter (kg/ha).</param>
            <param name="detachedRootDM">DM amount detached from roots, added to soil FOM (kg/ha)</param>
            <param name="temperatureLimitingFactor">Growth limiting factor due to temperature.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.SetNewGrowthAllocation(System.Double,System.Double)">
            <summary>Set new growth to root.</summary>
            <param name="dmToRoot">Dry matter growth.</param>
            <param name="nToRoot">Nitrogen growth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DetachRoots(System.Double,System.Double)">
            <summary>Detach roots.</summary>
            <param name="dryMatter">Dry matter to detach.</param>
            <param name="nitrogen">Nitrogen to detach.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.RemobiliseLiveN(System.Double)">
            <summary>Remobilise N from live tissues.</summary>
            <param name="fracRemobilised">Fraction remobilised.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.RemobiliseDeadN(System.Double)">
            <summary>Remobilise N from live tissues.</summary>
            <param name="fracRemobilised">Fraction remobilised.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PerformWaterUptake(System.Double[])">
            <summary>Remove water from soil - uptake.</summary>
            <param name="amount">Amount of water to remove.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PerformNutrientUptake(System.Double[],System.Double[])">
            <summary>Remove nutrients from soil - uptake.</summary>
            <param name="no3Amount">Amount of no3 to remove.</param>
            <param name="nh4Amount">Amount of nh4 to remove.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.IsInZone(System.String)">
            <summary>Flag indicating whether roots are in the specified zone.</summary>
            <param name="zoneName">The zone name.</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.EvaluateTissueTurnover(System.Double)">
            <summary>Computes the turnover rate.</summary>
            <param name="gamaR">Daily DM turnover rate for root tissue.</param>
            <returns></returns>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies">
            <summary>
            Describes a pasture species.
            </summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myClock">
            <summary>Link to APSIM's Clock (provides time information).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.zone">
            <summary>Link to the zone this pasture species resides in.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMetData">
            <summary>Link to APSIM's WeatherFile (provides meteorological information).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySummary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.soilPhysical">
            <summary>Link to the soil physical properties.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.waterBalance">
            <summary>Link to the soil water balance.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.BiomassRemovedDelegate">
            <summary>Invoked for incorporating surface OM.</summary>
            <param name="Data">Data about biomass deposited by this plant onto the soil surface</param>
        </member>
        <member name="E:Models.AgPasture.PastureSpecies.BiomassRemoved">
            <summary>Occurs when plant is detaching dead tissues, litter.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Albedo">
            <summary>Canopy albedo, fraction of sun light reflected (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Gsmax">
            <summary>Maximum stomatal conductance (m/s).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.R50">
            <summary>Solar radiation at which stomatal conductance decreases to 50% (W/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAI">
            <summary>Leaf Area Index of live tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAITotal">
            <summary>Leaf Area Index of whole canopy, live + dead tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CoverGreen">
            <summary>Plant's green cover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CoverTotal">
            <summary>Plant's total cover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Height">
            <summary>Average canopy height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Depth">
            <summary>Average canopy depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Width">
            <summary>Average canopy width (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FRGR">
            <summary>Plant growth limiting factor, supplied to MicroClimate for calculating potential transpiration.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PotentialEP">
            <summary>Potential evapotranspiration, as calculated by MicroClimate (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myLightProfile">
            <summary>Light profile, energy available for each canopy layer (W/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LightProfile">
            <summary>Light profile for this plant, interception calculated by MicroClimate (W/m^2).</summary>
            <remarks>This contains the intercepted radiation for each layer of the canopy.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantType">
            <summary>Flag indicating the type of plant (currently the name of the species)</summary>
            <remarks>
            This used to be a marker for 'how leguminous' a plant was (in PMF and Stock).
            In AgPasture there is the parameter SpeciesFamily flagging whether a species is a grass or a legume...
            </remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.IsC4">
            <summary>Flag indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CultivarNames">
            <summary>List of cultivar names (not used by AgPasture).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant.</summary>
            <param name="cultivar">The cultivar type</param>
            <param name="population">The number of plants per area</param>
            <param name="depth">The sowing depth</param>
            <param name="rowSpacing">The space between rows</param>
            <param name="maxCover">The maximum ground cover (optional)</param>
            <param name="budNumber">The number of buds (optional)</param>
            <param name="rowConfig">The row configuration.</param>
            <remarks>
            For AgPasture species the sow parameters are not used, the command to sow simply enables the plant to grow. This is done
            by setting the plant status to 'alive'. From this point germination processes takes place and eventually emergence occurs.
            At emergence, plant DM is set to its default minimum value, allocated according to EmergenceFractions and with
            optimum N concentration. Plant height and root depth are set to their minimum values.
            </remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.IsReadyForHarvesting">
            <summary>Flag whether the crop is ready for harvesting.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Harvest">
            <summary>Harvests the crop.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EndCrop">
            <summary>Ends the crop.</summary>
            <remarks>All plant material is moved on to surfaceOM and soilFOM.</remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Gets the potential plant water uptake for each layer (mm).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="soilstate">The soil state (current water content).</param>
            <returns>The potential water uptake (mm).</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Gets the potential plant N uptake for each layer (mm).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="soilstate">The soil state (current N contents).</param>
            <returns>The potential N uptake (kg/ha).</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Sets the amount of water taken up by this plant (mm).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="zones">The water uptake from each layer (mm), by zone.</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Sets the amount of N taken up by this plant (kg/ha).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="zones">The N uptake from each layer (kg/ha), by zone.</param>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySpeciesFamily">
            <summary>Family type for this plant species (grass/legume/forb).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SpeciesFamily">
            <summary>Family type for this plant species (grass/legume/forb).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PhotosyntheticPathway">
            <summary>Species metabolic pathway of C fixation during photosynthesis (C3/C4).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InitialShootDM">
            <summary>Initial above ground DM weight (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InitialRootDM">
            <summary>Initial below ground DM weight (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InitialRootDepth">
            <summary>Initial rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.initialDMFractionsGrasses">
            <summary>Initial fractions of DM for each plant part in grasses (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.initialDMFractionsLegumes">
            <summary>Initial fractions of DM for each plant part in legumes (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.initialDMFractionsForbs">
            <summary>Initial fractions of DM for each plant part in forbs (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReferencePhotosyntheticRate">
            <summary>Reference leaf CO2 assimilation rate for photosynthesis (mg CO2/m^2Leaf/s).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PhotosyntheticEfficiency">
            <summary>Leaf photosynthetic efficiency (mg CO2/J).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PhotosynthesisCurveFactor">
            <summary>Photosynthesis curvature parameter (J/kg/s).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionPAR">
            <summary>Fraction of radiation that is photosynthetically active (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LightExtinctionCoefficient">
            <summary>Light extinction coefficient (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthTminimum">
            <summary>Minimum temperature for growth (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthToptimum">
            <summary>Optimum temperature for growth (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthTEffectExponent">
            <summary>Curve parameter for growth response to temperature (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReferenceCO2">
            <summary>Reference CO2 concentration for photosynthesis (ppm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CO2EffectScaleFactor">
            <summary>Scaling parameter for the CO2 effect on photosynthesis (ppm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CO2EffectOffsetFactor">
            <summary>Scaling parameter for the CO2 effects on N requirements (ppm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CO2EffectMinimum">
            <summary>Minimum value for the CO2 effect on N requirements (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CO2EffectExponent">
            <summary>Exponent controlling the CO2 effect on N requirements (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.UseHeatStressFactor">
            <summary>Enable photosynthesis reduction due to heat damage (yes/no).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatOnsetTemperature">
            <summary>Onset temperature for heat effects on photosynthesis (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatFullTemperature">
            <summary>Temperature for full heat effect on photosynthesis, growth stops (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatRecoverySumDD">
            <summary>Cumulative degrees-day for recovery from heat stress (oCd).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatRecoveryTReference">
            <summary>Reference temperature for recovery from heat stress (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.UseColdStressFactor">
            <summary>Enable photosynthesis reduction due to cold damage is enabled (yes/no).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdOnsetTemperature">
            <summary>Onset temperature for cold effects on photosynthesis (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdFullTemperature">
            <summary>Temperature for full cold effect on photosynthesis, growth stops (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdRecoverySumDD">
            <summary>Cumulative degrees for recovery from cold stress (oCd).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdRecoveryTReference">
            <summary>Reference temperature for recovery from cold stress (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaintenanceRespirationCoefficient">
            <summary>Maintenance respiration coefficient (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthRespirationCoefficient">
            <summary>Growth respiration coefficient (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RespirationTReference">
            <summary>Reference temperature for maintenance respiration (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RespirationExponent">
            <summary>Exponent controlling the effect of temperature on respiration (>1.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DegreesDayForGermination">
            <summary>Cumulative degrees-day needed for seed germination (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.emergenceDMFractions">
            <summary>Fractions of DM for each plant part at emergence, for all plants (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TargetShootRootRatio">
            <summary>Target, or ideal, shoot-root ratio (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaxRootAllocation">
            <summary>Maximum fraction of DM growth allocated to roots (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ShootRootGlfFactor">
            <summary>Maximum effect that soil GLFs have on Shoot-Root ratio (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.UseReproSeasonFactor">
            <summary>
            Adjust Shoot:Root ratio to mimic DM allocation during reproductive season (perennial species)?.
            </summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonReferenceLatitude">
            <summary>Reference latitude determining timing for reproductive season (degrees).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonTimingCoeff">
            <summary>Coefficient controlling the time to start the reproductive season as function of latitude (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonDurationCoeff">
            <summary>Coefficient controlling the duration of the reproductive season as function of latitude (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonShouldersLengthFactor">
            <summary>Ratio between the length of shoulders and the period with full reproductive growth effect (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonOnsetDurationFactor">
            <summary>Proportion of the onset phase of shoulder period with reproductive growth effect (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonMaxAllocationIncrease">
            <summary>Maximum increase in Shoot-Root ratio during reproductive growth (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonAllocationCoeff">
            <summary>Coefficient controlling the increase in shoot allocation during reproductive growth as function of latitude (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafMaximum">
            <summary>Maximum target allocation of new growth to leaves (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafMinimum">
            <summary>Minimum target allocation of new growth to leaves (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafDMThreshold">
            <summary>Shoot DM at which allocation of new growth to leaves start to decrease (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafDMFactor">
            <summary>Shoot DM when allocation to leaves is midway maximum and minimum (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafExponent">
            <summary>Exponent of the function controlling the DM allocation to leaves (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionToStolon">
            <summary>Fraction of new shoot growth to be allocated to stolons (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SpecificLeafArea">
            <summary>Specific leaf area (m^2/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonEffectOnLAI">
            <summary>Fraction of stolon tissue used when computing green LAI (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ShootMaxEffectOnLAI">
            <summary>Maximum aboveground biomass for considering stems when computing LAI (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaxStemEffectOnLAI">
            <summary>Maximum fraction of stem tissue used when computing green LAI (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LiveLeavesPerTiller">
            <summary>Number of live leaves per tiller (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TissueTurnoverRateShoot">
            <summary>Reference daily DM turnover rate for shoot tissues (0-1).</summary>
            <remarks>This is closely related to the leaf appearance rate.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TissueTurnoverRateRoot">
            <summary>Reference daily DM turnover rate for root tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RelativeTurnoverEmerging">
            <summary>Relative turnover rate for emerging tissues (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DetachmentRateShoot">
            <summary>Reference daily detachment rate for dead tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverTemperatureMin">
            <summary>Minimum temperature for tissue turnover (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverTemperatureRef">
            <summary>Reference temperature for tissue turnover (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverTemperatureExponent">
            <summary>Exponent of function for temperature effect on tissue turnover (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDroughtEffectMax">
            <summary>Maximum increase in tissue turnover due to water deficit (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDroughtThreshold">
            <summary>Minimum GLFwater without effect on tissue turnover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DetachmentDroughtCoefficient">
            <summary>Coefficient controlling detachment rate as function of moisture (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DetachmentDroughtEffectMin">
            <summary>Minimum effect of drought on detachment rate (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverStockFactor">
            <summary>Factor increasing tissue turnover rate due to stock trampling (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDefoliationCoefficient">
            <summary>Coefficient of function increasing the turnover rate due to defoliation (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDefoliationEffectMin">
            <summary>Minimum significant daily effect of defoliation on tissue turnover rate (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDefoliationRootEffect">
            <summary>Effect of defoliation on root turnover rate due to defoliation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumNFixation">
            <summary>Minimum fraction of N demand supplied by biologic N fixation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaximumNFixation">
            <summary>Maximum fraction of N demand supplied by biologic N fixation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SymbiontCostFactor">
            <summary>Respiration cost factor due to the presence of symbiont bacteria (kgC/kgC in roots).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NFixingCostFactor">
            <summary>Respiration cost factor due to the activity of symbiont bacteria (kgC/kgN fixed).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilSaturationEffectMax">
            <summary>Maximum reduction in plant growth due to water logging (saturated soil) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumWaterFreePorosity">
            <summary>Minimum water-free pore space for growth with no limitations (0-1).</summary>
            <remarks>A negative value indicates that porosity at DUL will be used.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilSaturationRecoveryFactor">
            <summary>Maximum daily recovery rate from water logging (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NDillutionCoefficient">
            <summary>Exponent to modify the effect of N deficiency on plant growth (>1.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfGeneric">
            <summary>Generic growth limiting factor that represents an arbitrary limitation to potential growth (0-1).</summary>
            <remarks> This factor can be used to describe the effects of drivers such as disease, etc.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfSoilFertility">
            <summary>Generic growth limiting factor that represents an arbitrary soil limitation (0-1).</summary>
            <remarks> This factor can be used to describe the effect of limitation in nutrients other than N.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightMinimum">
            <summary>Minimum plant height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightMaximum">
            <summary>Maximum plant height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightMassForMax">
            <summary>DM weight above ground for maximum plant height (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightExponent">
            <summary>Exponent controlling shoot height as function of DM weight (>1.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumGreenWt">
            <summary>Minimum above ground green DM, leaf and stems (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumGreenLeafProp">
            <summary>Leaf proportion in the minimum green Wt (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumGreenRootProp">
            <summary>Minimum root amount relative to minimum green Wt (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PreferenceForGreenOverDead">
            <summary>Relative preference for live over dead material during graze (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PreferenceForLeafOverStems">
            <summary>Relative preference for leaf over stem-stolon material during graze (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaximumFractionAvailable">
            <summary>Maximum fraction of water or N in the soil that is available to plants.</summary>
            <remarks>This is used to limit the amount taken up and avoid issues with very small numbers</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NuptakeSWFactor">
            <summary>Exponent of function determining soil extractable N.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.doyGermination">
            <summary>Day of year when seeds are allowed to germinate.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysEmergenceToAnthesis">
            <summary>Number of days from emergence to anthesis.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysAnthesisToMaturity">
            <summary>Number of days from anthesis to maturity.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.degreesDayForAnthesis">
            <summary>Cumulative degrees-day from emergence to anthesis (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.degreesDayForMaturity">
            <summary>Cumulative degrees-day from anthesis to maturity (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysAnnualsFactor">
            <summary>Number of days from emergence with reduced growth.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.FVPDFunction">
            <summary>Describes the FVPD function.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Leaf">
            <summary>Holds info about state of leaves (DM and N).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Stem">
            <summary>Holds info about state of sheath/stems (DM and N).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Stolon">
            <summary>Holds info about state of stolons (DM and N).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.roots">
            <summary>Holds the info about state of roots (DM and N). It is a list of root organs, one for each zone where roots are growing.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundOrgans">
            <summary>Above ground organs.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isAlive">
            <summary>Flag whether this species is alive (actively growing).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.nLayers">
            <summary>Number of layers in the soil.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isAnnual">
            <summary>Flag whether this species is annual or perennial.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isLegume">
            <summary>Flag whether this species is a legume.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.phenologicStage">
            <summary>Phenological stage of plant (0-2).</summary>
            <remarks>0 = germinating, 1 = vegetative, 2 = reproductive, negative for dormant/not sown.</remarks>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysSinceEmergence">
            <summary>Number of days since emergence (days).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDVegetative">
            <summary>Cumulative degrees day during vegetative phase (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.phenoFactor">
            <summary>Factor describing progress through phenological phases (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDGermination">
            <summary>Cumulative degrees-day during germination phase (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.basePhotosynthesis">
            <summary>Base gross photosynthesis rate, before damages (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.grossPhotosynthesis">
            <summary>Gross photosynthesis rate, after considering damages (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.respirationGrowth">
            <summary>Growth respiration rate (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.respirationMaintenance">
            <summary>Maintenance respiration rate (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.remobilisableC">
            <summary>Amount of C remobilisable from senesced tissue (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.remobilisedC">
            <summary>Amount of C remobilised from senesced tissue (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthPot">
            <summary>Daily net growth potential (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthAfterWaterLimitations">
            <summary>Daily potential growth after water stress (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthAfterNutrientLimitations">
            <summary>Daily growth after nutrient stress, actual growth (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthNet">
            <summary>Effective plant growth, actual growth minus senescence (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthShootDM">
            <summary>Actual growth of shoot (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthRootDM">
            <summary>Actual growth of roots (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthShootN">
            <summary>Actual N allocation into shoot (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthRootN">
            <summary>Actual N allocation into roots (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedShootDM">
            <summary>DM amount detached from shoot, added to surface OM (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedShootN">
            <summary>N amount in detached tissues from shoot (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedRootDM">
            <summary>DM amount detached from roots, added to soil FOM (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedRootN">
            <summary>N amount in detached tissues from roots (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.fractionToShoot">
            <summary>Fraction of new growth allocated to shoot (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.fractionToLeaf">
            <summary>Fraction of new shoot growth allocated to leaves (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.usingReproSeasonFactor">
            <summary>Flag whether the factor adjusting Shoot:Root ratio during reproductive season is being used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.reproSeasonInterval">
            <summary>Intervals defining the three reproductive season phases (onset, main phase, and outset).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.doyIniReproSeason">
            <summary>Day of the year for the start of the reproductive season.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.allocationIncreaseRepro">
            <summary>Relative increase in the shoot-root ratio during reproductive season (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gama">
            <summary>Daily DM turnover rate for live shoot tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gamaD">
            <summary>Daily DM turnover rate for dead shoot tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gamaR">
            <summary>Daily DM turnover rate for roots tissue (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gamaS">
            <summary>Daily DM turnover rate for stolon tissue (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfTemperature">
            <summary>Tissue turnover factor due to variations in temperature (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfMoistureShoot">
            <summary>Tissue turnover factor for shoot due to variations in moisture (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfMoistureRoot">
            <summary>Tissue turnover factor for roots due to variations in moisture (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfLeafNumber">
            <summary>Tissue turnover adjusting factor for number of leaves (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumDefoliationFactor">
            <summary>Effect of defoliation on stolon turnover (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.greenLAI">
            <summary>LAI of green plant tissues (m^2/m^2).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.deadLAI">
            <summary>LAI of dead plant tissues (m^2/m^2).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.effectiveGreenCover">
            <summary>Effective cover for computing photosynthesis (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.demandLuxuryN">
            <summary>Amount of N demanded for new growth, with luxury uptake (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.demandOptimumN">
            <summary>Amount of N demanded for new growth, at optimum N content (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.fixedN">
            <summary>Amount of N fixation from atmosphere, for legumes (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.senescedNRemobilised">
            <summary>Amount of senesced N actually remobilised (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.luxuryNRemobilised">
            <summary>Amount of luxury N actually remobilised (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dNewGrowthN">
            <summary>Amount of N used up in new growth (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilNDemand">
            <summary>Amount of N demanded from the soil (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.mySoilNH4Available">
            <summary>Amount of NH4-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.mySoilNO3Available">
            <summary>Amount of NO3-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilNH4Uptake">
            <summary>Amount of soil NH4-N taken up by the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilNO3Uptake">
            <summary>Amount of soil NO3-N taken up by the plant (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NitrogenUptake">
            <summary>Amount of soil water taken up (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myWaterDemand">
            <summary>Amount of water demanded for new growth (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilWaterAvailable">
            <summary>Amount of plant available water in the soil (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilWaterUptake">
            <summary>Amount of soil water taken up (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterUptake">
            <summary>Amount of soil water taken up (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfRadn">
            <summary>Growth factor due to variations in intercepted radiation (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfCO2">
            <summary>Growth factor due to N variations in atmospheric CO2 (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfNc">
            <summary>Growth factor due to variations in plant N concentration (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfTemp">
            <summary>Growth factor due to variations in air temperature (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.usingHeatStressFactor">
            <summary>Flag whether the factor reducing photosynthesis due to heat damage is being used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.usingColdStressFactor">
            <summary>Flag whether the factor reducing photosynthesis due to cold damage is being used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfHeat">
            <summary>Growth factor due to heat stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.highTempStress">
            <summary>Auxiliary growth reduction factor due to high temperatures (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDHeat">
            <summary>Cumulative degrees of temperature for recovery from heat damage (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfCold">
            <summary>Growth factor due to cold stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.lowTempStress">
            <summary>Auxiliary growth reduction factor due to low temperatures (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDCold">
            <summary>Cumulative degrees of temperature for recovery from cold damage (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfWaterSupply">
            <summary>Growth limiting factor due to water stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumWaterLogging">
            <summary>Cumulative water logging factor (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfWaterLogging">
            <summary>Growth limiting factor due to water logging (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfNSupply">
            <summary>Growth limiting factor due to N stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.tempEffectOnRespiration">
            <summary>Temperature effects on respiration (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myDefoliatedFraction">
            <summary>Fraction of standing DM harvested (0-1), used on tissue turnover.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DefoliatedDigestibility">
            <summary>Digestibility of defoliated material (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CarbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PotentialMEOfHerbage">
            <summary>Average potential ME concentration in herbage material (MJ/kg)</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.NitrogenToProteinFactor">
            <summary>Factor for converting nitrogen to protein (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CNratioProtein">
            <summary>Carbon to nitrogen ratio of proteins (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CNratioCellWall">
            <summary>Carbon to nitrogen ratio of cell walls (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.Epsilon">
            <summary>Minimum significant difference between two values.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.YesNoAnswer">
            <summary>A yes or no answer.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.YesNoAnswer.yes">
            <summary>A positive answer.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.YesNoAnswer.no">
            <summary>A negative answer.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.PlantFamilyType">
            <summary>List of valid species family names.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantFamilyType.Grass">
            <summary>A grass species, Poaceae.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantFamilyType.Legume">
            <summary>A legume species, Fabaceae.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantFamilyType.Forb">
            <summary>A non grass or legume species.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.PhotosynthesisPathwayType">
            <summary>List of valid photosynthesis pathways.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PhotosynthesisPathwayType.C3">
            <summary>A C3 plant.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PhotosynthesisPathwayType.C4">
            <summary>A C4 plant.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.IsAlive">
            <summary>Flag signalling whether plant is alive (true/false).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantStatus">
            <summary>Flag signalling the plant status (dead, alive, etc.).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Stage">
            <summary>Index for the plant development stage.</summary>
            <remarks>0 = germinating, 1 = vegetative, 2 = reproductive, negative for dormant/not sown.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InterceptedRadn">
            <summary>Radiation intercepted by the plant's canopy (MJ/m^2/day).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RadiationTopOfCanopy">
            <summary>Radiance on top of the plant's canopy (MJ/m^2/day).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TotalC">
            <summary>Total amount of C in the plant (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TotalWt">
            <summary>Total dry matter weight of plant (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundWt">
            <summary>Dry matter weight of the plant above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundLiveWt">
            <summary>Dry matter weight of live tissues above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundDeadWt">
            <summary>Dry matter weight of dead tissues above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundWt">
            <summary>Dry matter weight of the plant below ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundLiveWt">
            <summary>Dry matter weight of live tissues below ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafWt">
            <summary>Dry matter weight of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafLiveWt">
            <summary>Dry matter weight of live leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafDeadWt">
            <summary>Dry matter weight of dead leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemWt">
            <summary>Dry matter weight of plant's stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemLiveWt">
            <summary>Dry matter weight of alive stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemDeadWt">
            <summary>Dry matter weight of dead stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonWt">
            <summary>Dry matter weight of plant's stolons (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootWt">
            <summary>Dry matter weight of plant's roots (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TotalN">
            <summary>Total amount of N in the plant (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundN">
            <summary>Amount of N in the plant above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundLiveN">
            <summary>Amount of N in live tissues above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundDeadN">
            <summary>Amount of N in dead tissues above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundN">
            <summary>Amount of N in the plant below ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundLiveN">
            <summary>Amount of N in live tissues below ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafN">
            <summary>Amount of N in the plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafLiveN">
            <summary>Amount of N in live leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafDeadN">
            <summary>Amount of N in dead leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemN">
            <summary>Amount of N in the plant's stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemLiveN">
            <summary>Amount of N in live stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemDeadN">
            <summary>Amount of N in dead stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonN">
            <summary>Amount of N in the plant's stolons (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootN">
            <summary>Amount of N in the plant's roots (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundNConc">
            <summary>Average N concentration in the plant above ground (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafNConc">
            <summary>Average N concentration in plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemNConc">
            <summary>Average N concentration in plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonNConc">
            <summary>Average N concentration in plant's stolons (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootNConc">
            <summary>Average N concentration in plant's roots (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BasePotentialPhotosynthesisC">
            <summary>Base potential photosynthetic rate, before damages, in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrossPotentialPhotosynthesisC">
            <summary>Gross potential photosynthetic rate, after considering damages, in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RespirationLossC">
            <summary>Respiration costs expressed in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NFixationCostC">
            <summary>N fixation costs expressed in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisedSenescedC">
            <summary>Remobilised carbon from senesced tissues (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrossPotentialGrowthWt">
            <summary>Gross potential growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetPotentialGrowthWt">
            <summary>Net potential growth rate, after respiration (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetPotentialGrowthAfterWaterWt">
            <summary>Net potential growth rate after water stress (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetPotentialGrowthAfterNutrientWt">
            <summary>Net potential growth rate after nutrient stress (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetGrowthWt">
            <summary>Net, or actual, plant growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HerbageGrowthWt">
            <summary>Net herbage growth rate (above ground) (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootGrowthWt">
            <summary>Net root growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LitterDepositionWt">
            <summary>Dry matter weight of detached dead material deposited onto soil surface (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDetachedWt">
            <summary>Dry matter weight of detached dead roots added to soil FOM (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GPP">
            <summary>Gross primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NPP">
            <summary>Net primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NAPP">
            <summary>Net above-ground primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NBPP">
            <summary>Net below-ground primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisableSenescedN">
            <summary>Amount of senesced N potentially remobilisable (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisedSenescedN">
            <summary>Amount of senesced N actually remobilised (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisableLuxuryN">
            <summary>Amount of luxury N potentially remobilisable (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisedLuxuryN">
            <summary>Amount of luxury N actually remobilised (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FixedN">
            <summary>Amount of atmospheric N fixed by symbiosis (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DemandAtLuxuryN">
            <summary>Amount of N required with luxury uptake (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DemandAtOptimumN">
            <summary>Amount of N required for optimum growth (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilDemandN">
            <summary>Amount of N demanded from the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilAvailableN">
            <summary>Amount of plant available N in the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilUptakeN">
            <summary>Amount of N taken up from the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LitterDepositionN">
            <summary>Amount of N in detached dead material deposited onto soil surface (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDetachedN">
            <summary>Amount of N in detached dead roots added to soil FOM (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetGrowthN">
            <summary>Amount of N in new growth (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNH4Available">
            <summary>Amount of plant available NH4-N in each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNO3Available">
            <summary>Amount of plant available NO3-N in each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNH4Uptake">
            <summary>Amount of NH4-N taken up from each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNO3Uptake">
            <summary>Amount of NO3-N taken up from each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterDemand">
            <summary>Amount of water demanded by the plant (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterAvailable">
            <summary>Amount of plant available water in each soil layer (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfRadnIntercept">
            <summary>Growth limiting factor due to variations in intercepted radiation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfCO2">
            <summary>Growth limiting factor due to variations in atmospheric CO2 (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfNContent">
            <summary>Growth limiting factor due to variations in plant N concentration (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfTemperature">
            <summary>Growth limiting factor due to variations in air temperature (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfHeatDamage">
            <summary>Growth limiting factor due to heat damage stress (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfColdDamage">
            <summary>Growth limiting factor due to cold damage stress (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfWaterSupply">
            <summary>Growth limiting factor due to water deficit (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfWaterLogging">
            <summary>Growth limiting factor due to water logging (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfNSupply">
            <summary>Growth limiting factor due to soil N availability (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FVPD">
            <summary>Effect of vapour pressure on growth (used by micromet) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TemperatureFactorRespiration">
            <summary>Temperature factor for respiration (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionGrowthToShoot">
            <summary>Fraction of new growth allocated to shoot (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionGrowthToRoot">
            <summary>Fraction of new growth allocated to roots (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionGrowthToLeaf">
            <summary>Fraction of new shoot growth allocated to leaves (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateLiveShoot">
            <summary>Turnover rate for live shoot tissues (leaves and stem) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateDeadShoot">
            <summary>Turnover rate for dead shoot tissues (leaves and stem) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateStolons">
            <summary>Turnover rate for stolon tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateRoots">
            <summary>Turnover rate for roots tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TemperatureFactorTurnover">
            <summary>Temperature factor for tissue turnover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MoistureFactorTurnover">
            <summary>Moisture factor for tissue turnover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAIGreen">
            <summary>Leaf Area Index of green tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAIDead">
            <summary>Leaf Area Index of dead tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CoverDead">
            <summary>Fraction of soil covered by dead tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDepth">
            <summary>Average depth of root zone (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootFrontier">
            <summary>Soil layer at bottom of root zone ().</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootWtFraction">
            <summary>Proportion of root biomass in each soil layer (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGround">
            <summary>Get above ground biomass</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundHarvestable">
            <summary>Get above ground biomass</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Harvestable">
            <summary>Dry matter and N available for harvesting (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Standing">
            <summary>Standing dry matter and N (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingLive">
            <summary>Standing live dry matter and N (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingDead">
            <summary>Standing dead dry matter and N (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestableLive">
            <summary>Live dry matter and N available for harvesting.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestableDead">
            <summary>Dead dry matter and N available for harvesting.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedWt">
            <summary>Amount of plant dry matter removed by harvest (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedFraction">
            <summary>Fraction of available dry matter actually harvested ().</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedN">
            <summary>Amount of N removed by harvest (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedNConc">
            <summary>Average N concentration in harvested material (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedDigestibility">
            <summary>Average digestibility of harvested material (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedME">
            <summary>Average metabolisable energy concentration of harvested material (MJ/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.EmergingTissue">
            <summary>Emerging tissues from all above ground organs.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DevelopingTissue">
            <summary>Developing tissues from all above ground organs.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MatureTissue">
            <summary>Mature tissues from all above ground organs.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DeadTissue">
            <summary>Dead tissues from all above ground organs.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Root">
            <summary>Root organ of this plant.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Organs">
            <summary>List of organs that can be damaged.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Material">
            <summary>A list of material (biomass) that can be damaged.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Population">
            <summary>Plant population.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AssimilateAvailable">
            <summary>Amount of assimilate available to be damaged.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.AddZone(System.String,System.Double,System.Double)">
            <summary>
            Add a zone where roots are to grow.
            </summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initialisation procedures for this species (set DM, N, LAI, etc.).</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
            <remarks>
            This occurs in StartOfSimulation so that various other components (such as GenericTissue) have time
            to initialise themselves during the Commencing event.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.InitiliaseSoilArrays">
            <summary>Initialises arrays to same length as soil layers.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetInitialState">
            <summary>
            Sets the initial parameters for this plant, including DM and N content of various pools plus plant height and root depth.
            </summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetEmergenceState">
            <summary>Set the plant state at germination.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.InitReproductiveGrowthFactor">
            <summary>Initialises the parameters to compute factor increasing shoot allocation during reproductive growth.</summary>
            <remarks>
            Reproductive phase of perennial is not simulated by the model, the ReproductiveGrowthFactor attempts to mimic the main
             effect, which is a higher allocation of DM to shoot during this period. The beginning and length of the reproductive
             phase is computed as function of latitude (it occurs later in spring and is shorter the further the location is from
             the equator). The extent at which allocation to shoot increases is also a function of latitude, maximum allocation is
             greater for higher latitudes. Shoulder periods occur before and after the main phase, in these allocation transitions
             between default allocation and that of the main phase.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>EventHandler - preparation before the main daily processes.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RefreshVariables">
            <summary>Reset the transfer amounts in the plant and all organs.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for potential growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for actual growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyGerminationProgress">
            <summary>Computes the daily progress through germination.</summary>
            <returns>The fraction of the germination phase completed (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcDailyPotentialGrowth">
            <summary>Calculates the daily potential plant growth.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcGrowthAfterWaterLimitations">
            <summary>Calculates the growth after water limitations.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcGrowthAfterNutrientLimitations">
            <summary>Calculates the actual plant growth (after all growth limitations, before senescence).</summary>
            <remarks>
            Here the limitation due to soil fertility are considered, the model simulates N deficiency only, but a generic user-settable
             limitation factor (GlfSFertility) can be used to mimic limitation due to other soil related factors (e.g. phosphorus)
            The GLF due to N stress is modified here to account for N dilution effects:
            Many plants, especially grasses, can keep growth even when N supply is below optimum; the N concentration is reduced
             in the plant tissues. This is represented hereby adjusting the effect of N deficiency using a power function. When the exponent
             is 1.0, the reduction in growth is linearly proportional to N deficiency, a greater value results in less reduction in growth.
            For many plants the value should be smaller than 1.0. For grasses, the exponent is typically around 0.5.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyPotentialPhotosynthesis">
            <summary>Computes the plant's gross potential growth rate.</summary>
            <returns>The potential amount of C assimilated via photosynthesis (kgC/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SingleLeafPhotosynthesis(System.Double,System.Double)">
            <summary>Compute the photosynthetic rate for a single leaf.</summary>
            <param name="IL">The instantaneous intercepted radiation (J/m2 leaf/s)</param>
            <param name="Pmax">The maximum photosynthetic rate (mg CO2/m^2 leaf/s)</param>
            <returns>The potential photosynthetic rate (mgCO2/m^2 leaf/s)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyMaintenanceRespiration">
            <summary>Computes the plant's loss of C due to maintenance respiration.</summary>
            <returns>The amount of C lost to atmosphere (kgC/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyGrowthRespiration">
            <summary>Computes the plant's loss of C due to growth respiration.</summary>
            <returns>The amount of C lost to atmosphere (kgC/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateTissueTurnoverRates">
            <summary>Computes the turnover rates for each tissue pool of all plant organs.</summary>
            <remarks>
            The rates are passed on to each organ and the amounts potentially turned over are computed for each tissue.
            The turnover rates are affected by variations in soil water and air temperature. For leaves the number of leaves
             per tiller (LiveLeavesPerTiller, a parameter specific for each species) also influences the turnover rate.
            The C and N amounts potentially available for remobilisation are also computed in here.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateNewGrowthAllocation">
            <summary>Computes the allocation of new growth to all tissues in each organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoActualGrowthAndAllocation">
            <summary>Calculates the plant actual growth and update DM, N, LAI and digestibility.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluatePhenologyOfAnnuals">
            <summary>Evaluates the phenological stage of annual plants.</summary>
            <remarks>
            This method keeps track of days after emergence as well as cumulative degrees days, it uses both to evaluate the progress
             through each phase. The two approaches are used concomitantly to enable some basic sensitivity to environmental factors,
             but also to ensure that plants will complete their cycle (as the controls used here are rudimentary).
            This method also update the value of phenoFactor, using the estimated progress through the current phenological stage.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateSoilWaterUptake">
            <summary>Computes the potential plant water uptake.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoNitrogenCalculations">
            <summary>Performs the nitrogen uptake calculations.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateNitrogenDemand">
            <summary>Computes the amount of nitrogen demand for optimum N content as well as luxury uptake.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateNitrogenFixation">
            <summary>Computes the amount of atmospheric nitrogen fixed through symbiosis.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateSoilNitrogenDemand">
            <summary>Evaluates the use of remobilised nitrogen and computes soil nitrogen demand.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateLuxuryNRemobilisation">
            <summary>Computes the amount of luxury nitrogen remobilised into new growth.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.AddDetachedShootToSurfaceOM(System.Double,System.Double)">
            <summary>Adds a given amount of detached plant material (DM and N) to the surface organic matter.</summary>
            <param name="amountDM">The DM amount to send (kg/ha)</param>
            <param name="amountN">The N amount to send (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.GetAllocationFractions">
            <summary>Gets the allocations into shoot and leaves of today's growth.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateAllocationToShoot">
            <summary>Calculates the fraction of new growth allocated to shoot.</summary>
            <remarks>
            Allocation of new growth to shoot is a function of the current and a target (ideal) Shoot-Root ratio; it is further
             modified according to soil's growth limiting factors (plants favour root growth when water or N are limiting).
            The target Shoot-Root ratio will be adjusted (increased) during spring for mimicking changes in DM allocation during
             the reproductive season if usingReproSeasonFactor.
            The allocation to shoot may be further modified to ensure a minimum allocation (= 1.0 - MaxRootAllocation).
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateAllocationToLeaf">
            <summary>Computes the fraction of new shoot DM that is allocated to leaves.</summary>
            <remarks>
            This method is used to reduce the proportion of leaves as plants grow, this is used for species that 
             allocate proportionally more DM to stolon/stems when the whole plant's DM is high.
            To avoid too little allocation to leaves in case of grazing, the current leaf:stem ratio is evaluated
             and used to modify the targeted value in a similar way as shoot:root ratio.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.HeightfromDM">
            <summary>Calculates the plant height as function of DM.</summary>
            <returns>The plant height (mm)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateLAI">
            <summary>Computes the values of LAI (leaf area index) for green and dead plant material.</summary>
            <remarks>This method considers leaves plus an additional effect of stems and stolons</remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.KillCrop(System.Double)">
            <summary>Kills a fraction of this plant.</summary>
            <param name="fractionToKill">The fraction of crop to be killed (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Reset">
            <summary>Resets this plant to its initial state.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveBiomass(System.String,System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Remove biomass from an organ.
            </summary>
            <param name="organName">Name of organ.</param>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove.</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveBiomass(System.String,System.Double)">
            <summary>Removes plant material simulating a graze event.</summary>
            <param name="type">The type of amount being defined (SetResidueAmount or SetRemoveAmount)</param>
            <param name="amount">The DM amount (kg/ha)</param>
            <exception cref="T:System.Exception"> Type of amount to remove on graze not recognized (use 'SetResidueAmount' or 'SetRemoveAmount'</exception>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveBiomass(System.Double)">
            <summary>Removes a given amount of biomass (and N) from the plant.</summary>
            <param name="amountToRemove">The amount of biomass to remove (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.AnnualSpeciesGrowthFactor">
            <summary>Computes a growth factor for annual species, related to phenology/population.</summary>
            <returns>A growth factor (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CO2EffectOnPhotosynthesis">
            <summary>Computes the relative effect of atmospheric CO2 on photosynthesis.</summary>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.NConcEffectOnPhotosynthesis">
            <summary>Computes the relative effect of leaf N concentration on photosynthesis.</summary>
            <remarks>
            This mimics the effect that N concentration have on the amount of chlorophyll (assumed directly proportional to N conc.).
            The effect is itself adjusted by a factor function of atmospheric CO2 (plants need less N at high CO2).
            </remarks>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.NOptimumVariationDueToCO2">
            <summary>Computes the variation in optimum N in leaves due to atmospheric CO2.</summary>
            <returns>A factor to adjust optimum N in leaves (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CO2EffectOnConductance">
            <summary>Computes the variation in stomata conductance due to variation in atmospheric CO2.</summary>
            <returns>The stomata conductance (m/s)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Tmean(System.Double)">
            <summary>Today's weighted average temperature.</summary>
            <param name="wTmax">The weight of Tmax with respect to Tmin</param>
            <returns>The average Temperature (oC)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.HeatStress">
            <summary>Computes the reduction factor for photosynthesis due to heat damage.</summary>
            <remarks>Stress computed as function of daily maximum temperature, recovery based on average temperature</remarks>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.ColdStress">
            <summary>Computes the reduction factor for photosynthesis due to cold damage (frost).</summary>
            <remarks>Stress computed as function of daily minimum temperature, recovery based on average temperature</remarks>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.TemperatureLimitingFactor(System.Double)">
            <summary>Growth limiting factor due to temperature.</summary>
            <param name="temperature">The temperature</param>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
            <exception cref="T:System.Exception">Photosynthesis pathway is not valid</exception>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.TemperatureEffectOnRespiration(System.Double)">
            <summary>Computes the effects of temperature on respiration.</summary>
            <param name="temperature">The temperature</param>
            <returns>A factor to adjust plant respiration (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.TempFactorForTissueTurnover(System.Double)">
            <summary>Effect of temperature on tissue turnover.</summary>
            <param name="temperature">The temperature</param>
            <returns>A factor to adjust tissue turnover (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.WaterDeficitFactor">
            <summary>Computes the growth limiting factor due to soil moisture deficit.</summary>
            <returns>A limiting factor for plant growth (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.WaterLoggingFactor">
            <summary>Computes the growth limiting factor due to excess of water in the soil (water logging/lack of aeration).</summary>
            <remarks>
            Growth is limited if soil water content is above a given threshold (defined by MinimumWaterFreePorosity), which
             will be the soil DUL is MinimumWaterFreePorosity is set to a negative value. When water content is greater than
             this water-free porosity growth will be limited. The function is based on the cumulative water logging, which means
             that limitation are more severe if water logging conditions are persistent. Maximum increment in one day equals the 
             SoilWaterSaturationFactor and cannot be greater than one. Recovery happens every if water content is below the full
             saturation, and is proportional to the water-free porosity.
            </remarks>
            <returns>A limiting factor for plant growth (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.MoistureEffectOnTissueTurnover">
            <summary>Computes the effect of water stress on tissue turnover.</summary>
            <remarks>Tissue turnover is higher under water stress, GLFwater is used to mimic that effect.</remarks>
            <returns>A factor for adjusting tissue turnover (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DefoliationEffectOnTissueTurnover">
            <summary>Computes the effect of defoliation on stolon/root turnover rate.</summary>
            <remarks>
            This approach spreads the effect over a few days after a defoliation, starting large and decreasing with time.
            It is assumed that a defoliation of 100% of harvestable material will result in a full decay of stolons.
            </remarks>
            <returns>A factor for adjusting tissue turnover (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.MoistureEffectOnDetachment">
            <summary>Compute the effect of drought on detachment rate.</summary>
            <remarks>Drought will decrease the rate of littering.</remarks>
            <returns>A factor for adjusting the detachment rate(0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcReproductiveGrowthFactor">
            <summary>Calculates the factor increasing shoot allocation during reproductive growth.</summary>
            <remarks>
            This mimics the changes in DM allocation during reproductive season; allocation to shoot increases up to a maximum
             value (defined by allocationIncreaseRepro). This value is used during the main phase, two shoulder periods are
             defined on either side of the main phase (duration is given by reproSeasonInterval, translated into days of year),
             Onset phase goes between doyA and doyB, main phase between doyB and doyC, and outset between doyC and doyD.
            Note: The days have to be set as doubles or the division operations will be rounded and be slightly wrong.
            </remarks>
            <returns>A factor to adjust DM allocation to shoot</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcPlantCover(System.Double)">
            <summary>Computes the ground cover for the plant, or plant part.</summary>
            <param name="givenLAI">The LAI</param>
            <returns>The fraction of light effectively intercepted (MJ/MJ)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.FractionLayerWithRoots(System.Int32)">
            <summary>Computes how much of the layer is actually explored by roots (considering depth only).</summary>
            <param name="layer">The index for the layer being considered</param>
            <returns>The fraction of the layer that is explored by roots (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RootZoneBottomLayer">
            <summary>Gets the index of the layer at the bottom of the root zone.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.VPD">
            <summary>Computes the vapour pressure deficit.</summary>
            <returns>The vapour pressure deficit (hPa?)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.svp(System.Double)">
            <summary>Saturate vapour pressure in the air.</summary>
            <param name="temp">The air temperature (oC)</param>
            <returns>The saturated vapour pressure (hPa?)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateDigestibility">
            <summary>Computes the average digestibility of above-ground plant material.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.calcHarvestDigestibility(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Compute the average digestibility of harvested plant material.</summary>
            <param name="leafLiveWt">removed DM of live leaves</param>
            <param name="leafDeadWt">removed DM of dead leaves</param>
            <param name="stemLiveWt">removed DM of live stems</param>
            <param name="stemDeadWt">removed DM of dead stems</param>
            <param name="stolonLiveWt">removed DM of live stolons</param>
            <param name="stolonDeadWt">removed DM of dead stolons</param>
            <returns>The digestibility of plant material (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.ReduceCanopy(System.Double)">
            <summary>
            Set the plant leaf area index.
            </summary>
            <param name="deltaLAI">Delta LAI.</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.ReduceRootLengthDensity(System.Double)">
            <summary>
            Set the plant root length density.
            </summary>
            <param name="deltaRLD">New root length density.</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveAssimilate(System.Double)">
            <summary>
            Remove an amount of assimilate from the plant.
            </summary>
            <param name="deltaAssimilate">The amount of assimilate to remove (g/m2).</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.ReducePopulation(System.Double)">
            <summary>
            Reduce the plant population.
            </summary>
            <param name="newPlantPopulation">The new plant population.</param>
        </member>
        <member name="T:Models.AgPasture.RootTissue">
            <summary>Describes a root tissue of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.species">
            <summary>Pasture species this tissue belongs to.</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.soilPhysical">
            <summary>Soil physical parameterisation.</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nutrient">
            <summary>Soil nutrient model.</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.carbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.fractionNLuxuryRemobilisable">
            <summary>Fraction of luxury N remobilisable per day (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.biomass">
            <summary>Tissue biomass.</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.dmByLayer">
            <summary>Dry matter amount for each layer (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nByLayer">
            <summary>Nitrogen content for each layer (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.pByLayer">
            <summary>Phosphorus content for each layer (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.dmTransferredInByLayer">
            <summary>Amount of dry matter transferred into this tissue, for each layer (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nTransferredInByLayer">
            <summary>Amount of nitrogen transferred into this tissue, for each layer (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.dmTransferredIn">
            <summary>Dry matter amount transferred into this tissue (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.dmTransferredOut">
            <summary>Dry matter amount transferred out of this tissue (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nTransferredIn">
            <summary>Nitrogen transferred into this tissue (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nTransferredOut">
            <summary>Nitrogen transferred out of this tissue (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nRemobilised">
            <summary>Nitrogen remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.Initialise(System.Double[],System.Double[])">
            <summary>Initialise this root instance.</summary>
            <param name="initialDMByLayer">Initial dry matter by layer.</param>
            <param name="initialNByLayer">Initial nitrogen by layer.</param>
        </member>
        <member name="P:Models.AgPasture.RootTissue.NRemobilisable">
            <summary>Amount of N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.DM">
            <summary>Dry matter biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.FractionWt">
            <summary>Dry matter fraction for each layer (0-1).</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.SetBiomassTransferIn(System.Double[],System.Double[])">
            <summary>Set the biomass moving into the tissue.</summary>
            <param name="dm">Dry matter (kg/ha).</param>
            <param name="n">The nitrogen (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.Update">
            <summary>Updates the tissue state, make changes in DM and N effective.</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.DetachBiomass(System.Double,System.Double)">
            <summary>Adds a given amount of detached root material (DM and N) to the soil's FOM pool.</summary>
            <param name="amountDM">The DM amount to detach (kg/ha).</param>
            <param name="amountN">The N amount to detach (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.DetachBiomass(System.Double[],System.Double[])">
            <summary>Adds a given amount of detached root material (DM and N) to the soil's FOM pool, per layer.</summary>
            <param name="amountDM">The DM amount to detach (kg/ha).</param>
            <param name="amountN">The N amount to detach (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.MoveFractionToTissue(System.Double,Models.AgPasture.RootTissue)">
            <summary>Move a fraction of the biomass from this tissue to another tissue.</summary>
            <param name="fractionToRemove">The fraction to move.</param>
            <param name="toTissue">The tissue to move to biomass to.</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.DoTissueTurnover(System.Double,System.Int32,Models.AgPasture.RootTissue,System.Double)">
            <summary>Computes the DM and N amounts turned over for all tissues.</summary>
            <param name="turnoverRate">The turnover rate for each tissue</param>
            <param name="bottomLayer">Bottom layer index where roots are located.</param>
            <param name="to">The tissue to move the turned over material to.</param>
            <param name="nConc">The n concentration.</param>
            <returns>The DM and N amount removed from this tissue.</returns>
        </member>
        <member name="M:Models.AgPasture.RootTissue.DoRemobiliseN(System.Double)">
            <summary>Removes a fraction of remobilisable N for use into new growth.</summary>
            <param name="fraction">The fraction to remove (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.SetBiomassTurnover(System.Double,System.Double,System.Int32,System.Double[])">
            <summary>Adds biomass from tissue turnover.</summary>
            <param name="turnoverDM">Dry matter amount turned over (kg/ha).</param>
            <param name="turnoverN">Nitrogen amount turned over (kg/ha).</param>
            <param name="bottomLayer">Bottom layer index where roots are located.</param>
            <param name="fractionWt">The dry matter fraction for each layer (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.SetNewGrowthAllocation(System.Double,System.Double)">
            <summary>Adds biomass from new growth.</summary>
            <param name="dm">Dry matter amount (kg/ha).</param>
            <param name="n">Nitrogen amount (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.ResetTo(System.Double[])">
            <summary>Reset tissue to the specified amount.</summary>
            <param name="dmAmount">The amount of dry matter by layer to reset to (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.SetBiomass(System.Double[],System.Double[])">
            <summary>Sets the biomass of this tissue.</summary>
            <param name="dmAmount">The DM amount, by layer, to set to (kg/ha).</param>
            <param name="nAmount">The amount of N, by layer, to set to (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.AddBiomass(System.Double[],System.Double[])">
            <summary>Adds an amount of biomass to this tissue.</summary>
            <param name="dmToAdd">Dry matter amount to add (kg/ha).</param>
            <param name="nToAdd">Nitrogen amount to add (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.RootTissue.RemoveBiomass(System.Double,System.Boolean)">
            <summary>Removes a fraction of the biomass from this tissue.</summary>
            <param name="fractionToRemove">The fraction of biomass to remove.</param>
            <param name="sendToSoil">Whether the biomass should be sent to soil.</param>
            <remarks>The same fraction is used for all layers.</remarks>
            <returns></returns>
        </member>
        <member name="M:Models.AgPasture.RootTissue.UpdateDM">
            <summary>Update dry matter.</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.ClearDailyTransferredAmounts">
            <summary>Called each day to reset the transfer variables.</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.UpdateTissues(Models.AgPasture.RootTissue,Models.AgPasture.RootTissue)">
            <summary>Updates each tissue, make changes in DM and N effective.</summary>
        </member>
        <member name="T:Models.AgPasture.SimpleGrazing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.AgPasture.SimpleGrazing.PotentialMEOfHerbage">
            <summary>Average potential ME concentration in herbage material (MJ/kg)</summary>
        </member>
        <member name="T:Models.AgPasture.SimpleGrazing.GrazingRotationTypeEnum">
            <summary>Grazing rotation type enum for drop down.</summary>
        </member>
        <member name="F:Models.AgPasture.SimpleGrazing.GrazingRotationTypeEnum.SimpleRotation">
            <summary>A simple rotation.</summary>
        </member>
        <member name="F:Models.AgPasture.SimpleGrazing.GrazingRotationTypeEnum.TargetMass">
            <summary>A rotation based on a target mass.</summary>
        </member>
        <member name="F:Models.AgPasture.SimpleGrazing.GrazingRotationTypeEnum.TimingControlledElsewhere">
            <summary>Timing of grazing is controlled elsewhere.</summary>
        </member>
        <member name="F:Models.AgPasture.SimpleGrazing.GrazingRotationTypeEnum.Flexible">
            <summary>Flexible grazing using an expression.</summary>
        </member>
        <member name="T:Models.AgPasture.SimpleGrazing.UrineReturnType">
            <summary>class for encapsulating a urine return.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.UrineReturnType.Amount">
            <summary>Amount of urine to return (kg)</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.UrineReturnType.Depth">
            <summary>Depth (mm) of soil to return urine into.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.UrineReturnType.GrazedDM">
            <summary>Grazed dry matter.</summary>
        </member>
        <member name="E:Models.AgPasture.SimpleGrazing.Grazed">
            <summary>Invoked when a grazing occurs.</summary>
        </member>
        <member name="E:Models.AgPasture.SimpleGrazing.BiomassRemoved">
            <summary>Invoked when biomass is removed.</summary>
        </member>
        <member name="E:Models.AgPasture.SimpleGrazing.DoUrineReturn">
            <summary>Invoked when urine is to be returned to soil.</summary>
            <remarks>
            This event provides a mechanism for another model to perform a
            urine return to the soil. If no other model subscribes to this 
            event then SimpleGrazing will do the urine return. This mechanism
            allows a urine patch model to work.
            </remarks>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.GrazingRotationType">
            <summary>Use a strict rotation, a target pasture mass, or both?</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.SimpleGrazingFrequencyString">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.SimpleMinGrazable">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.SimpleGrazingResidual">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.PreGrazeDMArray">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.PostGrazeDMArray">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.FlexibleExpressionForTimingOfGrazing">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.FlexibleGrazePostDM">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.MaximumRotationLengthArray">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.MinimumRotationLengthArray">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.NoGrazingStartString">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.NoGrazingEndString">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.FractionDefoliatedNToSoil">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.FractionExcretedNToDung">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.CNRatioDung">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.DepthUrineIsAdded">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.FractionPopulationDecline">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.TramplingOn">
            <summary> </summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.MaximumPropLitterMovedToSoil">
            <summary> </summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.PastureConsumedAtMaximumRateOfLitterRemoval">
            <summary> </summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.SpeciesCutProportions">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsSimpleGrazingTurnedOn">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsTargetMassTurnedOn">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsNotTimingControlledElsewhere">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsFlexibleGrazingTurnedOn">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsCNRatioDungEnabled">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsFractionExcretedNToDungEnabled">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.IsTramplingTurnedOn">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.DaysSinceGraze">
            <summary>Number of days since grazing.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.GrazingInterval">
            <summary></summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.GrazedDM">
            <summary>DM grazed</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.GrazedN">
            <summary>N in the DM grazed.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.GrazedME">
            <summary>N in the DM grazed.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.AmountUrineNReturned">
            <summary>N in urine returned to the paddock.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.AmountDungWtReturned">
            <summary>C in dung returned to the paddock.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.AmountDungNReturned">
            <summary>N in dung returned to the paddock.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.PreGrazeDM">
            <summary>Mass of herbage just before grazing.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.PreGrazeHarvestableDM">
            <summary>Mass of harvestable herbage just before grazing.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.PostGrazeDM">
            <summary>Mass of herbage just after grazing.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.ProportionOfTotalDM">
            <summary>Proportion of each species biomass to the total biomass.</summary>
        </member>
        <member name="P:Models.AgPasture.SimpleGrazing.GrazedToday">
            <summary>Did grazing happen today?</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>This method is invoked at the beginning of the simulation.</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>This method is invoked at the beginning of each day to perform management actions.</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.OnDoManagement(System.Object,System.EventArgs)">
            <summary>This method is invoked at the beginning of each day to perform management actions.</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.GrazeToResidual(System.Double)">
            <summary>Perform grazing.</summary>
            <param name="residual">The residual biomass to graze to (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.Graze(System.Double)">
            <summary>Perform grazing</summary>
            <param name="amountDMToRemove">The amount of biomas to remove (kg/ha).</param>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.AddDungToSurface">
            <summary>Add dung to the soil surface.</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.AddUrineToSoil">
            <summary>Add urine to the soil.</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.GetValueFromMonthArray(System.Double[])">
            <summary>Return a value from an array that can have either 1 yearly value or 12 monthly values.</summary>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.SimpleRotation">
            <summary>Calculate whether simple rotation can graze today.</summary>
            <returns>True if can graze.</returns>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.TargetMass">
            <summary>Calculate whether a target mass rotation can graze today.</summary>
            <returns>True if can graze.</returns>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.FlexibleTiming">
            <summary>Calculate whether a target mass and length rotation can graze today.</summary>
            <returns>True if can graze.</returns>
        </member>
        <member name="M:Models.AgPasture.SimpleGrazing.RemoveDMFromPlants(System.Double)">
            <summary>Remove biomass from the specified forage.</summary>
            <param name="removeAmount">The total amount to remove from all forages (kg/ha).</param>
        </member>
        <member name="T:Models.AgPasture.TissuesHelper">
            <summary>Helper class for providing outputs from multiple tissues.</summary>
        </member>
        <member name="M:Models.AgPasture.TissuesHelper.#ctor(System.Collections.Generic.IEnumerable{Models.AgPasture.GenericTissue})">
            <summary>Constructor.</summary>
            <param name="tissueList"></param>
        </member>
        <member name="P:Models.AgPasture.TissuesHelper.Wt">
            <summary>Dry matter (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.TissuesHelper.N">
            <summary>Nitrogen content (kg/ha).</summary>
        </member>
        <member name="T:Models.Agroforestry.AgroforestrySystem">
            <summary>
            The APSIM AgroforestrySystem model calculates interactions between trees and neighbouring crop or pasture zones.  The model is therefore derived from the Zone class within APSIM and includes child zones to simulate soil and plant processes within the system.  It obtains information from a tree model within its scope (ie a child) and uses information about the tree structure (such as height and canopy dimensions) to calculate microclimate impacts on its child zones.  Below-ground interactions between trees and crops or pastures are calculated by the APSIM SoilArbitrator model.
            
            Windbreaks are simulated using an approach [Huthetal2002] that calculates windspeeds in the lee of windbreaks as a function distance (described in terms of multiples of tree heights) and windbreak optical porosity.
            
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.Urel">
            <summary>
            The reduction in wind as a fraction.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.AgroforestrySystem.ZoneList">
            <summary>
            A list containing forestry information for each zone.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.RainfallInterceptionFraction">
            <summary>
            Fraction of rainfall intercepted by canopy
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.RainShaddowWidth">
            <summary>
            Width of the tree rain shadow in terms of tree heights
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.AgroforestrySystem.tree">
            <summary>
            A pointer to the tree model.
            </summary>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.GetDistanceFromTrees(Models.Core.Zone)">
            <summary>
            Passthrough for child nodes that need information from the tree.
            Saves having to query the simulation for the node location all the time.
            </summary>
            <param name="z">The zone.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.GetWindReduction(Models.Core.Zone)">
            <summary>
            Return the %Wind Reduction for a given zone
            </summary>
            <param name="z">Zone</param>
            <returns>%Wind Reduction</returns>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.GetRadiationReduction(Models.Core.Zone)">
            <summary>
            Return the %Radiation Reduction for a given zone
            </summary>
            <param name="z">Zone</param>
            <returns>%Radiation Reduction</returns>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.Document">
            <summary>Writes documentation for this cultivar by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Agroforestry.LocalMicroClimate">
            <summary>
            Class to calculate and communicate local microclimate in agroforestry systems
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.StartDate">
            <summary>Gets the start date of the weather file</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.EndDate">
            <summary>Gets the end date of the weather file</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.MaxT">
            <summary>Gets or sets the maximum temperature (oc)</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.MinT">
            <summary>Gets or sets the minimum temperature (oc)</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.MeanT">
            <summary>
            Daily Mean temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.VPD">
            <summary>
            Daily mean VPD (hPa)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Rain">
            <summary>Gets or sets the rainfall (mm)</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Radn">
            <summary>Gets or sets the solar radiation. MJ/m2/day</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.VP">
            <summary>Gets or sets the vapor pressure</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.DiffuseFraction">
            <summary>
            Gets or sets the diffuse radiation fraction. If not specified in the weather file the default is 1.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Latitude">
            <summary>Gets the latitude</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Longitude">
            <summary>Gets the longitude</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Tav">
            <summary>Gets the average temperature</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Amp">
            <summary>Gets the temperature amplitude.</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.FileName">
            <summary>Gets the temperature amplitude.</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.YesterdaysMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.TomorrowsMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="M:Models.Agroforestry.LocalMicroClimate.CalculateDayLength(System.Double)">
            <summary>Gets the duration of the day in hours.</summary>
        </member>
        <member name="M:Models.Agroforestry.LocalMicroClimate.CalculateSunRise">
            <summary> calculate the time of sun rise </summary>
            <returns>the time of sun rise</returns>
        </member>
        <member name="M:Models.Agroforestry.LocalMicroClimate.CalculateSunSet">
            <summary> calculate the time of sun set</summary>
            <returns>Sun set time</returns>
        </member>
        <member name="T:Models.Agroforestry.TreeProxy">
            <summary>
            A simple proxy for a full tree model is provided for use in agroforestry simulations.  It allows the user to directly specify the size and structural data for trees within the simulation rather than having to simulate complex tree development (e.g. tree canopy structure under specific pruning regimes).
            
            Several parameters are required of the user to specify the state of trees within the simulation.  These include:
            
            * Tree height (m)
            * Shade modifier with age (0-1)
            * Tree root radius (cm)
            * Shade at a range of distances from the trees (%)
            * Tree root length density at various depths and distances from the trees (cm/cm^3^)
            * Tree daily nitrogen demand (g/m2/day for tree zone area)
            
            The model calculates diffusive nutrient uptake using the equations of [DeWilligen1994] as formulated in the model WANULCAS [WANULCAS2011] and modified to better represent nutrient buffering [smethurst1997paste;smethurst1999phase;van1990defining].
            Water uptake is calculated using an adaptation of the approach of [Meinkeetal1993] where the extraction coefficient is assumed to be proportional to root length density [Peakeetal2013].  The user specifies a value of the uptake coefficient at a base root length density of 1 cm/cm^3^ and spatial water uptake is scales using this value and the user-input of tree root length density.
            
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Table">
            <summary>
            Gets or sets the table data.
            Be careful when working with this property!
            The first list contains the column headers (e.g. 1 row of data).
            The subsequent lists all contain columns of data(?!).
            </summary>
            <value>The table.</value>
        </member>
        <member name="F:Models.Agroforestry.TreeProxy.AFsystem">
            <summary>
            Reference to the parent agroforestry system.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.H">
            <summary>
            Distance from zone in tree heights
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.heightToday">
            <summary>
            Height of the tree.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.ShadeModiferToday">
            <summary>
            Leaf Area
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.WaterUptake">
            <summary>
            The trees water uptake per layer in a single zone
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NUptake">
            <summary>
            The trees N uptake per layer in a single zone
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.SWDemand">
            <summary>
            The trees water demand across all zones.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.RootRadius">
            <summary>The root radius.</summary>
            <value>The root radius.</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NumberOfTrees">
            <summary>Number of Trees in the System</summary>
            <value>The number of trees</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Kd">
            <summary>Adsoption Cofficient for NO3</summary>
            <value>Adsoption Cofficient for NO3</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.BaseKL">
            <summary>The uptake coefficient.</summary>
            <value>KL Value at RLD of 1 cm/cm3.</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.KValue">
            <summary>Extinction Coefficient.</summary>
            <value>Light Extinction Coefficient.</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.WaterStress">
            <summary>
            Water stress factor.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NStress">
            <summary>
            N stress factor.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.TreeProxy.ZoneList">
            <summary>
            A list containing forestry information for each zone.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Shade">
            <summary>
            Return an array of shade values.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Dates">
            <summary>
            Date list for tree heights over lime
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Heights">
            <summary>
            Tree heights
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NDemands">
            <summary>
            Tree N demands
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.ShadeModifiers">
            <summary>
            Shade Modifiers
            </summary>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetDistanceFromTrees(Models.Core.Zone)">
            <summary>
            Return the distance from the tree for a given zone. The tree is assumed to be in the first Zone.
            </summary>
            <param name="z">Zone</param>
            <returns>Distance from a static tree</returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetZoneWidth(Models.Core.Zone)">
            <summary>
            Return the width of the given zone.
            </summary>
            <param name="z">The width.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.ZoneDistanceInTreeHeights(Models.Core.Zone)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetShade(Models.Core.Zone)">
            <summary>
            Return the %Shade for a given zone
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetRLD(Models.Core.Zone)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.SetupTreeProperties">
            <summary>
            Setup the tree properties so they can be mapped to a zone.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.InterceptedRadiation">
            <summary>
            Calculate the total intercepted radiation by the tree canopy (MJ)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.TreeWaterUptake">
            <summary>
            Calculate water use from each zone (mm)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.IndividualTreeWaterUptake">
            <summary>
            Calculate water use on a per tree basis (L)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.IndividualTreeWaterDemand">
            <summary>
            Calculate water use on a per tree basis (L)
            </summary>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Returns soil water uptake from each zone by the static tree model
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Returns soil Nitrogen uptake from each zone by the static tree model
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
             Accepts the actual soil water uptake from the soil arbitrator.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Accepts the actual soil Nitrogen uptake from the soil arbitrator.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Models.Agroforestry.ZoneInfo">
            <summary>
            A structure holding forestry information for a single zone.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.ZoneInfo.zone">
            <summary>
            The name of the zone.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.ZoneInfo.Shade">
            <summary>
            Shade value.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.ZoneInfo.RLD">
            <summary>
            Root Length Density information for each soil layer in a zone.
            </summary>
        </member>
        <member name="T:Models.Aqua.FoodInPond">
            <summary>
             Aquaculture Food in the Pond. 
             Stores the different feeds that are in the pond.
            </summary> 
        </member>
        <member name="P:Models.Aqua.FoodInPond.Food">
            <summary>
             Data Structure that stores the different feeds that are in the pond.
            </summary>
        </member>
        <member name="T:Models.Aqua.Food">
            <summary>
            Data Structure that stores the different feeds that are in the pond.
            </summary>
        </member>
        <member name="M:Models.Aqua.Food.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.Aqua.Food.GetEnumerator">
            <summary>
            Default Iterator
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Models.Aqua.Food.AddToExisting(Models.Aqua.Food)">
            <summary>
            Add some food to this food.
            If a feed (in the food to add) already exist then add it to the exsting feed.
            otherwise just add it as a new feed.
            </summary>
            <param name="FoodToAdd">Food to add to this food</param>
        </member>
        <member name="M:Models.Aqua.Food.RemoveFromExisting(Models.Aqua.Food)">
            <summary>
            Remove some food from this food.
            If a feed (in the food to remove) already exists then remove it from the existing feed.
            otherwise just ignore that feed.
            </summary>
            <param name="FoodToRemove">Food to remove from this food</param>
        </member>
        <member name="M:Models.Aqua.Food.IsThisFeedInFood(System.String)">
            <summary>
            Check to see if this feed is already in the food
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Aqua.Food.GetFeed(System.String)">
            <summary>
            Get the Feed with the specified Name
            </summary>
            <param name="Name">Name of the Feed (case insensitive)</param>
            <returns>
            The Feed with the specified Name. 
            If not found returns null.
            </returns>
        </member>
        <member name="M:Models.Aqua.Food.AddFeed(Models.Aqua.Feed)">
            <summary>
            Add a Feed to the Food
            If it is not already present in this food then add it
            If it is already present then add it to the existing feed.
            </summary>
            <param name="NewFeed">The new feed to add to the food</param>
        </member>
        <member name="M:Models.Aqua.Food.RemoveAllFeedFromFood">
            <summary>
            Remove ALL the feeds from the Food.
            </summary>
        </member>
        <member name="P:Models.Aqua.Food.TotalDM">
            <summary>
            Total Dry Matter in the food (kg)
            </summary>
            <value>
            Summation of every type of feed in the food. 
            </value>
        </member>
        <member name="P:Models.Aqua.Food.TotalN">
            <summary>
            Total Nitrogen in the food(kg)
            </summary>
            <value>
             Summation of every type of feed in the food.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.TotalDE">
            <summary>
            Total Digestible Energy in the food (MJ)
            </summary>
            <value>
             Summation of every type of feed in the food. 
            </value>
        </member>
        <member name="P:Models.Aqua.Food.NumFeeds">
            <summary>
            Gets the Number of feeds in the pond
            </summary>
        </member>
        <member name="P:Models.Aqua.Food.FeedNames">
            <summary>
            Names for each feed type in the pond
            (This is for output only. You can not change these values) 
            </summary>
            <value>
            returns an Array where each element is the name for a different feed in the pond.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.FeedDMs">
            <summary>
            Dry Matter for each feed type in the pond (kg)
            (This is for output only. You can not change these values)
            </summary>
            <value>
            returns an Array where each element is a dry matter for a different feed in the pond.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.FeedNs">
            <summary>
            Nitrogen for each feed type in the pond (kg)
            (This is for output only. You can not change these values)
            </summary>
            <value>
            returns an Array where each element is the nitrogen content for a different feed in the pond.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.FeedDEs">
            <summary>
            Digestible Energy for each feed type in the pond (MJ)
            (This is for output only. You can not change these values)
            </summary>
            <value>
            returns an Array where each element is the digestible energy content for a different feed in the pond.
            </value>
        </member>
        <member name="T:Models.Aqua.Feed">
            <summary>
            This is an individual Feed Type that is currently in the Pond
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.FeedName">
            <summary>
            Name of this Feed
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.DryMatter">
            <summary>
            Mass of this Feed (on a Dry Matter basis) in the pond
            (kg)
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.Nitrogen">
            <summary>
            Nitrogen in all of this feeds Dry Matter.
            (kg)
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.DigestibleEnergy">
            <summary>
            Digestible Energy in all of this feeds Dry Matter.
            (MJ)
            </summary>
        </member>
        <member name="P:Models.Aqua.Feed.NperKgOfDM">
            <summary>
            Nitrogen Per Kilogram of Dry Matter.
            (kg)
            </summary>
        </member>
        <member name="P:Models.Aqua.Feed.DEperKgOfDM">
            <summary>
            Digestible Energy Per Kilogram of Dry Matter.
            (MJ)
            </summary>
        </member>
        <member name="M:Models.Aqua.Feed.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="FeedName">Name of this Feed</param>
            <param name="DryMatter">Mass of this Feed (on a Dry Matter basis) in the pond (kg)</param>
            <param name="Nitrogen">Nitrogen in all of this feeds Dry Matter (kg)</param>
            <param name="DigestibleEnergy">Digestible Energy in all of this feeds Dry Matter (MJ)</param>
        </member>
        <member name="M:Models.Aqua.Feed.AddToExisting(Models.Aqua.Feed)">
            <summary>
            Add some feed to the existing feed.
            </summary>
            <param name="AddThis"></param>
        </member>
        <member name="M:Models.Aqua.Feed.RemoveFromExisting(Models.Aqua.Feed)">
            <summary>
            Remove some feed from the existing feed.
            If you are trying to remove more feed than exists
            then it will only remove whatever feed is there.
            </summary>
            <param name="RemoveThis">Amounts in this feed (to remove) should be positive values</param>
        </member>
        <member name="T:Models.Aqua.PondWater">
            <summary>
             Aquaculture Pond Water. 
             Maintains a water balance in the Pond.
            </summary> 
        </member>
        <member name="F:Models.Aqua.PondWater.Weather">
            <summary>The weather</summary>
        </member>
        <member name="F:Models.Aqua.PondWater.Summary">
            <summary>The summary</summary>
        </member>
        <member name="P:Models.Aqua.PondWater.SurfaceArea">
            <summary>
            Suface Area of the Pond (m^2)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.MaxPondDepth">
            <summary>
            Maximum Pond Depth (m)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.Kpan">
            <summary>
            Kpan - Coefficient applied to PanEvap to give PondEvap
            </summary>
        </member>
        <member name="M:Models.Aqua.PondWater.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondEvap">
            <summary>
            Evaporation from the Pond (mm)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondDepth">
            <summary>
            Current Depth Water in the Pond (m)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondProps">
            <summary>
            Current Properties of any given volume/amount of water in the Pond.
            Used when mixing water together or evaporating water.
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondTemp">
            <summary>
            Temperature of the water in the Pond (oC)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.Salinity">
            <summary>
            Salinity of the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PH">
            <summary>
            PH of the water in the Pond 
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.N">
            <summary>
            Nitrogen in the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.P">
            <summary>
            Phosphorus in the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.TSS">
            <summary>
            Total Suspended Soild in the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="M:Models.Aqua.PondWater.WeightedAverage(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Do a weighted average.
            Useful when mixing two different volumes of water, and you want to know the resulting concentrations of water solutes. 
            </summary>
        </member>
        <member name="M:Models.Aqua.PondWater.RemoveWater(System.Double)">
             <summary>
            Remove water from the Pond.
            nb. There is no change in Temperature, Salinity, etc. as a consequence of removing water.
            Only the volume of water is changed. None of the Water's properties are affected.
             </summary>
             <param name="Volume"></param>
        </member>
        <member name="M:Models.Aqua.PondWater.ReflectionWaterSurface(System.DateTime,System.Double,System.Double)">
            <summary>
            Fraction of sunlight reflected from the water surface.
            </summary>
            <param name="Today">DateTime for today</param>
            <param name="Latitude">(Not used at present but should use it to calculate Solar Altitude Angle)</param>
            <param name="WindSpeed">(m/s)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatIn_SN_SolarRadiation(System.Double,System.Double)">
            <summary>
            Heat Flux due to incomming solar radiation penetrating the surface of the water
            </summary>
            <param name="Heat_S_Radn">Solar Radiation (taken from APSIM met file) (MJ/m^2/day)</param>
            <param name="Reflection">Fraction Reflected from the water surface (0-1)</param>
            <returns>(kJ/m^2/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatIn_AT_AtmosphericLongWaveRadn(System.Double,System.Double)">
            <summary>
            Heat Flux due to incomming atmospheric radiation
            (Long-wave, sensible heat transfer from the atmospheric air)
            This still occurs at night unlike the solar radiation. 
            </summary>
            <param name="MaxT">Maximum Temperature of the Atmosphere (oC)</param>
            <param name="MinT">Minimum Temperature of the Atmosphere (oC)</param>
            <returns>(kJ/m^2/hr)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_WS_FromWaterSurface(System.Double)">
            <summary>
            Heat Flux radiated from the water surface to the atmosphere.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <returns>(kJ/m^2/hr)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_E_EvaporationLatentHeat(System.Double,System.Double,System.Double)">
            <summary>
            Heat Flux caused by evaporation from the pond.
            When water evaporates it takes away the latent heat required to go from liquid to vapour.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <param name="MinT">Minimum Temperature of the Atmosphere (oC)</param>
            <param name="WindSpeed">Wind Speed (m/s)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_E_EvaporationLatentHeat(System.Double)">
            <summary>
            Heat Flux caused by evaporation from the pond.
            When water evaporates it takes away the latent heat required to go from liquid to vapour.
            </summary>
            <param name="Evaporation_mm">Amount of water evaporated from the pond (mm)</param>
            <returns>(kJ/m^2/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatFlux_C_SensibleHeatTransferBetweenAirAndPond(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Heat Flux caused by transfer of heat from the atmosphere to the pond AND vice versa.
            Basically this is via the Conduction of Heat when two bodies are in contact.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <param name="MaxT">Maximum Temperature of the Atmosphere (oC)</param>
            <param name="MinT">Minimum Temperature of the Atmosphere (oC)</param>
            <param name="WindSpeed">(m/s)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_SNZ_SolarRadiationReachingBottomOfPond(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Heat from solar radiation that passed through the pond and reached the bottom.
            This has to be removed from what entered the pond to give the net amount absorbed in the pond.
            </summary>
            <param name="HeatIn_SN">Radiation that entered the pond (kJ/m^2/day)</param>
            <param name="Reflection">Fraction of light reflected from the surface of the pond (0-1)</param>
            <param name="SDD">Secchi Disk Depth (m)</param>
            <param name="PondDepth">Current Depth of the Pond Water (oC)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatFlux_SED_HeatTransferBetweenWaterAndBottomOfPond(System.Double,System.Double,System.Double)">
            <summary>
            Heat Flux caused by transfer of heat from pond water and bottom of the pond.
            Basically this is via the Conduction of Heat when two bodies are in contact.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <param name="SedimentTemp">Temperature of the Sediment at the bottom of the pond (oC)</param>
            <param name="PondDepth">Current Depth of the Pond Water (oC)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_GW_HeatLostFromSedimentToGroundWater(System.Double)">
            <summary>
            Heat Lost from the Sediment to the Ground Water
            Basically this is via the Conduction of Heat when two bodies are in contact.
            </summary>
            <param name="SedimentTemp">Temperature of the Sediment at the bottom of the pond (oC)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.Fill(System.Double,Models.Aqua.WaterProperties)">
            <summary>
            Fill the Pond with a given volume of water.
            Must specifiy the properties of the water you are adding as well.
            </summary>
            <param name="Volume">Volume of water to add (m^3)</param>
            <param name="WaterProperties">Properties of the water you are adding</param>
        </member>
        <member name="M:Models.Aqua.PondWater.Fill(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fill the Pond with a given volume of water.
            Must specifiy the properties of the water you are adding as well.
            </summary>
            <param name="Volume">Volume of water to add (m^3)</param>
            <param name="WaterTemp">Temperature of the water (oC)</param>
            <param name="Salinity">Salinity (kg/m^3)</param>
            <param name="PH">PH</param>
            <param name="N">Nitrogen (kg/m^3)</param>
            <param name="P">Phosporus (kg/m^3)</param>
            <param name="TSS">Total Suspended Solids (kg/m^3)</param>
        </member>
        <member name="M:Models.Aqua.PondWater.Empty(System.Double)">
            <summary>
            Remove a given volume of water from the Pond.
            </summary>
            <param name="Volume">Volume of water to remove from the pond (m^3)</param>
        </member>
        <member name="T:Models.Aqua.Prawns">
            <summary>
             Aquaculture Prawns. 
             Simple prawn growth model.
            </summary> 
        </member>
        <member name="F:Models.Aqua.Prawns.Summary">
            <summary>The summary</summary>
        </member>
        <member name="P:Models.Aqua.Prawns.PrawnSpecies">
            <summary>
            Name of the prawn species
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki1">
            <summary>
            Dry matter intake rate of prawns weighing 1g under optimal conditions
            (g DM/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki2">
            <summary>
            Allometric exponent for consumption-weight relationship
            (unitless)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki3">
            <summary>
            Stocking density at which consumption rate notionally declines to zero
            (g/m^2)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki4">
            <summary>
            Consumption efficiency of prawns
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki5">
            <summary>
            DM digestibility: constant 
            (g/g)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki6">
            <summary>
            DM digestibility: DE/DM coefficient
            (g/kJ) nb. DE/DM ratio is same, whether expressed as kJ/g or MJ/kg 
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki7">
            <summary>
            N digestibility: constant 
            (g/g)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki8">
            <summary>
            N digestibility: DE/DM coefficient
            (g/kJ) nb. DE/DM ratio is same, whether expressed as kJ/g or MJ/kg 
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kt1">
            <summary>
            Optimum temperature for prawn function
            (oC)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kt2">
            <summary>
            Temperature below which prawns cease to function
            (oC)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kt3">
            <summary>
            Curvature of temperature response function
            (unitless)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Km1">
            <summary>
            Maintenance energy requirement in kJ for a 1g prawn.
            (kJ/g^0.8)
            This value is for a G8 prawn in Glencross et al. 2013;
            (for the Jackson and Yang (1998) dataset, the value is 0.19) 
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Km2">
            <summary>
            Allometric exponent for maintenance energy requirement
            (unitless)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ks1">
            <summary>
            Relative rate of change in maintenance energy requirement with salinity
            (ppt)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kg1">
            <summary>
            Efficiency of energy use for growth
            (kJ/kJ)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kg4">
            <summary>
            Efficiency of nitrogen use for growth
            (g/g)
            Estimated very approximately by assuming 
            a diet below 0.030 g CP/g DM will limit early prawn growth (at a typical DE:DM ratio of 16)
            and back calculating the corresponding efficiency.
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd1">
            <summary>
            Background mortaility rate of prawns
            (/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd2">
            <summary>
            Coefficient for additional mortality
            (/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd3">
            <summary>
            Threshold salinity above which no extra mortality takes place
            (ppt)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd4">
            <summary>
            Threshold ammonium-N concentration below which no extra mortality takes place
            (mg/litre)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd5">
            <summary>
            Exponent for ammonium-N vs mortality relationship
            (unitless)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.kg2g">
            <summary>
            Convert from kg to grams
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.g2kg">
            <summary>
            Convert from grams to kg
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.consumedFoodPP">
            <summary>
            Food destroyed during the process of eating
            (Prawns are careless and wasteful feeders)
            (Per Prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.intakeFoodPP">
            <summary>
            Of the Food Consumed this is the food actually ingested by the prawn.
            (Per Prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.digestedFoodPP">
            <summary>
            Of the food ingested by the prawn this is the food actually digested by the prawn.
            (Per Prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.PrawnCohort.LiveWeight">
            <summary>
            Live weight of a single prawn
            (g/prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.PrawnCohort.NitrogenMass">
            <summary>
            Masss of nitrogen in the body of a single prawn
            (g N/prawn)
            </summary>
        </member>
        <member name="M:Models.Aqua.Prawns.PrawnCohort.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="NumberOfPrawns"></param>
            <param name="LiveWeight"></param>
            <param name="NitrogenMass"></param>
        </member>
        <member name="M:Models.Aqua.Prawns.PrawnCohort.StockingDensity(System.Double)">
            <summary>
            Stocking Density
            </summary>
            <param name="AreaPondFloor">(m^2)</param>
            <returns>(g/m^2)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Stress_Stock(System.Double)">
            <summary>
             Reduction in Food Consumption due to high stocking density
             aka. Zsd
            </summary>
            <param name="StockingDensity">(g/m^2)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Stress_Temp(System.Double)">
            <summary>
            Temperature Response Function
            (Prawn Stress due to Temperature)
            aka. Zt
            </summary>
            <param name="TempPondFloor">(oC)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Stress_Salinity(System.Double)">
            <summary>
            Salinity effect on maintenance energy requirement
            aka. Zs
            </summary>
            <param name="Salinity">(ppt)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.PotentialDMConsumedPerPrawn(Models.Aqua.Prawns.PrawnCohort,System.Double,System.Double)">
            <summary>
            Calculate todays potential total consumption of Dry Matter (per prawn).
            Function was derived by reverse-engineering the prawn growth rate equation of Jackson and Yang (1998).
            Which is why we first calculate intake, then work out what the consumption must have been.
            </summary>
            <param name="Prawns"></param>
            <param name="StressStock"></param>
            <param name="StressTemp"></param>
            <returns>(g DM/prawn/d</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.CheckEnoughFoodToConsumeToday(Models.Aqua.Food,Models.Aqua.Prawns.PrawnCohort,System.Double)">
            <summary>
            Restricts the Potential total amount of DM Consumed (per prawn) by what is actually available in the pond to be consumed. 
            </summary>
            <param name="FoodAvailable">Food that is currently in the pond</param>
            <param name="Prawns">Prawns that are currently in the pond</param>
            <param name="PotentialDMConsumedPP">Amount of DM each prawn would like to eat</param>
            <returns>Amount of DM each prawn will actually get to eat. (g DM/prawn)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.FeedConsumedPerPrawn(Models.Aqua.Food,Models.Aqua.Feed,System.Double)">
            <summary>
            Returns the feed that was destroyed by a single prawn in the process of feeding today.
            Prawns are messy feeders and don't intake everything that they consume. 
            </summary>
            <param name="FoodInPond">Food currently in the pond</param>
            <param name="CurrentFeed">A feed that is currently available for eating today</param>
            <param name="TotalDMConsumed"></param>
            <returns>(/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.FeedIntakePerPrawn(Models.Aqua.Feed)">
            <summary>
            Returns the feed actually ingested by the prawn today (given the feed that was consumed by that prawn today).
            Prawns are messy feeders and don't intake everything that they consume. 
            </summary>
            <param name="ConsumedFeedPP">Feed that the prawn has consumed today</param>
            <returns>(/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.FeedDigestedPerPrawn(Models.Aqua.Feed)">
            <summary>
            Returns the feed actually digested by the prawn today (given the feed that was ingested by that prawn today).
            </summary>
            <param name="IntakeFeedPP">Feed that the prawn has ingested today</param>
            <returns>(/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.EnergyMaintenance(Models.Aqua.Prawns.PrawnCohort,System.Double,System.Double)">
            <summary>
            Maintenance energy requirement.
            Energy required to maintain this prawns weight
            </summary>
            <param name="Prawns"></param>
            <param name="StressTemp"></param>
            <param name="StressSalinity"></param>
            <returns>(kJ/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.EnergyLimitedWeightGain(Models.Aqua.Food,System.Double)">
            <summary>
            Returns the Potential Live Weight gain in a prawn (only restricted by the energy it has digested).
            </summary>
            <param name="DigestedFoodPP">Food the prawn digested</param>
            <param name="EnergyMaintenance">Energy required to maintain this prawns weight</param>
            <returns>g Live Weight/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.NitrogenLimitedWeightGain(Models.Aqua.Food)">
            <summary>
            Returns the Potential Live Weight gain in a prawn (only restricted by the nitrogen it has digested).
            </summary>
            <param name="DigestedFoodPP">Food the prawn has digested</param>
            <returns>g Live Weight/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.WeightGainPerPrawn(Models.Aqua.Food,System.Double)">
            <summary>
            Actual weight gain of an individual prawn based on the food it has digested.
            Assumed to be the lesser of the Energy Limited and Nitrogen Limited growth. 
            </summary>
            <param name="DigestedFoodPP">Food the prawn has digested</param>
            <param name="EnergyMaintenance">Energy required to maintain this prawns weight</param>
            <returns>g Live Weight/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.NitrogenGainPerPrawn(System.Double)">
            <summary>
            Actual nitrogen gain of an individual prawn based on the weight it has gained.
            </summary>
            <param name="WeightGainPerPrawn">Weight the prawn has gained</param>
            <returns>g N/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Mortality(Models.Aqua.Prawns.PrawnCohort,System.Double,System.Double)">
            <summary>
            Number of prawns that died today. 
            Background deaths (approximately equivalent to 20% per year)
            plus additional deaths due low salinity and high ammonium.
            (using an equation fitted to the data of Li et al 2007)
            </summary>
            <param name="Prawns">Current Prawns</param>
            <param name="Salinity">Salinity (ppt)</param>
            <param name="Ammonium">Ammonium (mg/litre)</param>
            <returns>(prawns/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.DeadPrawnsAsFeed(System.Int32,Models.Aqua.Prawns.PrawnCohort)">
            <summary>
            Return the prawns that died today as a feed type to add back into the pond.
            </summary>
            <param name="Deaths">Number of prawns that died today</param>
            <param name="Prawns">Current Prawns that are in the pond</param>
            <returns>Feed to be added to the pond</returns>
        </member>
        <member name="P:Models.Aqua.Prawns.NumOfPrawns">
            <summary>
            Number of prawns currently in the pond.
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.LiveWeight">
            <summary>
            Average live weight of a single prawn
            (g /prawn)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Nitrogen">
            <summary>
            Average mass of nitrogen in a single prawn
            (g N/prawn)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.StressStock">
            <summary>
            Stocking Density Feeding Stress
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.StressTemp">
            <summary>
            Temperature Stress
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.StressSalinity">
            <summary>
            Salinity Stress on energy required for a prawn to maintain it's weight.
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ConsumedDM">
            <summary>
            Dry Matter consumed by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ConsumedN">
            <summary>
            Nitrogen consumed by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ConsumedDE">
            <summary>
            Digestible Energy consumed by the prawns
            (MJ/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.IntakeDM">
            <summary>
            Dry Matter ingested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.IntakeN">
            <summary>
            Nitrogen ingested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.IntakeDE">
            <summary>
            Digestible Energy ingested by the prawns
            (MJ/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.DigestedDM">
            <summary>
            Dry Matter digested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.DigestedN">
            <summary>
            Nitrogen digested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.DigestedDE">
            <summary>
            Digestible Energy digested by the prawns
            (MJ/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.FaecesDM">
            <summary>
            Dry Matter that was excreted as faeces
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.FaecesN">
            <summary>
            Mass of Nitrogen that was excreted as faeces
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ExcretedNH4">
            <summary>
            Ammonium-N that was excreted
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Deaths">
            <summary>
            Number of prawns that died today.
            </summary>
        </member>
        <member name="M:Models.Aqua.Prawns.AddPrawnsToPond(System.Int32,System.Double,System.Double)">
            <summary>
            Add Prawns to the Pond.
            Any existing prawns in the pond are removed first.
            </summary>
            <param name="NumberOfPrawns"></param>
            <param name="LiveWeight">(g/prawn)</param>
            <param name="NitrogenMass">(g N/prawn)</param>
        </member>
        <member name="M:Models.Aqua.Prawns.HarvestPond">
            <summary>
            Harvest the Pond of Prawns.
            All prawns are removed from the pond.
            </summary>
        </member>
        <member name="T:Models.Aqua.WaterProperties">
            <summary>
            Stores the information about the water but not the volume of it.
            Applies to any given volume/amount of this water.
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.Temperature">
            <summary>
            Temperature of the water (oC)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.Salinity">
            <summary>
            Salinity (kg/m^3)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.PH">
            <summary>
            PH 
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.N">
            <summary>
            Nitrogen (kg/m^3)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.P">
            <summary>
            Phosphorus (kg/m^3)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.TSS">
            <summary>
            Total Suspended Solids (kg/m^3)
            </summary>
        </member>
        <member name="M:Models.Aqua.WaterProperties.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Temperature">Temperature (oC)</param>
            <param name="Salinity">Salinity (kg/m^3)</param>
            <param name="PH">PH</param>
            <param name="N">Nitrogen (kg/m^3)</param>
            <param name="P">Phosporus (kg/m^3)</param>
            <param name="TSS">Total Suspended Solids (kg/m^3)</param>
        </member>
        <member name="M:Models.Aqua.WaterProperties.ZeroProperties">
            <summary>
            Zero all the water properties
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.ActivitiesHolder">
            <summary>
             Manager for all activities available to the model
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.ActivitiesHolder.LastShortfallResourceRequest">
            <summary>
            Last resource request that was in defecit
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivitiesHolder.ResourceShortfallOccurred">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivitiesHolder.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.ActivitiesHolder_ResourceShortfallOccurred(System.Object,System.EventArgs)">
            <summary>
            Hander for shortfall
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivitiesHolder.LastActivityPerformed">
            <summary>
            Details of the last activity performed
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An method to perform core actions when simulation commences</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>A method to allow all activities to initialise themselves</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>A method to allow all activities to get ready for the time step</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnGetResourcesRequired(System.Object,System.EventArgs)">
            <summary>A method to get all resources required in the time step</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnCLEMEndOfTimeStep(System.Object,System.EventArgs)">
            <summary>A method to allow all activities to perform actions at the end of the time step</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            A method to clean up at the end of the simulation
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityCutAndCarryLimiter">
            <summary>
            Cut and carry Activity limiter
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityCutAndCarryLimiter.WeightLimitPerDay">
            <summary>
            Monthly weight limit (kg/day)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityCutAndCarryLimiter.AddWeightCarried(System.Double)">
            <summary>
            Get the amount of cut and carry available.
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityCutAndCarryLimiter.GetAmountAvailable(System.Int32)">
            <summary>
            Method to get the amount still available
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityCutAndCarryLimiter.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityCutAndCarryLimiter.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityCutAndCarryLimiter.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityCutAndCarryLimiter.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityFolder">
            <summary>An folder to manage activity grouping</summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityFolder.TransactionCategory">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityFolder.OnPartialResourcesAvailableAction">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerBreedForMilking">
            <summary>
            Activity timer for breeding to maintain best milk production
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerBreedForMilking.RestMonths">
            <summary>
            Months to rest after lactation
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerBreedForMilking.ShortenLactationMonths">
            <summary>
            Months to shorten lactation before next conception
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerBreedForMilking.ActivityPerformed">
            <summary>
            Notify CLEM that timer was ok
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerBreedForMilking.IndividualsToBreed">
            <summary>
            The list of individuals to breed this time step
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.OnCLEMDoCutAndCarry(System.Object,System.EventArgs)">
            <summary>An event handler to determine the breeders to breed</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerBreedForMilking.ActivityDue">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerBreedForMilking.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerCropHarvest">
            <summary>
            Activity timer based on crop harvest
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerCropHarvest.OffsetMonthHarvestStart">
            <summary>
            Months before harvest to start performing activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerCropHarvest.OffsetMonthHarvestStop">
            <summary>
            Months before harvest to stop performing activities
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerCropHarvest.ActivityPerformed">
            <summary>
            Notify CLEM that this activity was performed.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerCropHarvest.ActivityDue">
            <summary>
            Method to determine whether the activity is due based on harvest details from parent.
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerDateRange">
            <summary>
            Activity timer based on date range
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.StartDate">
            <summary>
            Start date of period to perform activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.EndDate">
            <summary>
            End date of period to perform activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.Invert">
            <summary>
            Invert (NOT in selected range)
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerDateRange.ActivityPerformed">
            <summary>
            Activity performed
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.ActivityDue">
            <summary>
            Method to determine whether the activity is due
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerInterval">
            <summary>
            Activity timer based on monthly interval
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerInterval.ActivityPerformed">
            <summary>
            Notify CLEM that timer was ok
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.Interval">
            <summary>
            The payment interval (in months, 1 monthly, 12 annual)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.MonthDue">
            <summary>
            First month to start interval
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.NextDueDate">
            <summary>
            Month this timer is next due.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.ActivityDue">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to move timer setting to next timing.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerMonthRange">
            <summary>
            Activity timer based on month range
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerMonthRange.ActivityPerformed">
            <summary>
            Notify CLEM that this Timer was performed
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerMonthRange.StartMonth">
            <summary>
            Start month of annual period to perform activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerMonthRange.EndMonth">
            <summary>
            End month of annual period to perform activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerMonthRange.ActivityDue">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerPastureLevel">
            <summary>
            Activity timer based on pasture level
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerPastureLevel.GrazeFoodStoreTypeName">
            <summary>
            Paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerPastureLevel.GrazeFoodStoreModel">
            <summary>
            paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerPastureLevel.MinimumPastureLevel">
            <summary>
            Minimum pasture level
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerPastureLevel.MaximumPastureLevel">
            <summary>
            Maximum pasture level
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerPastureLevel.ActivityPerformed">
            <summary>
            Notify CLEM that this activity was performed.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerPastureLevel.ActivityDue">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerPastureLevel.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerResourceLevel">
            <summary>
            Activity timer based on resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerResourceLevel.ResourceTypeName">
            <summary>
            Name of resource to check
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerResourceLevel.ResourceTypeModel">
            <summary>
            Resource to check
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerResourceLevel.Operator">
            <summary>
            Operator to filter with
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerResourceLevel.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerResourceLevel.ActivityPerformed">
            <summary>
            Notify CLEM that this activity was performed.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerResourceLevel.ActivityDue">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.Check(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.OnActivityPerformed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerResourceLevel.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerSequence">
            <summary>
            Activity timer sequence
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerSequence.Sequence">
            <summary>
            A defined sequence of true-false to determine when timers are used
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.FormatSequence(System.String)">
            <summary>
            Format sequence provided by user to standard
            </summary>
            <param name="sequence"></param>
            <returns>formatted sequence</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.TimerOK(System.Int32)">
            <summary>
            Determine if the month in sequence is enabled
            </summary>
            <param name="sequenceMonth"></param>
            <returns>Whether timer is enabled</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerSequence.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.BlankActivity">
            <summary>
            Blank activity for passing details
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.GetResourcesNeededForinitialisation">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.CLEMActivityBase">
            <summary>
             CLEM Activity base model
            </summary> 
        </member>
        <member name="F:Models.CLEM.Activities.CLEMActivityBase.Resources">
            <summary>
            A protected link to the CLEM resource holder
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.TransactionCategory">
            <summary>
            Label to assign each transaction created by this activity in ledgers
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.OnPartialResourcesAvailableAction">
            <summary>
            Insufficient resources available action
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.ResourceRequestList">
            <summary>
            Current list of resources requested by this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.ActivityList">
            <summary>
            Current list of activities under this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.Status">
            <summary>
            Current status of this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.AllocationStyle">
            <summary>
            Resource allocation style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.ActivityChildren">
            <summary>
            A list of activity base chldren for this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.ActivityEnabled">
            <summary>
            Current status of this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.FarmMultiplier">
            <summary>
            Multiplier for farms in this zone
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.TimingOK">
            <summary>
            Property to check if timing of this activity is ok based on child and parent ActivityTimers in UI tree
            </summary>
            <returns>T/F</returns>
        </member>
        <member name="E:Models.CLEM.Activities.CLEMActivityBase.ResourceShortfallOccurred">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.CLEMActivityBase.ActivityPerformed">
            <summary>
            Activity performed event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TimingCheck(System.DateTime)">
            <summary>
            Method to check if timing of this activity is ok based on child and parent ActivityTimers in UI tree and a specified date
            </summary>
            <returns>T/F</returns>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.TimingExists">
            <summary>
            Property to check if timing of this activity is ok based on child and parent ActivityTimers in UI tree
            </summary>
            <returns>T/F</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.SetLinkedModels(Models.CLEM.Resources.ResourcesHolder)">
            <summary>
            A method to allow the resource holder to be set when [Link] not possible for dynamically created model
            </summary>
            <param name="resourceHolder">The resource holder to provide</param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.SetStatusSuccess">
            <summary>
            Sets the status of the activity to success if the activity was in fact needed this time step
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetReadersAvailableByName(System.Type[])">
            <summary>
            return a list of components available given the specified types
            </summary>
            <param name="typesToFind">the list of types to locate</param>
            <returns>A list of names of components</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ClearAllAllActivitiesPerformedStatus">
            <summary>
            Method to cascade calls for calling activites performed for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ClearActivitiesPerformedStatus">
            <summary>
            Protected method to cascade clearing of status for all dynamic activities created for this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ReportAllAllActivitiesPerformed">
            <summary>
            Method to cascade calls for calling activites performed for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ReportActivitiesPerformed">
            <summary>
            Protected method to cascade calls for activities performed for all dynamically created activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesForAllActivityInitialisation">
            <summary>
            Method to cascade calls for resources for all activities in the UI tree. 
            Responds to CLEMInitialiseActivity in the Activity model holing top level list of activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesForAllActivityInitialisation">
            <summary>
            Protected method to cascade calls for resources for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesForAllActivities(Models.CLEM.CLEMModel)">
            <summary>
            Method to cascade calls for resources for all activities in the UI tree. 
            Responds to CLEMGetResourcesRequired in the Activity model holing top level list of activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesForAllActivities(Models.CLEM.CLEMModel)">
            <summary>
            protected method to cascade calls for resources for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesRequiredForInitialisation">
            <summary>
            Method to get required resources for initialisation of this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesRequiredForInitialisation">
            <summary>
            Protected method to get required resources for initialisation of this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesRequiredForActivity">
            <summary>
            Method to get this time steps current required resources for this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesRequiredForActivity">
            <summary>
            Protected method to get this time steps current required resources for this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetLabourResourcesNeededForActivity">
            <summary>
            A common method to get the labour resource requests from the activity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.LabourLimitProportion">
            <summary>
            Method to provide the proportional limit based on labour shortfall
            A proportion less than 1 will only be returned if LabourShortfallAffectsActivity is true in the LabourRequirement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.LimitProportion(System.Type)">
            <summary>
            Method to provide the proportional limit based on specified resource type
            A proportion less than 1 will only be returned if LabourShortfallAffectsActivity is true in the LabourRequirement
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.IsLabourLimitSet">
            <summary>
            Method to determine if activity limited based on labour shortfall has been set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TakeLabour(Models.CLEM.Resources.ResourceRequest,System.Boolean,Models.Core.IModel,Models.CLEM.Resources.ResourcesHolder,Models.CLEM.OnPartialResourcesAvailableActionTypes)">
            <summary>
            Method to determine available labour based on filters and take it if requested.
            </summary>
            <param name="request">Resource request details</param>
            <param name="removeFromResource">Determines if only calculating available labour or labour removed</param>
            <param name="callingModel">Model calling this method</param>
            <param name="resourceHolder">Location of resource holder</param>
            <param name="partialAction">Action on partial resources available</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TakeNonLabour(Models.CLEM.Resources.ResourceRequest,System.Boolean)">
            <summary>
            Method to determine available non-labour resources and take if requested.
            </summary>
            <param name="request">Resource request details</param>
            <param name="removeFromResource">Determines if only calculating available labour or labour removed</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.CheckResources(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.ResourceRequest},System.Guid)">
            <summary>
            Determine resources available and perform transmutation if needed.
            </summary>
            <param name="resourceRequests">List of requests</param>
            <param name="uniqueActivityID">Unique id for the activity</param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TakeResources(System.Collections.Generic.List{Models.CLEM.Resources.ResourceRequest},System.Boolean)">
            <summary>
            Try to take the Resources based on Resource Request List provided.
            Returns true if it was able to take the resources it needed.
            Returns false if it was unable to take the resources it needed.
            </summary>
            <param name="resourceRequestList"></param>
            <param name="triggerActivityPerformed"></param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TriggerOnActivityPerformed">
            <summary>
            Method to trigger an Activity Performed event 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TriggerOnActivityPerformed(Models.CLEM.Activities.ActivityStatus)">
            <summary>
            Method to trigger an Activity Performed event 
            </summary>
            <param name="status">The status of this activity to be reported</param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <summary>
            Base method to determine the number of days labour required based on Activity requirements and labour settings.
            Functionality provided in derived classes
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesNeededForActivity">
            <summary>
            Method to determine list of resources and amounts needed. 
            Functionality provided in derived classes
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.AdjustResourcesNeededForActivity">
            <summary>
            Method to adjust activities needed based on shortfalls before they are taken from resource pools. 
            Functionality provided in derived classes
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine list of resources and amounts needed for initilaisation. 
            Functionality provided in derived classes
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.DoActivity">
            <summary>
            Method to perform activity tasks if expected as soon as resources are available
            Functionality provided in derived classes
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.OnActivityPerformed(System.EventArgs)">
            <summary>
            Activity has occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.GetDaysLabourRequiredReturnArgs">
            <summary>
            Structure to return values form a labour days request
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.GetDaysLabourRequiredReturnArgs.#ctor(System.Double,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="daysNeeded"></param>
            <param name="category"></param>
            <param name="relatesToResource"></param>
        </member>
        <member name="P:Models.CLEM.Activities.GetDaysLabourRequiredReturnArgs.DaysNeeded">
            <summary>
            Calculated days needed
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.GetDaysLabourRequiredReturnArgs.Category">
            <summary>
            Transaction category
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.GetDaysLabourRequiredReturnArgs.RelatesToResource">
            <summary>
            Transacation relates to resource
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityStatus">
            <summary>
            Status of activity
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Success">
            <summary>
            Performed with all resources available
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Partial">
            <summary>
            Performed with partial resources available
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Ignored">
            <summary>
            Insufficient resources so activity ignored
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Critical">
            <summary>
            Insufficient resources so simulation stopped
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Timer">
            <summary>
            Indicates a timer occurred successfully
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Calculation">
            <summary>
            Indicates a calculation event occurred
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.NotNeeded">
            <summary>
            Indicates activity occurred but was not needed
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Warning">
            <summary>
            Indicates activity caused a warning and was not performed
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.NoTask">
            <summary>
            Indicates activity was place holder or parent activity
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceAllocationStyle">
            <summary>
            Status of activity
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ResourceAllocationStyle.Automatic">
            <summary>
            Automatically perform in CLEMGetResourcesRequired
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ResourceAllocationStyle.Manual">
            <summary>
            Manually perform in activity code.
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.CLEMRuminantActivityBase">
            <summary>
             CLEM ruminant specific activity base model
             This has the ability of identify herd to be used.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.HerdFilters">
            <summary>
            List of filters that define the herd
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.PredictedHerdName">
            <summary>
            Herd name determined for this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.PredictedHerdBreed">
            <summary>
            Breed determined for this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.HerdResource">
            <summary>
            The herd resource for this simulation
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.InitialiseHerd(System.Boolean,System.Boolean)">
            <summary>
            Method to get the set herd filters
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.GetHerdFilters">
            <summary>
            Method to get the set herd filters
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.GetChildComponentIdentifiers``1">
            <summary>
            A method to get a list of activity specified identifiers for a generic type T add by the user
            </summary>
            <returns>A list of identifiers as strings</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.DefineChildComponentGroups``1(System.Boolean)">
            <summary>
            Create a dictionary of groups of components by identifier provided by the parent model
            </summary>
            <typeparam name="T">Type of component to consider</typeparam>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.GetIndividuals``1(Models.CLEM.GetRuminantHerdSelectionStyle,System.Collections.Generic.List{Models.CLEM.HerdChangeReason},System.Boolean,System.Boolean)">
            <summary>
            Get individuals of specified type in current herd
            </summary>
            <typeparam name="T">The type of individuals to return</typeparam>
            <param name="herdStyle">Overall style of individuals selected. Default NotForSale</param>
            <param name="excludeFlags">A list of HerdChangeReasons to exclude individuals matching flag. Default null</param>
            <param name="predictedBreedOnly">Flag to only return the single predicted breed for this activity. Default is true</param>
            <param name="includeCheckHerdMeetsCriteria">Perform check and report issues. Only expected once per activity or if herd changing. Default false</param>
            <returns>A list of individuals in the herd</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.CurrentHerd(System.Boolean)">
            <summary>
            Gets the current herd from all herd filters above
            </summary>
            <param name="includeCheckHerdMeetsCriteria">Perfrom check and report issues. Only once per activity. Default is false.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.DetermineHerdName">
            <summary>
            Determines the herd name from individuals available, filter details or resources
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.CheckHerd">
            <summary>
            Method to check single breed status of herd for activities.
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityFee">
            <summary>Crop cost</summary>
            <summary>This activity will arrange payment of a crop task expense</summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityFee.AccountName">
            <summary>
            Account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityFee.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityFee.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityFee.BankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>At start of simulation</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityManageCrop">
            <summary>Grow management activity</summary>
            <summary>This activity sets aside land for the crop(s)</summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.LandItemNameToUse">
            <summary>
            Land type where crop is to be grown
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.AreaRequested">
            <summary>
            Area of land requested
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.UseAreaAvailable">
            <summary>
            Use unallocated available
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.Area">
            <summary>
            Area of land actually received (maybe less than requested)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.LinkedLandItem">
            <summary>
            Land item
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.OnFinalInitialiseForCrop(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to make checks after resources and activities initialised.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.RotateCrop">
            <summary>
            Method to rotate to the next crop in the list
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.AdjustLand(Models.CLEM.Activities.CropActivityManageProduct)">
            <summary>
            Method to adjust area planted if crop has a area planted multiplier
            </summary>
            <param name="cropProduct">The crop product details to define final land area</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityManageProduct">
            <summary>The child of Manage crop to manage a particular product harvested</summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.ModelNameFileCrop">
            <summary>
            Name of the model for the crop input file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.CropName">
            <summary>
            Name of crop in file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.StoreItemName">
            <summary>
            Store to put crop growth into
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.ProportionKept">
            <summary>
            Proportion of the crop harvest that is available
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.PlantedMultiplier">
            <summary>
            Proportion of the crop area (of parent ManageCrop) used
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.TreesPerHa">
            <summary>
            Number of Trees per Hectare 
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.CropActivityManageProduct.IsTreeCrop">
            <summary>
            Is this a tree crop.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.LinkedResourceItem">
            <summary>
            resource item
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.HarvestData">
            <summary>
            Harvest Data retrieved from the Forage File.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.StartCurrentSequenceHarvest">
            <summary>
            Stores the start of current crop harvest sequence
            Using first harvest if HarvestType provided
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.EndCurrentSequenceHarvest">
            <summary>
            Stores the end of current crop harvest sequence
            Using last harvest if HarvestType provided
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.NextHarvest">
            <summary>
            Stores the next harvest details
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.UnitsToHaConverter">
            <summary>
            Units to Hectares converter from Land type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.AmountHarvested">
            <summary>
            Amount harvested this timestep after limiter accounted for
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.AmountAvailableForHarvest">
            <summary>
            Amount available for harvest from crop file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.HarvestTagsUsed">
            <summary>
            Flag for determining if flagged harvest types have been provided
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.InsideMultiHarvestSequence">
            <summary>
            Flag for determining if flagged harvest types have been provided
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.CurrentlyManaged">
            <summary>
            Flag for determining if this crop is currently being managed in cropping system e.g. rotation
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.HarvestOffset">
            <summary>
            The offset from previous, current and last harvests in months
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.Harvests">
            <summary>
            The various harvests in sequence in which to make decisions
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMStartOfTimeStepDoRotations(System.Object,System.EventArgs)">
            <summary>
            Method to arrange any outstanding rotation before we start time step
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>
            Function to get the next harvest date from data
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.CalculateYearMonth(System.DateTime)">
            <summary>
            Method to calulate the year month integer for this date
            </summary>
            <param name="date">date to process</param>
            <returns>year month integer</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMUpdatePasture(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to get next supply of pasture</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMDoCutAndCarry(System.Object,System.EventArgs)">
            <summary>An event handler for a Cut and Carry</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.LocateCutAndCarryLimiter(Models.Core.IModel)">
            <summary>
            Method to locate a ActivityCutAndCarryLimiter
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityTask">
            <summary>Crop activity task</summary>
            <summary>This activity will perform costs and labour for a crop activity</summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.OnGetResourcesRequired(System.Object,System.EventArgs)">
            <summary>An event handler to allow to call all Activities in tree to request their resources in order.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.FinanceActivityCalculateInterest">
            <summary>Interest calculation activity</summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.FinanceActivityIncome">
            <summary>Activity to arrange income into an account
            </summary>
            <version>1.0</version>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityIncome.Amount">
            <summary>
            Amount earned
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityIncome.AccountName">
            <summary>
            Account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityIncome.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityIncome.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityIncome.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityIncome.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.FinanceActivityPayExpense">
            <summary>Activity to arrange and pay an enterprise expenses
            </summary>
            <version>1.0</version>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityPayExpense.Amount">
            <summary>
            Amount payable
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityPayExpense.AccountName">
            <summary>
            Account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.GrazeBreedPoolLimit">
            <summary>
            The proportional intake limit for a given pool by breed
            This class is used internally in pasture grazing activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.GrazeBreedPoolLimit.Limit">
            <summary>
            Proportion of intake limit for pool
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.GrazeBreedPoolLimit.Pool">
            <summary>
            Pool that this limit applies to
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityFeed">
            <summary>Labour (Human) feed activity</summary>
            <summary>This activity provides food to specified people based on a feeding style</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeed.FeedTypeName">
            <summary>
            Name of Human Food to use (with Resource Group name appended to the front [separated with a '.'])
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeed.FeedStyle">
            <summary>
            Feeding style to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeed.FeedType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeed.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityFeedTarget">
            <summary>
             Target for feed activity
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.Metric">
            <summary>
            Name of metric for this target
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.TargetValue">
            <summary>
            Target level
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.TargetMaximumValue">
            <summary>
            Target max level
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.OtherSourcesValue">
            <summary>
            Amount from other sources
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.Target">
            <summary>
            Current target
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.TargetMaximum">
            <summary>
            Current target
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.CurrentAchieved">
            <summary>
            Stored level achieved
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.TargetAchieved">
            <summary>
            Has target been achieved
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTarget.TargetMaximumAchieved">
            <summary>
            Has target maximum been achieved
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedTarget.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedTarget.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityFeedTargetPurchase">
            <summary>
             Target for feed activity purchases
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTargetPurchase.FoodStoreName">
            <summary>
            Name of food store
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTargetPurchase.TargetProportion">
            <summary>
            Proportional purchase
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTargetPurchase.ProportionToPurchase">
            <summary>
            The final proportion to use. 
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedTargetPurchase.FoodStore">
            <summary>
            The human food store linked to this target purchase
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedTargetPurchase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedTargetPurchase.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityFeedToTargets">
            <summary>Labour feed to specified targets activity</summary>
            <summary>This activity provides food to people from the whole available human food store based on defined nutritional targets</summary>
            <version>1.0</version>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.IncludeHiredLabour">
            <summary>
            Feed hired labour as well as household
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.DailyIntakeLimit">
            <summary>
            Daily intake limit
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.DailyIntakeOtherSources">
            <summary>
            Daily intake from sources other than modelled in Human Food Store
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.SellExcess">
            <summary>
            Undertake managed sales to reserve level
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.AccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.MonthsStorage">
            <summary>
            Storage reserves to maintain before sales
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityFeedToTargets.Market">
            <summary>
            Name of market if present.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.OnCLEMAnimalSell(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to sell excess resources.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate component
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityFeedToTargets.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityOffFarm">
            <summary>
            Off farm labour activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityOffFarm.BankAccountName">
            <summary>
            Bank account name to pay to
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this component before simulation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityPayHired">
            <summary>Activity to arrange payment of hired labour at start of CLEM timestep
            Labour can be limited by shortfall
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityPayHired.AccountName">
            <summary>
            Account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityPayHired.PaymentCalculationStyle">
            <summary>
            Pay labour calculation style
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to organise payment at start of timestep.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to organise payment at start of timestep.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityPayHired.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityTask">
            <summary>Labour activity task</summary>
            <summary>Defines a labour activity task with associated costs</summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityTask.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityTask.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityTask.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityTask.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourRequirement">
            <summary>
             Defines the labour required for an activity
            </summary> 
        </member>
        <member name="F:Models.CLEM.Activities.LabourRequirement.Resources">
            <summary>
            Link to resources
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourRequirement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.LabourPerUnit">
            <summary>
            Days labour required per unit or fixed (days)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.UnitSize">
            <summary>
            Size of unit
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.WholeUnitBlocks">
            <summary>
            Whole unit blocks only
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.UnitType">
            <summary>
            Labour unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.LimitStyle">
            <summary>
            Labour limit style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.MaximumPerGroup">
            <summary>
            Maximum labour allocated per labour group
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.MinimumPerPerson">
            <summary>
            Minimum labour allocated per person for task
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.MaximumPerPerson">
            <summary>
            Maximum labour allocated per person for task
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.LabourShortfallAffectsActivity">
            <summary>
            Allow labour shortfall to affect activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.ApplyToAll">
            <summary>
            Apply to all matching labour (everyone performs activity)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.MaximumDaysPerPerson">
            <summary>
            Get the calculated maximum days per person for activity from CalculateLimits
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.MaximumDaysPerGroup">
            <summary>
            Get the calculated maximum days per person for activity from CalculateLimits
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirement.MinimumDaysPerPerson">
            <summary>
            Get the calculated maximum days per person for activity from CalculateLimits
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourRequirement.CalculateLimits(System.Double)">
            <summary>
            Calcuate the limits for people and groups using the style
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourRequirement.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.LabourRequirement.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourRequirement.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.LabourRequirement.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.LabourRequirementNoUnitSize">
            <summary>
             Defines the labour required for an activity where unit size is provided by the parent activity
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirementNoUnitSize.UnitSize">
            <summary>
            Size of unit
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.LabourRequirementSimple">
            <summary>
             Defines the labour required for an Activity where details are provided by the Activity
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirementSimple.UnitSize">
            <summary>
            Size of unit
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirementSimple.LabourPerUnit">
            <summary>
            Days labour required per unit or fixed (days)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourRequirementSimple.UnitType">
            <summary>
            Labour unit type
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.ManureActivityCollectAll">
            <summary>Ruminant manure collection activity</summary>
            <summary>This activity performs the collection of all manure</summary>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectAll.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectAll.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectAll.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectAll.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectAll.OnCLEMCollectManure(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to perform manure collection</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectAll.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ManureActivityCollectPaddock">
            <summary>Ruminant collec manure activity</summary>
            <summary>This occurs from a specified paddock</summary>
        </member>
        <member name="P:Models.CLEM.Activities.ManureActivityCollectPaddock.GrazeFoodStoreTypeName">
            <summary>
            Name of paddock or pasture to collect from (blank is yards)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectPaddock.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectPaddock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectPaddock.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectPaddock.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectPaddock.OnCLEMCollectManure(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to collect manure</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ManureActivityCollectPaddock.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsActivityBreed">
            <summary>Other animals breed activity</summary>
            <summary>This activity handles breeding in other animals types</summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.AnimalType">
            <summary>
            name of other animal type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.OffspringPerBreeder">
            <summary>
            Offspring per female breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.CostPerBreeder">
            <summary>
            Cost per female breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.BreedingAge">
            <summary>
            Breeding female age
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.UseLocalMales">
            <summary>
            Use local males for breeding
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.OtherAnimalsActivityBreed.SelectedOtherAnimalsType">
            <summary>
            The Other animal type this group points to
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.NextDueDate">
            <summary>
            Month this timer is next due.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.OnCLEMAnimalBreeding(System.Object,System.EventArgs)">
            <summary>An event handler to perform herd breeding </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsActivityFeed">
            <summary>Other animals feed activity</summary>
            <summary>This activity provides food to specified other animals based on a feeding style</summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.FeedTypeName">
            <summary>
            Name of Feed to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.FeedStyle">
            <summary>
            Feeding style to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.FeedType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsFeedActivityTypes">
            <summary>
            Ruminant feeding styles
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.OtherAnimalsFeedActivityTypes.SpecifiedDailyAmount">
            <summary>
            Feed specified amount daily in selected months
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.OtherAnimalsFeedActivityTypes.ProportionOfWeight">
            <summary>
            Feed proportion of animal weight in selected months
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsActivityGrow">
            <summary>Other animals grow activity</summary>
            <summary>This activity grows other animals and includes aging</summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityGrow.OtherAnimalType">
            <summary>
            Name of Other Animal Type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Method to age other animals
            This needs to be undertaken prior to herd management
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.Activities.PastureActivityBurn">
            <summary>Activity to perform controlled burning of native pastures</summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityBurn.MinimumProportionGreen">
            <summary>
            Minimum proportion green for fire to carry
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityBurn.PaddockName">
            <summary>
            Name of graze food store/paddock to burn
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityBurn.MethaneStoreName">
            <summary>
            Methane store for emissions
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityBurn.NitrousOxideStoreName">
            <summary>
            Nitrous oxide store for emissions
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.PastureActivityCutAndCarry">
            <summary>Activity to perform manual cut and carry from a pasture</summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityCutAndCarry.PaddockName">
            <summary>
            Name of graze food store/paddock to cut and carry from
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityCutAndCarry.AnimalFoodStoreName">
            <summary>
            Animal food store to receive pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityCutAndCarry.CutStyle">
            <summary>
            Cut and carry amount type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityCutAndCarry.Supply">
            <summary>
            Value to supply
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityCutAndCarry.AmountHarvested">
            <summary>
            Amount harvested this timestep after limiter accounted for
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityCutAndCarry.AmountAvailableForHarvest">
            <summary>
            Amount available for harvest from crop file
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.OnCLEMDoCutAndCarry(System.Object,System.EventArgs)">
            <summary>An event handler for a Cut and Carry</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.LocateCutAndCarryLimiter(Models.Core.IModel)">
            <summary>
            Method to locate a ActivityCutAndCarryLimiter
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityCutAndCarry.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.PastureActivityManage">
            <summary>Pasture management activity</summary>
            <summary>This activity provides a pasture based on land unit, area and pasture type</summary>
            <summary>Ruminant move activities place individuals in the paddack after which they will graze pasture for the paddock stored in the PastureP Pools</summary>
            <version>1.0</version>
            <updates>First implementation of this activity using NABSA grazing processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LandTypeNameToUse">
            <summary>
            Land type where pasture is located
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.FeedTypeName">
            <summary>
            Pasture type to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.PastureDataReader">
            <summary>
            Name of the model for the pasture input file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.StartingStockingRate">
            <summary>
            Starting stocking rate (Adult Equivalents/square km)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.Area">
            <summary>
            Area of pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LandConditionIndex">
            <summary>
            Current land condition index
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.GrassBasalArea">
            <summary>
            Grass basal area
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.AreaRequested">
            <summary>
            Area requested
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.UseAreaAvailable">
            <summary>
            Use unallocated available
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LinkedNativeFoodType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LinkedLandItem">
            <summary>
            Land item
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to intitalise this activity just once at start of simulation</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMUpdatePasture(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to get next supply of pasture</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMCalculateEcologicalState(System.Object,System.EventArgs)">
            <summary>
            Function to calculate ecological indicators. 
            By summing the monthly stocking rates so when you do yearly ecological calculation 
            you can get average monthly stocking rate for the whole year.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.CalculateEcologicalIndicators">
            <summary>
            Method to perform calculation of all ecological indicators.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.GetPastureDataList_TodayToNextEcolCalculation">
            <summary>
            From Pasture File get all the Pasture Data from today to the next Ecological Calculation
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceActivityBuy">
            <summary>
            Activity to buy resources
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityBuy.AccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityBuy.ResourceTypeName">
            <summary>
            Resource type to buy
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityBuy.Units">
            <summary>
            Units to purchase
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityBuy.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceActivityFee">
            <summary>Resource cost</summary>
            <summary>This activity will arrange payment of a resource activity expense</summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityFee.TransactionCategory">
            <summary>
            Label to assign each transaction created by this activity in ledgers
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityFee.AccountName">
            <summary>
            Account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityFee.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityFee.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityFee.BankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityFee.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityFee.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityFee.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceActivityManageExternal">
            <summary>
            Activity to manage external resources from resource reader
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityManageExternal.ResourceDataReader">
            <summary>
            Name of the model for the resource input file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityManageExternal.AccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityManageExternal.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceActivityProcess">
            <summary>
            Activity to processes one resource into another resource with associated labour and costs
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityProcess.ResourceTypeProcessedName">
            <summary>
            Resource type to process
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityProcess.ResourceTypeCreatedName">
            <summary>
            Resource type created
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityProcess.ConversionRate">
            <summary>
            Conversion rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityProcess.Reserve">
            <summary>
            Reserve
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityProcess.resourceTypeProcessModel">
            <summary>
            Resource to process
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivityProcess.resourceTypeCreatedModel">
            <summary>
            Resource created
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivityProcess.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceActivitySell">
            <summary>
            Activity to price and sell resources
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.AccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.ResourceTypeName">
            <summary>
            Resource type to sell
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.SellStyle">
            <summary>
            Resource sell style to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.Value">
            <summary>
            Value based on selling style
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.unitsAvailableForSale">
            <summary>
            Gets the number of units available for sale
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityBreed">
            <summary>Ruminant breeding activity</summary>
            <summary>This activity provides all functionality for ruminant breeding up until natural weaning</summary>
            <summary>It will be applied to the supplied herd if males and females are located together</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBreed.useControlledMating">
            <summary>
            Artificial insemination in use (defined by presence of add-on component)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBreed.NumberConceived">
            <summary>
            Records the number of individuals that conceived in the BreedingEvent for sub-components to work with.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBreed.InferStartupPregnancy">
            <summary>
            Infer pregnancy status at startup
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.OnCLEMAnimalBreeding(System.Object,System.EventArgs)">
            <summary>An event handler to perform herd breeding </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.AddMalesAttributeDetails(Models.CLEM.Resources.RuminantFemale,System.Collections.Generic.List{Models.CLEM.Resources.SetAttributeWithValue},System.Boolean)">
            <summary>
            A method to add the available male attributes to the female store at mating using attributes supplied by controlled mating 
            </summary>
            <param name="female">The female breeder successfully mated</param>
            <param name="maleAttributes">a list of available male attributes setters</param>
            <param name="newMale">Create new instance (T) or use last created (F)</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.AddMalesAttributeDetails(Models.CLEM.Resources.RuminantFemale,Models.CLEM.Resources.Ruminant)">
            <summary>
            A method to add the male attributes to the female attribute store at mating
            </summary>
            <param name="female">The female breeder successfully mated</param>
            <param name="male">The mated male</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.ConceptionRate(Models.CLEM.Resources.RuminantFemale,Models.CLEM.Reporting.ConceptionStatus@)">
            <summary>
            Calculate conception rate for a female
            </summary>
            <param name="female">Female to calculate conception rate for</param>
            <param name="status">Returns conception status</param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBreed.TimingOK">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityBuySell">
            <summary>Ruminant sales activity</summary>
            <summary>This activity undertakes the sale and transport of any individuals flagged for sale.</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBuySell.BankAccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnCLEMAnimalBuy(System.Object,System.EventArgs)">
            <summary>An event handler to call for animal purchases</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnCLEMAnimalSell(System.Object,System.EventArgs)">
            <summary>An event handler to call for animal sales</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityControlledMating">
            <summary>
            Adds artificial insemination to Ruminant breeding
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityControlledMating.MaximumAgeMating">
            <summary>
            Maximum age for mating (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityControlledMating.JoiningsPerMale">
            <summary>
            Number joinings per male
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityControlledMating.SireAttributes">
            <summary>
            The available attributes for the breeding sires
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to perfrom actions needed at the start of the time step</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.GetBreeders">
            <summary>
            Provide the list of all breeders currently available
            </summary>
            <returns>A list of breeders to work with before returning to the breed activity</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.BreedersToMate">
            <summary>
            Provide the list of breeders to mate accounting for the controlled mating failure rate, and required resources
            </summary>
            <returns>A list of breeders for the breeding activity to work with</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.GetResourcesNeededForActivityLocal(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.Ruminant})">
            <summary>
            Private method to determine resources required for this activity in the current month
            This method is local to this activity and not called with CLEMGetResourcesRequired event
            </summary>
            <param name="breederList">The breeders being mated</param>
            <returns>List of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <summary>
            Determine the labour required for this activity based on LabourRequired items in tree
            </summary>
            <param name="requirement">Labour requirement model</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityControlledMating.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityFee">
            <summary>Ruminant herd cost </summary>
            <summary>This activity will arrange payment of a herd expense such as vet fees</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFee.BankAccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFee.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFee.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFee.TransactionCategory">
            <summary>
            Label to assign each transaction created by this activity in ledgers
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityFee.BankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFee.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFee.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFee.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityFeed">
            <summary>Ruminant feed activity</summary>
            <summary>This activity provides food to specified ruminants based on a feeding style</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.FeedTypeName">
            <summary>
            Name of Feed to use (with Resource Group name appended to the front [separated with a '.'])
            eg. AnimalFoodStore.RiceStraw
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.ProportionTramplingWastage">
            <summary>
            Proportion wasted (e.g. trampling, 0 = feed trough present)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.FeedStyle">
            <summary>
            Feeding style to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.StopFeedingWhenSatisfied">
            <summary>
            Stop feeding when animals are satisfied
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.FeedType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrazeAll">
            <summary>Ruminant graze activity</summary>
            <summary>This activity determines how a ruminant group will graze</summary>
            <summary>It is designed to request food via a food store arbitrator</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazeAll.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrazePasture">
            <summary>Ruminant graze activity</summary>
            <summary>This activity determines how a ruminant group will graze</summary>
            <summary>It is designed to request food via a food store arbitrator</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityGrazePasture.Clock">
            <summary>
            Link to clock
            Public so children can be dynamically created after links defined
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePasture.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePasture.GrazeFoodStoreTypeName">
            <summary>
            Paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePasture.GrazeFoodStoreModel">
            <summary>
            paddock or pasture to graze
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrazePastureHerd">
            <summary>Ruminant grazing activity</summary>
            <summary>Specific version where pasture and breed is specified</summary>
            <summary>This activity determines how a ruminant breed will graze on a particular pasture (GrazeFoodSotreType)</summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.Clock">
            <summary>
            Link to clock
            Public so children can be dynamically created after links defined
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GrazeFoodStoreTypeName">
            <summary>
            Paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GrazeFoodStoreModel">
            <summary>
            paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.RuminantTypeName">
            <summary>
            Ruminant group to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.RuminantTypeModel">
            <summary>
            Ruminant group to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GrazingCompetitionLimiter">
            <summary>
            The proportion of required graze that is available determined from parent activity arbitration
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.BiomassPerHectare">
            <summary>
            The biomass of pasture per hectare at start of allocation
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.PotentialIntakePastureQualityLimiter">
            <summary>
            Potential intake limiter based on pasture quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.DMD">
            <summary>
            Dry matter digestibility of pasture consumed (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.N">
            <summary>
            Nitrogen of pasture consumed (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.PoolFeedLimits">
            <summary>
            Proportion of intake that can be taken from each pool
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.OnStartOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to clear requests at start of month.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GetResourcesRequiredForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.CalculatePotentialIntakePastureQualityLimiter">
            <summary>
            Calculate the potential intake limiter based on pasture quality.
            </summary>
            <returns>Limiter as proportion</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.SetupPoolsAndLimits(System.Double)">
            <summary>
            Method to set up pools from currently available graze pools and limit based upon green content herd limit parameters
            </summary>
            <param name="limit">The competition limit defined from GrazePasture parent</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrow">
            <summary>Ruminant growth activity</summary>
            <summary>This activity determines potential intake for the Feeding activities and feeding arbitrator for all ruminants</summary>
            <summary>This activity includes deaths</summary>
            <summary>See Breed activity for births, suckling mortality etc</summary>
            <version>1.1</version>
            <updates>First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrow.EnergyGross">
            <summary>
            Gross energy content of forage (MJ/kg DM)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrow.MethaneStoreName">
            <summary>
            Methane store for emissions
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrow.OnPartialResourcesAvailableAction">
            <summary>
            Perform Activity with partial resources available
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>Function to determine naturally wean individuals at start of timestep</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMPotentialIntake(System.Object,System.EventArgs)">
            <summary>Function to determine all individuals potential intake and suckling intake after milk consumption from mother</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.CalculateMilkProduction(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Set the milk production of the selected female given diet drymatter digesibility
            </summary>
            <param name="ind">Female individual</param>
            <returns>energy of milk</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMAnimalWeightGain(System.Object,System.EventArgs)">
            <summary>Function to calculate growth of herd for the monthly timestep</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMCalculateManure(System.Object,System.EventArgs)">
            <summary>
            Function to calculate manure production and place in uncollected manure pools of the "manure" resource in ProductResources 
            This is called at the end of CLEMAnimalWeightGain so after intake determines and before deaths and sales.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.CalculateEnergy(Models.CLEM.Resources.Ruminant,System.Double@)">
            <summary>
            Function to calculate energy from intake and subsequent growth
            </summary>
            <param name="ind">Ruminant individual class</param>
            <param name="methaneProduced">Sets output variable to value of methane produced</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age individuals and remove those that died in timestep
            This needs to be undertaken prior to herd management
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMAnimalDeath(System.Object,System.EventArgs)">
            <summary>Function to determine which animlas have died and remove from the population</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityHerdCost">
            <summary>Ruminant herd cost </summary>
            <summary>This activity will arrange payment of a herd expense such as vet fees</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityHerdCost.Amount">
            <summary>
            Amount payable
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityHerdCost.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityHerdCost.AccountName">
            <summary>
            Bank account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityManage">
            <summary>Ruminant herd management activity</summary>
            <summary>This activity will maintain a breeding herd at the desired levels of age/breeders etc</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.ManageFemaleBreederNumbers">
            <summary>
            Manage female breeder numbers
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumBreedersKept">
            <summary>
            Maximum number of breeders that can be kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MinimumBreedersKept">
            <summary>
            Minimum number of breeders that can be kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaxBreedersMultiplierToStop">
            <summary>
            Stop model if breeder herd exceeds maximum breeders times this multiplier
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MarkOldBreedersForSale">
            <summary>
            Include the marking for sale of old breeders in this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumBreederAge">
            <summary>
            Maximum breeder age (months) for removal
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumProportionBreedersPerPurchase">
            <summary>
            Proportion of min breeders in single purchase
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.ReturnPregnantMaxAgeToHerd">
            <summary>
            Proportion of min breeders in single purchase
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.RetainFemaleReplacementBreedersFromSaleHerd">
            <summary>
            Retain female replacement breeders marked for sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.ManageMaleBreederNumbers">
            <summary>
            Manage male breeder numbers
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumSiresKept">
            <summary>
            Maximum number of breeding sires kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.SiresKept">
            <summary>
            Calculated sires kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MarkOldSiresForSale">
            <summary>
            Include the marking for sale of sires in this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumSireAge">
            <summary>
            Maximum sire age (months) for removal
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.AllowSireReplacement">
            <summary>
            Allow natural herd replacement of sires
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.RestockSiresRelativeToBreeders">
            <summary>
            Set sire herd to purchase relative to proportion of breeder herd present
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumSiresPerPurchase">
            <summary>
            Maximum number of sires in a single purchase
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.RetainMaleReplacementBreedersFromSaleHerd">
            <summary>
            Retain male replacement breeders marked for sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrowOutYoungMales">
            <summary>
            Perfrom growing out of males
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.ContinuousGrowOutSales">
            <summary>
            Identify males for sale every time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MarkAgeWeightMalesForSale">
            <summary>
            Include the marking for sale of males reaching age or weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.CastrateMales">
            <summary>
            Castrate grow out males (steers, bullocks)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaleSellingAge">
            <summary>
            Male selling age (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaleSellingWeight">
            <summary>
            Male selling weight (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrowOutYoungFemales">
            <summary>
            Perform selling of young females the same as males
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.FemaleSellingAge">
            <summary>
            Female selling age (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.FemaleSellingWeight">
            <summary>
            Female selling weight (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MarkAgeWeightFemalesForSale">
            <summary>
            Include the marking for sale of males reaching age or weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrazeFoodStoreNameSires">
            <summary>
            GrazeFoodStore (paddock) to place purchased sires in for grazing
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrazeFoodStoreNameBreeders">
            <summary>
            GrazeFoodStore (paddock) to place purchased breeders in for grazing
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrazeFoodStoreNameGrowOutFemales">
            <summary>
            GrazeFoodStore (paddock) to place grow out heifers in for grazing
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrazeFoodStoreNameGrowOutMales">
            <summary>
            GrazeFoodStore (paddock) to place grow out young males in for grazing
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MinimumPastureBeforeRestock">
            <summary>
            Minimum pasture (kg/ha) before restocking if placed in paddock
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.AdjustBreedingFemalesAtStartup">
            <summary>
            Adjust breeding females up to required amount at start-up
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.AdjustBreedingMalesAtStartup">
            <summary>
            Adjust breeding males up to required amount at start-up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.GetChildComponentIdentifiers``1">
            <summary>
            A method to get a list of activity specified identifiers for RuminantGroups add by the user
            </summary>
            <returns>A list of identifiers as strings</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnFinalInitialise(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to make checks after resources and activities initialised.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnCLEMAnimalManage(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnCLEMEndOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.ChildrenToIgnoreInSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.SpecifiedRuminantListItem">
            <summary>
            An individual purchase details provided by list of SpecifyRuminant components 
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.SpecifiedRuminantListItem.Index">
            <summary>
            List index
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.SpecifiedRuminantListItem.ExampleRuminant">
            <summary>
            Ruminant example
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.SpecifiedRuminantListItem.SpecifyRuminantComponent">
            <summary>
            The specify ruminant component 
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.SpecifiedRuminantListItem.CummulativeProbability">
            <summary>
            Cummulative probability of this one being picked
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityMarkForSale">
            <summary>Mark specified individual ruminants for sale.</summary>
            <summary>This activity is in addition to those identified in RuminantActivityManage</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMarkForSale.SaleFlagToUse">
            <summary>
            Sale flag to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMarkForSale.OverwriteFlag">
            <summary>
            Overwrite any currently recorded sale flag
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.GetResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.OnCLEMAnimalMark(System.Object,System.EventArgs)">
            <summary>An event handler to call for changing stocking based on prediced pasture biomass</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMarkForSale.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityMilking">
            <summary>Activity to undertake milking of particular herd</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMilking.ResourceTypeName">
            <summary>
            Resource type to store milk in
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnCLEMMilkProduction(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnCLEMMilking(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityMove">
            <summary>Ruminant moving activity</summary>
            <summary>This activity moves specified ruminants to a given pasture</summary>
            <version>1.0</version>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMove.ManagedPastureName">
            <summary>
            Managed pasture to move to
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMove.PerformAtStartOfSimulation">
            <summary>
            Determines whether this must be performed to setup herds at the start of the simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMove.MoveSucklings">
            <summary>
            Determines whether sucklings are automatically moved with the mother or separated
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMove.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMove.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMove.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMove.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMove.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMove.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityPredictiveStocking">
            <summary>Ruminant predictive stocking activity</summary>
            <summary>This activity ensures the total herd size is acceptible to graze the dry season pasture</summary>
            <summary>It is designed to consider individuals already marked for sale and add additional individuals before transport and sale.</summary>
            <summary>It will check all paddocks that the specified herd are grazing</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.AssessmentMonth">
            <summary>
            Month for assessing dry season feed requirements
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.DrySeasonLength">
            <summary>
            Number of months to assess
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.FeedLowLimit">
            <summary>
            Minimum estimated feed (kg/ha) allowed at end of period
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.PasturePredicted">
            <summary>
            Predicted pasture at end of assessment period
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.PastureShortfall">
            <summary>
            Predicted pasture shortfall at end of assessment period
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.AeToDestock">
            <summary>
            AE to destock
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.AeDestocked">
            <summary>
            AE destocked
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.AeShortfall">
            <summary>
            AE destock shortfall
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnCLEMAnimalStock(System.Object,System.EventArgs)">
            <summary>An event handler to call for changing stocking based on prediced pasture biomass</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStocking.ReportStatus">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnReportStatus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO">
            <summary>Ruminant predictive stocking activity using ENSO predictions</summary>
            <summary>This activity will undertake stocking and destocking based on future season predictions (La Nini or El Nino)</summary>
            <summary>It is designed to consider individuals already marked for sale and add additional individuals before transport and sale.</summary>
            <summary>It will check all paddocks that the specified herd are grazing</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.MonthlySOIFile">
            <summary>
            File containing SOI measure from BOM http://www.bom.gov.au/climate/influences/timeline/
            Year Jan Feb Mar.....
            1876 11  0.2 -3  +ve LaNina -ve El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AssessMonths">
            <summary>
            Number of previous months to consider
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.SOIForLaNina">
            <summary>
            Mean SOI value before considered La Niña
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.SOIForElNino">
            <summary>
            Mean  SOI value before considered El Niño
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.MinimumFeedBeforeRestock">
            <summary>
            Minimum estimated feed (kg/ha) before restocking
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AeToDestock">
            <summary>
            AE to destock
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AeDestocked">
            <summary>
            AE destocked
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AeShortfall">
            <summary>
            AE destock shortfall
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AeToRestock">
            <summary>
            AE to restock
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AeRestocked">
            <summary>
            AE restocked
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.OnCLEMAnimalStock(System.Object,System.EventArgs)">
            <summary>An event handler to call for all resources other than food for feeding activity</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.HandleDestocking(System.Double,System.String)">
            <summary>
            Method to perform destocking
            </summary>
            <param name="animalEquivalentsForSale"></param>
            <param name="paddockName"></param>
            <returns>The AE that were not handled</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.ENSOState">
            <summary>
            ENSO state
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ENSOState.Neutral">
            <summary>
            Neutral conditions
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ENSOState.ElNino">
            <summary>
            El Nino conditions
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ENSOState.LaNina">
            <summary>
            La Nina conditions
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityShear">
            <summary>Ruminant shear activity</summary>
            <summary>This activity shears the specified ruminants and placed clip in a store</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityShear.ProductStoreName">
            <summary>
            Name of Product store to place clip (with Resource Group name appended to the front [separated with a '.'])
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityShear.StoreType">
            <summary>
            Produc store for clip
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityShear.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityShear.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityShear.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityShear.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityShear.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityShear.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityTag">
            <summary>Add or remove a tag to specified individual ruminants</summary>
            <version>1.0</version>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTag.TagLabel">
            <summary>
            Tag label
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTag.ApplicationStyle">
            <summary>
            Application style - add or remove tag
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.AdjustResourcesNeededForActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.DoActivity">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.OnCLEMAnimalMark(System.Object,System.EventArgs)">
            <summary>An event handler to call for performing all marking for sale, tagging and weaning</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTag.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityTrade">
            <summary>Manage trade herd activity</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTrade.MinMonthsKept">
            <summary>
            Months kept before sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTrade.TradeWeight">
            <summary>
            Weight to achieve before sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTrade.GrazeFoodStoreName">
            <summary>
            GrazeFoodStore (paddock) to place purchases in for grazing
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.OnCLEMAnimalManage(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityWean">
            <summary>Ruminant wean activity</summary>
            <summary>This activity will wean the herd</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.Style">
            <summary>
            Style of weaning rule
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.WeaningAge">
            <summary>
            Weaning age (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.WeaningWeight">
            <summary>
            Weaning weight (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.GrazeFoodStoreName">
            <summary>
            Name of GrazeFoodStore (paddock) to place weaners (leave blank for general yards)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.OnCLEMAnimalManage(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.GetDaysLabourRequired(Models.CLEM.Activities.LabourRequirement)">
            <summary>
            Determine the labour required for this activity based on LabourRequired items in tree
            </summary>
            <param name="requirement">Labour requirement model</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Activities.TruckingSettings">
            <summary>Tracking settings for Ruminant purchases and sales</summary>
            <summary>If this model is provided within RuminantActivityBuySell, trucking costs and loading rules will occur</summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TransactionCategory">
            <summary>
            Label to assign each transaction created by this activity in ledgers
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.DistanceToMarket">
            <summary>
            Distance to market
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.CostPerKmTrucking">
            <summary>
            Cost of trucking ($/km/truck)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.Number450kgPerTruck">
            <summary>
            Number of 450kg animals per truck load
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MinimumTrucksBeforeSelling">
            <summary>
            Minimum number of truck loads before selling (0 continuous sales)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MinimumLoadBeforeSelling">
            <summary>
            Minimum proportion of truck load before selling (0 continuous sales)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MinimumTrucksBeforeBuying">
            <summary>
            Minimum number of truck loads before buying (0 continuous purchase)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MinimumLoadBeforeBuying">
            <summary>
            Minimum proportion of truck load before buying (0 continuous purchase)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TruckCO2Emissions">
            <summary>
            Truck CO2 emissions per km
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TruckMethaneEmissions">
            <summary>
            Truck methane emissions per km
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TruckN2OEmissions">
            <summary>
            Truck N2O emissions per km
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MethaneStoreName">
            <summary>
            Methane store for emissions
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.CarbonDioxideStoreName">
            <summary>
            Carbon dioxide store for emissions
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.NitrousOxideStoreName">
            <summary>
            Nitrous oxide store for emissions
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.TruckingSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.TruckingSettings.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.TruckingSettings.ReportEmissions(System.Int32,System.Boolean)">
            <summary>
            Method to report trucking emissions.
            </summary>
            <param name="numberOfTrucks">Number of trucks</param>
            <param name="isSales">Determines if this is a sales or purchase shipment</param>
        </member>
        <member name="M:Models.CLEM.Activities.TruckingSettings.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.CLEMModel">
            <summary>
             CLEM base model
            </summary> 
        </member>
        <member name="F:Models.CLEM.CLEMModel.Summary">
            <summary>
            Link to summary
            </summary>
        </member>
        <member name="P:Models.CLEM.CLEMModel.Notes">
            <summary>
            Model settings notes
            </summary>
        </member>
        <member name="P:Models.CLEM.CLEMModel.SelectedTab">
            <summary>
            Identifies the last selected tab for display
            </summary>
        </member>
        <member name="F:Models.CLEM.CLEMModel.Warnings">
            <summary>
            Warning log for this CLEM model
            </summary>
        </member>
        <member name="M:Models.CLEM.CLEMModel.SetGuID(System.String)">
            <summary>
            Allows unique id of activity to be set 
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Models.CLEM.CLEMModel.UniqueID">
            <summary>
            Model identifier
            </summary>
        </member>
        <member name="P:Models.CLEM.CLEMModel.CLEMParentName">
            <summary>
            Parent CLEM Zone
            Stored here so rapidly retrieved
            </summary>
        </member>
        <member name="P:Models.CLEM.CLEMModel.NameWithParent">
            <summary>
            return combo name of ParentName.ModelName
            </summary>
        </member>
        <member name="M:Models.CLEM.CLEMModel.SetDefaults">
            <summary>
            Method to set defaults from   
            </summary>
        </member>
        <member name="M:Models.CLEM.CLEMModel.SetPropertyDefaults(Models.Core.IModel)">
            <summary>
            Public means of setting default values 
            </summary>
            <param name="model"></param>
        </member>
        <member name="P:Models.CLEM.CLEMModel.ActivityTimers">
            <summary>
            A list of activity timers for this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.CLEMModel.TimingOK">
            <summary>
            Is timing ok for the current model
            </summary>
        </member>
        <member name="M:Models.CLEM.CLEMModel.GetResourcesAvailableByName(System.Object[])">
            <summary>
            return a list of components available given the specified types
            </summary>
            <param name="typesToFind">the list of types to locate</param>
            <returns>A list of names of components</returns>
        </member>
        <member name="M:Models.CLEM.CLEMModel.SummaryOpacity(System.Boolean)">
            <summary>
            Returns the opacity value for this component in the summary display
            </summary>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ValidParent">
            <summary>
            Determines if this component has a valid parent based on parent attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.CLEMModel.DisplaySummaryValueSnippet(System.String,System.String,Models.CLEM.HTMLSummaryStyle,System.Boolean)">
            <summary>
            Create a html snippet
            </summary>
            <param name="value">The value to report</param>
            <param name="errorString">Error text when missing</param>
            <param name="entryStyle">Style of snippet</param>
            <param name="htmlTags">Include html tags</param>
            <returns>HTML span snippet</returns>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ChildrenToIgnoreInSummary">
            <summary>
            Provide a list of child types to ignore from summary for the given model
            </summary>
            <returns>List of types</returns>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.GetFullSummary(Models.Core.IModel,System.Collections.Generic.List{System.String},System.String,System.Func{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.CLEMModel.ModelSummaryStyle">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.CLEMModel.CurrentAncestorList">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.CLEMModel.FormatForParentControl">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.AddMemosToSummary(Models.Core.IModel,System.Func{System.String,System.String})">
            <summary>
            Create memos included for summary description
            </summary>
            <param name="model">Model to report child memos for</param>
            <param name="markdown2Html">markdown to html converter</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryInnerOpeningTagsBeforeSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryNameTypeHeaderText">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.ModelSummaryNameTypeHeader">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.CLEMModel.CreateDescriptiveSummaryHTML(Models.Core.Model,System.Boolean,System.Boolean,System.String,System.Func{System.String,System.String})">
            <summary>
            Create the HTML for the descriptive summary display of a supplied component
            </summary>
            <param name="modelToSummarise">Model to create summary fpr</param>
            <param name="darkTheme">Boolean representing if in dark mode</param>
            <param name="markdown2Html">Method to convert markdown to html</param>
            <param name="bodyOnly">Only produve the body html</param>
            <param name="apsimFilename">Create master simulation summary header</param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.StoresForCrops">
            <summary>
            Crop store style
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.HumanFoodStore">
            <summary>
            Food Store for Humans
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.AnimalFoodStore">
            <summary>
            Food Store for Animals
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.GrazeFoodStore">
            <summary>
            Store for forage/pasture crops
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.ProductStore">
            <summary>
            Store for inedible crop products
            </summary>
        </member>
        <member name="T:Models.CLEM.HerdChangeReason">
            <summary>
            Reasons for a change in herd
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.None">
            <summary>
            This individual remains in herd
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DiedUnderweight">
            <summary>
            Individual died due to loss of weight
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DiedMortality">
            <summary>
            Individual died due to mortality rate
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.Born">
            <summary>
            Individual born
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.MarkedSale">
            <summary>
            Individual sold as marked for sale
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.TradeSale">
            <summary>
            Trade individual sold weight/age
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DryBreederSale">
            <summary>
            Dry breeder sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ExcessBreederSale">
            <summary>
            Excess breeder sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ExcessPreBreederSale">
            <summary>
            Excess heifer sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ExcessSireSale">
            <summary>
            Excess sire sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.MaxAgeSale">
            <summary>
            Individual reached maximim age and sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.AgeWeightSale">
            <summary>
            Individual reached sale weight or age
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.TradePurchase">
            <summary>
            Trade individual purchased
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.BreederPurchase">
            <summary>
            Breeder purchased
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.SirePurchase">
            <summary>
            Breeding sire purchased
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.Consumed">
            <summary>
            Individual consumed by household
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DestockSale">
            <summary>
            Destocking sale
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.RestockPurchase">
            <summary>
            Restocking purchase
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.InitialHerd">
            <summary>
            Initial herd
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.FillInitialHerd">
            <summary>
            Fill initial herd to management levels
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ReduceInitialHerd">
            <summary>
            Reduce initial herd to management levels
            </summary>
        </member>
        <member name="T:Models.CLEM.MusterTimingType">
            <summary>
            Mustering timing type
            </summary>
        </member>
        <member name="F:Models.CLEM.MusterTimingType.StartOfTimestep">
            <summary>
            At start of time step
            </summary>
        </member>
        <member name="F:Models.CLEM.MusterTimingType.EndOfTimeStep">
            <summary>
            At end of time step
            </summary>
        </member>
        <member name="T:Models.CLEM.PricingStyleType">
            <summary>
            Animal pricing style
            </summary>
        </member>
        <member name="F:Models.CLEM.PricingStyleType.perHead">
            <summary>
            Value per head
            </summary>
        </member>
        <member name="F:Models.CLEM.PricingStyleType.perKg">
            <summary>
            Value per kg live weight
            </summary>
        </member>
        <member name="F:Models.CLEM.PricingStyleType.perAE">
            <summary>
            Value per adult equivalent
            </summary>
        </member>
        <member name="T:Models.CLEM.PurchaseOrSalePricingStyleType">
            <summary>
            Animal purchase or sale price style
            </summary>
        </member>
        <member name="F:Models.CLEM.PurchaseOrSalePricingStyleType.Both">
            <summary>
            Both purchase and sale price
            </summary>
        </member>
        <member name="F:Models.CLEM.PurchaseOrSalePricingStyleType.Purchase">
            <summary>
            Purchase price
            </summary>
        </member>
        <member name="F:Models.CLEM.PurchaseOrSalePricingStyleType.Sale">
            <summary>
            Sale price
            </summary>
        </member>
        <member name="T:Models.CLEM.CropPaymentStyleType">
            <summary>
            Crop payment style
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.perUnitOfLand">
            <summary>
            Amount per unit of land
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.perHa">
            <summary>
            Amount per hectare
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.perTree">
            <summary>
            Amount per tree
            </summary>
        </member>
        <member name="T:Models.CLEM.ResourcePaymentStyleType">
            <summary>
            Crop payment style
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourcePaymentStyleType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourcePaymentStyleType.perUnit">
            <summary>
            Amount per unit of resource
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourcePaymentStyleType.perBlock">
            <summary>
            Amount per block of resource
            </summary>
        </member>
        <member name="T:Models.CLEM.AnimalPaymentStyleType">
            <summary>
            Animal payment style
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perHead">
            <summary>
            Amount per head
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perAE">
            <summary>
            Amount per adult equivilant
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.ProportionOfTotalSales">
            <summary>
            Proportion of total sales
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perHa">
            <summary>
            Amount per hectare
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perUnitOfLand">
            <summary>
            Amount per unit of land
            </summary>
        </member>
        <member name="T:Models.CLEM.LabourUnitType">
            <summary>
            Labour allocation unit type
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perUnitOfLand">
            <summary>
            Labour per unit of land
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perHa">
            <summary>
            Labour per hectare
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perTree">
            <summary>
            Labour per Tree
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perHead">
            <summary>
            Labour per head
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perAE">
            <summary>
            Labour per adult equivilant
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perKg">
            <summary>
            Labour per kg
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perUnit">
            <summary>
            Labour per unit
            </summary>
        </member>
        <member name="T:Models.CLEM.LabourLimitType">
            <summary>
            Labour limit type calculation type
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourLimitType.AsDaysRequired">
            <summary>
            Represents a rate or fixed days specified
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourLimitType.AsTotalAllowed">
            <summary>
            Relates to the total days allowed
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourLimitType.ProportionOfDaysRequired">
            <summary>
            As proportion of the days required
            </summary>
        </member>
        <member name="T:Models.CLEM.PayHiredLabourCalculationStyle">
            <summary>
            Style to calculate hired labour payment
            </summary>
        </member>
        <member name="F:Models.CLEM.PayHiredLabourCalculationStyle.ByAvailableLabour">
            <summary>
            Use labour available in LabourAvailability for all hired labour
            </summary>
        </member>
        <member name="F:Models.CLEM.PayHiredLabourCalculationStyle.ByLabourUsedInTimeStep">
            <summary>
            Use the hired labour used in timestep
            </summary>
        </member>
        <member name="T:Models.CLEM.RuminantFeedActivityTypes">
            <summary>
            Ruminant feeding styles
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.SpecifiedDailyAmount">
            <summary>
            A specified amount daily to all individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.SpecifiedDailyAmountPerIndividual">
            <summary>
            A specified amount daily to each individual
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfWeight">
            <summary>
            The proportion of animal weight in selected months
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfPotentialIntake">
            <summary>
            The proportion of potential intake
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfRemainingIntakeRequired">
            <summary>
            The proportion of remaining amount required
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfFeedAvailable">
            <summary>
            A proportion of the feed pool available
            </summary>
        </member>
        <member name="T:Models.CLEM.LabourFeedActivityTypes">
            <summary>
            Ruminant feeding styles
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourFeedActivityTypes.SpecifiedDailyAmountPerIndividual">
            <summary>
            Feed specified amount daily to each individual
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourFeedActivityTypes.SpecifiedDailyAmountPerAE">
            <summary>
            Feed specified amount daily per AE
            </summary>
        </member>
        <member name="T:Models.CLEM.OnPartialResourcesAvailableActionTypes">
            <summary>
            Possible actions when only partial requested resources are available
            </summary>
        </member>
        <member name="F:Models.CLEM.OnPartialResourcesAvailableActionTypes.ReportErrorAndStop">
            <summary>
            Report error and stop simulation
            </summary>
        </member>
        <member name="F:Models.CLEM.OnPartialResourcesAvailableActionTypes.SkipActivity">
            <summary>
            Do not perform activity in this time step
            </summary>
        </member>
        <member name="F:Models.CLEM.OnPartialResourcesAvailableActionTypes.UseResourcesAvailable">
            <summary>
            Receive resources available and perform activity
            </summary>
        </member>
        <member name="T:Models.CLEM.OnMissingResourceActionTypes">
            <summary>
            Possible actions when only partial requested resources are available
            </summary>
        </member>
        <member name="F:Models.CLEM.OnMissingResourceActionTypes.ReportErrorAndStop">
            <summary>
            Report error and stop simulation
            </summary>
        </member>
        <member name="F:Models.CLEM.OnMissingResourceActionTypes.ReportWarning">
            <summary>
            Report warning to summary
            </summary>
        </member>
        <member name="F:Models.CLEM.OnMissingResourceActionTypes.Ignore">
            <summary>
            Ignore missing resources and return null
            </summary>
        </member>
        <member name="T:Models.CLEM.HTMLSummaryStyle">
            <summary>
            Style of HTML reporting
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.Default">
            <summary>
            Determine best match
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.Resource">
            <summary>
            Main resource
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.SubResource">
            <summary>
            Sub resource
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.SubResourceLevel2">
            <summary>
            Sub resource nested
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.Activity">
            <summary>
            Main activity
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.SubActivity">
            <summary>
            Sub activity
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.SubActivityLevel2">
            <summary>
            Sub activity nested
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.Helper">
            <summary>
            Helper model
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.FileReader">
            <summary>
            FileReader model
            </summary>
        </member>
        <member name="F:Models.CLEM.HTMLSummaryStyle.Filter">
            <summary>
            Filter model
            </summary>
        </member>
        <member name="T:Models.CLEM.WeaningStyle">
            <summary>
            Style of weaning rules
            </summary>
        </member>
        <member name="F:Models.CLEM.WeaningStyle.AgeOrWeight">
            <summary>
            Age or weight achieved
            </summary>
        </member>
        <member name="F:Models.CLEM.WeaningStyle.AgeOnly">
            <summary>
            Age achieved
            </summary>
        </member>
        <member name="F:Models.CLEM.WeaningStyle.WeightOnly">
            <summary>
            Weight achieved
            </summary>
        </member>
        <member name="T:Models.CLEM.RelationshipCalculationMethod">
            <summary>
            Method to use in determining a value of y from a given x in relationships 
            </summary>
        </member>
        <member name="F:Models.CLEM.RelationshipCalculationMethod.UseSpecifiedValues">
            <summary>
            Use fixed values
            </summary>
        </member>
        <member name="F:Models.CLEM.RelationshipCalculationMethod.Interpolation">
            <summary>
            Use linear interpolation
            </summary>
        </member>
        <member name="T:Models.CLEM.MonthsOfYear">
            <summary>
            Months of the year
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.NotSet">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.January">
            <summary>
            Janyary
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.February">
            <summary>
            February
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.March">
            <summary>
            March
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.April">
            <summary>
            April
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.May">
            <summary>
            May
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.June">
            <summary>
            June
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.July">
            <summary>
            July
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.August">
            <summary>
            August
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.September">
            <summary>
            September
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.October">
            <summary>
            October
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.November">
            <summary>
            November
            </summary>
        </member>
        <member name="F:Models.CLEM.MonthsOfYear.December">
            <summary>
            December
            </summary>
        </member>
        <member name="T:Models.CLEM.ResourceSellStyle">
            <summary>
            Style selling resource
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourceSellStyle.SpecifiedAmount">
            <summary>
            Specified amount
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourceSellStyle.ProportionOfStore">
            <summary>
            Proportion of store
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourceSellStyle.ProportionOfLastGain">
            <summary>
            Proportion of last gain transaction
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourceSellStyle.ReserveAmount">
            <summary>
            Reserve amount
            </summary>
        </member>
        <member name="F:Models.CLEM.ResourceSellStyle.ReserveProportion">
            <summary>
            Reserve proportion
            </summary>
        </member>
        <member name="T:Models.CLEM.TagApplicationStyle">
            <summary>
            Style of ruminant tag application
            </summary>
        </member>
        <member name="F:Models.CLEM.TagApplicationStyle.Add">
            <summary>
            Add tag
            </summary>
        </member>
        <member name="F:Models.CLEM.TagApplicationStyle.Remove">
            <summary>
            Remove tag
            </summary>
        </member>
        <member name="T:Models.CLEM.RuminantGroupStyleSecondary">
            <summary>
            Style to identify different ruminant groups needed by activities
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.NotSpecified">
            <summary>
            No style specified
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.Females">
            <summary>
            Select females to remove
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.FemalePreBreeders">
            <summary>
            Female pre-breeders to remove
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.FemaleBreeders">
            <summary>
            Female breeders to remove
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.Males">
            <summary>
            Select males to remove
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.MalePreBreeders">
            <summary>
            Male pre-breeders to remove
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleSecondary.MaleBreeders">
            <summary>
            Male breeders to remove
            </summary>
        </member>
        <member name="T:Models.CLEM.RuminantGroupStyleTertiary">
            <summary>
            Tertiary style to identify different ruminant groups needed by activities
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleTertiary.NotSpecified">
            <summary>
            No style specified
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleTertiary.FromHerd">
            <summary>
            From the specified herd available
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleTertiary.FromSales">
            <summary>
            From only individuals flagged for sale
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantGroupStyleTertiary.FromPurchases">
            <summary>
            From the current list of potential purchases
            </summary>
        </member>
        <member name="T:Models.CLEM.AttributeInheritanceStyle">
            <summary>
            Style of inheriting ruminant attributes from parents
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.None">
            <summary>
            Not inheritated
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.Maternal">
            <summary>
            From mother's value if present
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.Paternal">
            <summary>
            From father's value if present
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.LeastParentValue">
            <summary>
            At least one parent has attribute or least of both parents
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.GreatestParentValue">
            <summary>
            At least one parent has attribute or greatest of both parents
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.LeastBothParents">
            <summary>
            Both parents must have attribute and the least value is used
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.GreatestBothParents">
            <summary>
            Both parents must have attribute and the greatest value is used
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.MeanValueZeroAbsent">
            <summary>
            Mean of the attribute value of parents using zero for those without attribute
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.MeanValueIgnoreAbsent">
            <summary>
            Mean of the attribute value of parents ignoring those without attribute
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeInheritanceStyle.AsGeneticTrait">
            <summary>
            Rules for single genetic trait (punnett square)
            </summary>
        </member>
        <member name="T:Models.CLEM.TransactionType">
            <summary>
            Type of ledger transaction (gain or loss)
            </summary>
        </member>
        <member name="F:Models.CLEM.TransactionType.Loss">
            <summary>
            Loss of resource
            </summary>
        </member>
        <member name="F:Models.CLEM.TransactionType.Gain">
            <summary>
            Gain in resource
            </summary>
        </member>
        <member name="T:Models.CLEM.ReportTransactionStyle">
            <summary>
            Style transaction reporting in resource ledger (style and amount) or (gain and loss)
            </summary>
        </member>
        <member name="F:Models.CLEM.ReportTransactionStyle.TypeAndAmountColumns">
            <summary>
            Reports transaction type and amount
            </summary>
        </member>
        <member name="F:Models.CLEM.ReportTransactionStyle.GainAndLossColumns">
            <summary>
            Reports both gain and loss columns for transaction
            </summary>
        </member>
        <member name="T:Models.CLEM.AttributeFilterStyle">
            <summary>
            The style of assessing an Attribute for filtering
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeFilterStyle.ByValue">
            <summary>
            Use the value associated with the attribute
            </summary>
        </member>
        <member name="F:Models.CLEM.AttributeFilterStyle.Exists">
            <summary>
            Use boolean of whether the attribute exists on the individual
            </summary>
        </member>
        <member name="T:Models.CLEM.DateStyle">
            <summary>
            The style of accessing date
            </summary>
        </member>
        <member name="F:Models.CLEM.DateStyle.DateStamp">
            <summary>
            Accept single datestamp (CulturalInvariant)
            </summary>
        </member>
        <member name="F:Models.CLEM.DateStyle.YearAndMonth">
            <summary>
            Use Year and Month entries
            </summary>
        </member>
        <member name="T:Models.CLEM.RuminantTransactionsGroupingStyle">
            <summary>
            Style to report transactions involving individuals in herd
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantTransactionsGroupingStyle.Combined">
            <summary>
            Combine all individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantTransactionsGroupingStyle.ByPriceGroup">
            <summary>
            Grouped by pricing groups
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantTransactionsGroupingStyle.ByClass">
            <summary>
            Grouped by class
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantTransactionsGroupingStyle.BySexAndClass">
            <summary>
            Grouped by class and sex
            </summary>
        </member>
        <member name="T:Models.CLEM.RuminantClass">
            <summary>
            General classes of ruminants
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantClass.Suckling">
            <summary>
            Suckling
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantClass.Weaner">
            <summary>
            Weaner
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantClass.PreBreeder">
            <summary>
            PreBreeder
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantClass.Breeder">
            <summary>
            Breeder
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantClass.Castrate">
            <summary>
            Castrate
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantClass.Sire">
            <summary>
            Sire
            </summary>
        </member>
        <member name="T:Models.CLEM.TransmuteStyle">
            <summary>
            Style of Transmute
            </summary>
        </member>
        <member name="F:Models.CLEM.TransmuteStyle.Direct">
            <summary>
            Direct transmute resource (B) to shortfall resource (A) e.g. barter
            </summary>
        </member>
        <member name="F:Models.CLEM.TransmuteStyle.UsePricing">
            <summary>
            Use pricing details of transmute resource (B) and shortfall resource (A) to calculate exchange rate
            </summary>
        </member>
        <member name="T:Models.CLEM.TakeFromFilterStyle">
            <summary>
            Style of taking individuals from a filter group
            </summary>
        </member>
        <member name="F:Models.CLEM.TakeFromFilterStyle.TakeProportion">
            <summary>
            Take a proportion of the group selected
            </summary>
        </member>
        <member name="F:Models.CLEM.TakeFromFilterStyle.TakeIndividuals">
            <summary>
            Take a set number of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.TakeFromFilterStyle.SkipProportion">
            <summary>
            Skip a proportion of the group selected and return the remainder
            </summary>
        </member>
        <member name="F:Models.CLEM.TakeFromFilterStyle.SkipIndividuals">
            <summary>
            Skip a set number of individuals and return the remainder
            </summary>
        </member>
        <member name="T:Models.CLEM.TakeFromFilteredPositionStyle">
            <summary>
            Position for reducing individuals from a filter group
            </summary>
        </member>
        <member name="F:Models.CLEM.TakeFromFilteredPositionStyle.Start">
            <summary>
            Take/Skip from start
            </summary>
        </member>
        <member name="F:Models.CLEM.TakeFromFilteredPositionStyle.End">
            <summary>
            Take/Skip from end
            </summary>
        </member>
        <member name="T:Models.CLEM.GetRuminantHerdSelectionStyle">
            <summary>
            The overall style of ruminants required
            </summary>
        </member>
        <member name="F:Models.CLEM.GetRuminantHerdSelectionStyle.AllOnFarm">
            <summary>
            All individuals currently in herd both including marked for sale
            </summary>
        </member>
        <member name="F:Models.CLEM.GetRuminantHerdSelectionStyle.ForPurchase">
            <summary>
            Individuals in purchase list yet to be bought
            </summary>
        </member>
        <member name="F:Models.CLEM.GetRuminantHerdSelectionStyle.MarkedForSale">
            <summary>
            Individuals currently marked for sale in the herd
            </summary>
        </member>
        <member name="F:Models.CLEM.GetRuminantHerdSelectionStyle.NotMarkedForSale">
            <summary>
            Individuals not marked for sale in the herd
            </summary>
        </member>
        <member name="T:Models.CLEM.FileCrop">
            <summary>
             Reads in crop growth data and makes it available to other models.
            </summary>
                
            <remarks>
            </remarks>
        </member>
        <member name="F:Models.CLEM.FileCrop.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.soilNumIndex">
            <summary>
            The character spacing index for the SoilNum column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.cropNameIndex">
            <summary>
            The character spacing index for the CropName column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.yearIndex">
            <summary>
            The character spacing index for the Year column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.monthIndex">
            <summary>
            The character spacing index for the Month column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.amountKgIndex">
            <summary>
            The character spacing index for the AmtKg column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.nitrogenPercentIndex">
            <summary>
            The character spacing index for the Npct column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.harvestTypeIndex">
            <summary>
            The character spacing index for the harvest type column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.forageFileAsTable">
            <summary>
            The entire Crop File read in as a DataTable with Primary Keys assigned.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.CropNameColumnName">
            <summary>
            Name of column holding crop name data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.SoilTypeColumnName">
            <summary>
            Name of column holding soil type data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.YearColumnName">
            <summary>
            Name of column holding year data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.MonthColumnName">
            <summary>
            Name of column holding month data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.AmountColumnName">
            <summary>
            Name of column holding amount data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.PercentNitrogenColumnName">
            <summary>
            Name of column holding nitrogen data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.HarvestTypeColumnName">
            <summary>
            Name of column holding harvest details
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.FullFileName">
            <summary>
            Gets or sets the full file name (with path). 
            The Commands.ChangeProperty() uses this property to change the model.
            This is done after the user changes the file using the browse button in the View.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.FileExists">
            <summary>
            Does file exist
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.GetTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.GetCropDataForEntireRun(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the DataTable created from the Forage File using the specified parameters.
            <returns></returns>
            </summary>
            <param name="landId"></param>
            <param name="cropName"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns>A struct called CropDataType containing the crop data for this month.
            This struct can be null. 
            </returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.OpenDataFile">
            <summary>
            Open the forage data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.CropDataType">
            <summary>
            A structure containing the commonly used crop input data.
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.SoilNum">
            <summary>
            Soil Number
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.CropName">
            <summary>
            Name of Crop
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.Year">
            <summary>
            Year (eg. 2017)
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.Month">
            <summary>
            Month (eg. 1 is Jan, 2 is Feb)
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.AmtKg">
            <summary>
            Amount in Kg (perHa or perTree) 
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.Npct">
            <summary>
            Nitrogen Percentage of the Amount
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.HarvestDate">
            <summary>
            Combine Year and Month to create a DateTime. 
            Day is set to the 1st of the month.
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.HarvestType">
            <summary>
            Harvest type identifier
            </summary>
        </member>
        <member name="T:Models.CLEM.FilePasture">
            <summary>
             Reads in pasture production and makes it available to other models.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.regionIndex">
            <summary>
            The index of the climate region number column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.soilIndex">
            <summary>
            The index of the soil number column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.forageNoIndex">
            <summary>
            The index of the forage number column in the Pasture database
            nb. This column is to be ignored.
            It is a legacy column in the Pasture database and is not used any more.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.grassBAIndex">
            <summary>
            The index of the grass basal area column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.landConIndex">
            <summary>
            The index of the land condition column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.stkRateIndex">
            <summary>
            The index of the stocking rate column in the Pasture database
            nb. a row does NOT exist for every stocking rate.
            instead only certain stocking rate categories have rows.
            We need to find the closest categegory in the Pasture database
            to the actual stocking rate in any given month.
            These stocking rate categories vary between Pasture databases
            and are not standarised categories.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.yearNumIndex">
            <summary>
            The index of the year number column in the Pasture database
            This is NOT the actually date year, this is the number of
            years since the start of the pasture model run that generated the
            pasture data. 
            eg. it starts at 1 and goes up sequentially 
            for however many years the pasture model run went for.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.yearIndex">
            <summary>
            The index of the year column in the Pasture database
            This is the actual date year
            eg.1975
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.cutNumIndex">
            <summary>
            The index of the cut number column in the Pasture database
            Some crops such as lucerne are ratooning crops.
            So we need to provide a cut number to keep track of
            how many harvests from the original planting of the
            crop. Cut Number = 1 is the first harvest after planting
            and it goes up from there until it is pulled out and
            replanted.
            nb. you may have multiple cuts in the one month so 
            year and month does not uniquely identify the monthly
            yield data for that month. 
            We need to add up all the cuts within that month and use
            this as the monthly yield data for these crops.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.monthIndex">
            <summary>
            The index of the month number column in the Pasture database
            eg. 1 to 12 (for Jan to Dec)
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.growthIndex">
            <summary>
            The index of the growth amount column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.bp1Index">
            <summary>
            The index of the by product 1 column in the Pasture database
            Crops can have by products that are produced as a consequence
            of growing the crop. 
            This is the amount of the first by product of this crop
            Eg. straw from growing wheat grain.
            nb. THIS IS NOT REALLY USED BY PASTURES
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.bp2Index">
            <summary>
            The index of the by product 2 (second) column in the Pasture database
            Crops can have by products that are produced as a consequence
            of growing the crop. 
            This is the amount of the second by product of this crop
            Eg. grain husks from growing wheat grain.
            nb. THIS IS NOT REALLY USED BY PASTURES. 
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.utilisnIndex">
            <summary>
            The index of the utilisation column in the Pasture database
            The fractional proportional green growth pasture growth that the animals ate.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.soillossIndex">
            <summary>
            The index of the soil loss column in the Pasture database
            erosion caused to soil by your stocking number on this pasture growth.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.coverIndex">
            <summary>
            The index of the cover column in the Pasture database
            fraction of the soil surface that has cover (both dead and green) over it.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.treeBAIndex">
            <summary>
            The index of the tree basal area column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.rainfallIndex">
            <summary>
            The index of the rainfall column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.runoffIndex">
            <summary>
            The index of the runoff column in the Pasture database
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.pastureFileAsTable">
            <summary>
            The entire pasture File read in as a DataTable with Primary Keys assigned.
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.distinctStkRates">
            <summary>
            All the distinct Stocking Rates that were found in the PastureFileAsDataTable
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePasture.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePasture.FileExists">
            <summary>
            Does file exist
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePasture.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePasture.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePasture.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePasture.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePasture.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="F:Models.CLEM.FilePasture.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePasture.GetTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.RecordsFound(System.String,System.Object)">
            <summary>
            returns the number of records for a given condition
            Not used in this type
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.GetStkRateCategories">
            <summary>
            Searches the DataTable created from the Pasture model for all the distinct StkRate values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.FindClosestStkRateCategory(System.Double)">
            <summary>
            Finds the closest Stocking Rate Category in the Pasture database for a given Stocking Rate.
            The Pasture database does not have every stocking rate. 
            Each Pasture database has its own set of stocking rate value categories
            Need to find the closest the stocking rate category in the Pasture database for this stocking rate.
            It will find the category with the next largest value to the actual stocking rate.
            So if the stocking rate is 0 the category with the next largest value will normally be 1
            </summary>
            <param name="stockingRate"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.GetIntervalsPastureData(System.Int32,System.String,System.Double,System.Double,System.Double,System.DateTime,System.Int32)">
            <summary>
            Searches the DataTable created from the Pasture database using the specified parameters.
            </summary>
            <param name="region"></param>
            <param name="soil"></param>
            <param name="grassBasalArea"></param>
            <param name="landCondition"></param>
            <param name="stockingRate"></param>
            <param name="ecolCalculationDate"></param>
            <param name="ecolCalculationInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.CheckAllMonthsWereRetrieved(System.Collections.Generic.List{Models.CLEM.PastureDataType},System.DateTime,System.DateTime,System.Int32,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Do simple error checking to make sure the data retrieved is usable
            </summary>
            <param name="filtered"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="region"></param>
            <param name="soil"></param>
            <param name="grassBasalArea"></param>
            <param name="landCondition"></param>
            <param name="stockingRate"></param>
        </member>
        <member name="M:Models.CLEM.FilePasture.GetMonthsPastureData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches the DataTable created from the PastureFile using the specified parameters.
            </summary>
            <param name="region"></param>
            <param name="soil"></param>
            <param name="forageNo"></param>
            <param name="grassBasalArea"></param>
            <param name="landCondition"></param>
            <param name="stockingRate"></param>
            <param name="year"></param>
            <param name="month"></param>
            <returns>CropDataType containg the crop data for this month</returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.OpenDataFile">
            <summary>
            Open the pasture database file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.CLEM.FilePasture.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="M:Models.CLEM.FilePasture.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.PastureDataType">
            <summary>
            A structure containing the commonly used weather data.
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Region">
            <summary>
            Climatic Region Number
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Soil">
            <summary>
            Soil Number
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.ForageNo">
            <summary>
            Forage Number 
            nb. This column is to be ignored.
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.GrassBA">
            <summary>
            Grass Basal Area
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.LandCon">
            <summary>
            Land Condition
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.StkRate">
            <summary>
            Stocking Rate
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.YearNum">
            <summary>
            Year Number (counting from start of simulation ?)
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Year">
            <summary>
            Year (eg. 2017)
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.CutNum">
            <summary>
            Cut Number in this year
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Month">
            <summary>
            Month (eg. 1 is Jan, 2 is Feb)
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Growth">
            <summary>
            Amout in Kg of Biomass of the pasture
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.BP1">
            <summary>
            Amount in Kg of By Product 1 of the production of this pasture
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.BP2">
            <summary>
            Amount in Kg of By Product 2 of the production of this pasture
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Utilisn">
            <summary>
            Utilisation
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.SoilLoss">
            <summary>
            Soil Loss
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Cover">
            <summary>
            Cover
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.TreeBA">
            <summary>
            Tree Basal Area
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Rainfall">
            <summary>
            Rainfall
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Runoff">
            <summary>
            Runoff
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.CutDate">
            <summary>
            Combine Year and Month to create a DateTime. 
            Day is set to the 1st of the month.
            </summary>
        </member>
        <member name="T:Models.CLEM.FilePricing">
            <summary>
             Reads in external pricing input data and adjusts resource pricing as specified through simulation.
            </summary>
                
            <remarks>
            </remarks>
        </member>
        <member name="P:Models.CLEM.FilePricing.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePricing.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePricing.DateColumnName">
            <summary>
            Name of column holding date data
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePricing.FullFileName">
            <summary>
            Gets or sets the full file name (with path). 
            The Commands.ChangeProperty() uses this property to change the model.
            This is done after the user changes the file using the browse button in the View.
            </summary>
        </member>
        <member name="P:Models.CLEM.FilePricing.FileExists">
            <summary>
            Does file exist
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePricing.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePricing.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePricing.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>Function to determine naturally wean individuals at start of timestep</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Models.CLEM.FilePricing.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePricing.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.FilePricing.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.CLEM.FilePricing.OpenDataFile">
            <summary>
            Open the data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.CLEM.FilePricing.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="M:Models.CLEM.FilePricing.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilePricing.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this component
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.FileResource">
            <summary>
             Reads in external resource input data and makes it available to other models.
            </summary>
                
            <remarks>
            </remarks>
        </member>
        <member name="F:Models.CLEM.FileResource.resourceFileAsTable">
            <summary>
            The entire Crop File read in as a DataTable with Primary Keys assigned.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileResource.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.YearColumnName">
            <summary>
            Name of column holding year or date data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.MonthColumnName">
            <summary>
            Name of column holding month data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.ResourceNameColumnName">
            <summary>
            Name of column holding resource name data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.AmountColumnName">
            <summary>
            Name of column holding amount data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.StyleOfDateEntry">
            <summary>
            Style of date input to use
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.FullFileName">
            <summary>
            Gets or sets the full file name (with path). 
            The Commands.ChangeProperty() uses this property to change the model.
            This is done after the user changes the file using the browse button in the View.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileResource.FileExists">
            <summary>
            Does file exist
            </summary>
        </member>
        <member name="M:Models.CLEM.FileResource.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileResource.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="F:Models.CLEM.FileResource.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileResource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.FileResource.GetTable">
            <summary>
            Read data from data file to DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileResource.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.CLEM.FileResource.GetCurrentResourceData(System.Int32,System.Int32)">
            <summary>
            Searches the DataTable created from the Resource File using the specified parameters.
            <returns></returns>
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns>A struct called CropDataType containing the crop data for this month.
            This struct can be null. 
            </returns>
        </member>
        <member name="M:Models.CLEM.FileResource.OpenDataFile">
            <summary>
            Open the data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.CLEM.FileResource.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="M:Models.CLEM.FileResource.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FileResource.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this component
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.FileSQLiteCrop">
            <summary>
             Reads in crop growth data from an APSIM SQLite database and makes it available to other models.
             Required columns are (you can provide a link to each column name):
             Year
             Month
             Soil id
             Crop name
             Amount harvested
             Percent nitrogen (optional)
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.TableName">
            <summary>
            Defines the name of the table in the database holding the crop data.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.CropNameColumnName">
            <summary>
            Name of column holding crop name data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.SoilTypeColumnName">
            <summary>
            Name of column holding soil type data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.YearColumnName">
            <summary>
            Name of column holding year data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.MonthColumnName">
            <summary>
            Name of column holding month data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.AmountColumnName">
            <summary>
            Name of column holding amount data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.PercentNitrogenColumnName">
            <summary>
            Name of column holding nitrogen data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.HarvestTypeColumnName">
            <summary>
            Name of column holding harvest details
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.FullFileName">
            <summary>
            Gets or sets the full file name (with path). 
            The Commands.ChangeProperty() uses this property to change the model.
            This is done after the user changes the file using the browse button in the View.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteCrop.FileExists">
            <summary>
            Does file exist
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLiteCrop.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this component
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteCrop.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLiteCrop.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLiteCrop.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLiteCrop.GetCropDataForEntireRun(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the DataTable created from the Forage File using the specified parameters.
            <returns></returns>
            </summary>
            <param name="soilId">Name of soil or run name in database</param>
            <param name="cropName">Name of crop in database</param>
            <param name="startDate">Start date of the simulation</param>
            <param name="endDate">End date of the simulation</param>
            <returns>A struct called CropDataType containing the crop data for this month.
            This struct can be null. 
            </returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteCrop.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.FileSQLitePasture">
            <summary>
             SQLite database reader for access to Pasture database for other models.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLitePasture.distinctStkRates">
            <summary>
            All the distinct Stocking Rates that were found in the database
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.TableName">
            <summary>
            Defines the name of the table in the database holding the pasture data.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.RegionColumnName">
            <summary>
            Name of column holding region id data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.LandIdColumnName">
            <summary>
            Name of column holding land id data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.GrassBAColumnName">
            <summary>
            Name of column holding grass basal area data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.LandConColumnName">
            <summary>
            Name of column holding land condition data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.StkRateColumnName">
            <summary>
            Name of column holding stocking rate data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.YearColumnName">
            <summary>
            Name of column holding year data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.MonthColumnName">
            <summary>
            Name of column holding month data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.GrowthColumnName">
            <summary>
            Name of column holding growth data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.ErosionColumnName">
            <summary>
            Name of column holding erosion soilloss data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.RunoffColumnName">
            <summary>
            Name of column holding runoff data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.RainfallColumnName">
            <summary>
            Name of column holding rainfall data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.CoverColumnName">
            <summary>
            Name of column holding cover data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.TBAColumnName">
            <summary>
            Name of column holding tree basal area data
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.MissingDataAction">
            <summary>
            Action to take on missing data
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLitePasture.SQLiteReader">
            <summary>
            APSIMx SQLite class
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLitePasture.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            The message is displayed in the warning label of the View.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.FileExists">
            <summary>
            Does file exist
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.OpenSQLiteDB">
            <summary>
            Opens the SQLite database if necessary
            </summary>
            <returns>true if open suceeded, false if the opening failed </returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.GetCategories(System.String)">
            <summary>
            Searches the DataTable created from the Pasture database for all the distinct values for the specified ColumnName.
            </summary>
            <returns>Sorted array of unique values for the column</returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.FileSQLitePasture.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            Must be a property so that the Prsenter can use a  Commands.ChangeProperty() on it.
            ChangeProperty does not work on fields.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.GetYearsInFile">
            <summary>
            Gets the first year in the SQLite File
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.GetTable(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.FindClosestCategory(System.String,System.Double)">
            <summary>
            Finds the closest Value of categorised lookup values form the database
            This applies to Stocking rates, Grass Basal Area (or use GBA) and Land Condition
            The Pasture database does not have every stocking rate, grass basal area or land condition. 
            It will find the category with the next largest value to the actual value supplied.
            So if the value is 0 the category with the next largest value will normally be the first entry
            </summary>
            <param name="category">The name of the distict categories to use</param>
            <param name="value">The value to search for</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.GetIntervalsPastureData(System.Int32,System.String,System.Double,System.Double,System.Double,System.DateTime,System.Int32)">
            <summary>
            Queries the the Pasture SQLite database using the specified parameters.
            </summary>
            <param name="region"></param>
            <param name="soil"></param>
            <param name="grassBasalArea"></param>
            <param name="landCondition"></param>
            <param name="stockingRate"></param>
            <param name="ecolCalculationDate"></param>
            <param name="ecolCalculationInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.CheckAllMonthsWereRetrieved(System.Collections.Generic.List{Models.CLEM.PastureDataType},System.DateTime,System.DateTime,System.Int32,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Do simple error checking to make sure the data retrieved is usable
            </summary>
            <param name="filtered"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="region"></param>
            <param name="soil"></param>
            <param name="grassBasalArea"></param>
            <param name="landCondition"></param>
            <param name="stockingRate"></param>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.RecordsFound(System.String,System.Object)">
            <summary>
            Returned number of records for given column and value
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLitePasture.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.CLEMFolder">
            <summary>
            A CLEM specific folder model
            </summary>
        </member>
        <member name="T:Models.CLEM.RainfallShuffler">
            <summary>
             Randomises the years of grown provided in pasture reader.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Models.CLEM.RainfallShuffler.StartSeasonMonth">
            <summary>
            Month for the start of rainfall/growth season
            </summary>
        </member>
        <member name="P:Models.CLEM.RainfallShuffler.ShuffledYears">
            <summary>
            List of shuffled years
            </summary>
        </member>
        <member name="M:Models.CLEM.RainfallShuffler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.RainfallShuffler.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise resources</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.RainfallShuffler.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.ShuffleYear">
            <summary>
            Shuffled year structure
            </summary>
        </member>
        <member name="F:Models.CLEM.ShuffleYear.Year">
            <summary>
            Actual year
            </summary>
        </member>
        <member name="F:Models.CLEM.ShuffleYear.RandomYear">
            <summary>
            Shuffled year
            </summary>
        </member>
        <member name="T:Models.CLEM.RandomNumberGenerator">
            <summary>Random numbers generator</summary>
            <summary>This component provides the random number sequence to be used for all stochastic processes in CLEM</summary>
            <summary>This functionality has been moved from the CLEM component to an individual component placed under the simulation</summary>
            <summary>This allows sharing of a single sequence between multiple farms in a simulation</summary>
        </member>
        <member name="P:Models.CLEM.RandomNumberGenerator.Seed">
            <summary>
            Seed for random number generator (0 uses GuId rather than clock)
            </summary>
        </member>
        <member name="P:Models.CLEM.RandomNumberGenerator.Iteration">
            <summary>
            Iteration number for multiple simulations of stochasitc processes
            </summary>
        </member>
        <member name="P:Models.CLEM.RandomNumberGenerator.Generator">
            <summary>
            Access the random number generator
            </summary>
        </member>
        <member name="M:Models.CLEM.RandomNumberGenerator.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.Relationship">
            <summary>
            This determines a relationship
            </summary>
        </member>
        <member name="P:Models.CLEM.Relationship.XValues">
            <summary>
            X values of relationship
            </summary>
        </member>
        <member name="P:Models.CLEM.Relationship.YValues">
            <summary>
            Y values of relationship
            </summary>
        </member>
        <member name="P:Models.CLEM.Relationship.CalculationMethod">
            <summary>
            Method to solving relationship
            </summary>
        </member>
        <member name="P:Models.CLEM.Relationship.NameOfXVariable">
            <summary>
            Name of the x variable
            </summary>
        </member>
        <member name="P:Models.CLEM.Relationship.NameOfYVariable">
            <summary>
            Name of the y variable
            </summary>
        </member>
        <member name="M:Models.CLEM.Relationship.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Relationship.SolveY(System.Double)">
            <summary>
            Solve equation for y given x
            </summary>
            <param name="xValue">x value to solve y</param>
            <returns>y value for given x</returns>
        </member>
        <member name="M:Models.CLEM.Relationship.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Relationship.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.RelationshipRunningValue">
            <summary>
            This provides the ability to track a value based on an associated relationship of change in value provided by Y for a given X
            </summary>
        </member>
        <member name="P:Models.CLEM.RelationshipRunningValue.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:Models.CLEM.RelationshipRunningValue.StartingValue">
            <summary>
            Initial value of Running value that can be modified by this relationship Modify() during the simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.RelationshipRunningValue.Minimum">
            <summary>
            Minimum value possible
            </summary>
        </member>
        <member name="P:Models.CLEM.RelationshipRunningValue.Maximum">
            <summary>
            Maximum value possible
            </summary>
        </member>
        <member name="M:Models.CLEM.RelationshipRunningValue.Modify(System.Double)">
            <summary>
            Modify the current value by Y calculated from x
            </summary>
            <param name="x">x value</param>
        </member>
        <member name="M:Models.CLEM.RelationshipRunningValue.Calculate(System.Double)">
            <summary>
            Calculate new value using Y calculated from x
            </summary>
            <param name="x">x value</param>
        </member>
        <member name="M:Models.CLEM.RelationshipRunningValue.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.RelationshipRunningValue.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.RelationshipRunningValue.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Transmutation">
            <summary>
             Resource transmutation
             Will convert one resource into another (e.g. $ => labour) 
             These transmutations are defined under each ResourceType in the Resources section of the UI tree
            </summary> 
        </member>
        <member name="P:Models.CLEM.Transmutation.ResourceInShortfall">
            <summary>
            Resource in shortfall (A)
            </summary>
        </member>
        <member name="P:Models.CLEM.Transmutation.TransmutationPacketSize">
            <summary>
            Amount of resource in shortfall per transmutation packet
            </summary>
        </member>
        <member name="P:Models.CLEM.Transmutation.UseWholePackets">
            <summary>
            Enforce transmutation in whole packets
            </summary>
        </member>
        <member name="P:Models.CLEM.Transmutation.TransactionCategory">
            <summary>
            Label to assign each transaction created by this activity in ledgers
            </summary>
        </member>
        <member name="M:Models.CLEM.Transmutation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Transmutation.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Transmutation.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Transmute">
            <summary>
             A resource transmute component used as a child of a Transmutation component
             Determines the amount of a specified resource (B) required for the transmutation of shortfall resource (A)
            </summary> 
        </member>
        <member name="P:Models.CLEM.Transmute.TransmuteResourceType">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Transmute.TransmuteResourceTypeName">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Transmute.AmountPerPacket">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Transmute.TransmuteStyle">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Transmute.ResourceGroup">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Transmute.FinanceTypeForTransactionsName">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Transmute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Transmute.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Transmute.DoTransmute(Models.CLEM.Resources.ResourceRequest,System.Double,System.Double,Models.CLEM.Resources.ResourcesHolder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Transmute.ShortfallPackets(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Transmute.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Transmute.ModelSummaryNameTypeHeaderText">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Transmute.AddTransmuteStyleText(Models.CLEM.Interfaces.ITransmute)">
            <summary>
            Create additional text for transmute headers
            </summary>
            <param name="transmute"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Transmute.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.TransmuteLabour">
            <summary>
             Resource transmutation labour cost item
             Determines the amount of labour required for the transmutation
            </summary> 
        </member>
        <member name="P:Models.CLEM.TransmuteLabour.TransmuteResourceType">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteLabour.AmountPerPacket">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteLabour.TransmuteResourceTypeName">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteLabour.TransmuteStyle">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteLabour.ResourceGroup">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteLabour.FinanceTypeForTransactionsName">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.DoTransmute(Models.CLEM.Resources.ResourceRequest,System.Double,System.Double,Models.CLEM.Resources.ResourcesHolder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.ShortfallPackets(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.ModelSummaryNameTypeHeaderText">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteLabour.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.TransmuteRuminant">
            <summary>
             Determines the individual ruminans required for the transmutation
            </summary> 
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.TransmuteResourceType">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.TransmuteResourceTypeName">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.TransmuteStyle">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.DirectExhangeStyle">
            <summary>
            Style for direct exchange 
            </summary>
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.AmountPerPacket">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.ResourceGroup">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.TransmuteRuminant.FinanceTypeForTransactionsName">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.DoTransmute(Models.CLEM.Resources.ResourceRequest,System.Double,System.Double,Models.CLEM.Resources.ResourcesHolder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.ShortfallPackets(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.ModelSummaryNameTypeHeaderText">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.TransmuteRuminant.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.DateGreaterThanAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.DateGreaterThanAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="dateToCompareToFieldName"></param>
        </member>
        <member name="M:Models.CLEM.DateGreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.PercentageAttribute">
            <summary>
            Tests if double/int is percentage
            </summary>
        </member>
        <member name="M:Models.CLEM.PercentageAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.PercentageAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.ProportionAttribute">
            <summary>
            Tests if double/int is percentage
            </summary>
        </member>
        <member name="M:Models.CLEM.ProportionAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.ProportionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.MonthAttribute">
            <summary>
            Tests if int is month range
            </summary>
        </member>
        <member name="M:Models.CLEM.MonthAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.MonthAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanValueAttribute">
            <summary>
            Tests if double/int greater than specified value
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanValueAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanValueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanEqualValueAttribute">
            <summary>
            Tests if double/int greater than specified value
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualValueAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualValueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.HerdSaleReasonAttribute">
            <summary>
            Tests if herd change reason is of a specified style (purchase or sale)
            </summary>
        </member>
        <member name="M:Models.CLEM.HerdSaleReasonAttribute.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.CLEM.HerdSaleReasonAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Perfom validation method
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="compareToFieldName"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanEqualAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="compareToFieldName"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.ArrayItemCountAttribute">
            <summary>
            Tests if the number of items in an array match specified value
            </summary>
        </member>
        <member name="M:Models.CLEM.ArrayItemCountAttribute.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="arrayItems"></param>
        </member>
        <member name="M:Models.CLEM.ArrayItemCountAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.WarningLog">
            <summary>
            A class to hold and question the existence of warnings generated by resources or activities
            Allows to track whether a particular warning has previously occurred for avoiding multiple error display etc.
            </summary>
        </member>
        <member name="M:Models.CLEM.WarningLog.GetInstance(System.Int32)">
            <summary>
            Obtain a static single instance of thei object
            </summary>
            <param name="maxEntries">Maximum number of entries permitted</param>
            <returns>A shared WarningLog</returns>
        </member>
        <member name="M:Models.CLEM.WarningLog.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.WarningLog.CheckAndWrite(System.String,Models.Core.ISummary,Models.Core.IModel,Models.Core.MessageType,System.String)">
            <summary>
            Add new warning to the List if it hasn't been reported
            </summary>
            <param name="checkMessage">The warning message to check if it exists</param>
            <param name="summary">The summary model to write to</param>
            <param name="sender">The activity sending the warning</param>
            <param name="messageType">The type of message to write</param>
            <param name="fullMessage">A full message to report if check message does not exist, otherwise use check message</param>
        </member>
        <member name="M:Models.CLEM.WarningLog.Add(System.String)">
            <summary>
            Add new warning to the List if it hasn't been reported
            </summary>
            <param name="name">Name of warning</param>
        </member>
        <member name="M:Models.CLEM.WarningLog.Exists(System.String)">
            <summary>
            Determine if warning exists
            </summary>
            <param name="name">name of warning</param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Groupings.AnimalPriceGroup">
            <summary>
             Contains a group of filters to identify individual ruminants in a set price group
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.PricingStyle">
            <summary>
            Style of pricing animals
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.Value">
            <summary>
            Value of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.PurchaseOrSale">
            <summary>
            Determine whether this is a purchase or sale price, or both
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.CalculateValue(System.Object)">
            <summary>
            Calulate the value of an individual
            </summary>
            <param name="ind"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.LastPriceChange">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.Resource">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:Models.CLEM.Groupings.AnimalPriceGroup.PriceChangeOccurred">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.SetPrice(System.Double)">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.CurrentPrice">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Groupings.AnimalPriceGroup.PreviousPrice">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.SetPrice(System.Double,Models.Core.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.OnPriceChanged(Models.CLEM.Resources.PriceChangeEventArgs)">
            <summary>
            Price changed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.AnimalPriceGroup.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.Filter">
            <summary>
             abstract base filter not used on its own
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.Filter.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Groupings.Filter.Rule">
            <summary>
            The filter rule
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.ClearRule">
            <summary>
            Clear any rules created
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.Filter.Operator">
            <summary>
            Filter operator
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.GetOperators">
            <summary>
            Method to return available operators
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.OperatorToSymbol">
            <summary>
            Convert the operator to a symbol
            </summary>
            <returns>Operator as symbol</returns>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.IsOperatorTrueFalseTest">
            <summary>
            Is operator a true false test
            </summary>
            <returns>Operator as symbol</returns>
        </member>
        <member name="P:Models.CLEM.Groupings.Filter.Value">
            <summary>
            Value to check for filter
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.Compile``1">
            <summary>
            Takes the conditions set by the user and converts them to a logical test as a lambda expression
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.Initialise">
            <summary>
            A method to initialise this filter
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.Filter.BuildRule">
            <summary>
            A method to build rules for this filter
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.FilterByAttribute">
            <summary>
             Individual filter rule based on Attribute exists or associated value
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.FilterByAttribute.AttributeTag">
            <summary>
            Attribute tag to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.FilterByAttribute.FilterStyle">
            <summary>
            Style to assess attribute
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.OnSimulationCommencing(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.Compile``1">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.Initialise">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.BuildRule">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.ToString">
            <summary>
            Convert sort to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.ToHTMLString">
            <summary>
            Convert filter to html string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.ModelSummaryClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByAttribute.ModelSummaryOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Groupings.FilterByProperty">
            <summary>
             Filter using property or method (without arguments) of the IFilterable individual
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.FilterByProperty.PropertyOfIndividual">
            <summary>
            The property or method to filter by
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.OnSimulationCommencing(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.Initialise">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.BuildRule">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.Compile``1">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.CheckValidOperator(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            Check if the specified operator is valid for the selected property
            </summary>
            <param name="property">PropertyInfo of the property</param>
            <param name="errorMessage">Error message returned for reporting</param>
            <returns>True if operator is valid</returns>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.ToString">
            <summary>
            Convert filter to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.ToHTMLString">
            <summary>
            Convert filter to html string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterByProperty.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.FodderLimitsFilterGroup">
            <summary>
             Contains a group of filters to identify individual ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.FodderLimitsFilterGroup.PoolValues">
            <summary>
            Monthly values to supply selected individuals
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FodderLimitsFilterGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.FodderLimitsFilterGroup.StrictLimits">
            <summary>
            Are set limits strict, or can individual continue eating if food available? 
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFeedGroup">
            <summary>
             Contains a group of filters to identify individual in labour pool
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFeedGroup.Value">
            <summary>
            Value to supply for each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFeedGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFeedGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilterGroup">
            <summary>
             Contains a group of filters to identify individuals able to undertake labour
            </summary> 
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFilterGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFilterGroup.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFilterGroup.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFilterGroup.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFilterGroup.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourPriceGroup">
            <summary>
             Contains a group of filters to identify individual labour in a set price group
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.LabourPriceGroup.Value">
            <summary>
            Pay rate
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourPriceGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourPriceGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourPriceGroup.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourPriceGroup.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourPriceGroup.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourPriceGroup.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.OtherAnimalsFilterGroup">
            <summary>
             Contains a group of filters to identify individual other animals
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilterGroup.MonthlyValues">
            <summary>
            Daily amount to supply selected individuals each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.OtherAnimalsFilterGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilterGroup.AnimalType">
            <summary>
            name of other animal type
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.OtherAnimalsFilterGroup.SelectedOtherAnimalsType">
            <summary>
            The Other animal type this group points to
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantActivityGroup">
            <summary>
             Defines a group of individual ruminants for which all activities below the implementation consider
            </summary> 
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantActivityGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantActivityGroup.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantActivityGroup.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantActivityGroup.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantActivityGroup.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantFeedGroup">
            <summary>
             Contains a group of filters to identify individual ruminants for feeding
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantFeedGroup.Value">
            <summary>
            Value to supply for each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantFeedGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantFeedGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantFeedGroupMonthly">
            <summary>
             Contains a group of filters and sorts to identify individual ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantFeedGroupMonthly.MonthlyValues">
            <summary>
            Daily value to supply for each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantFeedGroupMonthly.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantFeedGroupMonthly.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantFeedGroupMonthly.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantGroup">
            <summary>
             Contains a group of filters and sorters to identify individual ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantGroup.Identifier">
            <summary>
            An identifier for this FilterGroup based on parent requirements
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantGroup.#ctor">
            <summary>
            Constructor to apply defaults
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantGroup.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantGroup.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantGroup.ParentSuppliedIdentifiers">
            <summary>
            A method to return the list of identifiers relavent to this ruminant group
            </summary>
            <returns>A list of identifiers as stings</returns>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantGroup.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantGroup.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Groupings.SortByAttribute">
            <summary>
             Individual sort rule based on Attribute value
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.SortByAttribute.AttributeTag">
            <summary>
            Name of attribute to sort by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.SortByAttribute.FilterStyle">
            <summary>
            Style to assess attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.SortByAttribute.SortDirection">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Groupings.SortByAttribute.MissingAttributeValue">
            <summary>
            Value to sort by if attribute is missing
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByAttribute.OrderRule``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByAttribute.ToString">
            <summary>
            Convert sort to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByAttribute.ToHTMLString">
            <summary>
            Convert sort to html string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByAttribute.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByAttribute.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByAttribute.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Groupings.SortByProperty">
            <summary>
             Individual sort rule based on value of property or method
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.SortByProperty.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Groupings.SortByProperty.PropertyOfIndividual">
            <summary>
            Name of property to sort by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.SortByProperty.SortDirection">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByProperty.OrderRule``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByProperty.ToString">
            <summary>
            Convert sort to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByProperty.ToHTMLString">
            <summary>
            Convert sort to html string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByProperty.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByProperty.ModelSummaryClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.SortByProperty.ModelSummaryOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Groupings.SortRandom">
            <summary>
             Randomises the order of any unsorted parameters. Must be the last element in its group.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.SortRandom.SortDirection">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortRandom.OrderRule``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortRandom.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortRandom.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortRandom.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.SortRandom.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this component
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Groupings.TakeFromFiltered">
            <summary>
             A component to determine how many of the filtered group to use
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.TakeFromFiltered.TakeStyle">
            <summary>
            Take style
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.TakeFromFiltered.TakePositionStyle">
            <summary>
            Take position
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.TakeFromFiltered.Value">
            <summary>
            Value to take
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.NumberToTake(System.Int32)">
            <summary>
            Metod to calculate the number required based on style and ppoulation zise
            </summary>
            <param name="groupSize">The number of individuals in the group</param>
            <returns>Number to take</returns>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.ToString">
            <summary>
            Convert sort to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.ToHtmlString">
            <summary>
            Convert sort to html string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.ModelSummaryClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Groupings.TakeFromFiltered.ModelSummaryOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.FilterGroup`1">
            <summary>
            Implements IFilterGroup for a specific set of filter parameters
            </summary>
        </member>
        <member name="F:Models.CLEM.FilterGroup`1.properties">
            <summary>
            The properties available for filtering
            </summary>
        </member>
        <member name="P:Models.CLEM.FilterGroup`1.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.GetParameterNames">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.GetProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.ClearRules">
            <summary>
            Clear all rules
            </summary>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.OnSimulationCommencing(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.InitialiseFilters(System.Boolean)">
            <summary>
            Initialise filter rules and dropdown lists of properties available for TFilter
            </summary>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.Filter``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.Filter``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.ModelSummaryInnerClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FilterGroup`1.ModelSummaryInnerOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Interfaces.IActivityPerformedNotifier">
            <summary>
            Interface for Activities able to report performed event
            </summary>
        </member>
        <member name="E:Models.CLEM.Interfaces.IActivityPerformedNotifier.ActivityPerformed">
            <summary>
            Activity performed event handler
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IActivityTimer">
            <summary>
            Event timer interface
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IActivityTimer.ActivityDue">
            <summary>
            Method to determine whether the activity is due
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.IActivityTimer.Check(System.DateTime)">
            <summary>
            Method to determine whether the activity is due based on a specified date
            </summary>
            <returns>Whether the activity is due based on the specified date</returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.IActivityTimer.OnActivityPerformed(System.EventArgs)">
            <summary>
            Timer due and performed trigger
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Interfaces.IAttributable">
            <summary>
            Describes an individual with an attribute list
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IAttributable.Attributes">
            <summary>
            A list of attributes added to this individual
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.ICLEMDescriptiveSummary">
            <summary>
            Interface for models with CLEM Descriptive Summary.
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummary">
            <summary>
            Provides the description of the model settings for summary (GetFullSummary)
            </summary>
            <returns>Html formatted description</returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.GetFullSummary(Models.Core.IModel,System.Collections.Generic.List{System.String},System.String,System.Func{System.String,System.String})">
            <summary>
            Method to create the full descriptive summary for a model and all ancestors
            </summary>
            <param name="model">The model providing the summary</param>
            <param name="parentControlList">history of parent controls for description style</param>
            <param name="htmlString">Initial string to append to</param>
            <param name="markdown2Html">Method to convert markdown memos to html</param>
            <returns>Summary description HTML text</returns>
        </member>
        <member name="P:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryStyle">
            <summary>
            Styling to use for HTML summary
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.CurrentAncestorList">
            <summary>
            List of parent model types before this 
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.FormatForParentControl">
            <summary>
            Determines if this discription is below a parent model
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryInnerClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryInnerOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryInnerOpeningTagsBeforeSummary">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryNameTypeHeader">
            <summary>
            Generates the header for description
            </summary>
            <returns>HTML of header</returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ICLEMDescriptiveSummary.ModelSummaryNameTypeHeaderText">
            <summary>
            Provide the text to place in the model summary header row
            </summary>
            <returns>header text</returns>
        </member>
        <member name="T:Models.CLEM.Interfaces.ICLEMUI">
            <summary>
            Interface for UI parameters associated with models.
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ICLEMUI.SelectedTab">
            <summary>
            Selected display tab
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IFeedType">
            <summary>
            Interface for feet types
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IFeedType.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IFeedType.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IFeedType.StartingAmount">
            <summary>
            Starting Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IFeedType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IFileCrop">
            <summary>
            Crop data reader interface
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFileCrop.GetCropDataForEntireRun(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the DataTable created from the Forage File using the specified parameters.
            <returns></returns>
            </summary>
            <param name="soilID"></param>
            <param name="cropName"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns>A struct called CropDataType containing the crop data for this month.
            This struct can be null. 
            </returns>
        </member>
        <member name="P:Models.CLEM.Interfaces.IFileCrop.FileName">
            <summary>
            Filename property
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IFilePasture">
            <summary>
            Pasture datacube reader interface
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFilePasture.GetIntervalsPastureData(System.Int32,System.String,System.Double,System.Double,System.Double,System.DateTime,System.Int32)">
            <summary>
            Queries the the SQLite pasture database using the specified parameters.
            </summary>
            <param name="region"></param>
            <param name="soil"></param>
            <param name="grassBasalArea"></param>
            <param name="landCondition"></param>
            <param name="stockingRate"></param>
            <param name="ecolCalculationDate"></param>
            <param name="ecolCalculationInterval"></param>
            <returns>List of pasture data types</returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFilePasture.RecordsFound(System.String,System.Object)">
            <summary>
            Check that records exist in database
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Interfaces.IFilterable">
            <summary>
            Indicates a resource with properties that can be filtered
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IFilterGroup">
            <summary>
            The parent model for holding a collection of filters
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IFilterGroup.Parameters">
            <summary>
            Maps the property name to its reflected PropertyInfo
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFilterGroup.GetParameterNames">
            <summary>
            Retrieves a list of parameters available from the generic type being filtered
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFilterGroup.GetProperty(System.String)">
            <summary>
            Retrieves information on a property
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFilterGroup.Filter``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters the source using the group items
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IFilterGroup.Filter``1(``0)">
            <summary>
            Determines if an item is in the filter group
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IIdentifiableComponent">
            <summary>
            A CLEM model able to be identified by the parent given a user specified identifier
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IIdentifiableComponent.Identifier">
            <summary>
            Identifier of this component 
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IPastureManager">
            <summary>
            Interface for a pasture manager
            Can be CropActivityManageCrop or PastureActivityManage
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IPastureManager.Area">
            <summary>
            The area currently assigned to the managed pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IPastureManager.Name">
            <summary>
            The model name
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IResourcePricing">
            <summary>
            An interface to interact with resource pricing
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourcePricing.PurchaseOrSale">
            <summary>
            Purchase or sale pricing style
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourcePricing.PreviousPrice">
            <summary>
            Previous price
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourcePricing.CurrentPrice">
            <summary>
            Current price
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IResourcePricing.SetPrice(System.Double,Models.Core.IModel)">
            <summary>
            A method to set the current price
            </summary>
            <param name="amount">New price</param>
            <param name="model">Modifying model</param>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourcePricing.Resource">
            <summary>
            Resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourcePricing.Name">
            <summary>
            Name of model
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourcePricing.NameWithParent">
            <summary>
            Full name of model
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IReportPricingChange">
            <summary>
            An interface to interact with resource pricing
            </summary>
        </member>
        <member name="E:Models.CLEM.Interfaces.IReportPricingChange.PriceChangeOccurred">
            <summary>
            Price changed event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IReportPricingChange.LastPriceChange">
            <summary>
            Last price change details
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IResourceType">
            <summary>
            Interface of a Resource Type.
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IResourceType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add this Amount to the existing Amount.
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity requesting resource</param>
            <param name="relatesToResource">The resource the transaction relates to, not uses</param>
            <param name="category">Name of individual requesting resource</param>
        </member>
        <member name="M:Models.CLEM.Interfaces.IResourceType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove this Amount from the existing Amount
            </summary>
            <param name="request">The resource request object that hold information</param>
        </member>
        <member name="M:Models.CLEM.Interfaces.IResourceType.Set(System.Double)">
            <summary>
            Set the amount to this new value.
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceType.Amount">
            <summary>
            Get the current amount of this resource available.
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceType.LastGain">
            <summary>
            Get the amount of the last gain in this resource 
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.IResourceType.Price(Models.CLEM.PurchaseOrSalePricingStyleType)">
            <summary>
            Get the current price of this resource.
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceType.Value">
            <summary>
            Value of the resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceType.Units">
            <summary>
            Get the units of measure this resource.
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceType.Name">
            <summary>
            Name of model
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.IResourceWithTransactionType">
            <summary>
            Interface to add transaction tracking ability to a Resource Type.
            </summary>
        </member>
        <member name="E:Models.CLEM.Interfaces.IResourceWithTransactionType.TransactionOccurred">
            <summary>
            Resource transaction occured event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceWithTransactionType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.IResourceWithTransactionType.LastGain">
            <summary>
            Last gain transaction amount
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.ISetAttribute">
            <summary>
            Interface for all attribute models
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.ISetAttribute.GetAttribute(System.Boolean)">
            <summary>
            Get an instance of the attribute 
            </summary>
            <param name="createNewInstance">Recalculate all randomly assigned values</param>
        </member>
        <member name="P:Models.CLEM.Interfaces.ISetAttribute.AttributeName">
            <summary>
            Name to apply to the attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ISetAttribute.Mandatory">
            <summary>
            Mandatory attribute
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.ISort">
            <summary>
            Enables a model to be sorted
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ISort.SortDirection">
            <summary>
            The direction of sorting to apply
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.ISort.OrderRule``1(``0)">
            <summary>
            An expression defining how the items should be sorted
            </summary>
            <typeparam name="T">The type of item to be sorted</typeparam>
            <param name="item">An instance of a sortable item</param>
            <returns>Any object, which will be ordered using the default comparer</returns>
        </member>
        <member name="T:Models.CLEM.Interfaces.Extensions">
            <summary>
            Contains extension methods for ISort
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.Extensions.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Models.CLEM.Interfaces.ISort})">
            <summary>
            Order a collection based on the given sorting parameters
            </summary>
            <param name="source">The items to sort</param>
            <param name="sorts">The parameters to sort by</param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Interfaces.ISpecificOutputFilename">
            <summary>
            Interface to provide specified filename for html output produced
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ISpecificOutputFilename.HtmlOutputFilename">
            <summary>
            Name of output filename
            </summary>
        </member>
        <member name="T:Models.CLEM.Interfaces.ITransmute">
            <summary>
            Interface for transmutation costs
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ITransmute.TransmuteResourceType">
            <summary>
            Resource type to transmute
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ITransmute.ResourceGroup">
            <summary>
            Resource type to transmute
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ITransmute.AmountPerPacket">
            <summary>
            Amount (B) per packet (A)
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ITransmute.TransmuteResourceTypeName">
            <summary>
            Name of resource type to transmute
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ITransmute.TransmuteStyle">
            <summary>
            Style of transmute
            </summary>
        </member>
        <member name="P:Models.CLEM.Interfaces.ITransmute.FinanceTypeForTransactionsName">
            <summary>
            Finance account for recording price based transactions
            </summary>
        </member>
        <member name="M:Models.CLEM.Interfaces.ITransmute.ShortfallPackets(System.Double)">
            <summary>
            Calculate the number of packets needed based on shortfall supplied and style of Transmute
            </summary>
            <param name="amount">The amount of shortfall resource</param>
            <returns>The number of packets</returns>
        </member>
        <member name="M:Models.CLEM.Interfaces.ITransmute.DoTransmute(Models.CLEM.Resources.ResourceRequest,System.Double,System.Double,Models.CLEM.Resources.ResourcesHolder,System.Boolean)">
            <summary>
            Method to transform the resource and return amount remaining in Transmute resource (B)
            </summary>
            <param name="request">The resource request defining the amount of transmute resource (B) needed</param>
            <param name="shortfall">The amount the resource is in shortfall</param>
            <param name="requiredByActivities">the amount of the transmute resource needed by other activities in the time-step</param>
            <param name="holder">Resource holder</param>
            <param name="queryOnly">Only perfrom initial query, do not take resources</param>
            <returns>Whether the Transmute resource (B) into (A) is successful</returns>
        </member>
        <member name="T:Models.CLEM.ListStatistics">
            <summary>
            Summary statistics of a list
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.Average">
            <summary>
            Average of list
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.StandardDeviation">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.AverageMate">
            <summary>
            Average of list
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.StandardDeviationMate">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.Count">
            <summary>
            number of individuals with attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.Total">
            <summary>
            number of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.ListStatistics.TotalMate">
            <summary>
            number of individuals with Mate value
            </summary>
        </member>
        <member name="T:Models.CLEM.Market">
            <summary>
            CLEM Zone to control simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.Market.Area">
            <summary>Area of the zone.</summary>
            <value>The area.</value>
        </member>
        <member name="P:Models.CLEM.Market.Slope">
            <summary>Gets or sets the slope.</summary>
            <value>The slope.</value>
        </member>
        <member name="P:Models.CLEM.Market.AspectAngle">
            <summary>
            not used in CLEM
            </summary>
        </member>
        <member name="P:Models.CLEM.Market.Altitude">
            <summary>Local altitude (meters above sea level).</summary>
        </member>
        <member name="P:Models.CLEM.Market.SelectedTab">
            <summary>
            Identifies the last selected tab for display
            </summary>
        </member>
        <member name="P:Models.CLEM.Market.Resources">
            <summary>
            ResourceHolder for the market
            </summary>
        </member>
        <member name="P:Models.CLEM.Market.BankAccount">
            <summary>
            Default (first) bank account for the market
            </summary>
        </member>
        <member name="M:Models.CLEM.Market.OnCLEMValidate(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to perform validation</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Market.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Market.CurrentAncestorList">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Market.FormatForParentControl">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Market.GetFullSummary(System.Object,System.Collections.Generic.List{System.String},System.String,System.Func{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Reporting.ConceptionStatus">
            <summary>
            Conception status
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.Conceived">
            <summary>
            Female just conceived
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.Failed">
            <summary>
            Prenatal or at birth mortality
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.Birth">
            <summary>
            Successful birth
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.Weaned">
            <summary>
            Survived to wean
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.Unsuccessful">
            <summary>
            Unsuccessful mating
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.NotMated">
            <summary>
            Not mated
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.NotReady">
            <summary>
            Not ready
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ConceptionStatus.NotAvailable">
            <summary>
            Not available
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ConceptionStatusChangedEventArgs">
            <summary>
            Class for reporting conception status change details
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ConceptionStatusChangedEventArgs.Status">
            <summary>
            Current status to report
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ConceptionStatusChangedEventArgs.Female">
            <summary>
            Female being reported
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ConceptionStatusChangedEventArgs.ConceptionDate">
            <summary>
            Date of conception
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ConceptionStatusChangedEventArgs.#ctor(Models.CLEM.Reporting.ConceptionStatus,Models.CLEM.Resources.RuminantFemale,System.DateTime,Models.CLEM.Resources.Ruminant)">
            <summary>
            Constructor
            </summary>
            <param name="status">Change status</param>
            <param name="female">Individual being reported</param>
            <param name="dateTime">Current clock</param>
            <param name="offspring">The offspring related to</param>
        </member>
        <member name="T:Models.CLEM.Reporting.EcolIndicatorsEventArgs">
            <summary>
            Class for reporting transaction details in EcologicalIndicatorsCalculated Events
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.EcolIndicatorsEventArgs.Indicators">
            <summary>
            Ecological indicators details
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportActivitiesPerformed">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.CreateHTML">
            <summary>
            Create html version of summary
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.RotateReport">
            <summary>
            Rotate report so months are columns
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.AutoCreateHTML">
            <summary>
            Automatically create html version of summary at end of simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.SelectedTab">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.HtmlOutputFilename">
            <summary>
            Name of filename to save labour report
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.GetData(Models.Storage.IDataStore)">
            <summary>
            Get the data for display
            </summary>
            <param name="dataStore">The datastore to use</param>
            <returns>Data as a datatable</returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.Transpose(System.Data.DataTable)">
            <summary>
            Method to transpose columns
            </summary>
            <param name="dt">Data as DataTable</param>
            <returns>Transposed DataTable</returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.CreateDataTable(Models.Storage.IDataStore,System.String,System.Boolean)">
            <summary>
            Method to create data table
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.CreateHTMLVersion(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Create a html rendered version of this report
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryStyle">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.CurrentAncestorList">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportActivitiesPerformed.FormatForParentControl">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.GetFullSummary(Models.Core.IModel,System.Collections.Generic.List{System.String},System.String,System.Func{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.SummaryOpacity(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryInnerOpeningTagsBeforeSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryNameTypeHeader">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.ModelSummaryNameTypeHeaderText">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportLabourRequirements">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportLabourRequirements.HtmlOutputFilename">
            <summary>
            Name of filename to save labour report
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportPasturePoolDetails">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportPivot">
            <summary>
            Provides utility to quickly summarise data from a report
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.SQL">
            <summary>
            The query generated by the pivot
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.Value">
            <summary>
            Tracks the active selection in the value box
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GetValueNames">
            <summary>
            Populates the value filter
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.Row">
            <summary>
            Tracks the active selection in the row box
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GetRowNames">
            <summary>
            Populates the row filter
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.Column">
            <summary>
            Tracks the active selection in the column box
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GetColumnNames">
            <summary>
            Populates the column filter
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.Time">
            <summary>
            Tracks the active selection in the time box
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GetTimes">
            <summary>
            Populates the time filter
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.Aggregator">
            <summary>
            Tracks the active selection in the time box
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GetAggregators">
            <summary>
            Populates the aggregate filter
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportPivot.SelectedTab">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GetColumnPivotOptions(System.Boolean)">
            <summary>
            Searches the columns of the parent report for the pivot options
            </summary>
            <param name="value"><see langword="true"/> if we are searching for value options</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.HasDataValues(System.Data.DataColumn)">
            <summary>
            Test if a column contains data values
            </summary>
            <param name="col">The column being tested</param>
            <returns>
            <see langword="true"/> if the column contains data values,
            <see langword="false"/> otherwise 
            </returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.GenerateTable">
            <summary>
            Generates the pivot table
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPivot.OnCompleted(System.Object,System.EventArgs)">
            <summary>
            Saves the view post-simulation
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportQuery">
            <summary>
            Provides utility to quickly summarise data from a report
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportQuery.SQL">
            <summary>
            The line by line SQL query, separated for display purposes
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportQuery.SelectedTab">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportQuery.RunQuery">
            <summary>
            Runs the query
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportQuery.OnCompleted(System.Object,System.EventArgs)">
            <summary>
            Saves the view post-simulation
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportResourceBalances">
            <summary>
            A report class for writing resource balances to the data store.
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ResourceGroupsToReport">
            <summary>
            Gets or sets report groups for outputting
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ReportAmount">
            <summary>
            Report balances of amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ReportValue">
            <summary>
            Report balances of value
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ReportAnimalEquivalents">
            <summary>
            Report balances of animal equivalents
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ReportAnimalWeight">
            <summary>
            Report balances of animal weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ReportLandEntire">
            <summary>
            Report available land as balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.ReportLabourIndividuals">
            <summary>
            Report available labour in individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceBalances.SelectedTab">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.DoOutputEvent(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportResourceLedger">
            <summary>
            A report class for writing resource ledger output to the data store.
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.ResourceGroupsToReport">
            <summary>
            Gets or sets report groups for outputting
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.ReportStyle">
            <summary>
            Style of transaction report to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.ReportLossesAsNegative">
            <summary>
            Report all losses as -ve values
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.IncludePrice">
            <summary>
            Include price conversion if available
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.IncludeFinancialYear">
            <summary>
            Include financial year
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.IncludeConversions">
            <summary>
            Include unit conversion if available
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportResourceLedger.SelectedTab">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceLedger.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceLedger.GetResourceGroupsAvailable">
            <summary>
            return a list of resource group cpmponents available
            </summary>
            <returns>A list of names of components</returns>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportResourceShortfalls">
            <summary>
            A report class for writing resource shortfall output to the data store.
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportRuminantAttributeSummary">
            <summary>Ruminant Attribute summery reporting</summary>
            <summary>This activity summarises the attribute value statistics for groups of individuals</summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantAttributeSummary.AttributeTag">
            <summary>
            Attribute tag to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantAttributeSummary.ReportAtStart">
            <summary>
            Report at initialisation
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantAttributeSummary.ReportMateValues">
            <summary>
            Report mate values for breeders
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantAttributeSummary.MaxMonthsToReportMate">
            <summary>
            Number of months since mating to report last mate
            </summary>
        </member>
        <member name="E:Models.CLEM.Reporting.ReportRuminantAttributeSummary.OnReportItemGenerated">
            <summary>
            Report item was generated event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantAttributeSummary.LastStatistics">
            <summary>
            The last individual to be added or removed (for reporting)
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.ReportItemGenerated(Models.CLEM.Reporting.RuminantAttributeStatisticsEventArgs)">
            <summary>
            Report item generated and ready for reporting 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.OnConnectToEvents(System.Object,System.EventArgs)">
            <summary>
            Connect event handlers.
            </summary>
            <param name="sender">Sender object..</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>
            Function to report herd individuals each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.OncCLEMValidate(System.Object,System.EventArgs)">
            <summary>
            Function to report herd individuals each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.ReportHerd">
            <summary>
            Do reporting of individuals
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.SummariseAttribute(System.String,System.Boolean,Models.CLEM.Groupings.RuminantGroup)">
            <summary>
            Return the mean and standard deviation of an attribute value
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantAttributeSummary.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Reporting.RuminantAttributeStatisticsEventArgs">
            <summary>
            New ruminant report item event args
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantAttributeStatisticsEventArgs.GroupName">
            <summary>
            Name of filter group
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantAttributeStatisticsEventArgs.Statistics">
            <summary>
            The Attribute statistics from the group of individuals
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportRuminantHerd">
            <summary>Ruminant reporting</summary>
            <summary>This activity writes individual ruminant details for reporting</summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantHerd.ReportAtStart">
            <summary>
            Report at initialisation
            </summary>
        </member>
        <member name="E:Models.CLEM.Reporting.ReportRuminantHerd.OnReportItemGenerated">
            <summary>
            Report item was generated event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantHerd.ReportDetails">
            <summary>
            The details of the summary group for reporting
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.ReportItemGenerated(Models.CLEM.Reporting.RuminantReportItemEventArgs)">
            <summary>
            Report item generated and ready for reporting 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>
            Function to report herd individuals each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.OncCLEMValidate(System.Object,System.EventArgs)">
            <summary>
            Function to report herd individuals each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.ReportHerd">
            <summary>
            Do reporting of individuals
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Reporting.RuminantReportItemEventArgs">
            <summary>
            New ruminant report item event args
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.RumObj">
            <summary>
            Individual ruminant to report as Female
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Individual">
            <summary>
            Individual ruminant to report
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Female">
            <summary>
            Individual ruminant to report as Female
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Male">
            <summary>
            Individual ruminant to report as Male
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Category">
            <summary>
            Category string
            </summary>
        </member>
        <member name="T:Models.CLEM.ResourceTransaction">
            <summary>
            Class for tracking Resource transactions
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.ResourceType">
            <summary>
            Resource type in transaction
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Activity">
            <summary>
            Sender activity
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Category">
            <summary>
            Cateogry for data analysis and summary
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.RelatesToResource">
            <summary>
            Resource this transaction relates to for data analysis and summary
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Gain">
            <summary>
            Amount added
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Loss">
            <summary>
            Amount removed
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.TransactionType">
            <summary>
            Transaction type
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Amount">
            <summary>
            The amount of the transaction
            </summary>
        </member>
        <member name="M:Models.CLEM.ResourceTransaction.AmountModifiedForLoss(System.Boolean)">
            <summary>
            Allows inclusion of -ve in losses
            </summary>
            <param name="lossesAsNegative">convert losses to negative</param>
            <returns>The modified amount</returns>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.ExtraInformation">
            <summary>
            Object to sotre specific extra information such as cohort details
            </summary>
        </member>
        <member name="M:Models.CLEM.ResourceTransaction.ConvertTo(System.String,System.String,System.Boolean)">
            <summary>
            Convert transaction to another value using ResourceType supplied converter
            </summary>
            <param name="converterName">Name of converter to use</param>
            <param name="transactionType">Indicates if it is a Gain or Loss to convert</param>
            <param name="reportLossesAsNegative">report losses as negative values</param>
            <returns>Value to report</returns>
        </member>
        <member name="M:Models.CLEM.ResourceTransaction.ConvertTo(System.String,System.Boolean)">
            <summary>
            Convert transaction to another value using ResourceType supplied converter and using the TransactionType
            </summary>
            <param name="converterName">Name of converter to use</param>
            <param name="reportLossesAsNegative">Report losses as negative</param>
            <returns>Value to report</returns>
        </member>
        <member name="T:Models.CLEM.TransactionEventArgs">
            <summary>
            Class for reporting transaction details in OnTransactionEvents
            </summary>
        </member>
        <member name="P:Models.CLEM.TransactionEventArgs.Transaction">
            <summary>
            Transaction details
            </summary>
        </member>
        <member name="T:Models.CLEM.SummariseRuminantHerd">
            <summary>Ruminant summary</summary>
            <summary>This activity summarizes ruminant herds for reporting</summary>
            <summary>Remove if you do not need monthly herd summaries</summary>
        </member>
        <member name="P:Models.CLEM.SummariseRuminantHerd.GroupStyle">
            <summary>
            Tracks the active selection in the value box
            </summary>
        </member>
        <member name="E:Models.CLEM.SummariseRuminantHerd.OnReportItemGenerated">
            <summary>
            Report item was generated event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.SummariseRuminantHerd.ReportDetails">
            <summary>
            The details of the summary group for reporting
            </summary>
        </member>
        <member name="P:Models.CLEM.SummariseRuminantHerd.herdFilters">
            <summary>
            List of filters that define the herd
            </summary>
        </member>
        <member name="M:Models.CLEM.SummariseRuminantHerd.ReportItemGenerated(Models.CLEM.HerdReportItemGeneratedEventArgs)">
            <summary>
            Report item generated and ready for reporting 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.SummariseRuminantHerd.HerdFilters">
            <summary>
            List of filters that define the herd
            </summary>
        </member>
        <member name="M:Models.CLEM.SummariseRuminantHerd.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.SummariseRuminantHerd.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>
            Function to summarise the herd based on cohorts each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.SummariseRuminantHerd.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.SummarizeRuminantHerdStyle">
            <summary>
            Style for reporting groups in Summarize ruminant herd
            </summary>
        </member>
        <member name="F:Models.CLEM.SummarizeRuminantHerdStyle.Classic">
            <summary>
            Use original method with age in years
            </summary>
        </member>
        <member name="F:Models.CLEM.SummarizeRuminantHerdStyle.ByClass">
            <summary>
            Group by class
            </summary>
        </member>
        <member name="F:Models.CLEM.SummarizeRuminantHerdStyle.ByAgeYears">
            <summary>
            Group by age in years
            </summary>
        </member>
        <member name="F:Models.CLEM.SummarizeRuminantHerdStyle.ByAgeMonths">
            <summary>
            Group by age in months 
            </summary>
        </member>
        <member name="T:Models.CLEM.HerdReportItemGeneratedEventArgs">
            <summary>
            New herd report item generated event args
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.TimeStep">
            <summary>
            Timestep
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Breed">
            <summary>
            Breed of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Herd">
            <summary>
            Herd of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Group">
            <summary>
            Provides value of age or class specified
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Age">
            <summary>
            Age of individuals (lower bound of year class)
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Sex">
            <summary>
            Sex of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Number">
            <summary>
            Number of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageWeight">
            <summary>
            Average weight of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageWeightGain">
            <summary>
            Average weight gain of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageProportionOfHighWeight">
            <summary>
            Average proportion of weight to height weight
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageProportionOfNormalisedWeight">
            <summary>
            Average proportion of weight to normalised weight
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageIntake">
            <summary>
            Average intake of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageProportionPotentialIntake">
            <summary>
            Average proportion intake of potential intake
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AdultEquivalents">
            <summary>
            Adult equivalent of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.NumberOfBirths">
            <summary>
            Births of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.NumberPregnant">
            <summary>
            Number pregnant
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.NumberLactating">
            <summary>
            Number lactating
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalFoodStore">
            <summary>
             Store for all the food designated for animals to eat (eg. Forages and Supplements)
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.AnimalFoodStoreType">
            <summary>
            This stores the initialisation parameters for a fodder type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.CurrentStoreNitrogen">
            <summary>
            Current store nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.StartingAmount">
            <summary>
            Starting Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.Amount">
            <summary>
            Amount currently available (kg dry)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add to food store
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from animal food store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Set(System.Double)">
            <summary>
            Set amount of animal food available
            </summary>
            <param name="newValue">New value to set food store to</param>
        </member>
        <member name="E:Models.CLEM.Resources.AnimalFoodStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalPricing">
            <summary>
            User entry of Animal prices
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalPricing.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalPricing.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalPricing.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalPricing.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalPricing.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.CLEMResourceTypeBase">
            <summary>
             CLEM Resource Type base model
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.CLEMResourceTypeBase.EquivalentMarketStore">
            <summary>
            A link to the equivalent market store for trading.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMResourceTypeBase.MarketStoreExists">
            <summary>
            Has a market store been found
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMResourceTypeBase.EquivalentMarketStoreDetermined">
            <summary>
            Detemrines if an equivalent resource has been found in the market
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMResourceTypeBase.TransmutationDefined">
            <summary>
            Determine whether transmutation has been defined for this foodtype
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.PricingExists(Models.CLEM.PurchaseOrSalePricingStyleType)">
            <summary>
            Does pricing exist for this type
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.Price(Models.CLEM.PurchaseOrSalePricingStyleType)">
            <summary>
            Resource price
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.ConvertTo(System.String,System.Double)">
            <summary>
            Convert specified amount of this resource to another value using ResourceType supplied converter
            </summary>
            <param name="converterName">Name of converter to use</param>
            <param name="amount">Amount to convert</param>
            <returns>Value to report</returns>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.ConvertTo(System.String)">
            <summary>
            Convert the current amount of this resource to another value using ResourceType supplied converter
            </summary>
            <param name="converterName">Name of converter to use</param>
            <returns>Value to report</returns>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.ConversionFactor(System.String)">
            <summary>
            Convert the current amount of this resource to another value using ResourceType supplied converter
            </summary>
            <param name="converterName">Name of converter to use</param>
            <returns>Value to report</returns>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.FindEquivalentMarketStore">
            <summary>
            Locate the equivalent store in a market if available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMResourceTypeBase.LastGain">
            <summary>
            Amount of last gain transaction
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add resources from various objects
            </summary>
            <param name="resourceAmount">Amount to be applied</param>
            <param name="activity">Activity performing this transaction</param>
            <param name="relatesToResource">Resource this transaction relates to</param>
            <param name="category">Category of this resource transaction</param>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove amount based on a ResourceRequest object
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.Set(System.Double)">
            <summary>
            Set the amount of the resource. Use with caution as resources should be changed by add and remove methods.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMResourceTypeBase.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.CommonLandFoodStoreType">
            <summary>
            This provides a common land store as GrazeFoodStoreType or AnimalFoodStoreType
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.NToDMDCoefficient">
            <summary>
            Coefficient to convert N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.NToDMDIntercept">
            <summary>
            Intercept to convert N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.Nitrogen">
            <summary>
            Nitrogen of common land pasture (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.MinimumNitrogen">
            <summary>
            Minimum Nitrogen %
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.MinimumDMD">
            <summary>
            Minimum Dry Matter Digestibility
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.PastureLink">
            <summary>
            Link to a AnimalFoodStore or GrazeFoodStore for pasture details
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.NitrogenReductionFromPasture">
            <summary>
            Proportional reduction of N% from linked pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.ONCLEMPastureReady(System.Object,System.EventArgs)">
            <summary>Store amount of pasture available for everyone at the start of the step (kg per hectare)</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Resources.CommonLandFoodStoreType.EcologicalIndicatorsCalculated">
            <summary>
            Ecological indicators have been calculated
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.OnEcologicalIndicatorsCalculated(System.EventArgs)">
            <summary>
            Ecological indicators calculated 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.CurrentEcologicalIndicators">
            <summary>
            Ecological indicators of this pasture
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Graze food add method.
            This style is not supported in GrazeFoodStoreType
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.Remove(System.Double,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.Set(System.Double)">
            <inheritdoc/>
        </member>
        <member name="E:Models.CLEM.Resources.CommonLandFoodStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.CommonLandFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CommonLandFoodStoreType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.EcologicalIndicators">
            <summary>
            A store of all ecological indicators for a given pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.ResourceType">
            <summary>
            Name of the resource holding these details
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.LandConditionIndex">
            <summary>
            Land condition index
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.GrassBasalArea">
            <summary>
            Grass basla area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.StockingRate">
            <summary>
            Average monthly stocking rate (Adult Equivalents/square km)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Utilisation">
            <summary>
            Utilisation percentage
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Erosion">
            <summary>
            Erosion
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Runoff">
            <summary>
            Runoff
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Rainfall">
            <summary>
            Rainfall
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Cover">
            <summary>
            Cover
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.TreeBasalArea">
            <summary>
            tree basal area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.TreeCarbon">
            <summary>
            Tree carbon
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Perennials">
            <summary>
            Perennials
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EcologicalIndicators.Reset">
            <summary>
            Reset all values
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.Equipment">
            <summary>
             Parent model of equipment stores.
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.EquipmentType">
            <summary>
             Store for equipment type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.ServiceInterval">
            <summary>
            Service interval
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.Odometer">
            <summary>
            Odometer
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.EquipmentType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.Finance">
            <summary>
             Parent model of finance models.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.Finance.CurrencyName">
            <summary>
            Currency used
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Finance.FirstMonthOfFinancialYear">
            <summary>
            Start of financial year
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Finance.FinancialYear">
            <summary>
            Method to determine the financial year from a given date
            </summary>
            <returns>The financial year</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Finance.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.FinanceType">
            <summary>
             Store for bank account
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.OpeningBalance">
            <summary>
            Opening balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.EnforceWithdrawalLimit">
            <summary>
            Enforce withdrawal limit
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.WithdrawalLimit">
            <summary>
            The amount this account can be withdrawn to (-ve)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.InterestRateCharged">
            <summary>
            Interest rate (%) charged on negative balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.InterestRatePaid">
            <summary>
            Interest rate (%) paid on positive balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.FundsAvailable">
            <summary>
            Current funds available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.Balance">
            <summary>
            Current balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Resources.FinanceType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStore">
            <summary>
             Store for all the biomass growing in the fields (pasture, crop residue etc)
             This acts like an AnimalFoodStore but in reality the food is in a field
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.GrazeFoodStore.Items">
            <summary>
            Current state of this resource.
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStore.EcologicalIndicatorsCalculated">
            <summary>
            Ecological indicators calculated event
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnEcologicalIndicatorsCalculated(System.EventArgs)">
            <summary>
            On ecological indicators calculated event
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStore.LastEcologicalIndicators">
            <summary>
            Last ecological indicators received
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter">
            <summary>
            Reduces new pasture growth Nitrogen content (N%) based on rules
            Allows for soil fertility to be implied from pasture production data
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.AnnualNitrogenSupply">
            <summary>
            Annual supply of N (kg per ha) before there is a nitrogen reduction in new growth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.AnnualYieldStartMonth">
            <summary>
            Month in which to start calculating annual pasture yield
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.NitrogenReduction">
            <summary>
            Proportional reduction in N%
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.GetProportionNitrogenLimited(System.Double)">
            <summary>
            Check for N reduction due to pasture yield or month based on latest growth
            </summary>
            <param name="newGrowthKgHa">The amount of new growth in this month (kg per ha)</param>
            <returns>The proportion of new grass nitrogen content to assign</returns>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.OnStartOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to reset annual yield in the specified month</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreFertilityLimiter.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStorePool">
            <summary>
            A food pool of given age
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.DryMatter">
            <summary>
            Dry Matter (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Age">
            <summary>
            Age of pool in months
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.StartingAmount">
            <summary>
            Amount to set at start (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Detached">
            <summary>
            Amount detached in this time step (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Consumed">
            <summary>
            Amount consumed in this time step (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Growth">
            <summary>
            Amount detached in this time step (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Name">
            <summary>
            Name of component
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Price(Models.CLEM.PurchaseOrSalePricingStyleType)">
            <summary>
            pricing
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.LastGain">
            <summary>
            Get the amount of the last gain in this resource 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Reset">
            <summary>
            Reset timestep stores
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add to Resource method.
            This style is not supported in GrazeFoodStoreType
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Add(Models.CLEM.Resources.GrazeFoodStorePool)">
            <summary>
            Add to Resource method.
            This style is used when a pool needs to be added to the current pool
            This occurs when no detachment and decay (values of zero) are included in the GrazeFoodStore parameters
            </summary>
            <param name="pool">GrazeFoodStorePool to add to this pool</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Remove(System.Double,Models.CLEM.CLEMModel,System.String)">
            <summary>
            
            </summary>
            <param name="removeAmount"></param>
            <param name="activity"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStoreType">
            <summary>
            This stores the parameters for a GrazeFoodType and holds values in the store
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.GrazeFoodStoreType.Pools">
            <summary>
            List of pools available
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Pool(System.Int32,System.Boolean)">
            <summary>
            Return the specified pool 
            </summary>
            <param name="index">index to use</param>
            <param name="getByAge">return where index is age</param>
            <returns>GraxeFoodStore pool</returns>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.NToDMDCoefficient">
            <summary>
            Coefficient to convert initial N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.NToDMDIntercept">
            <summary>
            Intercept to convert initial N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.GreenNitrogen">
            <summary>
            Nitrogen of new growth (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DecayNitrogen">
            <summary>
            Proportion Nitrogen loss each month from pools
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.MinimumNitrogen">
            <summary>
            Minimum Nitrogen %
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DecayDMD">
            <summary>
            Proportion Dry Matter Digestibility loss each month from pools
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.MinimumDMD">
            <summary>
            Minimum Dry Matter Digestibility
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DetachRate">
            <summary>
            Monthly detachment rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.CarryoverDetachRate">
            <summary>
            Detachment rate of 12 month or older plants
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.IntakeTropicalQualityCoefficient">
            <summary>
            Coefficient to adjust intake for tropical herbage quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.IntakeQualityCoefficient">
            <summary>
            Coefficient to adjust intake for herbage quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.InitialBiomass">
            <summary>
            Initial pasture biomass
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.FirstMonthOfGrowSeason">
            <summary>
            First month of seasonal growth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.LastMonthOfGrowSeason">
            <summary>
            Last month of seasonal growth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.NumberMonthsForInitialBiomass">
            <summary>
            Number of months for initial biomass
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Manager">
            <summary>
            A link to the Activity managing this Graze Food Store
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.KilogramsPerHa">
            <summary>
            The biomass per hectare of pasture available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.PercentUtilisation">
            <summary>
            Percent utilisation
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DMD">
            <summary>
            Calculated total pasture (all pools) Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Nitrogen">
            <summary>
            Calculated total pasture (all pools) Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.PastureDecays">
            <summary>
            DecayOfPasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.TonnesPerHectare">
            <summary>
            Amount (tonnes per ha)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.#ctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.GetValueByPoolAge(System.Int32,System.String)">
            <summary>
            Get a property of pools by pool age
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.EstimateDMD(System.Double)">
            <summary>
            Method to estimate DMD from N%
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.TonnesPerHectareStartOfTimeStep">
            <summary>
            Amount (tonnes per ha)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnCLEMFinalSetupBeforeSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to make checks after resources and activities initialised.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Cleans up pools
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to clear pools.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnCLEMDetachPasture(System.Object,System.EventArgs)">
            <summary>
            Function to detach pasture before reporting
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age resource pools
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.ONCLEMPastureReady(System.Object,System.EventArgs)">
            <summary>Store amount of pasture available for everyone at the start of the step (kg per hectare)</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStoreType.EcologicalIndicatorsCalculated">
            <summary>
            Ecological indicators have been calculated
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnEcologicalIndicatorsCalculated(System.EventArgs)">
            <summary>
            Ecological indicators calculated 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.CurrentEcologicalIndicators">
            <summary>
            Ecological indicators of this pasture
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.SetupStartingPasturePools(System.Double,System.Double)">
            <summary>
            A method to initialise initial pasture  biomass across pools 
            </summary>
            <param name="area">Area of pasture (ha)</param>
            <param name="firstMonthsGrowth">The growth (kg per ha) expected in the first month for accuracy</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Graze food add method.
            This style is not supported in GrazeFoodStoreType
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Remove(System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="removeAmount"></param>
            <param name="activityName"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.GreenhouseGases">
            <summary>
             Parent model of emission stores.
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.GreenhouseGasesType">
            <summary>
             Store for emission type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Resources.GreenhouseGasesType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.HumanFoodStore">
            <summary>
             Store for all the food designated for Household to eat (eg. Grain, Tree Crops (nuts) etc.)
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.HumanFoodStorePool">
            <summary>
            A food pool of given age
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStorePool.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStorePool.#ctor(System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="amount">Amount of food</param>
            <param name="age">Age of food</param>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStorePool.Age">
            <summary>
            Age of pool in months
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStorePool.Add(Models.CLEM.Resources.HumanFoodStorePool)">
            <summary>
            Add to Resource method.
            This style is used when a pool needs to be added to the current pool
            </summary>
            <param name="pool">HumanFoodStorePool to add to this pool</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStorePool.Add(System.Double)">
            <summary>
            Add to Resource method.
            This style is used when a pool needs to be added to the current pool
            </summary>
            <param name="amount">Amount to add to this pool</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStorePool.Remove(System.Double,Models.CLEM.CLEMModel,System.String)">
            <summary>
            
            </summary>
            <param name="removeAmount"></param>
            <param name="activity"></param>
            <param name="reason"></param>
        </member>
        <member name="T:Models.CLEM.Resources.HumanFoodStoreType">
            <summary>
            This stores the initialisation parameters for a Home Food Store type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.ConvertToKg">
            <summary>
            Convert to kg
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.EdibleProportion">
            <summary>
            Edible proportion of raw product
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.UseByAge">
            <summary>
            The number of months before this food store spoils and is unfit for consumption by humans
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.StartingAmount">
            <summary>
            Starting Amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.StartingAge">
            <summary>
            Starting age of the food
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.HumanFoodStoreType.Pools">
            <summary>
            List of pools available
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add to food store
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from human food store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Cleans up pools
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age resource pools
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Resources.HumanFoodStoreType.TransactionOccurred">
            <summary>
            Transaction occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.IIndividualAttribute">
            <summary>
            Interface for all resource attributes
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IIndividualAttribute.StoredValue">
            <summary>
            The value of the attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IIndividualAttribute.StoredMateValue">
            <summary>
            The value of the attribute of the most recent mate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IIndividualAttribute.InheritanceStyle">
            <summary>
            The style for inheritance of attribute
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.IIndividualAttribute.GetInheritedAttribute">
            <summary>
            Creates an attribute of parent type and returns for new offspring
            </summary>
            <returns>A new attribute inherited from parents</returns>
        </member>
        <member name="T:Models.CLEM.Resources.IndividualAttribute">
            <summary>
            A ruminant attribute that stores an associated object
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttribute.StoredValue">
            <summary>
            Value object of attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttribute.StoredMateValue">
            <summary>
            The value of the attribute of the most recent mate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttribute.InheritanceStyle">
            <summary>
            The style of inheritance of the attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttribute.Value">
            <summary>
            Value as a float
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttribute.MateValue">
            <summary>
            Mate's Value as a float
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.IndividualAttribute.GetInheritedAttribute">
            <summary>
            Get the attribute inherited by an offspring given both parent attribute values stored for a breeder
            </summary>
            <returns>A ruminant attribute to supply the offspring</returns>
        </member>
        <member name="T:Models.CLEM.Resources.CLEMGenotypeAttribute">
            <summary>
            A ruminant attribute that stores an associated geneotype
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMGenotypeAttribute.StoredValue">
            <summary>
            Value object of attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMGenotypeAttribute.StoredMateValue">
            <summary>
            The value of the attribute of the most recent mate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMGenotypeAttribute.InheritanceStyle">
            <summary>
            The style of inheritance of the attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMGenotypeAttribute.Value">
            <summary>
            Value as a string (e.g Bb)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.CLEMGenotypeAttribute.MateValue">
            <summary>
            Value as string from mate recorded by breeder
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.CLEMGenotypeAttribute.GetInheritedAttribute">
            <summary>
            Get the attribute inherited by an offspring given both parent attribute values stored for a breeder
            </summary>
            <returns>A ruminant attribute to supply the offspring</returns>
        </member>
        <member name="T:Models.CLEM.Resources.IndividualAttributeList">
            <summary>
            List of attributes for a resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttributeList.attributes">
            <summary>
            List of individual attributes
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttributeList.Items">
            <summary>
            The list of available attributes for the individual in a list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Resources.IndividualAttributeList.AttributesPresent">
            <summary>
            Check if the individual has any attributes added
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.IndividualAttributeList.Exists(System.String)">
            <summary>
            Check if the selected attribute exists on this individual
            </summary>
            <param name="tag">Attribute label</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.IndividualAttributeList.Add(System.String,Models.CLEM.Resources.IIndividualAttribute)">
            <summary>
            Add an attribute to this individual
            </summary>
            <param name="tag">Attribute label</param>
            <param name="value">Value to set or change</param>
        </member>
        <member name="M:Models.CLEM.Resources.IndividualAttributeList.GetValue(System.String)">
            <summary>
            Return the value of the selected attribute on this individual else null if not provided
            </summary>
            <param name="tag">Attribute label</param>
            <returns>Value of attribute if found</returns>
        </member>
        <member name="M:Models.CLEM.Resources.IndividualAttributeList.Remove(System.String)">
            <summary>
            Remove the attribute from this individual
            </summary>
            <param name="tag">Attribute label</param>
        </member>
        <member name="T:Models.CLEM.Resources.Labour">
            <summary>
             Parent model of Labour Person models.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.Labour.Items">
            <summary>
            Labour types currently available.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Labour.UseCohorts">
            <summary>
            Use cohorts for all analysis or use individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Labour.AllowAging">
            <summary>
            Allows indiviuals to age each month
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Labour.PayList">
            <summary>
            Current pay rate value of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Labour.PricingAvailable">
            <summary>
            Determine if a price schedule has been provided for this individual
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.GetDietaryValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            A method to calculate the total dietary intake by metric
            </summary>
            <param name="metric">Metric to use</param>
            <param name="includeHiredLabour">Include hired labour in calculations</param>
            <param name="reportPerAE">Report result as per Adult Equivalent</param>
            <returns>Amount eaten</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.GetDailyDietaryValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            A method to calculate the total dietary intake by metric
            </summary>
            <param name="metric">Metric to use</param>
            <param name="includeHiredLabour">Include hired labour in calculations</param>
            <param name="reportPerAE">Report result as per Adult Equivalent</param>
            <returns>Amount eaten per day</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validation of this resource
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to create labour list when simualtion commences</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnStartOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to check if labour availability is available.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnCLEMUpdateLabourAvailability(System.Object,System.EventArgs)">
            <summary>An event handler to update availability for the timestep.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.ONCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>Age individuals</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.CalculateAE(System.Double)">
            <summary>
            Calculate the AE of an individual based on provided relationship
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.AdultEquivalents(System.Boolean)">
            <summary>
            Calculate the number of Adult Equivalents on the farm
            </summary>
            <param name="includeHired">Include hired labour in the calculation</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.PayRate(Models.CLEM.Resources.LabourType)">
            <summary>
            Get value of a specific individual
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.PayRate(Models.CLEM.Resources.LabourType,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Get value of a specific individual with special requirements check (e.g. breeding sire or draught purchase)
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.GetAvailabilityForEntry(System.Int32)">
            <summary>
            Return the availability for individual in labour list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.LabourAvailabilityItem">
            <summary>
            An individual labour availability item with the same days available every month
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourAvailabilityItem.Value">
            <summary>
            Single values 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.GetAvailability(System.Int32)">
            <summary>
            Provide the labour availability
            </summary>
            <param name="month">Month for labour</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItem.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.LabourAvailabilityItemMonthly">
            <summary>
            An individual labour availability item with monthly days available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourAvailabilityItemMonthly.MonthlyValues">
            <summary>
            Monthly values. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.GetAvailability(System.Int32)">
            <summary>
            Provide the monthly labour availability
            </summary>
            <param name="month">Month for labour</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityItemMonthly.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.LabourAvailabilityList">
            <summary>
            Holds a list of labour availability items
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityList.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityList.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourAvailabilityList.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.LabourDietComponent">
            <summary>
            Stores the details of a dietary component in the time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourDietComponent.FoodStore">
            <summary>
            Link to the food store consumed
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourDietComponent.AmountConsumed">
            <summary>
            Amount consumed
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.LabourDietComponent.otherMetricAmounts">
            <summary>
            Inital metric values from other food sources
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourDietComponent.AddOtherSource(System.String,System.Double)">
            <summary>
            A method to add addition metric amount at the start of the month to represent value non food store consumption
            </summary>
            <param name="metric">Name of the metric</param>
            <param name="amount">Amount for time step for AE</param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourDietComponent.GetTotal(System.String)">
            <summary>
            Return the total of the specified metric in the diet
            </summary>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.LabourPricing">
            <summary>
            User entry of Labour prices
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourPricing.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourPricing.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourPricing.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourPricing.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourPricing.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.ILabourSpecificationItem">
            <summary>
            An individual labour specification item with monthly values
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ILabourSpecificationItem.GetAvailability(System.Int32)">
            <summary>
            Provide availability for the specified month 
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.LabourSpecifications">
            <summary>
            This base class for monthly stores of labour information e.g. availability and hire rates.
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.LabourType">
            <summary>
            This stores the initialisation parameters for a land type person who can do labour 
            who is a family member.
            eg. AdultMale, AdultFemale etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Attributes">
            <summary>
            A list of attributes added to this individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.InitialAge">
            <summary>
            Age in years.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Sex">
            <summary>
            Male or Female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Age">
            <summary>
            Age in years.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.AgeInMonths">
            <summary>
            Age in months.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.AdultEquivalent">
            <summary>
            Adult equivalent.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.TotalAdultEquivalents">
            <summary>
            Adult equivalents of all individuals.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.DietaryComponentList">
            <summary>
            Monthly dietary components
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.GetDietDetails(System.String)">
            <summary>
            A method to calculate the details of the current intake
            </summary>
            <param name="metric">the name of the metric to report</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.GetAmountConsumed">
            <summary>
            A method to calculate the details of the current intake
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.GetAmountConsumed(System.String)">
            <summary>
            A method to calculate the details of the current intake
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.FeedToTargetIntake">
            <summary>
            The amount of feed eaten during the feed to target activity processing.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Individuals">
            <summary>
            Number of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Hired">
            <summary>
            Hired labour switch
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LastActivityRequestID">
            <summary>
            The unique id of the last activity request for this labour type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LastActivityRequestAmount">
            <summary>
            The amount of labour supplied to the last activity for this labour type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LastActivityLabour">
            <summary>
            The number of hours provided to the current activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.AvailableDays">
            <summary>
            Available Labour (in days) in the current month. 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LabourAvailability">
            <summary>
            Link to the current labour availability for this person
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.AvailabilityLimiter">
            <summary>
            A proportion (0-1) to limit available labour. This may be from financial shortfall for hired labour.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.LabourCurrentlyAvailableForActivity(System.Guid,System.Double)">
            <summary>
            Determines the amount of labour up to a max available for the specified Activity.
            </summary>
            <param name="activityID">Unique activity ID</param>
            <param name="maxLabourAllowed">Max labour allowed</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.SetAvailableDays(System.Int32)">
            <summary>
            Reset the available days for a given month
            </summary>
            <param name="month"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.PayRate">
            <summary>
            Get value of this individual
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add to labour store of this type
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.AddIntake(Models.CLEM.Resources.LabourDietComponent)">
            <summary>
            Add intake to the DietaryComponents list
            </summary>
            <param name="dietComponent"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from labour store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Set(System.Double)">
            <summary>
            Set amount of animal food available
            </summary>
            <param name="newValue">New value to set food store to</param>
        </member>
        <member name="E:Models.CLEM.Resources.LabourType.TransactionOccurred">
            <summary>
            Labour type transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Initialise">
            <summary>
            Implemented Initialise method
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Amount">
            <summary>
            Current amount of labour required.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.Land">
            <summary>
             Parent model of Land Types.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.Land.UnitsOfArea">
            <summary>
            Unit of area to be used in this simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Land.UnitsOfAreaToHaConversion">
            <summary>
            Conversion of unit of area to hectares (10,000 square metres)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.TestMethod(System.String,System.Int32,System.Double)">
            <summary>
            A method with argument to test
            </summary>
            <param name="txt"></param>
            <param name="intarg"></param>
            <param name="doublearg"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.Land.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Land.ReportedLandAllocation">
            <summary>
            Land allocation details for reporting
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>
            Report allocatios at start of timestep
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.OnAllocationReported(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.Land.AllocationReported">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.LandType">
            <summary>
            This stores the initialisation parameters for land
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.LandArea">
            <summary>
            Total Area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.PortionBuildings">
            <summary>
            Unusable Portion - Buildings, paths etc. (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.ProportionOfTotalArea">
            <summary>
            Allocate only proportion of Land area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.SoilType">
            <summary>
            Soil Type (1-5) 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.AreaAvailable">
            <summary>
            Area not currently being used (ha)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.UsableArea">
            <summary>
            The total area available 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.LandType.AllocatedActivitiesList">
            <summary>
            List of currently allocated land
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.Amount">
            <summary>
            Resource available
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add to food store
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Set(System.Double)">
            <summary>
            Set amount of land available
            </summary>
            <param name="newValue">New value to set land to</param>
        </member>
        <member name="E:Models.CLEM.Resources.LandType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.LandActivityAllocation">
            <summary>
            Class to store land allocation details
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandActivityAllocation.LandName">
            <summary>
            Name of activity using the land
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandActivityAllocation.Activity">
            <summary>
            Unique activity ID
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandActivityAllocation.ActivityName">
            <summary>
            Name for activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandActivityAllocation.LandAllocated">
            <summary>
            Amount of land allocated
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.OtherAnimals">
            <summary>
             Parent model of Ruminant Types.
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.OtherAnimalsType">
            <summary>
             Store for bank account
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.OtherAnimalsType.Cohorts">
            <summary>
            Current cohorts of this Other Animal Type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.LastCohortChanged">
            <summary>
            The last group of individuals to be added or removed (for reporting)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.AgeWhenAdult">
            <summary>
            Age when individuals become adults for feeding and breeding rates
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.MaxAge">
            <summary>
            Age when individuals die
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.OtherAnimalsType.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add individuals to type based on cohort
            </summary>
            <param name="addIndividuals">OtherAnimalsTypeCohort Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Remove(System.Object,Models.CLEM.CLEMModel,System.String)">
            <summary>
            Remove individuals from type based on cohort
            </summary>
            <param name="removeIndividuals"></param>
            <param name="activity"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.OtherAnimalsTypeCohort">
            <summary>
            This stores the initialisation parameters for a Cohort of a specific Other Animal Type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Sex">
            <summary>
            Sex
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Age">
            <summary>
            Age (Months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Number">
            <summary>
            Starting Number
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Weight">
            <summary>
            Starting Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.StartingWeightSD">
            <summary>
            Standard deviation of starting weight. Use 0 to use starting weight only
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.SaleFlag">
            <summary>
            Flag to identify individual ready for sale
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ProductStore">
            <summary>
             Parent model of products stores.
             e.g. manure, cotton, wool
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.ProductStoreType">
            <summary>
             Store for emission type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ProductStoreType.TransactionOccurred">
            <summary>
            Resource transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name = "e" >args</param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add product to store
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.ProductStoreTypeManure">
            <summary>
             Store for manure
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.ProductStoreTypeManure.UncollectedStores">
            <summary>
            List of all uncollected manure stores
            These present manure in the field and yards
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.DecayRate">
            <summary>
            Biomass decay rate each time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.MoistureDecayRate">
            <summary>
            Moisture decay rate each time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.ProportionMoistureFresh">
            <summary>
            Proportion moisture of fresh manure
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.MaximumAge">
            <summary>
            Maximum age manure lasts
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.AddUncollectedManure(System.String,System.Double)">
            <summary>
            Method to add uncollected manure to stores
            </summary>
            <param name="storeName">Name of store to add manure to</param>
            <param name="amount">Amount (dry weight) of manure to add</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age manure pools
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Collect(System.String,System.Double,Models.CLEM.CLEMModel)">
            <summary>
            Method to collect manure from uncollected manure stores
            Manure is collected from freshest to oldest
            </summary>
            <param name="storeName">Name of store to add manure to</param>
            <param name="resourceLimiter">Reduction due to limited resources</param>
            <param name="activity">Name of activity performing collection</param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ProductStoreTypeManure.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.ManureStoreUncollected">
            <summary>
            Individual store of uncollected manure
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManureStoreUncollected.Name">
            <summary>
            Name of store (eg yards, paddock name etc)
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.ManureStoreUncollected.Pools">
            <summary>
            Pools of manure in this store
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ManurePool">
            <summary>
            Individual uncollected manure pool to track age and decomposition
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManurePool.Age">
            <summary>
            Age of pool (in timesteps)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManurePool.Amount">
            <summary>
            Amount (dry weight) in pool
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManurePool.ProportionMoisture">
            <summary>
            Proportion water in pool
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ManurePool.WetWeight(System.Double,System.Double)">
            <summary>
            Acluclate wet weight of pool
            </summary>
            <param name="moistureDecayRate"></param>
            <param name="proportionMoistureFresh"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.ResourceBaseWithTransactions">
            <summary>
             Base resource model to implement transaction tracking
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceBaseWithTransactions.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourceBaseWithTransactions.FullName">
            <summary>
            Provide full name of resource StoreName.TypeName
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ResourceBaseWithTransactions.TransactionOccurred">
            <summary>
            Resource transaction occured Event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.AddNewResourceType(Models.CLEM.Interfaces.IResourceWithTransactionType)">
            <summary>
            Add all events when a new child is added to this resource in run time
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.Resource_TransactionOccurred(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Resources.ResourcePriceChangeDetails">
            <summary>
            Details of a resource price change
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePriceChangeDetails.PriceChanged">
            <summary>
            Pricing component
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePriceChangeDetails.ChangedBy">
            <summary>
            Model making change
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.PriceChangeEventArgs">
            <summary>
            Event arguments for price change to bubble details
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.PriceChangeEventArgs.Details">
            <summary>
            Price change details
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ResourcePricing">
            <summary>
             Resource type pricing
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.PacketSize">
            <summary>
            Number of resource units per packet
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.UseWholePackets">
            <summary>
            Buy and sell as whole packets
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.PricePerPacket">
            <summary>
            Price of packet
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.PurchaseOrSale">
            <summary>
            Determine whether this is a purchase or sale price, or both
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.LastPriceChange">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcePricing.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcePricing.CalculateValue(System.Double,System.Boolean)">
            <summary>
            Calulate the value of an amount of resource 
            </summary>
            <param name="amount">Amount of resource to value</param>
            <param name="respectUseWholePacket">Determing if purchase in whole packets is to be obeyed in calculation</param>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.CurrentPrice">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcePricing.PreviousPrice">
            <inheritdoc/>
        </member>
        <member name="E:Models.CLEM.Resources.ResourcePricing.PriceChangeOccurred">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcePricing.SetPrice(System.Double,Models.Core.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcePricing.OnPriceChanged(Models.CLEM.Resources.PriceChangeEventArgs)">
            <summary>
            Price changed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcePricing.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.ResourceRequest">
            <summary>
             Resource request for Resource from a ResourceType
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Resource">
            <summary>
             Link to resource being requested 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ResourceType">
            <summary>
             Type of resource being requested 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ResourceTypeName">
            <summary>
             Name of resource type being requested 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ActivityModel">
            <summary>
             Name of activity requesting resource
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ActivityID">
            <summary>
             Unique identifier for instance of activity request
             Used to allow multiple concurrent resource requests i.e labour types.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Category">
            <summary>
             Category for requesting resource
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.RelatesToResource">
            <summary>
             Resource this transaction relates to (not uses)
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Required">
            <summary>
             Amount required 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Available">
            <summary>
             Amount available
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Provided">
            <summary>
             Amount provided
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Value">
            <summary>
             Value provided
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.FilterDetails">
            <summary>
             Filtering and sorting items list
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.AdditionalDetails">
            <summary>
             Additional details for this request
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.AllowTransmutation">
            <summary>
             Allow transmutation
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.SuccessfulTransmutation">
            <summary>
             Successful transmutation
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.TransmutationPossible">
            <summary>
             Is Transmutation possible?
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.MarketTransactionMultiplier">
            <summary>
             Market transcation multiplier
             0 (default) = not a market transaction
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.ResourceRequest.#ctor">
            <summary>
             ResourceRequest constructor
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.FoodResourcePacket">
            <summary>
             Additional information for animal food requests
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FoodResourcePacket.Amount">
            <summary>
             Amount of food supplied
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FoodResourcePacket.DMD">
            <summary>
             Dry Matter Digestibility of food supplied
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FoodResourcePacket.PercentN">
            <summary>
             Percent N of food supplied
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.HumanFoodParcel">
            <summary>
             Information for a food parcel eaten
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodParcel.FoodStore">
            <summary>
            Link to the food store
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodParcel.Pool">
            <summary>
            The pool of food
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodParcel.Expires">
            <summary>
            Number of months before expires
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodParcel.Proportion">
            <summary>
            Proportion eaten
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ResourceRequestEventArgs">
            <summary>
            Class for reporting transaction details in OnTransactionEvents
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequestEventArgs.Request">
            <summary>
            Resource request details
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ActivityPerformedEventArgs">
            <summary>
            Class for reporting last activity performed details in OnActivityPerformed
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ActivityPerformedEventArgs.Activity">
            <summary>
            Activity details
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ResourcesHolder">
            <summary>
             Manger for all resources available to the model
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourcesHolder.FoundMarket">
            <summary>
            Finds a shared marketplace
            </summary>
            <returns>Market</returns>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcesHolder.MarketPresent">
            <summary>
            Determines if a market has been located
            </summary>
            <returns>Whether a market has been found</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FindResource``1">
            <summary>
            Finds a resource in the the resource holder
            </summary>
            <returns>The resource</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FindResource``1(System.String)">
            <summary>
            Finds a resource in the the resource holder
            </summary>
            <param name="name">Name of the resource</param>
            <returns>The resource</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FindResource(System.Type)">
            <summary>
            Finds a resource in the the resource holder
            </summary>
            <param name="type">The type of the resource</param>
            <returns>The resource</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FindResourceType``2(Models.Core.IModel,System.String,Models.CLEM.OnMissingResourceActionTypes,Models.CLEM.OnMissingResourceActionTypes)">
            <summary>
            Find a resource type from  type of resources and name of resource type component
            </summary>
            <typeparam name="T">Type of ResourceType to return</typeparam>
            <typeparam name="R">Type of Resource group containing resource type</typeparam>
            <param name="requestingModel">The model requesting this resource</param>
            <param name="resourceName">The name identifier NameOfResource.NameOfResourceType or simply NameOfResourceType</param>
            <param name="missingResourceAction">Action if resource group missing</param>
            <param name="missingResourceTypeAction">Action if resource type is missing</param>
            <returns>A resource type component</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FindResourceType``2(Models.CLEM.Resources.ResourceRequest,Models.CLEM.OnMissingResourceActionTypes,Models.CLEM.OnMissingResourceActionTypes)">
            <summary>
            Find a resource type from details supplied from a ResourceRequest
            </summary>
            <typeparam name="T">Type of ResourceType to return</typeparam>
            <typeparam name="R">Type of Resource group containing resource type</typeparam>
            <param name="request">Resource request with all required information</param>
            <param name="missingResourceAction">Action if resource group missing</param>
            <param name="missingResourceTypeAction">Action if resource type is missing</param>
            <returns>A resource type component</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.ResourceItemsExist``1">
            <summary>
            Determines whether resource items of the specified group type exist 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.ResourceGroupExists``1">
            <summary>
            Determines whether resource group of the specified type exist 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FindResourceGroup``1">
            <summary>
            Returns resource group of the specified type if enabled (for use in UI)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.LinkToMarketResourceType(Models.CLEM.Resources.CLEMResourceTypeBase)">
            <summary>
            Returns the link to the matching resource in the market place if found or creates a new clone copy for future transactions
            This allows this action to be performed once to store the link rather than at every transaction
            This functionality allows resources not in the market at the start of the simulation to be traded.
            </summary>
            <param name="resourceType">The resource type to trade</param>
            <returns>Whether the search was successful</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.TransmutateShortfall(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.ResourceRequest},System.Boolean)">
            <summary>
            Performs the transmutation of resources into a required resource
            </summary>
            <param name="requests">The shortfall requests to try and transmutate</param>
            <param name="queryOnly">A switch to detemrine if this is a query where no resources are taken</param>
        </member>
        <member name="P:Models.CLEM.Resources.ResourcesHolder.LastPriceChange">
            <inheritdoc/>
        </member>
        <member name="E:Models.CLEM.Resources.ResourcesHolder.PriceChangeOccurred">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.OnPriceChanged(Models.CLEM.Resources.PriceChangeEventArgs)">
            <summary>
            Price changed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.ResourceUnitsConverter">
            <summary>
             The component is used to store details to convert units of a resource type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceUnitsConverter.Factor">
            <summary>
            Conversion factor
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourceUnitsConverter.Units">
            <summary>
            Units of converted resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceUnitsConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceUnitsConverter.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.Ruminant">
            <summary>
            Object for an individual Ruminant Animal.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.GetTransactionCategory(Models.CLEM.RuminantTransactionsGroupingStyle,Models.CLEM.PurchaseOrSalePricingStyleType)">
            <summary>
            Get the value to use for the transaction style requested
            </summary>
            <param name="transactionStyle">Style of transaction grouping</param>
            <param name="pricingStyle">Style of pricing if necessary</param>
            <returns>Label to group by</returns>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.CurrentPriceGroups">
            <summary>
            Current animal price group for this individual 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Attributes">
            <inheritdoc/>
        </member>
        <member name="F:Models.CLEM.Resources.Ruminant.BreedParams">
            <summary>
            Reference to the Breed Parameters.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Breed">
            <summary>
            Breed of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.HerdName">
            <summary>
            Herd individual belongs to
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ID">
            <summary>
            Unique ID of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Mother">
            <summary>
            Link to individual's mother
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MotherID">
            <summary>
            Link to individual's mother
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Sex">
            <summary>
            Sex of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ReplacementBreeder">
            <summary>
            Marked as a replacement breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Age">
            <summary>
            Age (Months)
            </summary>
            <units>Months</units>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.CalculateNormalisedWeight(System.Double)">
            <summary>
            Calculate normalised weight from age
            </summary>
            <param name="age">Age in months</param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.AgeEnteredSimulation">
            <summary>
            The age (months) this individual entered the simulation.
            </summary>
            <units>Months</units>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.SetAgeEnteredSimulation(System.Double)">
            <summary>
            A method to set the age (months) this individual entered the simulation.
            This should be used with caution as this is usually a automatic calculation
            </summary>
            <units>Months</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PurchaseAge">
            <summary>
            Purchase age (Months)
            </summary>
            <units>Months</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Weight">
            <summary>
            Weight (kg)
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PreviousWeight">
            <summary>
            Previous weight
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.WeightGain">
            <summary>
            Weight gain
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.AdultEquivalent">
            <summary>
            The adult equivalent of this individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.HighWeight">
            <summary>
            Highest previous weight
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ProportionOfHighWeight">
            <summary>
            The current weight as a proportion of High weight achieved
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ProportionOfNormalisedWeight">
            <summary>
            The current weight as a proportion of High weight achieved
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ProportionOfSRW">
            <summary>
            The current weight as a proportion of Standard Reference Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.HealthScore">
            <summary>
            The current health score -2 to 2 with 0 standard weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.SexAndClass">
            <summary>
            A label combining sex and class for reporting
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Class">
            <summary>
            Determine the category of this individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.FullCategory">
            <summary>
            Determine the category of this individual with sex
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.IsAbleToBreed">
            <summary>
            Is this individual a valid breeder and in condition
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.IsWeaner">
            <summary>
            Determine if weaned and less that 12 months old. Weaner
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.IsSuckling">
            <summary>
            Determine if unweaned suckling
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.IsCalf">
            <summary>
            Determine if unweaned calf - replaced by IsSuckling
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Intake">
            <summary>
            Current monthly intake store
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MilkIntake">
            <summary>
            Current monthly intake of milk
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MilkPotentialIntake">
            <summary>
            Required monthly intake of milk
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PercentNOfIntake">
            <summary>
            Percentage nitrogen of current intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.DietDryMatterDigestibility">
            <summary>
            Diet dry matter digestibility of current monthly intake store
            </summary>
            <units>percent</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PotentialIntake">
            <summary>
            Current monthly potential intake
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ProportionOfPotentialIntakeObtained">
            <summary>
            Return intake as a proportion of the potential inake
            This includes milk for sucklings
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MetabolicIntake">
            <summary>
            Current monthly metabolic intake after crude protein adjustment
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Number">
            <summary>
            Number in this class (1 if individual model)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.SaleFlag">
            <summary>
            Flag to identify individual ready for sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PopulationChangeDirection">
            <summary>
            Determines if the change reason is positive or negative
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ReadyForSale">
            <summary>
            Is the individual currently marked for sale?
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.EnergyBalance">
            <summary>
            Energy balance store
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.EnergyMilk">
            <summary>
            Energy used for milk production
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.EnergyFetus">
            <summary>
            Energy used for foetal development
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.EnergyMaintenance">
            <summary>
            Energy used for maintenance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.EnergyIntake">
            <summary>
            Energy from intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Died">
            <summary>
            Indicates if this individual has died before removal from herd
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.StandardReferenceWeight">
            <summary>
            Standard Reference Weight determined from coefficients and gender
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.NormalisedAnimalWeight">
            <summary>
            Normalised animal weight
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.RelativeSize">
            <summary>
            Relative size (normalised weight / standard reference weight)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.RelativeCondition">
            <summary>
            Relative condition (base weight / normalised weight)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.Wean(System.Boolean,System.String)">
            <summary>
            Wean this individual
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.SetUnweaned">
            <summary>
            Method to set the weaned status to unweaned for new born individuals.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Weaned">
            <summary>
            Weaned individual flag
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MothersMilkProductionAvailable">
            <summary>
            Milk production currently available from mother
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.AddIntake(Models.CLEM.Resources.FoodResourcePacket)">
            <summary>
            A funtion to add intake and track changes in %N and DietDryMatterDigestibility
            </summary>
            <param name="intake">Feed request containing intake information kg, %N, DMD</param>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Location">
            <summary>
            Unique ID of the managed paddock the individual is located in.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Wool">
            <summary>
            Amount of wool on individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Cashmere">
            <summary>
            Amount of cashmere on individual
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.IncrementAge">
            <summary>
            Method to increase age
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.#ctor(Models.CLEM.Resources.RuminantType,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.Create(Models.CLEM.Resources.Sex,Models.CLEM.Resources.RuminantType,System.Double,System.Double)">
            <summary>
            Factory for creating ruminants based on provided values
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.Sex">
            <summary>
            Sex of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Sex.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Sex.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantConceptionAdvanced">
            <summary>
            Advanced ruminant conception for first conception less than 12 months, 12-24 months, 2nd calf and 3+ calf
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRateCoefficent">
            <summary>
            Conception rate coefficient of breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRateIntercept">
            <summary>
            Conception rate intercept of breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRateAsymptote">
            <summary>
            Conception rate asymptote of breeder
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionAdvanced.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRate(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Calculate conception rate for a female
            </summary>
            <param name="female">Female to calculate conception rate for</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionAdvanced.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantConceptionByCondition">
            <summary>
            Ruminant conception based on body condition: current weight as prop or high weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionByCondition.ConditionCutOff">
            <summary>
            Condition cutoff for conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionByCondition.MaximumConceptionProbability">
            <summary>
            Maximum probability of conceiving given condition satisfied
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionByCondition.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionByCondition.ConceptionRate(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Calculate conception rate for a female based on condition score
            </summary>
            <param name="female">Female to calculate conception rate for</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionByCondition.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantConceptionCurve">
            <summary>
            The simplest ruminant conception using a single curve
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionCurve.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionCurve.ConceptionRateCoefficent">
            <summary>
            Conception rate coefficient of breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionCurve.ConceptionRateIntercept">
            <summary>
            Conception rate intercept of breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionCurve.ConceptionRateAsymptote">
            <summary>
            Conception rate asymptote of breeder
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionCurve.ConceptionRate(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Calculate conception rate for a female
            </summary>
            <param name="female">Female to calculate conception rate for</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantConceptionCurve.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantFemale">
            <summary>
            Object for an individual female Ruminant.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.Sex">
            <summary>
            Sex of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsBreeder">
            <summary>
            Is female weaned and of minimum breeding age and weight 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsAbleToBreed">
            <summary>
            Is this individual a valid breeder and in condition
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.AgeAtLastBirth">
            <summary>
            The age of female at last birth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MonthsSinceLastBirth">
            <summary>
            The time (months) passed since last birth
            Returns 0 for pre-first birth females
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfBirths">
            <summary>
            Number of births for the female (twins = 1 birth)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfOffspring">
            <summary>
            Number of offspring for the female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfWeaned">
            <summary>
            Number of weaned offspring for the female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfConceptions">
            <summary>
            Number of conceptions for the female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfBirthsThisTimestep">
            <summary>
            Births this timestep
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.AgeAtLastConception">
            <summary>
            The age at last conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.WeightAtConception">
            <summary>
            Weight at time of conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.PreviousConceptionRate">
            <summary>
            Previous conception rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfBreedingMonths">
            <summary>
            Months since minimum breeding age or entering the population
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.LastMatingStyle">
            <summary>
            Store for the style of mating
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsHeifer">
            <summary>
            Indicates if this female is a heifer
            Heifer equals less than min breed age and no offspring
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsPreBreeder">
            <summary>
            Indicates if this female is a weaned but less than age at first mating 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.CalulateNumberOfOffspringThisPregnancy">
            <summary>
            Calculate the number of offspring this preganacy given multiple offspring rates
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.BirthDue">
            <summary>
            Indicates if birth is due this month
            Knows whether the feotus(es) have survived
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.UpdateBirthDetails">
            <summary>
            Method to handle birth changes
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsPregnant">
            <summary>
            Indicates if the individual is pregnant
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.CarryingCount">
            <summary>
            Indicates if individual is carrying multiple feotus
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.OneOffspringDies">
            <summary>
            Method to remove one offspring that dies between conception and death
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.SuccessfulPregnancy">
            <summary>
            Number of breeding months in simulation. Years since min breeding age or entering the simulation for breeding stats calculations..
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.UpdateConceptionDetails(System.Int32,System.Double,System.Int32)">
            <summary>
            Method to handle conception changes
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsLactating">
            <summary>
            Indicates if the individual is lactating
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.DaysLactating">
            <summary>
            Calculate the MilkinIndicates if the individual is lactating
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkingPerformed">
            <summary>
            Determines if milking has been performed on individual to increase milk production
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkCurrentlyAvailable">
            <summary>
            Amount of milk available in the month (L)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkProductionPotential">
            <summary>
            Potential amount of milk produced (L/day)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkProduction">
            <summary>
            Amount of milk produced (L/day)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkProducedThisTimeStep">
            <summary>
            Amount of milk produced this time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkSuckledThisTimeStep">
            <summary>
            Amount of milk suckled this time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkMilkedThisTimeStep">
            <summary>
            Amount of milk milked this time step
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.TakeMilk(System.Double,Models.CLEM.Resources.MilkUseReason)">
            <summary>
            Method to remove milk from female
            </summary>
            <param name="amount">Amount to take</param>
            <param name="reason">Reason for taking milk</param>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.SucklingOffspringList">
            <summary>
            A list of individuals currently suckling this female
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.#ctor(Models.CLEM.Resources.RuminantType,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.MilkUseReason">
            <summary>
            Reasons for milk to be taken from female
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.MilkUseReason.Suckling">
            <summary>
            Consumed by sucklings
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.MilkUseReason.Milked">
            <summary>
            Milked
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.MatingStyle">
            <summary>
            Style of mating
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.MatingStyle.Natural">
            <summary>
            Natural mating
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.MatingStyle.Controlled">
            <summary>
            Controlled mating
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.MatingStyle.WildBreeder">
            <summary>
            Wild breeder
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.MatingStyle.PreSimulation">
            <summary>
            Mating assigned at setup
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantHerd">
            <summary>
             Parent model of the herd of Ruminant Types.
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.RuminantHerd.groupedHerdForReporting">
            <summary>
            Access to the herd grouped by transaction style for reporting in FinalizeTimeStep before EndTimeStep
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantHerd.TransactionStyle">
            <summary>
            Transaction grouping style
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.RuminantHerd.Herd">
            <summary>
            Current state of this resource.
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.RuminantHerd.PurchaseIndividuals">
            <summary>
            List of requested purchases.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantHerd.LastIndividualChanged">
            <summary>
            The last individual to be added or removed (for reporting)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantHerd.ReportIndividual">
            <summary>
            The details of an individual for reporting
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantHerd.NextUniqueID">
            <summary>
            Get the next unique individual id number
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnEndOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to peform atsks at the end of the simulation</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.AddRuminant(Models.CLEM.Resources.Ruminant,Models.Core.IModel)">
            <summary>
            Add individual/cohort to the the herd
            </summary>
            <param name="ind">Individual Ruminant to add</param>
            <param name="model">Model adding individual</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.RemoveRuminant(Models.CLEM.Resources.Ruminant,Models.Core.IModel)">
            <summary>
            Remove individual/cohort from the herd
            </summary>
            <param name="ind">Individual Ruminant to remove</param>
            <param name="model">Model removing individual</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.RemoveRuminant(System.Collections.Generic.List{Models.CLEM.Resources.Ruminant},Models.Core.IModel)">
            <summary>
            Remove list of Ruminants from the herd
            </summary>
            <param name="list">List of Ruminants to remove</param>
            <param name="model">Model removing individuals</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for changes before end of month reporting
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.GetRuminantReportGroup(System.String,System.String)">
            <summary>
            Get the specific report group with details to report from the grouped herd
            </summary>
            <param name="ruminantTypeName">Name of ruminant type</param>
            <param name="groupName">Name of group category</param>
            <returns>The group details</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.GetReportingGroups(Models.CLEM.Resources.RuminantType)">
            <summary>
            Generate the store for tracking individuals in groups for reporting
            </summary>
            <returns>Dicitonary of ResourceTypes and categories for each</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.SummarizeIndividualsByGroups(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.Ruminant},Models.CLEM.PurchaseOrSalePricingStyleType,System.String)">
            <summary>
            Group and summarize individuals by transaction style for reporting
            </summary>
            <param name="individuals">Individuals to summarize</param>
            <param name="priceStyle">Price style to use</param>
            <param name="warningMessage">A custom warning message used if prices cannot be found otherwise the standard messge will be reported for each unique missing price</param>
            <returns>A grouped summary of individuals</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnWeanOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.RuminantHerd.WeanOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnFinalFemaleOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.RuminantHerd.FinalFemaleOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantReportTypeDetails">
            <summary>
            A list of the ruminant type groups found in herd
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportTypeDetails.RuminantTypeName">
            <summary>
            Name of ruminant type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportTypeDetails.RuminantTypeGroup">
            <summary>
            A list of all the details for the type
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantReportGroupDetails">
            <summary>
            Details of a ruminant reporting group
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.GroupName">
            <summary>
            Name of group
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.Count">
            <summary>
            Number of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.TotalAdultEquivalent">
            <summary>
            Sum of adult equivalents
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.TotalWeight">
            <summary>
            Sum of weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.TotalPrice">
            <summary>
            Sum of price
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.AverageAdultEquivalent">
            <summary>
            Average adult equivalents
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.AverageWeight">
            <summary>
            Average weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantReportGroupDetails.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantInitialCohorts">
            <summary>
            Holder for all initial ruminant cohorts
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantInitialCohorts.ConceptionsFound">
            <summary>
            Determines if any SetPreviousConception components were found
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantInitialCohorts.AttributesFound">
            <summary>
            Determines if any SetAttribute components were found
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.RuminantInitialCohorts.WeightWarningOccurred">
            <summary>
            Records if a warning about set weight occurred
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.CreateIndividuals">
            <summary>
            Create the individual ruminant animals for this Ruminant Type (Breed)
            </summary>
            <returns>A list of ruminants</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.ChildrenToIgnoreInSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantMale">
            <summary>
            Object for an individual male Ruminant.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.Sex">
            <summary>
            Sex of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.IsSire">
            <summary>
            Indicates if individual is breeding sire
            Represents any uncastrated male of breeding age
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.IsWildBreeder">
            <summary>
            Indicates if individual is breeding sire
            Represents any uncastrated male of breeding age that is assigned sire and therefroe may have improved genetics/price
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.IsCastrated">
            <summary>
            Indicates if individual is castrated
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.IsAbleToBreed">
            <summary>
            Is this individual a valid breeder and in condition
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantMale.#ctor(Models.CLEM.Resources.RuminantType,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantType">
            <summary>
            This stores the parameters for a ruminant Type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Breed">
            <summary>
            Breed
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.RuminantType.PriceList">
            <summary>
            Current value of individuals in the herd
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.PricingAvailable">
            <summary>
            Determine if a price schedule has been provided for this breed
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IncludedAttributeInheritanceWhenMating">
            <summary>
            Property indicates whether to include attribute inheritance when mating
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.AddMandatoryAttribute(System.String)">
            <summary>
            Add a attribute name to the list of mandatory attributes for the type
            </summary>
            <param name="name">name of attribute</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.IsMandatoryAttribute(System.String)">
            <summary>
            Determins whether a specified attribute is mandatory
            </summary>
            <param name="name">name of attribute</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.CheckMandatoryAttributes(Models.CLEM.Resources.Ruminant,Models.Core.IModel)">
            <summary>
            Check whether an individual has all mandotory attributes
            </summary>
            <param name="ind">Individual ruminant to check</param>
            <param name="model">Model adding individuals</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.GetPriceGroupOfIndividual(Models.CLEM.Resources.Ruminant,Models.CLEM.PurchaseOrSalePricingStyleType,System.String)">
            <summary>
            Get value of a specific individual
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.GetPriceGroupOfIndividual(Models.CLEM.Resources.Ruminant,Models.CLEM.PurchaseOrSalePricingStyleType,System.String,System.String,System.String)">
            <summary>
            Get value of a specific individual with special requirements check (e.g. breeding sire or draught purchase)
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Model Validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add resource
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove resource
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Set(System.Double)">
            <summary>
            Set resource
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Initialise">
            <summary>
            Initialise resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Amount">
            <summary>
            Current number of individuals of this herd.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.AmountAE">
            <summary>
            Current number of individuals of this herd.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LastConceptionStatus">
            <summary>
            Returns the most recent conception status
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.RuminantType.ConceptionStatusChanged">
            <summary>
            The conception status of a female changed for advanced reporting
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.OnConceptionStatusChanged(Models.CLEM.Reporting.ConceptionStatusChangedEventArgs)">
            <summary>
            Conception status changed 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintEfficiencyCoefficient">
            <summary>
            Energy maintenance efficiency coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintEfficiencyIntercept">
            <summary>
            Energy maintenance efficiency intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EGrowthEfficiencyCoefficient">
            <summary>
            Energy growth efficiency coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EGrowthEfficiencyIntercept">
            <summary>
            Energy growth efficiency intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ELactationEfficiencyCoefficient">
            <summary>
            Energy lactation efficiency coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ELactationEfficiencyIntercept">
            <summary>
            Energy lactation efficiency intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintExponent">
            <summary>
            Energy maintenance exponent
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintIntercept">
            <summary>
            Energy maintenance intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintCoefficient">
            <summary>
            Energy maintenance coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EnergyMaintenanceMaximumAge">
            <summary>
            Maximum age for energy maintenance calculation (yrs)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Kme">
            <summary>
            Breed factor for maintenence energy
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GrowthEnergyIntercept1">
            <summary>
            Parameter for energy for growth #1
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GrowthEnergyIntercept2">
            <summary>
            Parameter for energy for growth #2
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GrowthEfficiency">
            <summary>
            Growth efficiency
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.NaturalWeaningAge">
            <summary>
            Natural weaning age
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWFemale">
            <summary>
            Standard Reference Weight of female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWMaleMultiplier">
            <summary>
            Standard Reference Weight for male from female multiplier
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWBirth">
            <summary>
            Standard Reference Weight at birth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.AgeGrowthRateCoefficient">
            <summary>
            Age growth rate coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWGrowthScalar">
            <summary>
            SWR growth scalar
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeCoefficient">
            <summary>
            Intake coefficient in relation to live weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeIntercept">
            <summary>
            Intake intercept in relation to live weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.OverfeedPotentialIntakeModifier">
            <summary>
            Potential intake modifier for maximum intake possible when overfeeding
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProteinCoefficient">
            <summary>
            Protein requirement coeff (g/kg feed)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProteinDegradability">
            <summary>
            Protein degradability
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.BaseAnimalEquivalent">
            <summary>
            Weight(kg) of 1 animal equivalent(steer)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GreenDietMax">
            <summary>
            Maximum green in diet
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GreenDietCoefficient">
            <summary>
            Shape of curve for diet vs pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GreenDietZero">
            <summary>
            Proportion green in pasture at zero in diet
            was %
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeCoefficientBiomass">
            <summary>
            Coefficient to adjust intake for herbage biomass
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.StrictFeedingLimits">
            <summary>
            Enforce strict feeding limits
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkIntakeCoefficient">
            <summary>
            Coefficient of juvenile milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkIntakeIntercept">
            <summary>
            Intercept of juvenile milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkIntakeMaximum">
            <summary>
            Maximum juvenile milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkLWTFodderSubstitutionProportion">
            <summary>
            Milk as proportion of LWT for fodder substitution
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaxJuvenileIntake">
            <summary>
            Max juvenile (suckling) intake as proportion of LWT
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProportionalDiscountDueToMilk">
            <summary>
            Proportional discount to intake due to milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProportionOfMaxWeightToSurvive">
            <summary>
            Proportion of max body weight needed for survival
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LactatingPotentialModifierConstantA">
            <summary>
            Lactating Potential intake modifier Coefficient A
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LactatingPotentialModifierConstantB">
            <summary>
            Lactating Potential intake modifier Coefficient B
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LactatingPotentialModifierConstantC">
            <summary>
            Lactating Potential intake modifier Coefficient C
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaximumSizeOfIndividual">
            <summary>
            Maximum size of individual relative to SRW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityBase">
            <summary>
            Mortality rate base
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityCoefficient">
            <summary>
            Mortality rate coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityIntercept">
            <summary>
            Mortality rate intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityExponent">
            <summary>
            Mortality rate exponent
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.JuvenileMortalityCoefficient">
            <summary>
            Juvenile mortality rate coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.JuvenileMortalityMaximum">
            <summary>
            Juvenile mortality rate maximum
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.JuvenileMortalityExponent">
            <summary>
            Juvenile mortality rate exponent
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.WoolCoefficient">
            <summary>
            Wool coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.CashmereCoefficient">
            <summary>
            Cashmere coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ConceptionModel">
            <summary>
            Advanced conception parameters if present
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkCurveSuckling">
            <summary>
            Milk curve shape suckling
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkCurveNonSuckling">
            <summary>
            Milk curve shape non suckling
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkingDays">
            <summary>
            Number of days for milking
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkPeakYield">
            <summary>
            Peak milk yield(kg/day)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkOffsetDay">
            <summary>
            Milk offset day
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkPeakDay">
            <summary>
            Milk peak day
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProportionOffspringMale">
            <summary>
            Proportion offspring born male
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.InterParturitionIntervalIntercept">
            <summary>
            Inter-parturition interval intercept of PW (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.InterParturitionIntervalCoefficient">
            <summary>
            Inter-parturition interval coefficient of PW (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GestationLength">
            <summary>
            Months between conception and parturition
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MinimumAge1stMating">
            <summary>
            Minimum age for 1st mating (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MinimumSize1stMating">
            <summary>
            Minimum size for 1st mating, proportion of SRW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MinimumDaysBirthToConception">
            <summary>
            Minimum number of days between last birth and conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MultipleBirthRate">
            <summary>
            Rate at which multiple births are concieved (twins, triplets, ...)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.CriticalCowWeight">
            <summary>
            Proportion of SRW for zero calving/lambing rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaximumMaleMatingsPerDay">
            <summary>
            Maximum number of matings per male per day
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.PrenatalMortality">
            <summary>
            Prenatal mortality rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MethaneProductionCoefficient">
            <summary>
            Methane production from intake coefficient
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantTypeCohort">
            <summary>
            This stores the initialisation parameters for a Cohort of a specific Ruminant Type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Sex">
            <summary>
            Sex
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Age">
            <summary>
            Starting Age (Months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Number">
            <summary>
            Starting Number
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Weight">
            <summary>
            Starting Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.WeightSD">
            <summary>
            Standard deviation of starting weight. Use 0 to use starting weight only
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Suckling">
            <summary>
            Is suckling?
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Sire">
            <summary>
            Breeding sire?
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.CreateIndividuals(System.Collections.Generic.List{Models.CLEM.Interfaces.ISetAttribute},Models.CLEM.Resources.RuminantType)">
            <summary>
            Create the individual ruminant animals using the Cohort parameterisations.
            </summary>
            <param name="initialAttributes">The initial attributes found from parent</param>
            <param name="ruminantType">The breed parameters if overwritten</param>
            <returns>List of ruminants</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.CreateIndividuals(System.Int32,System.Collections.Generic.List{Models.CLEM.Interfaces.ISetAttribute},Models.CLEM.Resources.RuminantType)">
            <summary>
            Create the individual ruminant animals using the Cohort parameterisations.
            </summary>
            <param name="number">The number of individuals to create</param>
            <param name="initialAttributes">The initial attributes found from parent and this cohort</param>
            <param name="ruminantType">The breed parameters if overwritten</param>
            <returns>List of ruminants</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.SetAttributeWithValue">
            <summary>
            A component to specify an attribute to be applied to initial herd/individual cohort
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.lastInstance">
            <summary>
            Store of last instance of the individual attribute defined
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.AttributeName">
            <summary>
            Name of attribute
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.Value">
            <summary>
            Attribute value
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.MinimumValue">
            <summary>
            Minumum of value
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.MaximumValue">
            <summary>
            Minumum of value
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.StandardDeviation">
            <summary>
            Standard deviation as spread when applied to population
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.InheritanceStyle">
            <summary>
            Inheritance style
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetAttributeWithValue.Mandatory">
            <summary>
            Mandatory attribute
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.SetAttributeWithValue.GetAttribute(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.SetAttributeWithValue.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.SetAttributeWithValue.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.SetAttributeWithValue.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.SetAttributeWithValue.ModelSummaryClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.SetAttributeWithValue.ModelSummaryOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.SetPreviousConception">
            <summary>
            A component to specify previous concpetion for new females added to the herd
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SetPreviousConception.NumberMonthsPregnant">
            <summary>
            Number of months pregnant
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.SetPreviousConception.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.SetPreviousConception.SetConceptionDetails(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Set the conception details of the female provided
            </summary>
            <param name="female">Female to set details</param>
        </member>
        <member name="M:Models.CLEM.Resources.SetPreviousConception.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.SetPreviousConception.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.Resources.SetPreviousConception.ModelSummaryClosingTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.SetPreviousConception.ModelSummaryOpeningTags">
            <summary>
            Provides the closing html tags for object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.SpecifyRuminant">
            <summary>
            A component to specify the details of a ruminant to be used
            Use to define purchases etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SpecifyRuminant.RuminantTypeName">
            <summary>
            The type of ruminant
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SpecifyRuminant.Proportion">
            <summary>
            Proportion of individuals of this type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SpecifyRuminant.Details">
            <summary>
            The local store of the first type Cohort provided as child of this component
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SpecifyRuminant.ExampleIndividual">
            <summary>
            The local store of an example individual for checking against filters
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SpecifyRuminant.BreedParams">
            <summary>
            The ruminant type for this specified ruminant
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.SpecifyRuminant.WeightWarningOccurred">
            <summary>
            Records if a warning about set weight occurred
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.SpecifyRuminant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.SpecifyRuminant.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.SpecifyRuminant.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.SpecifyRuminant.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.Resources.WaterStore">
            <summary>
             Parent model of water stores.
             e.g. tap, bore, tank, dam
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.WaterType">
            <summary>
             Store for water type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.Units">
            <summary>
            Unit type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.Value">
            <summary>
            Total value of resource
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.WaterType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Add(System.Object,Models.CLEM.CLEMModel,System.String,System.String)">
            <summary>
            Add water to water store
            </summary>
            <param name="resourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="activity">Name of activity adding resource</param>
            <param name="relatesToResource"></param>
            <param name="category"></param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from water type store
            </summary>
            <param name="request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Set(System.Double)">
            <summary>
            Set the amount in an a water type.
            </summary>
            <param name="newAmount"></param>
        </member>
        <member name="T:Models.CLEM.ZoneCLEM">
            <summary>
            CLEM Zone to control simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.SelectedTab">
            <summary>
            Identifies the last selected tab for display
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.FarmMultiplier">
            <summary>
            Multiplier from single farm to regional number of farms for market transactions
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.ClimateRegion">
            <summary>
            Index of the simulation Climate Region
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.EcologicalIndicatorsCalculationInterval">
            <summary>
            Ecological indicators calculation interval (in months, 1 monthly, 12 annual)
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.EcologicalIndicatorsCalculationMonth">
            <summary>
            End of month to calculate ecological indicators
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.AutoCreateDescriptiveSummary">
            <summary>
            Include in overall Descriptive Summary (HTML)
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.EcologicalIndicatorsNextDueDate">
            <summary>
            Month this cecological indicators calculation is next due.
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.Area">
            <summary>Area of the zone.</summary>
            <value>The area.</value>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.Slope">
            <summary>Gets or sets the slope.</summary>
            <value>The slope.</value>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.AspectAngle">
            <summary>
            not used in CLEM
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.Altitude">
            <summary>Local altitude (meters above sea level).</summary>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.IsEcologicalIndicatorsCalculationMonth">
            <summary>
            Method to determine if this is the month to calculate ecological indicators
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>Data stores to clear at start of month</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.OnCLEMValidate(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to validate properties and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ReportInvalidParameters(Models.Core.IModel)">
            <summary>
            Reports any validation errors to exception
            </summary>
            <param name="model"></param>
            <exception cref="T:Models.Core.ApsimXException"></exception>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.Validate(Models.Core.IModel,System.String,Models.Core.Model,Models.Core.ISummary)">
            <summary>
            Internal method to iterate through all children in CLEM and report any parameter setting errors
            </summary>
            <param name="model">The model being validated</param>
            <param name="modelPath">Pass blank string. Used for tracking model path</param>
            <param name="parentZone">The name of the containing ZoneCLEM or Market for reporting</param>
            <param name="summary">Link to summary for reporting</param>
            <returns>Boolean indicating whether validation was successful</returns>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.ModelSummaryStyle">
            <summary>
            Summary style to use for this component
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.CurrentAncestorList">
            <inheritdoc/>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.FormatForParentControl">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.GetFullSummary(Models.Core.IModel,System.Collections.Generic.List{System.String},System.String,System.Func{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryInnerClosingTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryInnerOpeningTags">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryInnerOpeningTagsBeforeSummary">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryNameTypeHeader">
            <inheritdoc/>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.ModelSummaryNameTypeHeaderText">
            <inheritdoc/>
        </member>
        <member name="T:Models.CLEM.FilterByPropertyAttribute">
            <summary>
            Identifies whether a Property or Method of an IFilterable model can be used for filtering
            </summary>
        </member>
        <member name="T:Models.Climate.ControlledEnvironment">
            <summary>
             Reads in controlled environment weather data and makes it available to models.
            </summary>
        </member>
        <member name="F:Models.Climate.ControlledEnvironment.clock">
            <summary>
            A link to the clock model.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.StartDate">
            <summary>
            Gets the start date of the weather file
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.EndDate">
            <summary>
            Gets the end date of the weather file
            </summary>
        </member>
        <member name="E:Models.Climate.ControlledEnvironment.PreparingNewWeatherData">
            <summary>
            This event will be invoked immediately before models get their weather data.
            models and scripts an opportunity to change the weather data before other models
            reads it.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.MaxT">
            <summary>
            Gets or sets the maximum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.MinT">
            <summary>
            Gets or sets the minimum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.MeanT">
            <summary>
            Daily Mean temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.VPD">
            <summary>
            Daily mean VPD (hPa)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Rain">
            <summary>
            Gets or sets the rainfall (mm)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Radn">
            <summary>
            Gets or sets the solar radiation. MJ/m2/day
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.PanEvap">
            <summary>
            Gets or sets the Pan Evaporation (mm) (Class A pan)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.VP">
            <summary>
            Gets or sets the vapor pressure (hPa)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified. (code says 3.0 not zero)
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.DiffuseFraction">
            <summary>
            Gets or sets the diffuse radiation fraction. If not specified in the weather file the default is 1.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Latitude">
            <summary>
            Gets the latitude
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Longitude">
            <summary>Gets the longitude</summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Tav">
            <summary>
            Gets the average temperature
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.Amp">
            <summary>
            Gets the temperature amplitude.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.FileName">
            <summary>
            Gets the temperature amplitude.
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.DayLength">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="M:Models.Climate.ControlledEnvironment.CalculateDayLength(System.Double)">
            <summary>
            Calculate daylength using a given twilight angle
            </summary>
            <param name="twilight"></param>
            <returns></returns>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.SunRise">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="M:Models.Climate.ControlledEnvironment.CalculateSunRise">
            <summary>
            Calculate daylength using a given twilight angle
            </summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.SunSet">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="M:Models.Climate.ControlledEnvironment.CalculateSunSet">
            <summary>
            Calculate daylength using a given twilight angle
            </summary>
        </member>
        <member name="M:Models.Climate.ControlledEnvironment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.Climate.ControlledEnvironment.OnDoWeather(System.Object,System.EventArgs)">
            <summary>
            An event handler for the daily DoWeather event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.YesterdaysMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="P:Models.Climate.ControlledEnvironment.TomorrowsMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="T:Models.Climate.SlopeEffectsOnWeather">
            <summary>
            This model can be used to adjust some of the weather variables when simulating a slopping surface (defined by slope and aspect angles)
            </summary>
            <remarks>
            - This include routines to modify the incoming solar radiation as well as minimum and maximum air temperatures;
            - Adjusts for rainfall, vp, and windspeed, can be also done, but these are simply relative changes supplied by the user, not calculated. 
            - Calculations happens on PreparingNewWeatherData event and take also into account the latitude of the site (read from the weather model).
            + References:
                Allen, R.G.; Pereira, L.S.; Raes, D.; and Smith, M., 1998. Crop evapotranspiration: guidelines for computing crop water requirements. Irrigation and Drainage Paper No. 56, FAO, Rome, Italy. 300 p.
                Allen, R.G.; Trezza, R.; and Tasumi, M. 2006. Analytical integrated functions for daily solar radiation on slopes. Agricultural and Forest Meteorology, 139(1–2):55-73.
                Almorox, J. and Hontoria, C. 2004. Global solar radiation estimation using sunshine duration in Spain. Energy Conversion and Management, 45(9-10):1529-1535.
                Boland, J.; Scott, L.; and Luther, M. 2001. Modelling the diffuse fraction of global solar radiation on a horizontal surface. Environmetrics, 12(2):103-116.
                Dervishi, S. and Mahdavi, A. 2012. Computing diffuse fraction of global horizontal solar radiation: A model comparison. Solar Energy, 86(6):1796-1802.
                Iqbal, M. 2012. An introduction to solar radiation: Elsevier Science. 408 p.
            </remarks>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.clock">
            <summary>Link to APSIM's clock model.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.weather">
            <summary>Link to APSIM's weather file.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.summary">
            <summary>Link to APSIM's summary model.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.zone">
            <summary>Link to APSIM's zone model.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.solarConstant">
            <summary>Mean value of solar constant (w/m2).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.standardAtmosphericPressure">
            <summary>Mean atmospheric pressure at sea level (hPa).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.standardAtmosphericTemperature">
            <summary>Air temperature at standard conditions (Kelvin).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.standardGravitationalAcceleration">
            <summary>Mean acceleration of gravity at sea level (m/s^2).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.standardTemperatureLapseRate">
            <summary>Standard environmental temperature lapse rate in dry air (K/m).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.standardAtmosphericMolarMass">
            <summary>Mean molar mass of Earth's dry air (kg/mol).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.universalGasConstant">
            <summary>Universal gas constant for air (J/mol/K).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.epsilon">
            <summary>A threshold to evaluate significant values.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.latitudeAngle">
            <summary>Latitude converted to radians.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.slopeFactor">
            <summary>Slope factor for diffuse and reflected radiation (also called sky view).</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.myRadn">
            <summary>Mean daily solar radiation after correction due to slope and aspect.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.myVP">
            <summary>Mean daily vapour pressure after correction imposed by the user.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.myWindSpeed">
            <summary>Mean daily wind speed after correction imposed by the user.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.sunriseAngleHorizontal">
            <summary>Hour angle for sunrise/sunset on a horizontal surface.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.sunriseAngle1Slope">
            <summary>Hour angle for first sunrise on tilted surface.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.sunsetAngle1Slope">
            <summary>Hour angle for first sunset on tilted surface.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.sunriseAngle2Slope">
            <summary>Hour angle for second sunrise on tilted surface.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.sunsetAngle2Slope">
            <summary>Hour angle for second sunset on tilted surface.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.aspectFromSouthInRadians">
            <summary>Aspect of slope - degrees from south (in radians).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.SurroundsAlbedo">
            <summary>Albedo of the surrounding environment (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.dRain">
            <summary>Relative change in rainfall.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.dWind">
            <summary>Relative change in wind.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.dVapPressure">
            <summary>Relative change in vapour pressure.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.A_diffuseRadn">
            <summary>Parameter A for diffuse radiation fraction.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.B_diffuseRadn">
            <summary>Parameter B for diffuse radiation fraction.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.TurbidityCoefficient">
            <summary>
            Mean air turbidity for direct radiation (0-1).
            </summary>
            <remarks>
            The value should be, in practice, between 0.5 (for very dusty/polluted places) and 1.0 (for areas with natural vegetation)
            Following Allen et al (2006)
            </remarks>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.a_ki">
            <summary>Parameter a of the function for transimissivity index for direct radn.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.b_ki">
            <summary>Parameter b of the function for transimissivity index for direct radn.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.c_ki">
            <summary>parameter c of the function for transimissivity index for direct radn.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.d_ki">
            <summary>Parameter d of the function for transimissivity index for direct radn.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.a_pw">
            <summary>Parameter a of the function for precipitable water (mm).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.b_pw">
            <summary>Parameter b for the function for precipitable water (mm/kPa^2).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.aT0">
            <summary>Parameter aT0 of dltTemp × dltRadn function, max rate of change (oC per MJ/m2/day).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.bT">
            <summary>Parameter bT of dltTemp × dltRadn function, non linear coefficient (exponent).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.cT">
            <summary>Parameter cT of dltTemp × dltRadn function, accounts for wind effects (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.FN">
            <summary>Parameter FN of dltTemp × dltRadn function, used when dltRadn is negative (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.FM">
            <summary>Parameter FM of dltTemp × dltRadn function, adjust for Tmin (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.RadnMeasured">
            <summary>Original solar radiation input (MJ/m2).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.RadnDirect">
            <summary>Direct solar radiation (MJ/m2).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.RadnDiffuse">
            <summary>Diffuse solar radiation (MJ/m2).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.RadnReflected">
            <summary>Reflected solar radiation  (MJ/m2).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.ExtraterrestrialRadn">
            <summary>Extraterrestrial solar radiation (MJ/m2).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.MaxDirSunlightLength">
            <summary>Time length of direct sunlight on a horizontal surface (hrs).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.ActualDirSunlightLength">
            <summary>Time length of direct sunlight on tilted surface (hrs).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.ClearnessIndex">
            <summary>
            Sky clearness index (0-1).
            </summary>
            <remarks>
            Provide an idea of how overcast the day is
            </remarks>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.DiffuseRadnFraction">
            <summary>Fraction of total radiation that is diffuse (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.DirRadnRatio">
            <summary>Ratio of direct radiation between slope and horizontal surfaces.</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.DiffRadnRatio">
            <summary>Ratio of diffuse radiation between slope and horizontal surfaces.</summary>
        </member>
        <member name="F:Models.Climate.SlopeEffectsOnWeather.FracRadnDirect">
            <summary>Fraction of solar radiation that is direct beam (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.FracRadnDiffuse">
            <summary>Fraction of solar radiation that is diffuse (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.FracRadnReflected">
            <summary>Fraction of solar radiation reflected from terrain (0-1).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.TminMeasured">
            <summary>Original value of minimum temperature (oC).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.TmaxMeasured">
            <summary>Original value of maximum  temperature (oC).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.TmeanActual">
            <summary>Actual Tmean value, after adjusts (oC).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.dltTmin">
            <summary>Variation in Tmin (oC).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.dltTmax">
            <summary>Variation in Tmax (oC).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.AtmosphericPressure">
            <summary>Mean local atmospheric pressure (hPa).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.RainMeasured">
            <summary>Original rain input (mm).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.WindSpeedMeasured">
            <summary>Original wind speed input (m/s).</summary>
        </member>
        <member name="P:Models.Climate.SlopeEffectsOnWeather.VPMeasured">
            <summary>Original vapour pressure input (hPa).</summary>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Invoked at start of simulation.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.OnPreNewMet(System.Object,System.EventArgs)">
            <summary>Evaluate whether weather data is to be adjusted due to slope and aspect.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.RadiationOnSlope">
            <summary>
            Computes the solar radiation received by a tilted surface, based on measured values on horizontal.
            </summary>
            <remarks>
            Uses the methodology described by Cichota (2015), adapted from Allen et al. (2006) and Iqbal (2015).
            </remarks>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.SunriseSunsetOnSlope(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the hour angles for sunrise and sunset on a tilted surface.
            </summary>
            <param name="a_">Auxiliary parameter a</param>
            <param name="b_">Auxiliary parameter b</param>
            <param name="c_">Auxiliary parameter c</param>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.CosineWS(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compute the base cosine of ws (sunrise angle) on a tilted surface, uses a quadratic function.
            </summary>
            <param name="mySwith">Whether the root is positive or negative</param>
            <param name="a_">Auxiliary parameter a</param>
            <param name="b_">Auxiliary parameter b</param>
            <param name="c_">Auxiliary parameter c</param>
            <returns>The value of the cosine of ws</returns>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.EvaluateSunAngles(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the results for sunrise/sunset angle (ws).
            </summary>
            <param name="WSoption1">Option 1 for ws</param>
            <param name="WSoption2">Option 2 for ws</param>
            <param name="WSoption3">Option 3 for ws</param>
            <param name="WSdefault">Default option for ws</param>
            <param name="a_">Auxiliary parameter a</param>
            <param name="b_">Auxiliary parameter b</param>
            <param name="c_">Auxiliary parameter c</param>
            <returns>The appropriate value for ws</returns>
        </member>
        <member name="M:Models.Climate.SlopeEffectsOnWeather.DeltaTemperature">
            <summary>
            Computes the variation in temperature caused by changes in incident radiation in tilted surfaces.
            </summary>
        </member>
        <member name="T:Models.Climate.Weather">
            <summary>
             Reads in weather data and makes it available to other models.
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.clock">
            <summary>
            A link to the clock model.
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.maximumTemperatureIndex">
            <summary>
            The index of the maximum temperature column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.minimumTemperatureIndex">
            <summary>
            The index of the minimum temperature column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.radiationIndex">
            <summary>
            The index of the solar radiation column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.rainIndex">
            <summary>
            The index of the rainfall column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.evaporationIndex">
            <summary>
            The index of the evaporation column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.rainfallHoursIndex">
            <summary>
            The index of the evaporation column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.vapourPressureIndex">
            <summary>
            The index of the vapor pressure column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.windIndex">
            <summary>
            The index of the wind column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.co2Index">
            <summary>
            The index of the co2 column in the weather file, or -1
            if the weather file doesn't contain co2.
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.DiffuseFractionIndex">
            <summary>
            The index of the DiffuseFraction column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.dayLengthIndex">
            <summary>
            The index of the DayLength column in the weather file
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.doSeek">
            <summary>
            A flag indicating whether this model should do a seek on the weather file
            </summary>
        </member>
        <member name="E:Models.Climate.Weather.PreparingNewWeatherData">
            <summary>
            This event will be invoked immediately before models get their weather data.
            models and scripts an opportunity to change the weather data before other models
            reads it.
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.constantsFile">
            <summary>
            Optional constants file name. This should only be accessed via
            <see cref="P:Models.Climate.Weather.ConstantsFile" />, which handles conversion between
            relative/absolute paths.
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.ConstantsFile">
            <summary>
            Allows to specify a second file which contains constants such as lat, long,
            tav, amp, etc. Really only used when the actual met data is in a .csv file.
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.StartDate">
            <summary>
            Gets the start date of the weather file
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.EndDate">
            <summary>
            Gets the end date of the weather file
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.MaxT">
            <summary>
            Gets or sets the maximum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.MinT">
            <summary>
            Gets or sets the minimum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.MeanT">
            <summary>
            Daily Mean temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.VPD">
            <summary>
            Daily mean VPD (hPa)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.WinterSolsticeDOY">
            <summary>
            days since winter solstice (day)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.DaysSinceWinterSolstice">
            <summary>
            Number of days lapsed since the winter solstice
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Qmax">
            <summary>
            Maximum clear sky radiation (MJ/m2)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Rain">
            <summary>
            Gets or sets the rainfall (mm)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Radn">
            <summary>
            Gets or sets the solar radiation. MJ/m2/day
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.PanEvap">
            <summary>
            Gets or sets the Pan Evaporation (mm) (Class A pan)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.RainfallHours">
            <summary>
            Gets or sets the number of hours rainfall occured in
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.VP">
            <summary>
            Gets or sets the vapor pressure (hPa)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified. (code says 3.0 not zero)
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.DiffuseFraction">
            <summary>
            Gets or sets the DF value found in weather file or zero if not specified
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.DayLength">
            <summary>
            Gets or sets the Daylength value found in weather file or zero if not specified
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Latitude">
            <summary>
            Gets the latitude
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Longitude">
            <summary>
            Gets the longitude
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Tav">
            <summary>
            Gets the average temperature
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.Amp">
            <summary>
            Gets the temperature amplitude.
            </summary>
        </member>
        <member name="P:Models.Climate.Weather.YesterdaysMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="P:Models.Climate.Weather.TodaysMetData">
            <summary>Met Data for Today</summary>
        </member>
        <member name="P:Models.Climate.Weather.TomorrowsMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="P:Models.Climate.Weather.FirstDateOfSummer">
            <summary>First date of summer.</summary>
        </member>
        <member name="P:Models.Climate.Weather.FirstDateOfAutumn">
            <summary>First date of autumn / fall.</summary>
        </member>
        <member name="P:Models.Climate.Weather.FirstDateOfWinter">
            <summary>First date of winter.</summary>
        </member>
        <member name="P:Models.Climate.Weather.FirstDateOfSpring">
            <summary>First date of spring.</summary>
        </member>
        <member name="F:Models.Climate.Weather.ActiveTabIndex">
            <summary>
            Temporarily stores which tab is currently displayed.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.StartYear">
            <summary>
            Temporarily stores the starting date for charts.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="F:Models.Climate.Weather.ShowYears">
            <summary>
            Temporarily stores the years to show in charts.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="E:Models.Climate.Weather.StartOfSpring">
            <summary>Start of spring event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.StartOfSummer">
            <summary>Start of summer event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.StartOfAutumn">
            <summary>Start of autumn/fall event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.StartOfWinter">
            <summary>Start of winter event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.EndOfSpring">
            <summary>End of spring event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.EndOfSummer">
            <summary>End of summer event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.EndOfAutumn">
            <summary>End of autumn/fall event.</summary>
        </member>
        <member name="E:Models.Climate.Weather.EndOfWinter">
            <summary>End of winter event.</summary>
        </member>
        <member name="P:Models.Climate.Weather.Season">
            <summary>Name of current season.</summary>
        </member>
        <member name="M:Models.Climate.Weather.GetReferencedFileNames">
            <summary>Return our input filenames</summary>
        </member>
        <member name="M:Models.Climate.Weather.RemovePathsFromReferencedFileNames">
            <summary>Remove all paths from referenced filenames.</summary>
        </member>
        <member name="M:Models.Climate.Weather.CalculateDayLength(System.Double)">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="M:Models.Climate.Weather.CalculateSunRise">
            <summary> calculate the time of sun rise</summary>
            <returns>Sun rise time</returns>
        </member>
        <member name="M:Models.Climate.Weather.CalculateSunSet">
            <summary> calculate the time of sun set</summary>
            <returns>Sun set time</returns>
        </member>
        <member name="M:Models.Climate.Weather.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.Climate.Weather.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Perform the necessary initialisation at the start of simulation.
            </summary>
        </member>
        <member name="M:Models.Climate.Weather.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.Climate.Weather.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.Climate.Weather.OnDoWeather(System.Object,System.EventArgs)">
            <summary>
            An event handler for the daily DoWeather event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="M:Models.Climate.Weather.GetMetData(System.DateTime)">
            <summary>Method to read one days met data in from file</summary>
            <param name="date">the date to read met data</param>
        </member>
        <member name="M:Models.Climate.Weather.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>
            An event handler for the start of day event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="M:Models.Climate.Weather.OnEndOfDay(System.Object,System.EventArgs)">
            <summary>
            An event handler for the end of day event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="M:Models.Climate.Weather.OpenDataFile">
            <summary>
            Open the weather data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.Climate.Weather.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="M:Models.Climate.Weather.GetValue(System.String)">
            <summary>
            Read a user-defined value from today's weather data.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Models.Climate.Weather.CalcTAVAMP">
            <summary>
            Calculate the amp and tav 'constant' values for this weather file
            and store the values into the File constants.
            </summary>
        </member>
        <member name="M:Models.Climate.Weather.ProcessMonthlyTAVAMP(System.Double@,System.Double@)">
            <summary>
            Calculate the amp and tav 'constant' values for this weather file.
            </summary>
            <param name="tav">The calculated tav value</param>
            <param name="amp">The calculated amp value</param>
        </member>
        <member name="T:Models.Climate.WeatherSampler">
            <summary>
            Allow random resampling of whole years of weather data from a met file.
            </summary>
            <remarks>
            Parameters / inputs
                * read in a met file
                * parameter setting the 'start' of the year as dd-mmm-yyyy (e.g. "01-jun-3000") where the 
                dd-mmm part sets the start of all sampling years and the full dd-mmm-yyyy sets the start 
                date of the simulation (end date is the start plus the number of years listed below)
                * read in either:
                    - a list of years in order to sample (e.g. "1997,2014,2000"); or
                    - the number of years required and "random"; or
                    - the number of years required and "pseudo-random" and a seed value
                * ? an add-on to the existing met file?
                * needs to be able to be used as a factor in an experiment
            What it does
                * sets the (fake) start date of the simulation (here 01-jun-3000) along with the weather data 
                to be used with the "sampling_date" (here the first one would be 01-jun-1997 for example) being outputable
                * leap years - ignores 29-feb in the sampling data and pads an extra final day in the year if needed 
                (want the same weather regardless of the simulation year - hope that makes sense!)
                * in the example above, by the time the simulation gets to 31-may-3001, sampling_date is 31-may-1998. 
                Then on simulation date 01-jun-3001 the sampling_date is 01-jun-2014. Equivalent behaviour for
                randomly generated weather years.
            </remarks>
        </member>
        <member name="F:Models.Climate.WeatherSampler.data">
            <summary>A data table of all weather data.</summary>
        </member>
        <member name="F:Models.Climate.WeatherSampler.currentRowIndex">
            <summary>The current row into the weather data table.</summary>
        </member>
        <member name="F:Models.Climate.WeatherSampler.currentYearIndex">
            <summary>The current index into the Years array.</summary>
        </member>
        <member name="T:Models.Climate.WeatherSampler.RandomiserTypeEnum">
            <summary>Type of randomiser enum for drop down.</summary>
        </member>
        <member name="F:Models.Climate.WeatherSampler.RandomiserTypeEnum.SpecifyYears">
            <summary>Specify years manually.</summary>
        </member>
        <member name="F:Models.Climate.WeatherSampler.RandomiserTypeEnum.RandomSampler">
            <summary>Random sampler.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.FileName">
            <summary>The weather file name.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.StartDateOfSimulation">
            <summary>The start date of the simulation.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.TypeOfSampling">
            <summary>Type of year sampling.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Years">
            <summary>The sample years.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.NumberOfLeadInYears">
            <summary>The number of lead in years before weather sampling begins.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.NumYears">
            <summary>The sample years.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.IsSpecifyYearsEnabled">
            <summary>Is 'specify years' enabled?</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.IsRandomSamplerEnabled">
            <summary>Is 'Random Sampler' enabled?</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.YesterdaysMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.TomorrowsMetData">
            <summary>Met Data from yesterday</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.StartDate">
            <summary>The start date of the weather file.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.EndDate">
            <summary>The end date of the weather file.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.MaxT">
            <summary>The maximum temperature (oc).</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.MinT">
            <summary>Gets or sets the minimum temperature (oc).</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.MeanT">
            <summary>Mean temperature. </summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.VPD">
            <summary>Daily mean VPD.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Rain">
            <summary>Rainfall (mm).</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Radn">
            <summary>Solar radiation (MJ/m2/day).</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.VP">
            <summary>Vapor pressure.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Wind">
            <summary>Wind.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.CO2">
            <summary>CO2 level. If not specified in the weather file the default is 350.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.AirPressure">
            <summary>Atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.DiffuseFraction">
            <summary>Diffuse radiation fraction. If not specified in the weather file the default is 1.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Latitude">
            <summary>Latitude.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Longitude">
            <summary>Gets the longitude</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Tav">
            <summary>Average temperature.</summary>
        </member>
        <member name="P:Models.Climate.WeatherSampler.Amp">
            <summary>Temperature amplitude.</summary>
        </member>
        <member name="E:Models.Climate.WeatherSampler.PreparingNewWeatherData">
            <summary>
            This event will be invoked immediately before models get their weather data.
            models and scripts an opportunity to change the weather data before other models
            reads it.
            </summary>
        </member>
        <member name="M:Models.Climate.WeatherSampler.CalculateDayLength(System.Double)">
            <summary>Duration of the day in hours.</summary>
            <param name="Twilight">The twilight angle.</param>
        </member>
        <member name="M:Models.Climate.WeatherSampler.CalculateSunRise">
            <summary> calculate the time of sun rise</summary>
            <returns>Sun rise time</returns>
        </member>
        <member name="M:Models.Climate.WeatherSampler.CalculateSunSet">
            <summary> calculate the time of sun set</summary>
            <returns>Sun set time</returns>
        </member>
        <member name="M:Models.Climate.WeatherSampler.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Called at the beginning of a simulation.</summary>
        </member>
        <member name="M:Models.Climate.WeatherSampler.OnDoWeather(System.Object,System.EventArgs)">
            <summary>An event handler for the daily DoWeather event.</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="M:Models.Climate.WeatherSampler.FindRowForDate(System.DateTime)">
            <summary>
            Find a row in the data table that matches a date. Will throw if not found.
            </summary>
            <param name="dateToFind">The date to find.</param>
            <returns>The index of the found row.</returns>
        </member>
        <member name="T:Models.Clock">
            <summary>
            The clock model is resonsible for controlling the daily timestep in APSIM. It 
            keeps track of the simulation date and loops from the start date to the end
            date, publishing events that other models can subscribe to.
            </summary>
        </member>
        <member name="F:Models.Clock.args">
            <summary>The arguments</summary>
        </member>
        <member name="F:Models.Clock.Summary">
            <summary>The summary</summary>
        </member>
        <member name="P:Models.Clock.Start">
            <summary>The start date of the simulation.</summary>
        </member>
        <member name="P:Models.Clock.End">
            <summary>The end date of the simulation.</summary>
        </member>
        <member name="P:Models.Clock.StartDate">
            <summary>
            Gets the start date for the simulation.
            </summary>
            <remarks>
            If the user did not
            not provide a start date, attempt to locate a weather file
            and use its start date. If no weather file can be found,
            throw an exception.
            </remarks>
        </member>
        <member name="P:Models.Clock.EndDate">
            <summary>
            Gets or sets the end date for the simulation.
            </summary>
            <remarks>
            If the user did not
            not provide a end date, attempt to locate a weather file
            and use its end date. If no weather file can be found,
            throw an exception.
            </remarks>
        </member>
        <member name="E:Models.Clock.StartOfSimulation">
            <summary>Occurs when [start of simulation].</summary>
        </member>
        <member name="E:Models.Clock.StartOfDay">
            <summary>Occurs when [start of day].</summary>
        </member>
        <member name="E:Models.Clock.StartOfMonth">
            <summary>Occurs when [start of month].</summary>
        </member>
        <member name="E:Models.Clock.StartOfYear">
            <summary>Occurs when [start of year].</summary>
        </member>
        <member name="E:Models.Clock.StartOfWeek">
            <summary>Occurs when [start of week].</summary>
        </member>
        <member name="E:Models.Clock.EndOfDay">
            <summary>Occurs when [end of day].</summary>
        </member>
        <member name="E:Models.Clock.EndOfMonth">
            <summary>Occurs when [end of month].</summary>
        </member>
        <member name="E:Models.Clock.EndOfYear">
            <summary>Occurs when [end of year].</summary>
        </member>
        <member name="E:Models.Clock.EndOfWeek">
            <summary>Occurs when [end of week].</summary>
        </member>
        <member name="E:Models.Clock.EndOfSimulation">
            <summary>Occurs when [end of simulation].</summary>
        </member>
        <member name="E:Models.Clock.FinalInitialise">
            <summary>Last initialisation event.</summary>
        </member>
        <member name="E:Models.Clock.DoWeather">
            <summary>Occurs when [do weather].</summary>
        </member>
        <member name="E:Models.Clock.DoDailyInitialisation">
            <summary>Occurs when [do daily initialisation].</summary>
        </member>
        <member name="E:Models.Clock.DoInitialSummary">
            <summary>Occurs when [do initial summary].</summary>
        </member>
        <member name="E:Models.Clock.DoManagement">
            <summary>Occurs when [do management].</summary>
        </member>
        <member name="E:Models.Clock.DoPestDiseaseDamage">
            <summary>Occurs when [do PestDisease damage]</summary>
        </member>
        <member name="E:Models.Clock.DoEnergyArbitration">
            <summary>Occurs when [do energy arbitration].</summary>
        </member>
        <member name="E:Models.Clock.DoSoilWaterMovement">
            <summary>Occurs when [do soil water movement].</summary>
        </member>
        <member name="E:Models.Clock.DoSoilTemperature">
            <summary>Occurs when [do soil temperature].</summary>
        </member>
        <member name="E:Models.Clock.DoSoilOrganicMatter">
            <summary>Occurs when [do soil organic matter].</summary>
        </member>
        <member name="E:Models.Clock.DoSurfaceOrganicMatterDecomposition">
            <summary>Occurs when [do surface organic matter decomposition].</summary>
        </member>
        <member name="E:Models.Clock.DoUpdateWaterDemand">
            <summary>Occurs when [do update transpiration].</summary>                   
        </member>
        <member name="E:Models.Clock.DoWaterArbitration">
            <summary>Occurs when [do water arbitration].</summary>
        </member>
        <member name="E:Models.Clock.PrePhenology">
            <summary>Occurs between DoWaterArbitration and DoPhenology. Performs sorghum final leaf no calcs.</summary>
        </member>
        <member name="E:Models.Clock.DoPhenology">
            <summary>Occurs when [do phenology].</summary>                             
        </member>
        <member name="E:Models.Clock.DoPotentialPlantGrowth">
            <summary>Occurs when [do potential plant growth].</summary>
        </member>
        <member name="E:Models.Clock.DoPotentialPlantPartioning">
            <summary>Occurs when [do potential plant partioning].</summary>
        </member>
        <member name="E:Models.Clock.DoNutrientArbitration">
            <summary>Occurs when [do nutrient arbitration].</summary>
        </member>
        <member name="E:Models.Clock.DoActualPlantPartioning">
            <summary>Occurs when [do potential plant partioning].</summary>
        </member>
        <member name="E:Models.Clock.DoActualPlantGrowth">
            <summary>Occurs when [do actual plant growth].</summary>
        </member>
        <member name="E:Models.Clock.DoUpdate">
            <summary>Occurs when [do update].</summary>
        </member>
        <member name="E:Models.Clock.DoStock">
            <summary> Process stock methods in GrazPlan Stock </summary>
        </member>
        <member name="E:Models.Clock.DoLifecycle">
            <summary> Process a Pest and Disease lifecycle object </summary>
        </member>
        <member name="E:Models.Clock.DoManagementCalculations">
            <summary>Occurs when [do management calculations].</summary>
        </member>
        <member name="E:Models.Clock.DoReportCalculations">
            <summary>Occurs when [do report calculations].</summary>
        </member>
        <member name="E:Models.Clock.DoReport">
            <summary>Occurs when [do report].</summary>
        </member>
        <member name="E:Models.Clock.DoDCAPST">
            <summary>
            Occurs when dcaps performs its calculations. This needs to happen
            between DoPotentialPlantGrowth and DoPotentialPlantPartitioning.
            </summary>
        </member>
        <member name="E:Models.Clock.CLEMInitialiseResource">
            <summary>CLEM initialise Resources occurs once at start of simulation</summary>
        </member>
        <member name="E:Models.Clock.CLEMInitialiseActivity">
            <summary>CLEM initialise Activity occurs once at start of simulation</summary>
        </member>
        <member name="E:Models.Clock.CLEMValidate">
            <summary>CLEM validate all data entry</summary>
        </member>
        <member name="E:Models.Clock.CLEMStartOfTimeStep">
            <summary>CLEM start of timestep event</summary>
        </member>
        <member name="E:Models.Clock.CLEMUpdateLabourAvailability">
            <summary>CLEM set labour availability after start of timestep and financial considerations.</summary>
        </member>
        <member name="E:Models.Clock.CLEMUpdatePasture">
            <summary>CLEM update pasture</summary>
        </member>
        <member name="E:Models.Clock.CLEMDetachPasture">
            <summary>CLEM detach pasture</summary>
        </member>
        <member name="E:Models.Clock.CLEMPastureReady">
            <summary>CLEM pasture has been added and is ready for use</summary>
        </member>
        <member name="E:Models.Clock.CLEMDoCutAndCarry">
            <summary>CLEM cut and carry</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalBreeding">
            <summary>CLEM Do Animal (Ruminant and Other) Breeding and milk calculations</summary>
        </member>
        <member name="E:Models.Clock.CLEMPotentialIntake">
            <summary>Get potential intake. This includes suckling milk consumption</summary>
        </member>
        <member name="E:Models.Clock.CLEMCalculateManure">
            <summary>Request and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later</summary>
        </member>
        <member name="E:Models.Clock.CLEMCollectManure">
            <summary>Request and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later</summary>
        </member>
        <member name="E:Models.Clock.CLEMGetResourcesRequired">
            <summary>Request and perform the collection of maure after resources are allocated and manure produced in time-step</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalMilkProduction">
            <summary>CLEM Calculate Animals (Ruminant and Other) milk production</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalWeightGain">
            <summary>CLEM Calculate Animals(Ruminant and Other) weight gain</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalDeath">
            <summary>CLEM Do Animal (Ruminant and Other) death</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalMilking">
            <summary>CLEM Do Animal (Ruminant and Other) milking</summary>
        </member>
        <member name="E:Models.Clock.CLEMCalculateEcologicalState">
            <summary>CLEM Calculate ecological state after all deaths and before management</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalMark">
            <summary>CLEM Do animal marking so complete before undertaking management decisions</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalManage">
            <summary>CLEM Do Animal (Ruminant and Other) Herd Management (adjust breeders and sires etc.)</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalStock">
            <summary>CLEM stock animals to pasture availability or other metrics</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalSell">
            <summary>CLEM sell animals to market including transporting and labour</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalBuy">
            <summary>CLEM buy animals including transporting and labour</summary>
        </member>
        <member name="E:Models.Clock.CLEMAgeResources">
            <summary>CLEM Age your resources (eg. Decomose Fodder, Age your labour, Age your Animals)</summary>
        </member>
        <member name="E:Models.Clock.CLEMHerdSummary">
            <summary>CLEM event to calculate monthly herd summary</summary>
        </member>
        <member name="E:Models.Clock.CLEMFinalizeTimeStep">
            <summary>CLEM finalize time-step before end</summary>
        </member>
        <member name="E:Models.Clock.CLEMEndOfTimeStep">
            <summary>CLEM end of timestep event</summary>
        </member>
        <member name="P:Models.Clock.Today">
            <summary>Gets the today.</summary>
            <value>The today.</value>
        </member>
        <member name="P:Models.Clock.FractionComplete">
            <summary>
            Returns the current fraction of the overall simulation which has been completed
            </summary>
        </member>
        <member name="M:Models.Clock.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Clock.OnDoCommence(System.Object,Models.Core.Run.CommenceArgs)">
            <summary>An event handler to signal start of a simulation.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Core.Alias">
            <summary>
            An alias model
            </summary>
        </member>
        <member name="M:Models.Core.Alias.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>
            Document the model.
            </summary>
            <param name="tags"></param>
            <param name="headingLevel"></param>
            <param name="indent"></param>
        </member>
        <member name="T:Models.Core.Apsim">
            <summary>
            The API for models to discover other models, get and set variables in
            other models and send events and subscribe to events in other models.
            </summary>
        </member>
        <member name="M:Models.Core.Apsim.ClearCaches(Models.Core.IModel)">
            <summary>
            Clears the cached scoping values for the simulation 
            We need to do this when models have been added or deleted,
            as the cache will then be incorrect
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Models.Core.Apsim.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the this model.
            </summary>
            <param name="model">The model to clone</param>
            <returns>The clone of the model</returns>
        </member>
        <member name="M:Models.Core.Apsim.IsChildAllowable(System.Object,System.Type)">
            <summary>Return true if the child can be added to the parent.</summary>
            <param name="parent">The parent model.</param>
            <param name="childType">The child type.</param>
            <returns>True if child can be added.</returns>
        </member>
        <member name="M:Models.Core.Apsim.GetAllowableChildModels(System.Object)">
            <summary>Get a list of allowable child models for the specified parent.</summary>
            <param name="parent">The parent model.</param>
            <returns>A list of allowable child models.</returns>
        </member>
        <member name="T:Models.Core.Apsim.ModelDescription">
            <summary>Encapsulates a model that can be added to another model.</summary>
        </member>
        <member name="P:Models.Core.Apsim.ModelDescription.ResourceString">
            <summary>Name of resource.</summary>
        </member>
        <member name="M:Models.Core.Apsim.ModelDescription.#ctor(System.Type)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Models.Core.Apsim.ModelDescription.#ctor(System.Type,System.String,System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="P:Models.Core.Apsim.ModelDescription.ModelType">
            <summary>Type of model.</summary>
        </member>
        <member name="P:Models.Core.Apsim.ModelDescription.ModelName">
            <summary>Name of model.</summary>
        </member>
        <member name="M:Models.Core.Apsim.ModelDescription.CompareTo(Models.Core.Apsim.ModelDescription)">
            <summary>Comparison method.</summary>
            <param name="other">The other instance to compare this one to.</param>
        </member>
        <member name="T:Models.Core.Apsim710File.ScriptParameter">
            <summary>
            Manager script parameter
            </summary>
        </member>
        <member name="P:Models.Core.Apsim710File.ScriptParameter.Name">
            <summary>
            The name of the extracted parameter
            </summary>
        </member>
        <member name="P:Models.Core.Apsim710File.ScriptParameter.Value">
            <summary>
            The value as a string
            </summary>
        </member>
        <member name="P:Models.Core.Apsim710File.ScriptParameter.TypeName">
            <summary>
            The type name extracted from the original script
            </summary>
        </member>
        <member name="P:Models.Core.Apsim710File.ScriptParameter.Description">
            <summary>
            The description for the parameter
            </summary>
        </member>
        <member name="P:Models.Core.Apsim710File.ScriptParameter.ListValues">
            <summary>
            An enumeration
            </summary>
        </member>
        <member name="T:Models.Core.Apsim710File.Importer">
            <summary>
            This is a worker class for the import process that converts
            an old APSIM 7.5 simulation file into an APSIM(X) file or Simulations object.
            <para/>
            Some of the components are added to the imported xml by creating instances of the
            Model object and then populating it then importing the serialized XML.
            Other components that have child components are done purely using XML creation
            and copying. This is because Model objects generate XML for their children and
            a merge would be required on the child XML. Easier just to do the
            whole component purely in XML (I hope).
            </summary>
        </member>
        <member name="F:Models.Core.Apsim710File.Importer.surfOMExists">
            <summary>
            Used as flags during importation of a paddock
            </summary>
        </member>
        <member name="F:Models.Core.Apsim710File.Importer.soilWaterExists">
            <summary>
            Used as flags during importation of a paddock
            </summary>
        </member>
        <member name="F:Models.Core.Apsim710File.Importer.microClimateExists">
            <summary>
            Used as flags during importation
            </summary>
        </member>
        <member name="F:Models.Core.Apsim710File.Importer.startDate">
            <summary>
            Used as flags during importation
            </summary>
        </member>
        <member name="F:Models.Core.Apsim710File.Importer.fertilisers">
            <summary>
            fertiliser type conversion lookups
            </summary>
        </member>
        <member name="F:Models.Core.Apsim710File.Importer.ApsimPath">
            <summary>
            Original path that is substituted for %apsim%
            </summary>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ProcessFile(System.String)">
            <summary>
            Processes a file and writes the Simulation(s) to the .apsimx file
            </summary>
            <param name="filename">The name of the input file</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ProcessDir(System.String)">
            <summary>
            Iterate through the directory and attempt to convert any .apsim files.
            </summary>
            <param name="dir">The directory to process</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.CreateSimulations(System.String)">
            <summary>
            Interrogate the .apsim file XML and attempt to construct a 
            useful APSIMX Simulation object(s). Uses a temporary file
            location.
            </summary>
            <param name="filename">Source file (.apsim)</param>
            <returns>An APSIMX Simulations object</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.CreateSimulationsFromXml(System.String)">
            <summary>
            Interrogate the .apsim file XML and attempt to construct a 
            useful APSIMX Simulation object(s). Uses a temporary file
            location.
            </summary>
            <param name="xml">Source APSIM 7.10 xml</param>
            <returns>An APSIMX Simulations object</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddFoldersAndSimulations(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            At the top level we only want to add folder and simulation nodes, not nodes
            under 'shared' folders e.g. wheat validation.
            </summary>
            <param name="systemNode">The root system node</param>
            <param name="destParent">The new destination node</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddChildComponents(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Iterate through the child nodes
            </summary>
            <param name="systemNode">The root system node</param>
            <param name="destParent">The new destination node</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddComponent(System.Xml.XmlNode,System.Xml.XmlNode@)">
            <summary>
            Add a component to the xml tree. Customised for each component type
            found in the source.
            </summary>
            <param name="compNode">The source component node in the .apsim file</param>
            <param name="destParent">The parent of the new component in the .apsimx file</param>
            <returns>The new component xml node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportPlant(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import a Plant component
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="plantNode">The new created node</param>
            <returns>The newly created node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddLinkedObjects(System.Xml.XmlNode,System.Object)">
            <summary>
            Unused function
            </summary>
            <param name="plantNode">The new plant node</param>
            <param name="model">The model object</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportMicromet(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import a micromet component
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new micromet node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportSurfaceOM(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import surfaceom
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new surfaceom node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportGraph(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import a graph object 
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new graph node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.CopyNode(System.Xml.XmlNode,System.Xml.XmlNode,System.String)">
            <summary>
            Copy a node to a parent node. Has option of specifying a new node name.
            </summary>
            <param name="compNode">The node being imported from the apsim file xml.</param>
            <param name="destParent">Destination parent node that the new child is added to.</param>
            <param name="newNodeName">New node name.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportWater(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import the water component
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new water node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportSoil(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import the soil component
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new soil node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportOutputFile(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import the output component
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">The new parent xml node</param>
            <param name="newNode">The new component node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.GetManagerParams(System.Xml.XmlNode,System.Collections.Generic.List{Models.Core.Apsim710File.ScriptParameter})">
            <summary>
            Find all the Manager script parameters and populate the list
            </summary>
            <param name="compNode">Manager component node</param>
            <param name="scriptParams">The list of extracted parameters</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddManagerParams(System.Collections.Generic.List{Models.Core.Apsim710File.ScriptParameter})">
            <summary>
            All the extracted Manager parameters are added to an XmlElement[]
            </summary>
            <param name="scriptParams"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.WriteManagerParams(System.Collections.Generic.List{Models.Core.Apsim710File.ScriptParameter})">
            <summary>
            Write the Manager parameter declarations and enumerated types
            into a Manager C# string
            </summary>
            <param name="scriptParams"></param>
            <returns>Manager script section</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportManager(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import a Manager(1) component.
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">The new parent xml node</param>
            <param name="newNode">The new component node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportManagerMemos(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import any memo children.
            </summary>
            <param name="compNode">The Manager component node</param>
            <param name="destParent">The parent (folder) node of the Manager.</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportManager2(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import a Manager(2) component.
            </summary>
            <param name="compNode">The Manager component node being imported</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new Manager node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportMetFile(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import the weather object
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">The new parent xml node</param>
            <param name="newNode">The new weather component node</param>
            <returns>The new component node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportClock(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import Clock
            </summary>
            <param name="compNode">The node being imported from the apsim file xml</param>
            <param name="destParent">The new parent xml node</param>
            <param name="newNode">The new clock component node</param>
            <returns>The new component node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.ImportOperations(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Import operations
            </summary>
            <param name="compNode">The Operations node being imported</param>
            <param name="destParent">Destination parent node that the new child is added to</param>
            <param name="newNode">The new clock node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.FindTokenValue(System.String,System.String,System.String@)">
            <summary>
            Rough method for parsing an old manager script function call to obtain
            the parameter values.
            </summary>
            <param name="name">Name of parameter</param>
            <param name="line">Input function call line text</param>
            <param name="value">The value found for the parameter. Contains the original value if not found.</param>
            <returns>Index of the parameter name found or -1 if not found</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.CopyNodeAndValueArray(System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Copy an array of scalars
            </summary>
            <param name="srcParentNode">The parent node of the array nodes</param>
            <param name="destParentNode">Destination parent node that the new child is added to</param>
            <param name="srcName">Name of the source array</param>
            <param name="destName">Name of the destination array</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.CopyNodeAndValue(System.Xml.XmlNode,System.Xml.XmlNode,System.String)">
            <summary>
            Copy the <code>srcNode</code> using <code>destName</code>.
            </summary>
            <param name="srcNode">The source node</param>
            <param name="destParentNode">Destination parent node that the new child is added to</param>
            <param name="destName">Name of the destination node that will be appended</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.CopyNodeAndValue(System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            When copying a single unique node and value
            </summary>
            <param name="srcParentNode">Parent node of the source node</param>
            <param name="destParentNode">Destination parent node that the new child is added to</param>
            <param name="srcName">Name of the source node</param>
            <param name="destName">Name of the destination node created</param>
            <param name="forceCreate">Always create the node even if the source is not found</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddCompNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Do the mechanical adding of the xml node in the document
            </summary>
            <param name="parentNode">The parent of the new node</param>
            <param name="elementName">The element tag</param>
            <param name="name">The value stored in the child <code> <Name> ... </Name> </code></param>
            <returns>The new xml element node item</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AddDataStore(System.Xml.XmlNode)">
            <summary>
            Adds a new DataStore component.
            </summary>
            <param name="newSim">The new simulation xml node.</param>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.GetChildDoubles(System.Xml.XmlNode,System.String,System.Double)">
            <summary>
            Get the array of doubles for nodePath element
            </summary>
            <param name="parentNode">Parent node to search</param>
            <param name="nodePath">The child node being sought</param>
            <param name="defValue">Use this as the default if an invalid value is found</param>
            <returns>The array of doubles</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.GetChildDouble(System.Xml.XmlNode,System.String,System.Double)">
            <summary>
            Get the floating point value from the InnerText for the child node of parentNode.
            </summary>
            <param name="parentNode">Parent node to search</param>
            <param name="nodePath">The child node being sought</param>
            <param name="defValue">Use this default if an invalid value found</param>
            <returns>The floating point value or the default value</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.GetInnerText(System.Xml.XmlNode,System.String)">
            <summary>
            Get the inner text for the node
            </summary>
            <param name="parentNode">Parent node to search</param>
            <param name="nodePath">The child node being sought</param>
            <returns>The inner text for the node</returns>
        </member>
        <member name="M:Models.Core.Apsim710File.Importer.AttributeText(System.Xml.XmlNode,System.String)">
            <summary>
            Get the text for the attribute
            </summary>
            <param name="node">Xml node</param>
            <param name="attr">Attribute name</param>
            <returns>The value from the attribute</returns>
        </member>
        <member name="T:Models.Core.ApsimFile.Converter">
            <summary>
            Converts the .apsim file from one version to the next
            </summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Converter.LatestVersion">
            <summary>Gets the latest .apsimx file format version.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.DoConvert(System.String,System.Int32,System.String)">
            <summary>Converts a .apsimx string to the latest version.</summary>
            <param name="st">XML or JSON string to convert.</param>
            <param name="toVersion">The optional version to convert to.</param>
            <param name="fileName">The optional filename where the string came from.</param>
            <returns>Returns true if something was changed.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.EnsureSoilHasInitWaterAndSample(Newtonsoft.Json.Linq.JObject)">
            <summary>
            If root is a soil then make sure it has a sample or init water.
            </summary>
            <param name="root">The root node of the JSON to look at.</param>
            <returns>True if model was changed.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.ConvertToJSON(System.String,System.String)">
            <summary>Upgrades to version 47 - the first JSON version.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion48(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 48. Iterates through all manager scripts, and replaces
            all instances of the text "DisplayTypeEnum" with "DisplayType".
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion49(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 49. Renames Models.Morris+Parameter to Models.Sensitivity.Parameter.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion50(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
             Upgrades to version 50. Fixes the RelativeTo property of 
             InitialWater components of soils copied from Apsim Classic.
             </summary>
             <param name="root"></param>
             <param name="fileName"></param>
             <remarks>
             ll15 must be renamed to LL15.
             Wheat must be renamed to WheatSoil.
             Maize must be renamed to MaizeSoil.
             </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion51(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Changes GsMax to Gsmax350 in all models that implement ICanopy.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion52(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion53(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Adds solutes under SoilNitrogen.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion54(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove SoluteManager.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion55(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Changes initial Root Wt to an array.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion56(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Change Factor.Specifications to Factor.Specification. Also FactorValue
            becomes CompositeFactor.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion57(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 57. Adds a RetranslocateNonStructural node to
            all GenericOrgans which do not have a child called
            RetranslocateNitrogen.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion58(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 58. Renames 'ParamThickness' to 'Thickness' in Weirdo.
            Also change calls to property soil.SWAtWaterThickness to soil.Thickness.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion59(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 59. Renames 'SoilCropOilPalm' to 'SoilCrop'.
            Renames Soil.SoilOrganicMatter.OC to Soil.Initial.OC
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.ConvertToPPM(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Convert no3 and nh4 parameters from ppm to kg/ha.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.HasValues(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Does the specified array have non NaN values?
            </summary>
            <param name="no3Values">The array to remove them from.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion60(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 60. Move NO3 and NH4 from sample to Analaysis node
            and always store as ppm.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion61(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 60. Ensures that a micromet model is within every simulation.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.AddMicroClimate(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Add a MicroClimate model to the specified JSON model token.
            </summary>
            <param name="simulation">An APSIM Simulation</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion62(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 62. Fixes SimpleLeaf variable names
            following a refactor of this class.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion63(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 63. Rename the 'Water' node under soil to 'Physical'
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion64(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 64. Rename the 'SoilOrganicMatter' node under soil to 'Organic'
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion65(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 65. Rename the 'Analysis' node under soil to 'Chemical'
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion66(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            When a factor is under a factors model, insert a permutation model.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion67(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 67. Sets the Start and End properties
            in clock to the values previously stored in StartDate and EndDate.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion68(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 68. Removes AgPasture.Sward
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion69(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrades to version 69. Fixes link attributes in manager scripts after
            link refactoring.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion70(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Changes the type of the Stock component inital values genotypes array
            from StockGeno to SingleGenotypeInits.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion71(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Alters all existing linint functions to have a child variable reference IFunction called XValue instead of a
            string property called XProperty that IFunction then had to locate
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion72(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove .Value() from all variable references because it is redundant
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion73(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Alters all existing AllometricDemand functions to have a child variable reference IFunction called XValue and YValue instead of 
            string property called XProperty and YProperty that it then had to locate.  Aiming to get all things using get for properties
            to be doing it via Variable reference so we can stream line scoping rules
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion74(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Changes the Surface Organic Matter property FractionFaecesAdded to 1.0
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion75(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change TreeLeafAreas to ShadeModiers in Tree Proxy
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion76(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change flow_urea to FlowUrea in soil water
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion77(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change the property in Stock to Genotypes
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion78(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change the namespace for SimpleGrazing
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion79(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change manager method and AgPasture variable names.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion80(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Replace ExcelMultiInput with ExcelInput.
            Change ExcelInput.FileName from a string into a string[].
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion81(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Seperate life cycle process class into Growth, Transfer and Mortality classes.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion82(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add Critical N Conc (if not existing) to all Root Objects by copying the maximum N conc
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion83(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove .Value() from everywhere possible.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion84(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Renames the Input.FileName property to FileNames and makes it an array.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion85(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add a field to the Checkpoints table.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion86(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add new methods structure to OrganArbitrator.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion87(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove Models.Report namespace.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion88(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Replace SoilWater model with WaterBalance model.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion89(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Replace 'avg' with 'mean' in report variables.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion90(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Fixes a bug where a manager script's children were being serialized.
            When attempting to reopen the file, the script's type cannot be resolved.
            This converter will strip out all script children of managers under replacements.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion91(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion92(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change names of a couple of parameters in SimpleGrazing.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion93(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            In SimpleGrazin, Turn "Fraction of defoliated N leaving the system" into a fraction of defoliated N going to soil.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion94(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Convert stock genotypes array into GenotypeCross child models.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion95(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change initialDM on Generic organ and root from a single value to a BiomassPoolType so each type can be sepcified
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion96(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add RootShape to all simulations.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion97(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add RootShape to all simulations.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion98(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Convert stock animalparamset
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion99(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add InterpolationMethod to AirTemperature Function.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion100(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change SimpleGrazing.FractionDefoliatedNToSoil from a scalar to an array.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion101(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add canopy width Function.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion102(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename Models.Sensitivity.CroptimizR to Models.Optimisation.CroptimizR.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion103(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename TemperatureResponse to Response on Interpolate functions.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion104(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add expression function to replace direct call to structure in nodenumberphase
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion105(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add expression function to replace direct call to structure in nodenumberphase
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion106(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change Nutrient.FOMC and Nutrient.FOMN to Nutrient.FOM.C and Nutrient.FOM.N
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion107(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add expression function to replace direct call to structure in LeafAppearancePhase
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion108(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 108.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion109(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Create Models.Climate namespace.
            The following types will be moved into Models.Climate:
            - ControlledEnvironment
            - SlopeEffectsOnWeather
            - Weather
            - WeatherSampler
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion110(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add canopy width Function.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion111(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Modify manager scripts to use the new generic model locator API.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion112(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 112. Lots of breaking changes to class Plant.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion113(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 113. Rename SowPlant2Type to SowingParameters.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion114(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 114. Remove references to Plant.IsC4.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion115(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 115. Add mortality rate constant of 0 to any plants
            which do not already have a mortality rate.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
            <remarks>
            This is part of the change to make mortality rate non-optional.
            </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion116(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 115. Add PlantType to IPlants.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion117(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 115. Add PlantType to IPlants.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion118(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Renames Initial NO3N and NH4N to NO3 and NH4
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion119(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change report and manager scripts for soil variables that have been out of soil class. 
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion120(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove empty samples from soils.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion121(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Replace all instances of PhaseBasedSwitch with PhaseLookupValues.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion122(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Set maps' default zoom level to 360.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion123(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove all references to Arbitrator.WDemand, Arbitrator.WSupply, and Arbitrator.WAllocated.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion124(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename RadIntTot to RadiationIntercepted.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion125(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add a default value for Sobol's variable to aggregate.
            This was previously assumed to be Clock.Today.Year but
            has been extracted to a variable.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion900(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add progeny destination phase and mortality function.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion126(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Move physical properties off Weirdo class and use Physical class instead.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion127(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            </summary>
            <remarks>
            Previously, we used a custom markdown extension to implement support
            for markup superscript/subscripts, but given how slow this is, we've
            decided to just stick with the built-in extensions, so we need to
            change the syntax in all existing files.
            </remarks>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion128(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Upgrade to version 128. Add ResourceName property to Fertiliser models.
            </summary>
            <param name="root">The root json token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion129(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add canopy width Function.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion130(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add some extra constants to GenericOrgan to make 
            optional functions non-optional.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion131(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename DroughtInducedSenescence and Lag functions so they can be used for other stresses 
            optional functions non-optional.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion132(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Replace all XmlIgnore attributes with JsonIgnore attributes in manager scripts.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion133(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove the WaterAvailableMethod from PastureSpecies.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion134(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Set MicroClimate's reference height to 2 if it's 0.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion135(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename memos' MemoText property to Text. This is only relevant when
            importing files from old apsim (hopefully). It's really a cludge to
            work around a bug in the xml to json converter which I'm not brave
            enough to change.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion136(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Replace XmlIgnore attributes with JsonIgnore attributes in manager scripts.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion137(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename RootShapeCylindre to RootShapeCylinder.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion138(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove all parameters from sugarcane and change it to use the sugarcane resource.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion139(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add priority factor functions into each demand function 
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion140(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove all occurences of SoilNitrogenPlantAvailable NO3 and NH4 types.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion141(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Convert CompositeBiomass from a Propertys property to OrganNames.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion142(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change OilPalm.NUptake to OilPalm.NitrogenUptake
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion143(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Changes to facilitate the autodocs refactor:
            - Rename Models.Axis to APSIM.Shared.Graphing.Axis.
            - Copy the value of all folders' IncludeInDocumentation property
              into their new ShowInDocs property.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion144(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Change the namespace of the Coordinate type.
            Change the namespace of the DirectedGraph type.
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion145(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add in a Forages model at the simulation level if Stock or SimpleGrazing 
            are in the simulation.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">Path to the .apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion146(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Fix API calls to summary.WriteX, and pass in an appropriate message type.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion147(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Rename report function log to log10.
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion148(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove all graphs which are children of XYPairs. An older version
            contained a bug which inserted duplicate graphs here. (Duplicate
            models will now cause a file to fail to run.)
            </summary>
            <param name="root">Root node.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion889(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Update the SoilNitrogen component to be a Nutrient
            </summary>
            <param name="root"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion890(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Refactor LifeCycle model
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.UpgradeToVersion999(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Changes initial Root Wt to an array.
            </summary>
            <param name="root">The root JSON token.</param>
            <param name="fileName">The name of the apsimx file.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.ConverterReturnType">
            <summary>A class for holding return values from Converter.DoConvert method.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ConverterReturnType.Root">
            <summary>The JSON root node ready to be deserialised.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ConverterReturnType.RootXml">
            <summary>The XML root node ready to be deserialised.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ConverterReturnType.DidConvert">
            <summary>Set to true the converter did something.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.ConverterUtilities">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceManagerCodeUsingRegEx(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Perform a search and replace in manager script. Also optionally insert a using statement.
            </summary>
            <param name="manager">The manager model.</param>
            <param name="searchPattern">The pattern to search for</param>
            <param name="replacePattern">The string to replace</param>
            <param name="usingStatement">An optional using statement to insert at top of the script.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceReportCodeUsingRegEx(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in report variables.
            </summary>
            <param name="report">The reportr model.</param>
            <param name="searchPattern">The pattern to search for</param>
            <param name="replacePattern">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceReportCode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in report variables.
            </summary>
            <param name="report">The reportr model.</param>
            <param name="searchPattern">The pattern to search for</param>
            <param name="replacePattern">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.InsertUsingStatementInManagerCode(System.String,System.String)">
            <summary>
            Add the specified 'using' statement to the specified code.
            </summary>
            <param name="code">The code to modifiy</param>
            <param name="usingStatement">The using statement to insert at the correct location</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.InsertLink(System.Xml.XmlNode,System.String)">
            <summary>
            Add the specified 'using' statement to the specified code.
            </summary>
            <param name="manager">The manager to modifiy</param>
            <param name="linkStatement">The link statement to insert at the correct location</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.FindModelNode(System.Xml.XmlNode,System.String)">
            <summary>
            Find a PMF node, as a direct child under the specified node, that has the specified name element.
            </summary>
            <param name="node">The XML Nnde to search</param>
            <param name="name">The name of the element to search for</param>
            <returns>The node or null if not found</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.FindModelNodes(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Find model nodes of the specified type and name
            </summary>
            <param name="node">The node to search under</param>
            <param name="modelType">The type name of the model to look for</param>
            <param name="modelName">The name of the model to look for</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.RenameVariable(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Rename a variable or fragment.
            </summary>
            <param name="node">The node to modifiy</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceCultivarOverrides(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in cultivar commands
            </summary>
            <param name="cultivar">Cultivar node</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceManagerCode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in manager script. 
            </summary>
            <param name="manager">The manager model.</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceGraphCode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in graph x/y variables.
            </summary>
            <param name="graph">The graph model.</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.AddConstantFuntionIfNotExists(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Add a constant function to the specified xml node.
            </summary>
            <param name="node">The xml node to add constant to</param>
            <param name="name">The name of the constant function</param>
            <param name="fixedValue">The fixed value of the constant function</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.AddVariableReferenceFuntionIfNotExists(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Add a variable reference function to the specified xml node.
            </summary>
            <param name="node">The xml node to add constant to</param>
            <param name="name">The name of the constant function</param>
            <param name="reference">The reference to put into the function</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.RenameNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Rename a XML node.
            </summary>
            <param name="node">The xml node to add constant to</param>
            <param name="oldName">The name to look for</param>
            <param name="newName">The new name</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.RenamePMFFunction(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Rename a PMF function
            </summary>
            <param name="node">The node to search under</param>
            <param name="parentName">The name of the parent node to look for</param>
            <param name="oldName">The old name of the function to replace</param>
            <param name="newName">The new replacement name</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.GetAllModelNames(System.Xml.XmlNode)">
            <summary>Get a list of model names under the specified node</summary>
            <param name="node">Root node</param>
        </member>
        <member name="T:Models.Core.ApsimFile.EditFile">
            <summary>
            Encapsulates the /Edit command-line switch which allows users
            to make batch edits of .apsimx files from the command line.
            
            Usage:
            
            Models.exe /path/to/file.apsimx /Edit /path/to/config/file.txt
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.EditFile.Do(System.String,System.String)">
            <summary>
            Edit the given .apsimx file by applying changes
            specified in the given config file.
            </summary>
            <param name="apsimxFilePath">Absolute path to the .apsimx file.</param>
            <param name="configFilePath">Absolute path to the config file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.EditFile.GetFactors(System.String)">
            <summary>
            Gets a list of factors from a config file.
            </summary>
            <remarks>
            Each line in the file must be of the form:
            
            path = value
            
            e.g.
            
            [Clock].StartDate = 1/1/2019
            .Simulations.Simulation.Weather.FileName = asdf.met
            </remarks>
            <param name="configFileName">Path to the config file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.EditFile.ApplyChanges(Models.Core.Simulations,System.Collections.Generic.IEnumerable{Models.Factorial.CompositeFactor})">
            <summary>
            Edits a single apsimx file according to the changes specified in the config file.
            </summary>
            <param name="file">An .apsimx file.</param>
            <param name="factors">Factors to apply to the file.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.EditFile.ReplaceModelFromFile(Models.Core.Simulations,System.String,System.String,System.String)">
            <summary>
            Replace a model with a model from another file.
            </summary>
            <param name="topLevel">The top-level model of the file being modified.</param>
            <param name="modelToReplace">Path to the model which is to be replaced.</param>
            <param name="replacementFile">Path of the .apsimx file containing the model which will be inserted.</param>
            <param name="replacementPath">Path to the model in replacementFile which will be used to replace a model in topLevel.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.FileFormat">
            <summary>
            A class for reading and writing the .apsimx file format.
            </summary>
            <remarks>
            Features:
            * Can WRITE a model in memory to an APSIM Next Generation .json string.
                - Only writes public, settable, properties of a model.
                - If a model implements IDontSerialiseChildren then no child models will be serialised.
                - Won't serialise any property with LinkAttribute.
            * Can READ an APSIM Next Generation JSON or XML string to models in memory.
                - Calls converter on the string before deserialisation.
                - Sets fileName property in all simulation models read in.
                - Correctly parents all models.
                - Calls IModel.OnCreated() for all newly created models. If models throw in the
                  OnCreated() method, exceptions will be captured and returned to caller along
                  with the model tree.
            </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.FileFormat.WriteToString(Models.Core.IModel)">
            <summary>Convert a model to a string (json).</summary>
            <param name="model">The model to serialise.</param>
            <returns>The json string.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.FileFormat.ReadFromFile``1(System.String,System.Action{System.Exception},System.Boolean)">
            <summary>Create a simulations object by reading the specified filename</summary>
            <param name="fileName">Name of the file.</param>
            <param name="errorHandler">Action to be taken when an error occurs.</param>
            <param name="initInBackground">Iff set to true, the models' OnCreated() method calls will occur in a background thread.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.FileFormat.ReadFromString``1(System.String,System.Action{System.Exception},System.Boolean,System.String)">
            <summary>Convert a string (json or xml) to a model.</summary>
            <param name="st">The string to convert.</param>
            <param name="errorHandler">Action to be taken when an error occurs.</param>
            <param name="initInBackground">Iff set to true, the models' OnCreated() method calls will occur in a background thread.</param>
            <param name="fileName">The optional filename where the string came from. This is required by the converter, when it needs to modify the .db file.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.FileFormat.WritablePropertiesOnlyResolver">
            <summary>A contract resolver class to only write settable properties.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.JsonUtilities">
            <summary>
            A collection of json utilities.
            </summary>
            <remarks>
            If you write a new utility for this class, please write a unit test
            for it. See JsonUtilitiesTests.cs in the UnitTests project.
            </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Name(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns the name of a node.
            </summary>
            <param name="node">The node.</param>
            <remarks>
            This actually fetches the 'Apsim' name of the node.
            e.g. For a Report called HarvestReport this will return 
            HarvestReport.
            </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Type(Newtonsoft.Json.Linq.JToken,System.Boolean)">
            <summary>
            Returns the type of an apsim model node.
            </summary>
            <param name="node">The node.</param>
            <param name="withNamespace">
            If true, the namespace will be included in the returned type name.
            e.g. Models.Core.Simulations
            </param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.NameSpace(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns the name space of an apsim model node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Children(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns the child models of a given node.
            Will never return null.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ChildrenOfType(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns the child models of a given node that have the specified type.
            Will never return null.
            </summary>
            <param name="node">The node.</param>
            <param name="typeName">The type of children to return.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ChildrenInNameSpace(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns the child models in a given name space .
            Will never return null.
            </summary>
            <param name="node">The node.</param>
            <param name="nameSpaceName">The name space containing of children to return.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.DescendantOfType(Newtonsoft.Json.Linq.JObject,System.Type)">
            <summary>
            Returns the descendant of a given node of the specified type.
            </summary>
            <param name="node">The node.</param>
            <param name="type">The type of model to search for.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ChildWithName(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Returns the first child model of a given node that has the specified name.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The type of children to return.</param>
            <param name="ignoreCase">Perform a case-insensitive search?</param>
            <returns>The found child or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.DescendantWithName(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Returns the first descendant model of a given node that has the specified name.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The type of children to return.</param>
            <param name="ignoreCase">Perform a case-insensitive search?</param>
            <returns>The found child or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ChildrenRecursively(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns all descendants of a given node.
            Will never return null.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ChildrenRecursively(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns a all descendants of a node, which are of a given type.
            Will never return null;
            </summary>
            <param name="node">The node.</param>
            <param name="typeFilter">Type type name, with or without the namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ReplaceManagerCode(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Perform a search and replace in manager script.
            </summary>
            <param name="manager">The manager model.</param>
            <param name="searchPattern">The string to search for.</param>
            <param name="replacePattern">The string to replace.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ReplaceManagerCodeUsingRegex(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Perform a search and replace in manager script.
            </summary>
            <param name="manager">The manager model.</param>
            <param name="searchPattern">The pattern to search for.</param>
            <param name="replacePattern">The string to replace.</param>
            <param name="options">Regular expression options to use. Default value is none.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.ChildManagers(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns a list of child managers recursively.
            </summary>
            <param name="node">The root node.</param>
            <returns>Returns a list of manager models.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.FindFromPath(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns a node of a given path. The path should be period-delimited
            names of subsequent child models. The first name in the path should be
            the name of a child model of `node`.
            model of `node`.
            </summary>
            <param name="node">The node to start searching from.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Parent(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Return the parent APSIM model token for the specified model token.
            </summary>
            <param name="modelToken">The model token to find the parent for.</param>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Siblings(Newtonsoft.Json.Linq.JObject)">
            <summary>Return all sibling models.</summary>
            <param name="model">The model whose siblings will be returned.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Sibling(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>Find a sibling with the specified name.</summary>
            <param name="model"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.RenameProperty(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>Rename a child property if it exists.</summary>
            <param name="modelToken">The APSIM model token.</param>
            <param name="propertyName">The name of the property to rename.</param>
            <param name="newPropertyName">The new name of the property.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.RenameModel(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Renames a model. If a sibling model already exists with the same name,
            will try appending numbers to the name.
            </summary>
            <param name="model">The model to be renamed.</param>
            <param name="name">The new name for the model.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.RenameChildModel(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Renames a child node if it exists.
            </summary>
            <param name="node">Parent node.</param>
            <param name="childName">Name of the child to be renamed.</param>
            <param name="newName">New name of the child.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Values(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets a list of property values.
            </summary>
            <param name="node">The model node to look under.</param>
            <param name="propertyName">The property name to return.</param>
            <returns>The values or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.SetValues``1(Newtonsoft.Json.Linq.JObject,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets a list of property values.
            </summary>
            <param name="node">The model node to look under.</param>
            <param name="propertyName">The property name to return.</param>
            <param name="values">New values</param>
            <returns>The values or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.SearchReplaceReportVariableNames(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Perform a search and replace in report variables.
            </summary>
            <param name="report">The report model.</param>
            <param name="searchPattern">The pattern to search for.</param>
            <param name="replacePattern">The string to replace.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.AddConstantFunctionIfNotExists(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Add a constant function to the specified JSON model token.
            </summary>
            <param name="modelToken">The APSIM model token.</param>
            <param name="name">The name of the constant function</param>
            <param name="fixedValue">The fixed value of the constant function</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.AddVariableReferenceIfNotExists(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Add a variable reference function to the specified JSON model token,
            if a variable referenec with the given name doesn't already exist.
            </summary>
            <param name="modelToken">The JSON node to which the variable reference will be added.</param>
            <param name="name">Name of the variabel reference to add.</param>
            <param name="variable">The variable to be referenced by the variable reference function.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.AddModel(Newtonsoft.Json.Linq.JObject,Models.Core.IModel)">
            <summary>
            Adds the given model as a child of node.
            </summary>
            <param name="node">Node to which the model will be added.</param>
            <param name="model">Child model to be added to node.</param>
            <remarks>
            If we ever rename the Children property of IModel, this (along with
            many other things) will break horribly.
            </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.AddModel(Newtonsoft.Json.Linq.JObject,System.Type)">
            <summary>
            Adds a model of a given type as a child of node.
            </summary>
            <param name="node">Node to which the model will be added.</param>
            <param name="t">Type of the child model to be added to node.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.AddModel(Newtonsoft.Json.Linq.JObject,System.Type,System.String)">
            <summary>
            Adds a model of a given type as a child of node.
            </summary>
            <param name="node">Node to which the model will be added.</param>
            <param name="t">Type of the child model to be added to node.</param>
            <param name="name">Name of the model to be added.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.CreateNewChildModel(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            Create and add a new child model node.
            </summary>
            <param name="parent">The parent model node.</param>
            <param name="name">The model name.</param>
            <param name="fullTypeName">The typespace name + model class name eg. Models.Clock</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.RemoveChild(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Renames a child node if it exists.
            </summary>
            <param name="node">Parent node.</param>
            <param name="childName">Name of the child to be removed.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.RemoveChildren(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Renames a child node if it exists.
            </summary>
            <param name="node">Parent node.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Descendants(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List{Newtonsoft.Json.Linq.JObject}@,System.String)">
            <summary>
            Helper method for <see cref="M:Models.Core.ApsimFile.JsonUtilities.ChildrenRecursively(Newtonsoft.Json.Linq.JObject)"/>.
            Will never return null.
            </summary>
            <param name="node">The node.</param>
            <param name="descendants">List of descendants.</param>
            <param name="typeFilter">Type name by which to filter.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.RenameVariables(Newtonsoft.Json.Linq.JObject,System.Tuple{System.String,System.String}[])">
            <summary>
            Helper method for renaming variables in report and manager.
            </summary>
            <param name="node">The JSON root node.</param>
            <param name="changes">List of old and new name tuples.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.JsonUtilities.Ancestor(Newtonsoft.Json.Linq.JObject,System.Type)">
            <summary>
            Find an ancestor model of the given type.
            </summary>
            <param name="token">Model whose ancestor we want to find.</param>
            <param name="type">Type of ancestor to search for.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.ManagerConverter">
            <summary>
            Provides helper methods to read and manipulate manager scripts.
            </summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ManagerConverter.Token">
            <summary>
            The Json token.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ManagerConverter.Parameters">
            <summary>
            Parameters (public properties with a display attribute) of the manager script.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Constructor.
            </summary>
            <param name="manager">The JSON manager object.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Read(System.String)">
            <summary>Load script</summary>
            <param name="script">The manager script to work on</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Read(System.Xml.XmlNode)">
            <summary>Load script</summary>
            <param name="node">The manager node to read from</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Write(System.Xml.XmlNode)">
            <summary>Write script</summary>
            <param name="node">The manager node to write to</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Save">
            <summary>
            Save the manager object code back to the manager JSON object.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.ToString">
            <summary>Write script</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.GetUsingStatements">
            <summary>Get all using statements.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.SetUsingStatements(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Set using statements.</summary>
            <param name="usings">Using statements to write</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.AddUsingStatement(System.String)">
            <summary>
            Add a using statement if it doesn't already exist.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.GetDeclarations">
            <summary>Gets a collection of declarations.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.SetDeclarations(System.Collections.Generic.List{Models.Core.ApsimFile.Declaration})">
            <summary>
            Set the complete list of declarations.
            </summary>
            <param name="newDeclarations">A list of declarations for the manager model.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindMethodCalls(System.String,System.String)">
            <summary>
            Find 0 or more method calls that match the instanceType/methodName
            </summary>
            <param name="instanceType">The instance type (from manager field declaration)</param>
            <returns></returns>
            <param name="methodName">The name of the method</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.SetMethodCall(Models.Core.ApsimFile.MethodCall)">
            <summary>
            Store the the specified method call, replacing the line. 
            </summary>
            <param name="method">Details of the method call</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Search for the old string and replace with the new string.
            </summary>
            <param name="searchPattern">The pattern to search for.</param>
            <param name="replacePattern">The string to replace.</param>
            <param name="caseSensitive">Case sensitive?</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.LineIndexOf(System.String,System.Boolean)">
            <summary>
            Search for a string and return the line index it is on or -1 if not found.
            </summary>
            <param name="searchPattern">The pattern to search for.</param>
            <param name="caseSensitive">Case sensitive?</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.ReplaceRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Perform a search and replace in manager script.
            </summary>
            <param name="searchPattern">The pattern to search for.</param>
            <param name="replacePattern">The string to replace.</param>
            <param name="options">Regular expression options to use. Default value is none.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.ReplaceRegex(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Perform a search and replace in manager script.
            </summary>
            <param name="searchPattern">The pattern to search for.</param>
            <param name="replacer">Delegate that returns a custom replacment string depending on the match..</param>
            <param name="options">Regular expression options to use. Default value is none.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.AddDeclaration(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a declaration if it doesn't exist.
            </summary>
            <param name="typeName">The type name of the declaration.</param>
            <param name="instanceName">The instance name of the declaration.</param>
            <param name="attributes">The attributes of the declaration e.g. [Link].</param>
            <returns>true if link was inserted.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.RemoveDeclaration(System.String)">
            <summary>
            Remove a declaration.
            </summary>
            <param name="instanceName">The instance name of the declaration.</param>
            <returns>true if link was inserted.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindString(System.String,System.Int32)">
            <summary>
            Find a line with the matching string
            </summary>
            <param name="stringToFind">String to find.</param>
            <param name="startIndex">LineNumber to start search from</param>
            <returns>The index of the line of the match or -1 if not found</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindUsingBlock(System.Int32@,System.Int32@)">
            <summary>
            Find the Using block of statements.
            </summary>
            <param name="startIndex">The starting index of using block. -1 if not found</param>
            <param name="endIndex">The ending index of using block. -1 if not found</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindStartOfClass">
            <summary>
            Find the start of the manager class
            </summary>
            <returns>The line after the classes curly bracket.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Clean(System.String)">
            <summary>Trim the line of spaces and remove comments.</summary>
            <param name="line">Line to clean</param>
            <returns>A new string without leading / trailing spaces and comments</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.UpdateParameter(System.String,System.String)">
            <summary>
            Changes the value of a parameter with a given key.
            </summary>
            <param name="key">Key of the paramter.</param>
            <param name="newParam">New value of the parameter.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.MoveVariables(Models.Core.ApsimFile.ManagerReplacement[])">
            <summary>
            Change manager to reflect moving of variables from one object to another e.g. from Soil to IPhysical.
            </summary>
            <param name="variablesToMove">The names of variables to move.</param>
            <returns>True if changes were made.</returns>
        </member>
        <member name="T:Models.Core.ApsimFile.Declaration">
            <summary>A manager declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.LineIndex">
            <summary>The index of the line starting the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.AttributesOnPreviousLines">
            <summary>Was the declaration all on one line?</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.Attributes">
            <summary>The attributes of the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.TypeName">
            <summary>The type name of the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.InstanceName">
            <summary>The instance name of the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.IsPrivate">
            <summary>Is declaration private?</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.IsEvent">
            <summary>Is declaration an event?</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.MethodCall">
            <summary>Encapsulates a manager method call</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.LineIndex">
            <summary>The index of the line with the method</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.InstanceName">
            <summary>The instance name that the method is being called on</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.MethodName">
            <summary>The name of the method</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.Arguments">
            <summary>The method arguments</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.ManagerReplacement">
            <summary>
            Encapsulates a management replacement.
            </summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ManagerReplacement.OldName">
            <summary>The old variable name.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ManagerReplacement.NewName">
            <summary>The new variable name.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ManagerReplacement.NewInstanceTypeName">
            <summary>The type of the new instance variable..</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerReplacement.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="searchFor"></param>
            <param name="replaceWith"></param>
            <param name="typeName"></param>
        </member>
        <member name="T:Models.Core.ApsimFile.Reader">
            <summary>
            This class is a reader for a .apsimx file format into something that the XmlSerializer can read.
            It uses a state machine to parse the XML on the reader passed into the constructor and presents
            XML elements to whatever consumes an instance of this class. In essence it translates the XML
            into something that the .NET serialisation engine can work with.
            </summary>
            <remarks>
            Converts:
               
               <Simulations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                 <ExplorerWidth>10</ExplorerWidth>
                 <Simulation>
                   <Clock>
                     <StartDate>0001-01-01T00:00:00</StartDate>
                     <EndDate>0001-01-01T00:00:00</EndDate>
                   </Clock>
                 </Simulation>
               </Simulations>
            to this:
               <ModelWrapper xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <Model xsi:type="Simulations">
                      <ExplorerWidth>10</ExplorerWidth>
                  </Model>
                  <Child xsi:type="ModelWrapper">
                      <Model xsi:type="Simulation">
                      </Model>
                      <Child xsi:type="ModelWrapper">
                          <Model xsi:type="Clock">
                              <StartDate>0001-01-01T00:00:00</StartDate>
                              <EndDate>0001-01-01T00:00:00</EndDate>
                          </Model>
                      </Child>
                  </Child>
               </ModelWrapper>
            </remarks>
        </member>
        <member name="T:Models.Core.ApsimFile.Reader.States">
            <summary>The possible parsing states</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.currentState">
            <summary>The current state.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.validModelTypes">
            <summary>An list of valid model types.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.openElements">
            <summary>A stack of open xml elements.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.modelTypesFound">
            <summary>A stack of model types that we have encourntered so far.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.reader">
            <summary>The reader we're to read from.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.structureCounter">
            <summary>A counter of the number of open structures.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.#ctor(System.Xml.XmlNode)">
            <summary>Constructor.</summary>
            <param name="node">Node to parse</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.#ctor(System.IO.Stream)">
            <summary>Constructor.</summary>
            <param name="s">Stream to parse</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.AddElements(System.Collections.Generic.List{APSIM.Shared.Utilities.XmlReaderCustom.CustomElement})">
            <summary>
            Add elements to the specified list. If no elements are added, it is assumed that
            there are no more elements left and parsing is finished.
            </summary>
            <param name="elements">A list of elements to add to.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ElementIsModel(APSIM.Shared.Utilities.XmlReaderCustom.CustomElement)">
            <summary>Is the specified element a known model?</summary>
            <param name="element">The element to inspect.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadInName(System.Collections.Generic.List{APSIM.Shared.Utilities.XmlReaderCustom.CustomElement})">
            <summary>Read in a name parameter e.g. <Name>xxx</Name></summary>
            <param name="elements"></param>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.Prefix">
            <summary>Gets the prefix of the current element.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.LookupNamespace(System.String)">
            <summary>Resolves a namespace prefix in the current element's scope.</summary>
            <param name="prefix">The Prefix</param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.NamespaceURI">
            <summary>Gets the namespace URI</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.NameTable">
            <summary>Returns the name table.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.Reader.ReadWithLookAhead">
            <summary>
            Encapsulates a XmlReader that has the ability to look ahead one or more reads.
            </summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.lookAheadReads">
            <summary>A list of elements that have already been read (looked ahead).</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.reader">
            <summary>The reader being encapsulated.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.currentLookAheadIndex">
            <summary>The next index into lookAheadReads to return.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.lastRead">
            <summary>The last element read.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.#ctor(System.Xml.XmlReader)">
            <summary>Constructor</summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.Read">
            <summary>Read the next element.</summary>
            <returns>A CustomElement or null if nothing left to read.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.UndoRead">
            <summary>Undo the last read.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.LookAhead">
            <summary>
            Look ahead the next element.
            </summary>
            <returns>A CustomElement or null if nothing left to read.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.ReadFromReader">
            <summary>
            Read from the XmlReader instance.
            </summary>
            <returns>A CustomElement or null if nothing left to read.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.LookupNamespace(System.String)">
            <summary>Resolves a namespace prefix in the current element's scope.</summary>
            <param name="prefix">The Prefix</param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.ReadWithLookAhead.NameTable">
            <summary>Returns the name table.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.Structure">
            <summary>
            A collection of methods for manipulating the structure of an .apsimx file.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Add(Models.Core.IModel,Models.Core.IModel)">
            <summary>
            Adds a model as a child to a parent model. Will throw if not allowed.
            </summary>
            <param name="modelToAdd">The model to add.</param>
            <param name="parent">The parent model to add it to.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Add(System.String,Models.Core.IModel)">
            <summary>Adds a new model (as specified by the string argument) to the specified parent.</summary>
            <param name="parent">The parent to add the model to</param>
            <param name="st">The string representing the new model</param>
            <returns>The newly created model.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Rename(Models.Core.IModel,System.String)">
            <summary>Renames a new model.</summary>
            <param name="model">The model to rename.</param>
            <param name="newName">The new name for the model.</param>
            <returns>The newly created model.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Move(Models.Core.IModel,Models.Core.IModel)">
            <summary>Move a model from one parent to another.</summary>
            <param name="model">The model to move.</param>
            <param name="newParent">The new parente for the model.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.EnsureNameIsUnique(Models.Core.IModel)">
            <summary>
            Give the specified model a unique name
            </summary>
            <param name="modelToCheck">The model to check the name of</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Delete(Models.Core.IModel)">
            <summary>Deletes the specified model.</summary>
            <param name="model">The model.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.XmlConverters">
            <summary>
            Contains all converters that convert from one XML version to another.
            </summary>
        </member>
        <member name="F:Models.Core.ApsimFile.XmlConverters.LastVersion">
            <summary>
            The last XML file version.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.DoConvert(System.String@,System.Int32,System.String)">
            <summary>Converts a .apsimx string to the latest version.</summary>
            <param name="st">XML or JSON string to convert.</param>
            <param name="toVersion">The optional version to convert to.</param>
            <param name="fileName">The optional filename where the string came from.</param>
            <returns>Returns true if something was changed.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion1(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 1. Change xml structure of graph series</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion2(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 2. Change xml structure for cultivar aliases</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion3(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 3. Make sure all area elements are greater than zero.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion4(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 4. Make sure all zones have a SoluteManager model.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion5(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 5. Make sure all zones have a CERESSoilTemperature model.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion6(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 6. Make sure all KLModifier, KNO3, KNH4 nodes have value XProperty values. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion7(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 7. Find all occurrences of ESW XProperty values. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion8(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 8. Create ApexStandard node. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion9(System.Xml.XmlNode,System.String)">
            <summary> Add a DMDemandFunction constant function to all Root nodes that don't have one</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion10(System.Xml.XmlNode,System.String)">
            <summary>Add default values for generic organ parameters that were previously optional</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion11(System.Xml.XmlNode,System.String)">
            <summary> Rename NonStructural to Storage in Biomass organs</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion12(System.Xml.XmlNode,System.String)">
            <summary> Rename MainStemNodeAppearanceRate to Phyllochron AND 
                   MainStemFinalNodeNumber to FinalLeafNumber in Structure </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion13(System.Xml.XmlNode,System.String)">
            <summary> Rename Plant15 to Plant.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion14(System.Xml.XmlNode,System.String)">
            <summary> Rename the "Simulations", "Messages", "InitialConditions" .db tables to be prefixed with an underscore. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion15(System.Xml.XmlNode,System.String)">
            <summary> Ensure report variables have a square bracket around the first word.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion16(System.Xml.XmlNode,System.String)">
            <summary>Add nodes for new leaf tiller model </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion17(System.Xml.XmlNode,System.String)">
            <summary>Rename CohortLive. to Live.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion18(System.Xml.XmlNode,System.String)">
            <summary> Rename CohortLive. to Live.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion19(System.Xml.XmlNode,System.String)">
            <summary> Add DMConversionEfficiency node</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion21(System.Xml.XmlNode,System.String)">
            <summary>Add RemobilisationCost to all organs </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion22(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 22. Alter MovingAverage Function XProperty values.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion23(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 23. Add CarbonConcentration property to all organs. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion24(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 24. Add second argument to SoluteManager.Add method</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion25(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 25. Add checkpoint fields and table to .db</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion26(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 26. Add leaf development rate constant to perrenial leaf </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion27(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 27. Some variables in Leaf became ints rather than doubles. Need to add convert.ToDouble(); </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion28(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 28. Change ICrop to IPlant</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion29(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 29. Change AgPasture to have leaves, stems, stolons included as child model nodes </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion30(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 30. Change DisplayAttribute </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion31(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 31. Change DisplayAttribute </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion32(System.Xml.XmlNode,System.String)">
            <summary> Change the VaryByIndex in series from an integer index to a name of a factor.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.GetFactorNames(System.Xml.XmlNode)">
            <summary> Create graph definitions for the specified model</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.BuildListFromExperiment(System.Xml.XmlNode)">
            <summary>Build a list of simulation / zone pairs from the specified experiment</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.BuildListFromSimulation(System.Xml.XmlNode)">
            <summary>Build a list of simulation / zone pairs from the specified simulation</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.CalculateDistinctFactorNames(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary> Go through all factors and determine which are distict.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion33(System.Xml.XmlNode,System.String)">
            <summary>Change the stores object array in Supplement components to Stores</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion34(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 34. Change DisplayAttribute</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion35(System.Xml.XmlNode,System.String)">
            <summary> Change the stores object array in Supplement components to Stores</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion36(System.Xml.XmlNode,System.String)">
            <summary> Change the stores object array in Supplement components to Stores</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion37(System.Xml.XmlNode,System.String)">
            <summary> Remove apex nodes from leaf objects </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion38(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 38. Change SurfaceOrganicMatter.AddFaecesType to AddFaecesType.
            </summary>
            <param name="node">The node to upgrade.</param>
            <param name="fileName">The name of the .apsimx file</param>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion39(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 39. Replaces TreeProxy.dates and TreeProxy.heights
            with TreeProxy.Dates and TreeProxy.Heights.
            </summary>
            <param name="node">The node to upgrade.</param>
            <param name="fileName">The name of the .apsimx file</param>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion40(System.Xml.XmlNode,System.String)">
            <summary> Rename ThermalTime functions on phases to Progression </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion41(System.Xml.XmlNode,System.String)">
            <summary>Rename CohortArrayLive functions which dont do anything and cause problems for checkpointing</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion42(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 41. Upgrades parameterisation of DM demands.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion43(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 43. Upgrades SimpleLeaf to allow SLN calculations for N Demands.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion44(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 44, renaming StorageDemandFunction to StorageDMDemandFunction
             </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion45(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 41. Upgrades parameterisation of DM demands.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion46(System.Xml.XmlNode,System.String)">
            <summary>Remove slnDemandFunction in SimpleLeaf as it has been made redundant</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.XmlToJson">
            <summary>
            XML to JSON converter
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.Convert(System.String)">
            <summary>
            Convert APSIM Next Generation xml to json.
            </summary>
            <param name="xml">XML string to convert.</param>
            <returns>The equivalent JSON.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.CreateObject(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create an object (or an array)
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.ReorderChildren(Newtonsoft.Json.Linq.JToken,System.Xml.XmlNode)">
            <summary>
            Make sure the child nodes of JToken are the same as for the original XML document.
            Do this recursively.
            </summary>
            <param name="jsonNode">The JSON node.</param>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.GetSoilCropName(System.String)">
            <summary>
            Gets the name of a SoilCrop. This should start with an upper case
            letter and end with "Soil". e.g. WheatSoil.
            </summary>
            <param name="name">Name of the crop.</param>
            <returns></returns>
            <remarks>
            todo: rework the SoilCrop class so that this isn't necessary?
            </remarks>
        </member>
        <member name="T:Models.Core.ApsimXException">
            <summary>
            Apsim's exception object
            </summary>
        </member>
        <member name="P:Models.Core.ApsimXException.model">
            <summary>Gets or sets the model.</summary>
            <value>The model.</value>
        </member>
        <member name="M:Models.Core.ApsimXException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Core.ApsimXException"/> class.</summary>
        </member>
        <member name="M:Models.Core.ApsimXException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Models.Core.ApsimXException"/> class.</summary>
        </member>
        <member name="M:Models.Core.ApsimXException.#ctor(Models.Core.IModel,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Models.Core.ApsimXException"/> class.</summary>
            <param name="model">The model.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Models.Core.ApsimXException.#ctor(Models.Core.IModel,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Models.Core.ApsimXException"/> class.</summary>
            <param name="model">The model.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Models.Core.BoundsAttribute">
            <summary>
            Specifies the lower and upper bounds for the related field or property.
            </summary>
        </member>
        <member name="P:Models.Core.BoundsAttribute.Lower">
            <summary>
            Gets or sets the lower bound
            </summary>
        </member>
        <member name="P:Models.Core.BoundsAttribute.Upper">
            <summary>
            Gets or sets the upper bound
            </summary>
        </member>
        <member name="T:Models.Core.CaptionAttribute">
            <summary>
            Attribute to hold a short description string for a property
            This is almost identical to the DescriptionAttribute, but is intended
            to allow for a "brief" as well as a "lengthy" description. 
            </summary>
        </member>
        <member name="F:Models.Core.CaptionAttribute.description">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.CaptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.CaptionAttribute" /> class.
            </summary>
            <param name="description">Description text</param>
        </member>
        <member name="M:Models.Core.CaptionAttribute.ToString">
            <summary>
            Gets the description
            </summary>
            <returns>The description</returns>
        </member>
        <member name="T:Models.Core.CategoryAttribute">
            <summary>
            Specifies the category and subcategory that the related property belongs to,
            so that you can group properties by category and subcategory.
            Grouping is useful when a model has large numbers of properties that need to be parameterised by the user. 
            The PropertyExplorerPresenter can be used to display the properties in a ExplorerReadOnlyView. 
            
            </summary>
        </member>
        <member name="M:Models.Core.CategoryAttribute.#ctor(System.String)">
            <summary>
            Constructor with only Category specified
            </summary>
            <param name="Category"></param>
        </member>
        <member name="M:Models.Core.CategoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor with but Category and Subcategory specified
            </summary>
            <param name="Category"></param>
            <param name="Subcategory"></param>
        </member>
        <member name="P:Models.Core.CategoryAttribute.Category">
            <summary>
            Gets or sets the Category
            </summary>
        </member>
        <member name="P:Models.Core.CategoryAttribute.Subcategory">
            <summary>
            Gets or sets the Subcategory
            </summary>
        </member>
        <member name="T:Models.Core.DescriptionAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.DescriptionAttribute.description">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.DescriptionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.DescriptionAttribute" /> class.
            </summary>
            <param name="description">Description text</param>
            <param name="lineNum">Line number of declaration - inserted by compiler magically. Useful for sorting</param>
        </member>
        <member name="M:Models.Core.DescriptionAttribute.ToString">
            <summary>
            Gets the description
            </summary>
            <returns>The description</returns>
        </member>
        <member name="P:Models.Core.DescriptionAttribute.LineNumber">
            <summary>
            Line number of declaration
            </summary>
        </member>
        <member name="T:Models.Core.DisplayType">
            <summary>
            An enumeration for display types.
            Used by the Display Attribute.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.None">
            <summary>
            No specific display editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.DropDown">
            <summary>
            Allows the user to select from a preset list of values.
            If this is used, the Values property of DisplayAttribute
            must also be set.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.TableName">
            <summary>
            Use the table name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.CultivarName">
            <summary>
            A cultivar name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.LifeCycleName">
            <summary>
            A LifePhase name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.LifePhaseName">
            <summary>
            A LifePhase name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.FileName">
            <summary>
            A file name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.FileNames">
            <summary>
            Allows selection of more than one file name.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.DirectoryName">
            <summary>
            Allows selection of a directory via a file chooser widget.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.FieldName">
            <summary>
            A field name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.ResidueName">
            <summary>
            Use a list of known residue types
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.Model">
            <summary>
            A model drop down.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.SubModel">
            <summary>
            This property is an object whose properties
            should also be displayed/editable in the GUI.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.MultiLineText">
            <summary>
            Only valid on an array property. Uses an multi-line
            text editor. Each line of input is treated as an
            element in the array.
            </summary>
        </member>
        <member name="T:Models.Core.DisplayAttribute">
            <summary>
            Specifies various user interface display properties.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.Format">
            <summary>
            Gets or sets the display format (e.g. 'N3') that the user interface should
            use when showing values in the related property.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.ShowTotal">
            <summary>
            Gets or sets a value indicating whether the user interface should display
            a total at the top of the column in a ProfileGrid.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.ModelType">
            <summary>
            Gets or sets a value denoting the type of model to show in the model drop down.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.CLEMResourceGroups">
            <summary>
            Gets or sets the types for the ResourceGroups whose Resource items are valid choices in the Resource name editor.
            eg. [Display(CLEMResourceGroups = new Type[] {typeof(AnimalFoodStore), typeof(HumanFoodStore), typeof(ProductStore) } )]"
            Will create a dropdown list with all the Resource items from only the AnimalFoodStore, HumanFoodStore and ProductStore.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.Type">
            <summary>
            Gets or sets the display type. 
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.Values">
            <summary>
            Gets or sets the name of a method which returns a list of valid values for this property.
            Methods pointed to by this property can return any generic IEnumerable and must accept no arguments.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.ValuesArgs">
            <summary>
            A list of objects to be passed to the values method allowing the user to further specify
            functioanlity from the display attributes
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.EnabledCallback">
            <summary>
            Specifies a callback method that will be called by GUI to determine if this property is enabled.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.PlantName">
            <summary>
            Used in conjuction with <see cref="F:Models.Core.DisplayType.CultivarName"/>.
            Specifies the name of a plant whose cultivars should be displayed.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.LifeCycleName">
            <summary>
            Used in conjuction with <see cref="F:Models.Core.DisplayType.LifePhaseName"/>.
            Specifies the name of a LifeCycle whose phases should be displayed.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.Order">
            <summary>
            Set the primary order of properties for display
            Otherwise the line number of Description attribute is used for ordering
            </summary>
        </member>
        <member name="T:Models.Core.DoNotDocumentAttribute">
            <summary>
            Specifies that the related field/property/link should not be documented.
            </summary>
        </member>
        <member name="T:Models.Core.EventSubscribeAttribute">
            <summary>
            Specifies that the related method should be called whenever an event
            is invoked that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.EventSubscribeAttribute.name">
            <summary>
            The event name being subscribed to.
            </summary>
        </member>
        <member name="M:Models.Core.EventSubscribeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.EventSubscribeAttribute" /> class.
            </summary>
            <param name="name">Name of the event being subscribed to</param>
        </member>
        <member name="M:Models.Core.EventSubscribeAttribute.ToString">
            <summary>
            Gets the name of the event.
            </summary>
            <returns>The name of the event being subscribed to</returns>
        </member>
        <member name="T:Models.Core.HelpUriAttribute">
            <summary>
            Specifies a Uri for the help link in ModelDetailsWrapperView
            </summary>
        </member>
        <member name="F:Models.Core.HelpUriAttribute.helpUri">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.HelpUriAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.HelpUriAttribute" /> class.
            </summary>
            <param name="uri">Description text</param>
        </member>
        <member name="M:Models.Core.HelpUriAttribute.ToString">
            <summary>
            Gets the uri
            </summary>
            <returns>help link uri</returns>
        </member>
        <member name="T:Models.Core.LinkType">
            <summary>
            Enumeration of all possible types of links.
            </summary>
        </member>
        <member name="F:Models.Core.LinkType.Scoped">
            <summary>
            A link to the first matching model in scope.
            </summary>
        </member>
        <member name="F:Models.Core.LinkType.Path">
            <summary>
            A link to a model via an absolute path.
            </summary>
        </member>
        <member name="F:Models.Core.LinkType.Child">
            <summary>
            A link to a child model.
            </summary>
        </member>
        <member name="F:Models.Core.LinkType.Ancestor">
            <summary>
            A link to an ancestor model.
            </summary>
        </member>
        <member name="T:Models.Core.LinkAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object that matches the 
            related field and store a reference to it in the field (dependency injection). 
            If no matching model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="P:Models.Core.LinkAttribute.IsOptional">
            <summary>Iff true, an exception will not be thrown if an object cannot be found.</summary>
        </member>
        <member name="P:Models.Core.LinkAttribute.Path">
            <summary>Absolute path to the link target. Only used if Type is set to LinkType.Path.</summary>
        </member>
        <member name="P:Models.Core.LinkAttribute.Type">
            <summary>Controls how the link will be resolved. The values are mutually exclusive. Default value is <see cref="F:Models.Core.LinkType.Scoped"/>.</summary>
        </member>
        <member name="P:Models.Core.LinkAttribute.ByName">
            <summary>Iff true, target model must have the same name as the field/property to which this link is applied. Defaults to false.</summary>
        </member>
        <member name="T:Models.Core.PresenterNameAttribute">
            <summary>
            Specifies that the related class should use the user interface presenter
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.PresenterNameAttribute.name">
            <summary>
            The name of the presenter class
            </summary>
        </member>
        <member name="M:Models.Core.PresenterNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.PresenterNameAttribute" /> class.
            </summary>
            <param name="name">Name of the user interface presenter class to use</param>
        </member>
        <member name="M:Models.Core.PresenterNameAttribute.ToString">
            <summary>
            Gets the name of the presenter.
            </summary>
            <returns>The name of the presenter class</returns>
        </member>
        <member name="T:Models.Core.ScopedModelAttribute">
            <summary>
            When applied to a class, denotes an instance of the class and all
            child instances make up a scoped unit. e.g. events published in
            a child model will propagate to all models within the scoped unit
            before going up to parent models.
            </summary>
        </member>
        <member name="T:Models.Core.SeparatorAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.SeparatorAttribute.description">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.SeparatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.SeparatorAttribute" /> class.
            </summary>
            <param name="description">Description text</param>
        </member>
        <member name="M:Models.Core.SeparatorAttribute.ToString">
            <summary>
            Gets the description
            </summary>
            <returns>The description</returns>
        </member>
        <member name="T:Models.Core.SoluteAttribute">
            <summary>
            Specifies that the associated property is a solute.
            </summary>
        </member>
        <member name="T:Models.Core.SummaryAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object in scope of the 
            related field and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="T:Models.Core.TooltipAttribute">
            <summary>Stores a tooltip for a property.</summary>
        </member>
        <member name="P:Models.Core.TooltipAttribute.Tooltip">
            <summary>
            Tooltip to be displayed in the UI.
            </summary>
        </member>
        <member name="M:Models.Core.TooltipAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of a tooltip attribute.
            </summary>
            <param name="tooltip">Tooltip to be displayed in the UI.</param>
        </member>
        <member name="T:Models.Core.UnitsAttribute">
            <summary>
            Specifies the units of the related field or property. Units must conform to the specification in Section 2.6.
            </summary>
        </member>
        <member name="F:Models.Core.UnitsAttribute.unitsString">
            <summary>
            The units passed through the constructor
            </summary>
        </member>
        <member name="M:Models.Core.UnitsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.UnitsAttribute" /> class.
            </summary>
            <param name="units">The units of the associated field or property</param>
        </member>
        <member name="M:Models.Core.UnitsAttribute.ToString">
            <summary>
            Returns the units.
            </summary>
            <returns>The units string</returns>
        </member>
        <member name="T:Models.Core.ValidParentAttribute">
            <summary>Specifies the models that this class can sit under in the user interface./// </summary>
        </member>
        <member name="P:Models.Core.ValidParentAttribute.ParentType">
            <summary>Allowable parent type.</summary>
        </member>
        <member name="P:Models.Core.ValidParentAttribute.DropAnywhere">
            <summary>Allow the model to be dropped anywhere?</summary>
        </member>
        <member name="M:Models.Core.ValidParentAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Models.Core.ValidParentAttribute.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Models.Core.Attributes.VersionAttribute">
            <summary>
            Model version attribute
            </summary>
        </member>
        <member name="M:Models.Core.Attributes.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Attribute constructor
            </summary>
            <param name="major">Version major component</param>
            <param name="minor">Version minor component</param>
            <param name="increment">Minor increment</param>
            <param name="comments">Version comments</param>
        </member>
        <member name="M:Models.Core.Attributes.VersionAttribute.ToString">
            <summary>
            Gets the uri
            </summary>
            <returns>help link uri</returns>
        </member>
        <member name="M:Models.Core.Attributes.VersionAttribute.Comments">
            <summary>
            Get the comments associated with this version
            </summary>
            <returns>Comments</returns>
        </member>
        <member name="T:Models.Core.ViewNameAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.ViewNameAttribute.name">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.ViewNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.ViewNameAttribute" /> class.
            </summary>
            <param name="name">Name of the user interface view class to use</param>
        </member>
        <member name="M:Models.Core.ViewNameAttribute.ToString">
            <summary>
            Gets the name of the view.
            </summary>
            <returns>The name of the view class</returns>
        </member>
        <member name="T:Models.Core.AutoDocumentation">
            <summary>
            A class of auto-documentation methods and HTML building widgets.
            </summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetUnits(Models.Core.IModel,System.String)">
            <summary>Gets the units from a declaraion.</summary>
            <param name="model">The model containing the declaration field.</param>
            <param name="fieldName">The declaration field name.</param>
            <returns>The units (no brackets) or any empty string.</returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetDescription(Models.Core.IModel,System.String)">
            <summary>Gets the description from a declaraion.</summary>
            <param name="model">The model containing the declaration field.</param>
            <param name="fieldName">The declaration field name.</param>
            <returns>The description or any empty string.</returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentModel(Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Writes the description of a class to the tags.</summary>
            <param name="model">The model to get documentation for.</param>
            <param name="tags">The tags to add to.</param>
            <param name="headingLevel">The heading level to use.</param>
            <param name="indent">The indentation level.</param>
            <param name="documentAllChildren">Document all children?</param>
            <param name="force">
            Whether or not to force the generation of documentation, 
            regardless of the model's IncludeInDocumentation status.
            </param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentModelSummary(Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Document the summary description of a model.
            </summary>
            <param name="model">The model to get documentation for.</param>
            <param name="tags">The tags to add to.</param>
            <param name="headingLevel">The heading level to use.</param>
            <param name="indent">The indentation level.</param>
            <param name="documentAllChildren">Document all children?</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Get the summary of a member (field, property)
            </summary>
            <param name="member">The member to get the summary for.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetSummary(System.Type)">
            <summary>
            Get the summary of a type removing CRLF.
            </summary>
            <param name="t">The type to get the summary for.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetSummaryRaw(System.Type)">
            <summary>
            Get the summary of a type without removing CRLF.
            </summary>
            <param name="t">The type to get the summary for.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetRemarks(System.Type)">
            <summary>
            Get the remarks tag of a type (if it exists).
            </summary>
            <param name="t">The type.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetRemarks(System.Reflection.MemberInfo)">
            <summary>
            Get the remarks of a member (field, property) if it exists.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetSummary(System.String,System.Char)">
            <summary>
            Get the summary of a member (class, field, property)
            </summary>
            <param name="path">The path to the member.</param>
            <param name="typeLetter">Type type letter: 'T' for type, 'F' for field, 'P' for property.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetSummaryRaw(System.String,System.Char)">
            <summary>
            Get the summary of a member (class, field, property)
            </summary>
            <param name="path">The path to the member.</param>
            <param name="typeLetter">Type type letter: 'T' for type, 'F' for field, 'P' for property.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetRemarks(System.String,System.Char)">
            <summary>
            Get the remarks of a member (class, field, property).
            </summary>
            <param name="path">The path to the member.</param>
            <param name="typeLetter">Type letter: 'T' for type, 'F' for field, 'P' for property.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.ParseTextForTags(System.String,Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Parse a string into documentation tags
            </summary>
            <param name="stringToParse">The string to parse</param>
            <param name="model">The associated model where the string came from</param>
            <param name="tags">The list of tags to add to</param>
            <param name="headingLevel">The current heading level</param>
            <param name="indent">The current indent level</param>
            <param name="doNotTrim">If true, don't trim the lines</param>
            <param name="documentAllChildren">Ensure all children are documented?</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.EvaluateModelPath(Models.Core.IModel,System.String)">
            <summary>
            Evaluate a path that can include child models, properties or method calls.
            </summary>
            <param name="model">The reference model.</param>
            <param name="path">The path to locate</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetHeadingFromLine(System.String,System.String@,System.Int32@)">
            <summary>Look at a string and return true if it is a heading.</summary>
            <param name="st">The string to look at.</param>
            <param name="heading">The returned heading.</param>
            <param name="headingLevel">The returned heading level.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentChildren(Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Type[])">
            <summary>
            Document all child members of the specified model.
            </summary>
            <param name="model">The parent model</param>
            <param name="tags">Documentation elements</param>
            <param name="headingLevel">Heading level</param>
            <param name="indent">Indent level</param>
            <param name="childTypesToExclude">An optional list of Types to exclude from documentation.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentMathFunction(Models.Core.IModel,System.Char,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>
            Document the mathematical function.
            </summary>
            <param name="function">The IModel function.</param>
            <param name="op">The operator</param>
            <param name="tags">The tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.AddChildToMsg(Models.Core.IModel,System.String@)">
            <summary>
            Return the name of the child or it's value if the name of the child is equal to 
            the written value of the child. i.e. if the value is 1 and the name is 'one' then
            return the value, instead of the name.
            </summary>
            <param name="child">The child model.</param>
            <param name="msg">The message to add to.</param>
            <returns>True if child's value was added to msg.</returns>
        </member>
        <member name="T:Models.Core.AutoDocumentation.ITag">
            <summary>
            Describes an interface for a auto-doc command.
            </summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Heading">
            <summary>
            Describes an auto-doc heading command.
            </summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Heading.text">
            <summary>The heading text</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Heading.headingLevel">
            <summary>The heading level</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Heading.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Heading"/> class.
            </summary>
            <param name="text">The heading text.</param>
            <param name="headingLevel">The heading level.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Paragraph">
            <summary>
            Describes an auto-doc paragraph command.
            </summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.text">
            <summary>The paragraph text.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.bookmarkName">
            <summary>The bookmark name (optional)</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.handingIndent">
            <summary>Should the paragraph indent all lines except the first?</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Paragraph.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Paragraph"/> class.
            </summary>
            <param name="text">The paragraph text.</param>
            <param name="indent">The paragraph indent.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.GraphAndTable">
            <summary>Describes an auto-doc graph and table command.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.xyPairs">
            <summary>The data to show in graph and table.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.title">
            <summary>The graph title</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.xName">
            <summary>The x axis title.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.yName">
            <summary>The y axis title</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GraphAndTable.#ctor(Models.Functions.XYPairs,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.GraphAndTable"/> class.
            </summary>
            <param name="xyPairs">The xy pairs.</param>
            <param name="title">Graph title.</param>
            <param name="xName">The x axis title.</param>
            <param name="yName">The y axis title.</param>
            <param name="indent">The indentation.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Table">
            <summary>Describes an auto-doc table command.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Table.data">
            <summary>The data to show in the table.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Table.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="P:Models.Core.AutoDocumentation.Table.ColumnWidth">
            <summary>Max width of each column (in terms of number of characters).</summary>
        </member>
        <member name="P:Models.Core.AutoDocumentation.Table.Style">
            <summary>Max width of each column (in terms of number of characters).</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Table.#ctor(System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Table"/> class.
            </summary>
            <param name="data">The column / row data.</param>
            <param name="indent">The indentation.</param>
            <param name="width">Max width of each column (in terms of number of characters).</param>
            <param name="style">The style to use for the table.</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Table.#ctor(System.Data.DataView,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Table"/> class.
            </summary>
            <param name="data">The column / row data.</param>
            <param name="indent">The indentation.</param>
            <param name="width">Max width of each column (in terms of number of characters).</param>
            <param name="style">The style to use for the table.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Image">
            <summary>Descibes an image for the tags system.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Image.image">
            <summary>The image to put into the doc.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Image.name">
            <summary>Unique name for image. Used to save image to temp folder.</summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.NewPage">
            <summary>Describes a new page for the tags system.</summary>
        </member>
        <member name="P:Models.Core.AutoDocumentation.NewPage.Portrait">
            <summary>Is new page portrait?</summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.PageSetup">
            <summary>Page setup tag.</summary>
        </member>
        <member name="P:Models.Core.AutoDocumentation.PageSetup.Portrait">
            <summary>Is new page portrait?</summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.ModelView">
            <summary>Describes a model view for the tags system.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.ModelView.model">
            <summary>Model</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.ModelView.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="modelToDocument">The model to document</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.ChildFunctionList(System.Collections.Generic.IEnumerable{Models.Functions.IFunction})">
            <summary> creates a list of child function names </summary>
        </member>
        <member name="T:Models.Core.Events">
            <summary>
            An event handling class
            </summary>
        </member>
        <member name="M:Models.Core.Events.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="relativeTo">The model this events instance is relative to</param>
        </member>
        <member name="M:Models.Core.Events.ConnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="M:Models.Core.Events.DisconnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="M:Models.Core.Events.Subscribe(System.String,System.EventHandler)">
            <summary>
            Subscribe to an event. Will throw if namePath doesn't point to a event publisher.
            </summary>
            <param name="eventNameAndPath">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.Events.Unsubscribe(System.String,System.EventHandler)">
            <summary>
            Unsubscribe an event. Throws if not found.
            </summary>
            <param name="eventNameAndPath">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.Events.Publish(System.String,System.Object[])">
            <summary>
            Publish the specified event to the specified model and all models in scope.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="args">The event arguments. Can be null</param>
        </member>
        <member name="M:Models.Core.Events.PublishToModelAndChildren(System.String,System.Object[])">
            <summary>
            Publish the specified event to the specified model and all child models.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="args">The event arguments. Can be null</param>
        </member>
        <member name="T:Models.Core.Events.Subscriber">
            <summary>A wrapper around an event subscriber MethodInfo.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.Model">
            <summary>The model instance containing the event hander.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.methodInfo">
            <summary>The method info for the event handler.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.Name">
            <summary>Gets or sets the name of the event.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.MethodName">
            <summary>Name of the target method.</summary>
        </member>
        <member name="M:Models.Core.Events.Subscriber.FindAll(System.Collections.Generic.List{Models.Core.IModel})">
            <summary>Find all event subscribers in the specified models.</summary>
            <param name="allModels">A list of all models in simulation.</param>
            <returns>The list of event subscribers</returns>
        </member>
        <member name="M:Models.Core.Events.Subscriber.FindAll(System.String,Models.Core.IModel,Models.Core.ScopingRules)">
            <summary>Find all event subscribers in the specified models.</summary>
            <param name="name">The name of the event to look for</param>
            <param name="relativeTo">The model to use in scoping lookup</param>
            <param name="scope">Scoping rules</param>
            <returns>The list of event subscribers</returns>
        </member>
        <member name="M:Models.Core.Events.Subscriber.CreateDelegate(System.Type)">
            <summary>Creates and returns a delegate for the event handler.</summary>
            <param name="handlerType">The corresponding event publisher event handler type.</param>
            <returns>The delegate. Never returns null.</returns>
        </member>
        <member name="M:Models.Core.Events.Subscriber.Invoke(System.Object[])">
            <summary>
            Call the event handler.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Models.Core.Events.Publisher">
            <summary>
            A wrapper around an event publisher EventInfo.
            </summary>
        </member>
        <member name="P:Models.Core.Events.Publisher.Model">
            <summary>The model instance containing the event hander.</summary>
        </member>
        <member name="P:Models.Core.Events.Publisher.EventInfo">
            <summary>The reflection event info instance.</summary>
        </member>
        <member name="P:Models.Core.Events.Publisher.Name">
            <summary>Return the event name.</summary>
        </member>
        <member name="M:Models.Core.Events.Publisher.FindAll(System.Collections.Generic.IEnumerable{Models.Core.IModel})">
            <summary>Find all event publishers in the specified models.</summary>
            <param name="models">The models to scan for event publishers</param>
            <returns>The list of event publishers</returns>
        </member>
        <member name="T:Models.Core.Folder">
            <summary>
            A folder model
            </summary>
        </member>
        <member name="P:Models.Core.Folder.ShowInDocs">
            <summary>Show in the autodocs?</summary>
            <remarks>
            Apparently, not all folders of graphs are intended to be shown in the autodocs.
            Hence, this flag.
            </remarks>
        </member>
        <member name="P:Models.Core.Folder.GraphsPerPage">
            <summary>Number of graphs to show per page.</summary>
        </member>
        <member name="M:Models.Core.Folder.Document">
            <summary>
            Document the model, and any child models which should be documented.
            </summary>
            <remarks>
            It is a mistake to call this method without first resolving links.
            </remarks>
        </member>
        <member name="M:Models.Core.Folder.DocumentChildren">
            <summary>
            Document the appropriate child models (in this case, memos,
            experiments, graphs, and folders).
            </summary>
        </member>
        <member name="T:Models.Core.IEvent">
            <summary>
            An interface for publishing / subscribing to events.
            </summary>
        </member>
        <member name="M:Models.Core.IEvent.Subscribe(System.String,System.EventHandler)">
            <summary>
            Subscribe to an event. Will throw if namePath doesn't point to a event publisher.
            </summary>
            <param name="eventName">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.IEvent.Unsubscribe(System.String,System.EventHandler)">
            <summary>
            Unsubscribe an event. Throws if not found.
            </summary>
            <param name="eventName">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.IEvent.ConnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="M:Models.Core.IEvent.DisconnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="T:Models.Core.ILocator">
            <summary>
            An interface for locating variables/models at runtime.
            </summary>
        </member>
        <member name="M:Models.Core.ILocator.Get(System.String)">
            <summary>
            Gets the value of a variable or model. Case insensitive. 
            </summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.ILocator.Get(System.Type)">
            <summary>Gets a model in scope of the specified type</summary>
            <param name="typeToMatch">The type of the model to return</param>
            <returns>The found model or null if not found</returns>
        </member>
        <member name="M:Models.Core.ILocator.GetObject(System.String)">
            <summary>
            Get the underlying variable object for the given path.
            </summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.ILocator.GetObjectProperties(System.String)">
            <summary>
            Get the properties of the underlying variable object for the given path.
            Unlike the GetObject method, this does not return the data value of the object.
            </summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="T:Models.Core.IModel">
            <summary>
            The IModel interface specifies the properties and methods that all
            models must have. 
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Name">
            <summary>
            Gets or sets the name of the model.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Parent">
            <summary>
            Gets or sets the parent model. Can be null if model has no parent.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Children">
            <summary>
            Gets of sets the child models. Can be empty array but never null.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.IsHidden">
            <summary>
            Gets or sets a value indicating whether a model is hidden from the user.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Enabled">
            <summary>
            Gets or sets whether the model is enabled
            </summary>
        </member>
        <member name="P:Models.Core.IModel.ReadOnly">
            <summary>
            Gets or sets whether the model is readonly.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.FullPath">
            <summary>
            Full path to the model.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.FindSibling(System.String)">
            <summary>
            Find a sibling with a given name.
            </summary>
            <param name="name">Name of the sibling.</param>
        </member>
        <member name="M:Models.Core.IModel.FindChild(System.String)">
            <summary>
            Find a child with a given name.
            </summary>
            <param name="name">Name of the child.</param>
        </member>
        <member name="M:Models.Core.IModel.FindDescendant(System.String)">
            <summary>
            Find a descendant with a given name.
            </summary>
            <param name="name">Name of the descendant.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAncestor(System.String)">
            <summary>
            Find an ancestor with a given name.
            </summary>
            <param name="name">Name of the ancestor.</param>
        </member>
        <member name="M:Models.Core.IModel.FindInScope(System.String)">
            <summary>
            Find a model in scope with a given name.
            </summary>
            <param name="name">Name of the model.</param>
        </member>
        <member name="M:Models.Core.IModel.FindSibling``1">
            <summary>
            Find a sibling with a given type.
            </summary>
            <typeparam name="T">Type of the sibling.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindChild``1">
            <summary>
            Find a child with a given type.
            </summary>
            <typeparam name="T">Type of the child.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindDescendant``1">
            <summary>
            Find a descendant with a given type.
            </summary>
            <typeparam name="T">Type of the descendant.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAncestor``1">
            <summary>
            Find an ancestor with a given type.
            </summary>
            <typeparam name="T">Type of the ancestor.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindInScope``1">
            <summary>
            Find a model in scope with a given type in scope.
            </summary>
            <typeparam name="T">Type of model to find.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindSibling``1(System.String)">
            <summary>
            Find a sibling with a given type and name.
            </summary>
            <param name="name">Name of the sibling.</param>
            <typeparam name="T">Type of the sibling.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindChild``1(System.String)">
            <summary>
            Find a child with a given type and name.
            </summary>
            <param name="name">Name of the child.</param>
            <typeparam name="T">Type of the child.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindDescendant``1(System.String)">
            <summary>
            Find a descendant model with a given type and name.
            </summary>
            <param name="name">Name of the descendant.</param>
            <typeparam name="T">Type of the descendant.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAncestor``1(System.String)">
            <summary>
            Find an ancestor with a given type and name.
            </summary>
            <param name="name">Name of the ancestor.</param>
            <typeparam name="T">Type of the ancestor.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindInScope``1(System.String)">
            <summary>
            Find a model in scope with a given type and name.
            </summary>
            <param name="name">Name of the model.</param>
            <typeparam name="T">Type of model to find.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAllSiblings(System.String)">
            <summary>
            Find all siblings with a given name.
            </summary>
            <param name="name">Name of the siblings.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllChildren(System.String)">
            <summary>
            Find all children with a given name.
            </summary>
            <param name="name">Name of the children.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllDescendants(System.String)">
            <summary>
            Find all descendants with a given name.
            </summary>
            <param name="name">Name of the descendants.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllAncestors(System.String)">
            <summary>
            Find all ancestors with a given name.
            </summary>
            <param name="name">Name of the ancestors.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllInScope(System.String)">
            <summary>
            Find all models in scope with a given name.
            </summary>
            <param name="name">Name of the models.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllSiblings``1">
            <summary>
            Find all siblings of the given type.
            </summary>
            <typeparam name="T">Type of siblings to return.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAllChildren``1">
            <summary>
            Find all children of the given type.
            </summary>
            <typeparam name="T">Type of children to return.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAllDescendants``1">
            <summary>
            Find all descendants of the given type.
            </summary>
            <typeparam name="T">Type of descendants to return.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAllAncestors``1">
            <summary>
            Find all ancestors of the given type.
            </summary>
            <typeparam name="T">Type of siblings to return.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAllInScope``1">
            <summary>
            Find all models of the given type in scope.
            </summary>
            <typeparam name="T">Type of siblings to return.</typeparam>
        </member>
        <member name="M:Models.Core.IModel.FindAllSiblings``1(System.String)">
            <summary>
            Find all siblings with the given type and name.
            </summary>
            <typeparam name="T">Type of siblings to return.</typeparam>
            <param name="name">Name of the siblings.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllChildren``1(System.String)">
            <summary>
            Find all children with the given type and name.
            </summary>
            <typeparam name="T">Type of children to return.</typeparam>
            <param name="name">Name of the children.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllDescendants``1(System.String)">
            <summary>
            Find all descendants with the given type and name.
            </summary>
            <typeparam name="T">Type of descendants to return.</typeparam>
            <param name="name">Name of the descendants.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllAncestors``1(System.String)">
            <summary>
            Find all ancestors with the given type and name.
            </summary>
            <typeparam name="T">Type of ancestors to return.</typeparam>
            <param name="name">Name of the ancestors.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllInScope``1(System.String)">
            <summary>
            Find all models with the given type and name in scope.
            </summary>
            <typeparam name="T">Type of models to find.</typeparam>
            <param name="name">Name of the models.</param>
        </member>
        <member name="M:Models.Core.IModel.FindAllAncestors">
            <summary>
            Returns all ancestor models.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.FindAllDescendants">
            <summary>
            Returns all descendant models.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.FindAllSiblings">
            <summary>
            Returns all sibling models.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.FindAllChildren">
            <summary>
            Returns all children models.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.FindAllInScope">
            <summary>
            Returns all models which are in scope.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.IsChildAllowable(System.Type)">
            <summary>
            Return true iff a model with the given type can be added to the model.
            </summary>
            <param name="type">The child type.</param>
        </member>
        <member name="M:Models.Core.IModel.ParentAllDescendants">
            <summary>
            Parent all descendant models.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.FindByPath(System.String,System.Boolean)">
            <summary>
            Get the underlying variable object for the given path.
            Note that this can be a variable/property or a model.
            Returns null if not found.
            </summary>
            <param name="path">The path of the variable/model.</param>
            <param name="ignoreCase">Perform a case-insensitive search?</param>
        </member>
        <member name="M:Models.Core.IModel.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.OnPreLink">
            <summary>
            Called immediately before a simulation has its links resolved and is run.
            It provides an opportunity for a simulation to restructure itself 
            e.g. add / remove models.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.Document">
            <summary>
            Document the model, and any child models which should be documented.
            </summary>
            <remarks>
            It is a mistake to call this method without first resolving links.
            </remarks>
        </member>
        <member name="T:Models.Core.Interfaces.IOptionallySerialiseChildren">
            <summary>
            Any class that implements this interface can optionally have its children serialised.
            </summary>
        </member>
        <member name="P:Models.Core.Interfaces.IOptionallySerialiseChildren.DoSerialiseChildren">
            <summary>Allow children to be serialised?</summary>
        </member>
        <member name="T:Models.Core.Interfaces.ISimulationEngine">
            <summary>
            An interface for the APSIM simulation engine
            </summary>
        </member>
        <member name="P:Models.Core.Interfaces.ISimulationEngine.Links">
            <summary>Return link service</summary>
        </member>
        <member name="M:Models.Core.Interfaces.ISimulationEngine.GetEventService(Models.Core.IModel)">
            <summary>Returns an instance of an events service</summary>
            <param name="model">The model the service is for</param>
        </member>
        <member name="P:Models.Core.Interfaces.ISimulationEngine.FileName">
            <summary>Return filename</summary>
        </member>
        <member name="T:Models.Core.IPlant">
            <summary>
            The ICrop interface specifies the properties and methods that all
            crops must have. In effect this interface describes the interactions
            between a crop and the other models in APSIM.
            </summary>
        </member>
        <member name="P:Models.Core.IPlant.PlantType">
            <summary>The plant type.</summary>
            <remarks>A substitute for the old Leguminosity.</remarks>
        </member>
        <member name="P:Models.Core.IPlant.IsAlive">
            <summary> Is the plant alive?</summary>
        </member>
        <member name="P:Models.Core.IPlant.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.Core.IPlant.AboveGround">
            <summary>Get above ground biomass</summary>
        </member>
        <member name="P:Models.Core.IPlant.WaterUptake">
            <summary>Daily soil water uptake from each soil layer (mm)</summary>
        </member>
        <member name="P:Models.Core.IPlant.NitrogenUptake">
            <summary>Daily nitrogen uptake from each soil layer (kg/ha).</summary>
        </member>
        <member name="M:Models.Core.IPlant.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <param name="rowConfig">The bud number.</param>
        </member>
        <member name="P:Models.Core.IPlant.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.Core.IPlant.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="M:Models.Core.IPlant.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="T:Models.Core.IPublisher">
            <summary>
            Interface for a model which publishes events whose
            names are not known at compile-time.
            </summary>
        </member>
        <member name="P:Models.Core.IPublisher.Events">
            <summary>
            Names of the published events.
            </summary>
        </member>
        <member name="T:Models.Core.IReferenceExternalFiles">
            <summary>An interface for a model that references external files</summary>
        </member>
        <member name="M:Models.Core.IReferenceExternalFiles.GetReferencedFileNames">
            <summary>Return paths to all files referenced by this model.</summary>
        </member>
        <member name="M:Models.Core.IReferenceExternalFiles.RemovePathsFromReferencedFileNames">
            <summary>Remove all paths from referenced filenames.</summary>
        </member>
        <member name="T:Models.Core.ISummary">
            <summary>
            A summary model interface for writing to the summary file.
            </summary>
        </member>
        <member name="M:Models.Core.ISummary.WriteMessage(Models.Core.IModel,System.String,Models.Core.MessageType)">
            <summary>
            Write a message to the summary
            </summary>
            <param name="model">The model writing the message</param>
            <param name="message">The message to write</param>
            <param name="messageType">Message output/verbosity level.</param>
        </member>
        <member name="T:Models.Core.ITest">
            <summary>
            An interface for a model which is a test.
            </summary>
        </member>
        <member name="M:Models.Core.ITest.Run">
            <summary>
            Runs the test. Throws an exception on failure.
            </summary>
        </member>
        <member name="T:Models.Core.ITestable">
            <summary>
            An interface for something that is testable.
            </summary>
        </member>
        <member name="M:Models.Core.ITestable.Test(System.Boolean,System.Boolean)">
            <summary>Run tests. Should throw an exception if the test fails.</summary>
        </member>
        <member name="T:Models.Core.IVariable">
            <summary>
            This abstract base class encapsulates the interface for a variable from a Model.
            source code.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Description">
            <summary>
            Gets a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Units">
            <summary>
            Gets or sets the units of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.IVariable.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="M:Models.Core.IVariable.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.Links">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Core.Links.services">
            <summary>A collection of services that can be linked to</summary>
        </member>
        <member name="M:Models.Core.Links.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Constructor</summary>
            <param name="linkableServices">A collection of services that can be linked to</param>
        </member>
        <member name="M:Models.Core.Links.Resolve(Models.Core.IModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootNode"></param>
            <param name="recurse">Recurse through all child models?</param>
            <param name="allLinks">Unresolve all links or just the non child links?</param>
            <param name="throwOnFail">Should all links be considered optional?</param>
        </member>
        <member name="M:Models.Core.Links.Resolve(System.Object,System.Boolean)">
            <summary>
            Resolve links in an unknown object e.g. user interface presenter
            </summary>
            <param name="obj"></param>
            <param name="throwOnFail">Should an exception be thrown if a link fails to be resolved?</param>
        </member>
        <member name="M:Models.Core.Links.Unresolve(Models.Core.IModel,System.Boolean)">
            <summary>
            Set to null all link fields in the specified model.
            </summary>
            <param name="model">The model to look through for links</param>
            <param name="allLinks">Unresolve all links or just the non child links?</param>
        </member>
        <member name="M:Models.Core.Links.ResolveInternal(System.Object,Models.Core.ScopingRules,System.Boolean)">
            <summary>
            Internal [link] resolution algorithm.
            </summary>
            <param name="obj"></param>
            <param name="scope">The scoping rules to use to resolve links.</param>
            <param name="throwOnFail">Should all links be considered optional?</param>
        </member>
        <member name="M:Models.Core.Links.GetModel(System.Object)">
            <summary>
            Determine the type of an object and return its model.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The model</returns>
        </member>
        <member name="M:Models.Core.Links.GetName(System.Object)">
            <summary>
            Determine the type of an object and return its name.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The name</returns>
        </member>
        <member name="M:Models.Core.Links.GetParent(Models.Core.IModel,System.Type)">
            <summary>
            Determine the type of an object and return its parent of the specified type.
            </summary>
            <param name="model">A model.</param>
            <param name="type">The type of parent to find.</param>
            <returns>The matching parent</returns>
        </member>
        <member name="M:Models.Core.Links.GetFullName(System.Object)">
            <summary>
            Determine the type of an object and return its name.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The name</returns>
        </member>
        <member name="M:Models.Core.Links.GetChildren(System.Object)">
            <summary>
            Determine the type of an object and return all direct child models
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The child models.</returns>
        </member>
        <member name="M:Models.Core.Links.GetAllDeclarations(System.Object,System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Return all fields. The normal .NET reflection doesn't return private fields in base classes.
            This function does.
            </summary>
        </member>
        <member name="T:Models.Core.Locater">
            <summary>
            This class is responsible for the location and retrieval of variables or models 
            given a path.
            Path example syntax:
               .Clock.Start                         ABSOLUTE PATH
               [PotatoSowingRule].Script.SowDate    RELATIVE TO A MODEL IN SCOPE
               Leaf.LAI                             RELATIVE CHILD MODEL.
            </summary>
        </member>
        <member name="F:Models.Core.Locater.CacheForModel.cache">
            <summary>
            A cache for speeding up look ups. The object can be either 
            Model[] or an IVariable.
            </summary>
        </member>
        <member name="M:Models.Core.Locater.CacheForModel.GetValueForKey(System.String)">
            <summary>
            Get a value for the specified key or null if not in cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Models.Core.Locater.cache">
            <summary>
            A cache for speeding up look ups. The object can be either 
            Model[] or an IVariable.
            </summary>
        </member>
        <member name="M:Models.Core.Locater.Clear">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:Models.Core.Locater.Get(System.String,Models.Core.Model,System.Boolean)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <param name="relativeTo">The model calling this method</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locater.Set(System.String,Models.Core.Model,System.Object)">
            <summary>
            Set the value of a variable. Will throw if variable doesn't exist.
            </summary>
            <param name="namePath">The name of the object to set</param>
            <param name="relativeTo">The model calling this method</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Locater.GetInternal(System.String,Models.Core.Model,System.Boolean)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <param name="relativeTo">The model calling this method</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locater.GetTypeWithoutNameSpace(System.String)">
            <summary>
            Gets all Type instances matching the specified class name with no namespace qualified class name.
            Will not throw. May return empty array.
            </summary>
        </member>
        <member name="M:Models.Core.Locater.AddToCache(System.String,Models.Core.Model,System.Object)">
            <summary>
            Add the specified object to the cache.
            </summary>
            <param name="key">cache key</param>
            <param name="relativeTo">Model for which the object is relative to</param>
            <param name="obj">The object to store.</param>
        </member>
        <member name="M:Models.Core.Locater.GetFromCache(System.String,Models.Core.Model)">
            <summary>
            Get an object from the cache.
            </summary>
            <param name="key">The cache key</param>
            <param name="relativeTo">The model the object is relative to</param>
            <returns>The object or null if not found.</returns>
        </member>
        <member name="T:Models.Core.Locator">
            <summary>
            This class is responsible for the location and retrieval of variables or models 
            given a path.
            Path example syntax:
               .Clock.Start                         ABSOLUTE PATH
               [PotatoSowingRule].Script.SowDate    RELATIVE TO A MODEL IN SCOPE
               Leaf.LAI                             RELATIVE CHILD MODEL.
            </summary>
        </member>
        <member name="F:Models.Core.Locator.relativeToModel">
            <summary>The model this locator is relative to</summary>
        </member>
        <member name="F:Models.Core.Locator.cache">
            <summary>
            A cache for speeding up look ups. The object can be either 
            Model[] or an IVariable.
            </summary>
        </member>
        <member name="M:Models.Core.Locator.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="relativeTo">Model locator is relative to</param>
        </member>
        <member name="M:Models.Core.Locator.Clear">
            <summary>Clear the cache</summary>
        </member>
        <member name="M:Models.Core.Locator.Get(System.String)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locator.Get(System.Type)">
            <summary>Gets a model in scope of the specified type</summary>
            <param name="typeToMatch">The type of the model to return</param>
            <returns>The found model or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locator.GetObject(System.String)">
            <summary>
            
            </summary>
            <param name="namePath"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Locator.GetObjectProperties(System.String)">
            <summary>
            
            </summary>
            <param name="namePath"></param>
            <returns>Information about the named variable, but without its current data values</returns>
        </member>
        <member name="M:Models.Core.Locator.Set(System.String,System.Object)">
            <summary>
            Set the value of a variable. Will throw if variable doesn't exist.
            </summary>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Locator.GetInternal(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <param name="propertiesOnly">If true, fetch only property information, but not the value</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locator.GetTypeWithoutNameSpace(System.String)">
            <summary>
            Gets all Type instances matching the specified class name with no namespace qualified class name.
            Will not throw. May return empty array.
            </summary>
        </member>
        <member name="T:Models.Core.MessageType">
            <summary>
            An enum that is used to indicate message severity when writing
            summary messages.
            </summary>
        </member>
        <member name="F:Models.Core.MessageType.Error">
            <summary>Error message.</summary>
        </member>
        <member name="F:Models.Core.MessageType.Warning">
            <summary>Warning message.</summary>
        </member>
        <member name="F:Models.Core.MessageType.Information">
            <summary>Information message.</summary>
        </member>
        <member name="F:Models.Core.MessageType.Diagnostic">
            <summary>Diagnostic message.</summary>
        </member>
        <member name="F:Models.Core.MessageType.All">
            <summary>All</summary>
        </member>
        <member name="T:Models.Core.Model">
            <summary>
            Base class for all models
            </summary>
        </member>
        <member name="M:Models.Core.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.Model" /> class.
            </summary>
        </member>
        <member name="P:Models.Core.Model.Name">
            <summary>
            Gets or sets the name of the model
            </summary>
        </member>
        <member name="P:Models.Core.Model.Children">
            <summary>
            Gets or sets a list of child models.   
            </summary>
        </member>
        <member name="P:Models.Core.Model.Parent">
            <summary>
            Gets or sets the parent of the model.
            </summary>
        </member>
        <member name="P:Models.Core.Model.IsHidden">
            <summary>
            Gets or sets a value indicating whether a model is hidden from the user.
            </summary>
        </member>
        <member name="M:Models.Core.Model.ClearChildLists">
            <summary>
            A cleanup routine, in which we clear our child list recursively
            </summary>
        </member>
        <member name="P:Models.Core.Model.Enabled">
            <summary>
            Gets or sets whether the model is enabled
            </summary>
        </member>
        <member name="P:Models.Core.Model.ReadOnly">
            <summary>
            Controls whether the model can be modified.
            </summary>
        </member>
        <member name="P:Models.Core.Model.FullPath">
            <summary>
            Full path to the model.
            </summary>
        </member>
        <member name="M:Models.Core.Model.FindSibling(System.String)">
            <summary>
            Find a sibling with a given name.
            </summary>
            <param name="name">Name of the sibling.</param>
        </member>
        <member name="M:Models.Core.Model.FindChild(System.String)">
            <summary>
            Find a child with a given name.
            </summary>
            <param name="name">Name of the child.</param>
        </member>
        <member name="M:Models.Core.Model.FindDescendant(System.String)">
            <summary>
            Find a descendant with a given name.
            </summary>
            <param name="name">Name of the descendant.</param>
        </member>
        <member name="M:Models.Core.Model.FindAncestor(System.String)">
            <summary>
            Find an ancestor with a given name.
            </summary>
            <param name="name">Name of the ancestor.</param>
        </member>
        <member name="M:Models.Core.Model.FindInScope(System.String)">
            <summary>
            Find a model in scope with a given name.
            </summary>
            <param name="name">Name of the model.</param>
        </member>
        <member name="M:Models.Core.Model.FindSibling``1">
            <summary>
            Find a sibling of a given type.
            </summary>
            <typeparam name="T">Type of the sibling.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindChild``1">
            <summary>
            Find a child with a given type.
            </summary>
            <typeparam name="T">Type of the child.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindDescendant``1">
            <summary>
            Performs a depth-first search for a descendant of a given type.
            </summary>
            <typeparam name="T">Type of the descendant.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAncestor``1">
            <summary>
            Find an ancestor of a given type.
            </summary>
            <typeparam name="T">Type of the ancestor.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindInScope``1">
            <summary>
            Find a model of a given type in scope.
            </summary>
            <typeparam name="T">Type of model to find.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindSibling``1(System.String)">
            <summary>
            Find a sibling with a given type and name.
            </summary>
            <param name="name">Name of the sibling.</param>
            <typeparam name="T">Type of the sibling.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindChild``1(System.String)">
            <summary>
            Find a child with a given type and name.
            </summary>
            <param name="name">Name of the child.</param>
            <typeparam name="T">Type of the child.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindDescendant``1(System.String)">
            <summary>
            Find a descendant model with a given type and name.
            </summary>
            <param name="name">Name of the descendant.</param>
            <typeparam name="T">Type of the descendant.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAncestor``1(System.String)">
            <summary>
            Find an ancestor with a given type and name.
            </summary>
            <param name="name">Name of the ancestor.</param>
            <typeparam name="T">Type of the ancestor.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindInScope``1(System.String)">
            <summary>
            Find a model in scope with a given type and name.
            </summary>
            <param name="name">Name of the model.</param>
            <typeparam name="T">Type of model to find.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAllAncestors``1">
            <summary>
            Find all ancestors of the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAllDescendants``1">
            <summary>
            Find all descendants of the given type and name.
            </summary>
            <typeparam name="T">Type of descendants to return.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAllSiblings``1">
            <summary>
            Find all siblings of the given type.
            </summary>
            <typeparam name="T">Type of siblings to return.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAllChildren``1">
            <summary>
            Find all children of the given type.
            </summary>
            <typeparam name="T">Type of children to return.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAllInScope``1">
            <summary>
            Find all models of a given type in scope.
            </summary>
            <typeparam name="T">Type of models to find.</typeparam>
        </member>
        <member name="M:Models.Core.Model.FindAllSiblings``1(System.String)">
            <summary>
            Find all siblings with the given type and name.
            </summary>
            <typeparam name="T">Type of siblings to return.</typeparam>
            <param name="name">Name of the siblings.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllChildren``1(System.String)">
            <summary>
            Find all children with the given type and name.
            </summary>
            <typeparam name="T">Type of children to return.</typeparam>
            <param name="name">Name of the children.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllDescendants``1(System.String)">
            <summary>
            Find all descendants with the given type and name.
            </summary>
            <typeparam name="T">Type of descendants to return.</typeparam>
            <param name="name">Name of the descendants.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllAncestors``1(System.String)">
            <summary>
            Find all ancestors of the given type.
            </summary>
            <typeparam name="T">Type of ancestors to return.</typeparam>
            <param name="name">Name of the ancestors.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllInScope``1(System.String)">
            <summary>
            Find all models of a given type in scope.
            </summary>
            <typeparam name="T">Type of models to find.</typeparam>
            <param name="name">Name of the models.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllSiblings(System.String)">
            <summary>
            Find all siblings with a given name.
            </summary>
            <param name="name">Name of the siblings.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllChildren(System.String)">
            <summary>
            Find all children with a given name.
            </summary>
            <param name="name">Name of the children.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllDescendants(System.String)">
            <summary>
            Find all descendants with a given name.
            </summary>
            <param name="name">Name of the descendants.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllAncestors(System.String)">
            <summary>
            Find all ancestors with a given name.
            </summary>
            <param name="name">Name of the ancestors.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllInScope(System.String)">
            <summary>
            Find all model in scope with a given name.
            </summary>
            <param name="name">Name of the models.</param>
        </member>
        <member name="M:Models.Core.Model.FindAllAncestors">
            <summary>
            Returns all ancestor models.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Model.FindAllDescendants">
            <summary>
            Returns all descendant models.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Model.FindAllSiblings">
            <summary>
            Returns all sibling models.
            </summary>
        </member>
        <member name="M:Models.Core.Model.FindAllChildren">
            <summary>
            Returns all children models.
            </summary>
        </member>
        <member name="M:Models.Core.Model.FindAllInScope">
            <summary>
            Returns all models which are in scope.
            </summary>
        </member>
        <member name="M:Models.Core.Model.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="M:Models.Core.Model.OnPreLink">
            <summary>
            Called immediately before a simulation has its links resolved and is run.
            It provides an opportunity for a simulation to restructure itself 
            e.g. add / remove models.
            </summary>
        </member>
        <member name="M:Models.Core.Model.IsChildAllowable(System.Type)">
            <summary>
            Return true iff a model with the given type can be added to the model.
            </summary>
            <param name="type">The child type.</param>
        </member>
        <member name="M:Models.Core.Model.FindByPath(System.String,System.Boolean)">
            <summary>
            Get the underlying variable object for the given path.
            Note that this can be a variable/property or a model.
            Returns null if not found.
            </summary>
            <param name="path">The path of the variable/model.</param>
            <param name="ignoreCase">Perform a case-insensitive search?</param>
            <remarks>
            See <see cref="T:Models.Core.Locater"/> for more info about paths.
            </remarks>
        </member>
        <member name="M:Models.Core.Model.ParentAllDescendants">
            <summary>
            Parent all descendant models.
            </summary>
        </member>
        <member name="M:Models.Core.Model.Locator">
            <summary>
            Gets the locater model.
            </summary>
            <remarks>
            This is overriden in class Simulation.
            </remarks>
        </member>
        <member name="M:Models.Core.Model.Document">
            <summary>
            Document the model, and any child models which should be documented.
            </summary>
            <remarks>
            It is a mistake to call this method without first resolving links.
            </remarks>
        </member>
        <member name="M:Models.Core.Model.GetModelDescription">
            <summary>
            Get a description of the model from the summary and remarks
            xml documentation comments in the source code.
            </summary>
            <remarks>
            Note that the returned tags are not inside a section.
            </remarks>
        </member>
        <member name="M:Models.Core.Model.DocumentChildren``1(System.Boolean)">
            <summary>
            Document all child models of a given type.
            </summary>
            <param name="withHeadings">If true, each child to be documented will be given its own section/heading.</param>
            <typeparam name="T">The type of models to be documented.</typeparam>
        </member>
        <member name="T:Models.Core.ModelCollectionFromResource">
            <summary>This class loads a model from a resource</summary>
        </member>
        <member name="P:Models.Core.ModelCollectionFromResource.ResourceName">
            <summary>Gets or sets the name of the resource.</summary>
        </member>
        <member name="P:Models.Core.ModelCollectionFromResource.DoSerialiseChildren">
            <summary>Allow children to be serialised?</summary>
        </member>
        <member name="P:Models.Core.ModelCollectionFromResource.ChildrenToSerialize">
            <summary>
            Gets all child models which are not part of the 'official' model resource.
            Generally speaking, this is all models which have been added by the user
            (e.g. cultivars).
            </summary>
            <remarks>
            This returns all child models which do not have a matching model in the
            resource model's children. A match is defined as having the same name and
            type.
            </remarks>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.OnCreated">
            <summary>
            We have just been deserialised. If from XML then load our model
            from resource.
            </summary>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.GetModelParameterNames">
            <summary>
            Get a list of parameter names for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.GetParametersFromToken(Newtonsoft.Json.Linq.JToken,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get a list of parameter names for the specified token.
            </summary>
            <param name="token">The token to extract parameter names from.</param>
            <param name="namePrefix">The prefix to add in front of each name.</param>
            <param name="parameterNames">The list of parameter names to add to.</param>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.CopyPropertiesFrom(Models.Core.IModel)">
            <summary>
            Copy all properties from the specified resource.
            </summary>
            <param name="from">Model to copy from</param>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.SetNotVisible(Models.Core.IModel,System.Boolean)">
            <summary>Sets the not visible.</summary>
            <param name="ModelFromResource">The model from resource.</param>
            <param name="invisible">If true, make model invisible. Else make model visible.</param>
        </member>
        <member name="T:Models.Core.ModelCollectionFromResource.ModelComparer">
            <summary>
            Class used to compare models. The models are considered equal iff they have
            the same name and type.
            </summary>
        </member>
        <member name="T:Models.Core.ModelTypes">
            <summary>
            Encapsulates a static list of models that have been discovered.
            </summary>
        </member>
        <member name="F:Models.Core.ModelTypes.modelTypes">
            <summary>Known model types</summary>
        </member>
        <member name="M:Models.Core.ModelTypes.GetModelTypes">
            <summary>Get a list of known model types.</summary>
        </member>
        <member name="T:Models.Core.Reference">
            <summary>
            Represents a member (field or property) of one model which
            references another model.
            </summary>
        </member>
        <member name="P:Models.Core.Reference.Member">
            <summary>
            The member which references a model.
            </summary>
        </member>
        <member name="P:Models.Core.Reference.Target">
            <summary>
            The model being referenced.
            </summary>
        </member>
        <member name="P:Models.Core.Reference.Model">
            <summary>
            The model referencing the target.
            </summary>
        </member>
        <member name="T:Models.Core.Replacements">
            <summary>
            A replacements model
            </summary>
        </member>
        <member name="M:Models.Core.Replacements.Document">
            <summary>
            This model is not documented in autodocs.
            </summary>
        </member>
        <member name="T:Models.Core.Run.CommenceArgs">
            <summary>The arguments for a commence event.</summary>
        </member>
        <member name="F:Models.Core.Run.CommenceArgs.CancelToken">
            <summary>The token to check for a job cancellation</summary>
        </member>
        <member name="M:Models.Core.Run.EmptyJob.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Core.Run.EmptyJob.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to start the job. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="P:Models.Core.Run.EmptyJob.Name">
            <summary>
            Name of the job.
            </summary>
        </member>
        <member name="P:Models.Core.Run.EmptyJob.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="T:Models.Core.Run.GenerateApsimXFiles">
            <summary>
            This class generates individual .apsimx files for each simulation in a runner.
            </summary>
            <remarks>
            Should this class implement IJobManager so that its interaction with the
            job runner is more explicit? It seems very odd to have to pass a Runner
            instance into the Generate method...
            </remarks>
        </member>
        <member name="T:Models.Core.Run.GenerateApsimXFiles.OnProgress">
            <summary>A delegate that gets called to indicate progress during an operation.</summary>
            <param name="progress">Progress (0 - 1).</param>
        </member>
        <member name="M:Models.Core.Run.GenerateApsimXFiles.SplitFile(System.String,System.UInt32,System.String,Models.Core.Run.GenerateApsimXFiles.OnProgress,System.Boolean)">
            <summary>
            Split an .apsimx file into smaller files, with each generated file
            containing the specified number of simulations.
            </summary>
            <param name="file">A runner containing a set of simulations.</param>
            <param name="simsPerFile">Number of simulations in each generated file.</param>
            <param name="path">Path to which the files will be saved.</param>
            <param name="progressCallBack">Invoked when the method needs to indicate progress.</param>
            <param name="collectExternalFiles">Collect all external files and store on path?</param>
            <returns>null for success or a list of exceptions.</returns>
        </member>
        <member name="M:Models.Core.Run.GenerateApsimXFiles.Generate(Models.Core.Run.Runner,System.UInt32,System.String,Models.Core.Run.GenerateApsimXFiles.OnProgress,System.Boolean)">
            <summary>
            Generates .apsimx files for each simulation in a runner.
            Returns the names of the generated files.
            </summary>
            <param name="runner">A runner containing a set of simulations.</param>
            <param name="simsPerFile">Number of simulations in each generated file.</param>
            <param name="path">Path which the files will be saved to.</param>
            <param name="progressCallBack">Invoked when the method needs to indicate progress.</param>
            <param name="collectExternalFiles">Collect all external files and store on path?</param>
            <returns>Names of the generated files.</returns>
        </member>
        <member name="T:Models.Core.Run.IPostSimulationTool">
            <summary>An interface for a post simulation tool</summary>
        </member>
        <member name="M:Models.Core.Run.IPostSimulationTool.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="T:Models.Core.Run.IReplacement">
            <summary>
            Defines an interface for performing a replacement of something
            in a simulation model.
            </summary>
        </member>
        <member name="M:Models.Core.Run.IReplacement.Replace(Models.Core.IModel)">
            <summary>Perform the actual replacement.</summary>
            <param name="simulation">The simulation to perform the replacements on.</param>
        </member>
        <member name="T:Models.Core.Run.IReportsStatus">
            <summary>
            Encapsulates a class that reports status.
            </summary>
        </member>
        <member name="P:Models.Core.Run.IReportsStatus.Status">
            <summary>
            Status message.
            </summary>
        </member>
        <member name="T:Models.Core.Run.IRunner">
            <summary>
            An interface for a class which runs things. This is used to abstract
            runner implementations away from the GUI.
            </summary>
        </member>
        <member name="P:Models.Core.Run.IRunner.ErrorHandler">
            <summary>
            If provided, this will be invoked whenever an error occurs.
            </summary>
        </member>
        <member name="E:Models.Core.Run.IRunner.AllSimulationsCompleted">
            <summary>
            Invoked when all jobs are completed.
            </summary>
        </member>
        <member name="P:Models.Core.Run.IRunner.Progress">
            <summary>
            Gets the aggregate progress of all jobs as a real number in range [0, 1].
            </summary>
        </member>
        <member name="P:Models.Core.Run.IRunner.Status">
            <summary>
            Current status of the running jobs.
            </summary>
        </member>
        <member name="M:Models.Core.Run.IRunner.Run">
            <summary>
            Run all simulations.
            </summary>
            <returns>A list of exception or null if no exceptions thrown.</returns>
        </member>
        <member name="M:Models.Core.Run.IRunner.Stop">
            <summary>
            Stop any running jobs.
            </summary>
        </member>
        <member name="T:Models.Core.Run.ISimulationDescriptionGenerator">
            <summary>
            An interface for a model that generates simulation descriptions.
            </summary>
        </member>
        <member name="M:Models.Core.Run.ISimulationDescriptionGenerator.GenerateSimulationDescriptions">
            <summary>Gets a list of simulation descriptions.</summary>
        </member>
        <member name="T:Models.Core.Run.ModelReplacement">
            <summary>
            This class encapsulates an instruction to replace a model.
            </summary>
        </member>
        <member name="F:Models.Core.Run.ModelReplacement.path">
            <summary>
            Model path to use to find the model to replace. If null, then
            multiple replacements are made using the model name for matching.
            </summary>
        </member>
        <member name="F:Models.Core.Run.ModelReplacement.replacement">
            <summary>The value to Model path to use to find the model to replace.</summary>
        </member>
        <member name="M:Models.Core.Run.ModelReplacement.#ctor(System.String,Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="pathOfModel">Model path to use to find the model to replace. If null, then multiple replacements are made using the model name for matching.</param>
            <param name="modelReplacement">The value to Model path to use to find the model to replace.</param>
        </member>
        <member name="M:Models.Core.Run.ModelReplacement.Replace(Models.Core.IModel)">
            <summary>Perform the actual replacement.</summary>
            <param name="simulation">The simulation to perform the replacements on.</param>
        </member>
        <member name="M:Models.Core.Run.ModelReplacement.ReplaceModel(Models.Core.IModel)">
            <summary>Perform the actual replacement.</summary>
        </member>
        <member name="M:Models.Core.Run.ModelReplacement.Equals(System.Object)">
            <summary>
            Determine value-equality to another object.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:Models.Core.Run.ModelReplacement.GetHashCode">
            <summary>
            Get a hash code for this model replacement instance.
            Different instance which are equal in value should return
            the same hash code.
            </summary>
        </member>
        <member name="T:Models.Core.Run.PropertyReplacement">
            <summary>
            This class encapsulates an instruction to replace a property value.
            </summary>
        </member>
        <member name="F:Models.Core.Run.PropertyReplacement.path">
            <summary>
            Model path to use to find the model to replace. If null, then
            multiple replacements are made using the model name for matching.
            </summary>
        </member>
        <member name="F:Models.Core.Run.PropertyReplacement.replacement">
            <summary>The value to Model path to use to find the model to replace.</summary>
        </member>
        <member name="M:Models.Core.Run.PropertyReplacement.#ctor(System.String,System.Object)">
            <summary>Constructor</summary>
            <param name="pathOfModel">Model path to use to find the model to replace. If null, then multiple replacements are made using the model name for matching.</param>
            <param name="propertyValueReplacement">The value to Model path to use to find the model to replace.</param>
        </member>
        <member name="M:Models.Core.Run.PropertyReplacement.Replace(Models.Core.IModel)">
            <summary>Perform the actual replacement.</summary>
            <param name="simulation">The simulation to perform the replacements on.</param>
        </member>
        <member name="M:Models.Core.Run.PropertyReplacement.Equals(System.Object)">
            <summary>
            Check value-equality with another property replacement instance.
            </summary>
            <param name="obj">The second object instance.</param>
        </member>
        <member name="M:Models.Core.Run.PropertyReplacement.GetHashCode">
            <summary>
            Get a hash code for this property replacement instance.
            </summary>
        </member>
        <member name="T:Models.Core.Run.Runner">
            <summary>
            An class for encapsulating a list of simulations that are ready
            to be run. An instance of this class can be used with a job runner.
            </summary>
        </member>
        <member name="F:Models.Core.Run.Runner.jobs">
            <summary>The descriptions of simulations that we are going to run.</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.jobRunner">
            <summary>The job runner being used.</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.useFixedRunner">
            <summary>
            Use the pre-set job runner?
            </summary>
        </member>
        <member name="F:Models.Core.Run.Runner.startTime">
            <summary>The stop watch we can use to time all runs.</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.runType">
            <summary>How should the simulations be run?</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.wait">
            <summary>Wait until all simulations are complete?</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.numberOfProcessors">
            <summary>Number of CPU processes to use. -1 indicates all processes.</summary>
        </member>
        <member name="T:Models.Core.Run.Runner.RunTypeEnum">
            <summary>An enumerated type for specifying how a series of simulations are run.</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.RunTypeEnum.SingleThreaded">
            <summary>Run using a single thread - each job synchronously.</summary>
        </member>
        <member name="F:Models.Core.Run.Runner.RunTypeEnum.MultiThreaded">
            <summary>Run using multiple cores - each job asynchronously.</summary>
        </member>
        <member name="P:Models.Core.Run.Runner.ErrorHandler">
            <summary>
            If provided, this will be invoked whenever an error occurs.
            </summary>
            <value></value>
        </member>
        <member name="P:Models.Core.Run.Runner.Progress">
            <summary>
            Gets the aggregate progress of all jobs as a real number in range [0, 1].
            </summary>
        </member>
        <member name="P:Models.Core.Run.Runner.Status">
            <summary>
            Current status of the running jobs.
            </summary>
        </member>
        <member name="M:Models.Core.Run.Runner.#ctor(System.Collections.Generic.IEnumerable{Models.Core.IModel},System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},Models.Core.Run.Runner.RunTypeEnum,System.Boolean,System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="relativeTo">The model to use to search for simulations to run.</param>
            <param name="runSimulations">Run simulations?</param>
            <param name="runPostSimulationTools">Run post simulation tools?</param>
            <param name="runTests">Run tests?</param>
            <param name="simulationNamesToRun">Only run these simulations.</param>
            <param name="runType">How should the simulations be run?</param>
            <param name="wait">Wait until all simulations are complete?</param>
            <param name="numberOfProcessors">Number of CPU processes to use. -1 indicates all processes.</param>
            <param name="simulationNamePatternMatch">A regular expression used to match simulation names to run.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.#ctor(Models.Core.IModel,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},Models.Core.Run.Runner.RunTypeEnum,System.Boolean,System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="relativeTo">The model to use to search for simulations to run.</param>
            <param name="runSimulations">Run simulations?</param>
            <param name="runPostSimulationTools">Run post simulation tools?</param>
            <param name="runTests">Run tests?</param>
            <param name="simulationNamesToRun">Only run these simulations.</param>
            <param name="runType">How should the simulations be run?</param>
            <param name="wait">Wait until all simulations are complete?</param>
            <param name="numberOfProcessors">Number of CPU processes to use. -1 indicates all processes.</param>
            <param name="simulationNamePatternMatch">A regular expression used to match simulation names to run.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.#ctor(System.String,System.Boolean,System.Boolean,Models.Core.Run.Runner.RunTypeEnum,System.Boolean,System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="pathAndFileSpec">Path and file specification for finding files.</param>
            <param name="recurse">Recurse into child folder?</param>
            <param name="runTests">Run tests?</param>
            <param name="runType">How should the simulations be run?</param>
            <param name="wait">Wait until all simulations are complete?</param>
            <param name="numberOfProcessors">Number of CPU processes to use. -1 indicates all processes.</param>
            <param name="simulationNamePatternMatch">A regular expression used to match simulation names to run.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.#ctor(System.String[],System.Boolean,Models.Core.Run.Runner.RunTypeEnum,System.Boolean,System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="files">Files to be run.</param>
            <param name="runTests">Run tests?</param>
            <param name="runType">How should the simulations be run?</param>
            <param name="wait">Wait until all simulations are complete?</param>
            <param name="numberOfProcessors">Number of CPU processes to use. -1 indicates all processes.</param>
            <param name="simulationNamePatternMatch">A regular expression used to match simulation names to run.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.Use(APSIM.Shared.JobRunning.JobRunner)">
            <summary>
            Use the given job runner to run jobs.
            </summary>
            <param name="runner">The job runner to be used.</param>
        </member>
        <member name="E:Models.Core.Run.Runner.SimulationCompleted">
            <summary>Invoked every time a job has completed.</summary>
        </member>
        <member name="E:Models.Core.Run.Runner.SimulationGroupCompleted">
            <summary>Invoked every time a job has completed.</summary>
        </member>
        <member name="E:Models.Core.Run.Runner.AllSimulationsCompleted">
            <summary>Invoked when all jobs are completed.</summary>
        </member>
        <member name="P:Models.Core.Run.Runner.ExceptionsThrown">
            <summary>A list of exceptions thrown during simulation runs. Will be null when no exceptions found.</summary>
        </member>
        <member name="P:Models.Core.Run.Runner.ElapsedTime">
            <summary>The time the run took.</summary>
        </member>
        <member name="M:Models.Core.Run.Runner.Simulations">
            <summary>An enumerator for simulations in the collection.</summary>
        </member>
        <member name="M:Models.Core.Run.Runner.Run">
            <summary>
            Run all simulations.
            </summary>
            <returns>A list of exception or null if no exceptions thrown.</returns>
        </member>
        <member name="M:Models.Core.Run.Runner.Stop">
            <summary>
            Stop any running jobs.
            </summary>
        </member>
        <member name="M:Models.Core.Run.Runner.OnJobCompleted(System.Object,APSIM.Shared.JobRunning.JobCompleteArguments)">
            <summary>
            Invoked when a job is completed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.OnSimulationGroupCompleted(System.Object,System.EventArgs)">
            <summary>
            Invoked when an entire simulation group has completed running.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.OnAllCompleted(System.Object,APSIM.Shared.JobRunning.AllCompleteArguments)">
            <summary>Handler for when all simulations have completed.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Core.Run.Runner.AddException(System.Exception)">
            <summary>
            Add an exception to our list of exceptions.
            </summary>
            <param name="err">The exception to add.</param>
        </member>
        <member name="T:Models.Core.Run.Runner.AllJobsCompletedArgs">
            <summary>Arguments for all jobs completed event.</summary>
        </member>
        <member name="P:Models.Core.Run.Runner.AllJobsCompletedArgs.AllExceptionsThrown">
            <summary>The exception thrown by the job. Can be null for no exception.</summary>
        </member>
        <member name="P:Models.Core.Run.Runner.AllJobsCompletedArgs.ElapsedTime">
            <summary>Amount of time all jobs took to run.</summary>
        </member>
        <member name="M:Models.Core.Run.Runner.DisposeStorage">
            <summary>
            Dispose (close) the Datastore. Use with caution!
            This is intended to be used when running from the Models.exe command line
            When we're running in the GUI, we normally want to keep the Datastore open when the run completes.
            </summary>
        </member>
        <member name="T:Models.Core.Run.SimulationDescription">
            <summary>
            Encapsulates all the bits that are need to construct a simulation
            and the associated metadata describing a simulation.
            </summary>
        </member>
        <member name="F:Models.Core.Run.SimulationDescription.topLevelModel">
            <summary>The top level simulations instance.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationDescription.baseSimulation">
            <summary>The base simulation.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationDescription.replacementsToApply">
            <summary>A list of all replacements to apply to simulation to run.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationDescription.doClone">
            <summary>Do we clone the simulation before running?</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.SimulationToRun">
            <summary>
            The actual simulation object to run
            </summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.#ctor(Models.Core.Simulation,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sim">The simulation to run.</param>
            <param name="name">The name of the simulation.</param>
            <param name="clone">Clone the simulation passed in before running?</param>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Name">
            <summary>name</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Descriptors">
            <summary>Gets / sets the list of descriptors for this simulaton.</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Storage">
            <summary>Gets or sets the DataStore for this simulaton.</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Status">
            <summary>Status message.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.AddOverride(Models.Core.Run.IReplacement)">
            <summary>
            Add an override to replace an existing model, as specified by the
            path, with a replacement model.
            </summary>
            <param name="replacement">An instance of a replacement that needs to be applied when simulation is run.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.AddOverride(System.String,System.Object)">
            <summary>
            Add a property override to replace an existing value, as specified by a
            path.
            </summary>
            <param name="path">The path to use to locate the model to replace.</param>
            <param name="replacement">The model to use as the replacement.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.Prepare">
            <summary>
            Prepare the simulation to be run.
            </summary>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.Run(System.Threading.CancellationTokenSource,System.Collections.Generic.IEnumerable{Models.Core.Run.IReplacement})">
            <summary>
            Run a simulation with a number of specified changes.
            </summary>
            <param name="cancelToken"></param>
            <param name="changes"></param>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.Run(System.Threading.CancellationTokenSource)">
            <summary>Run the simulation.</summary>
            <param name="cancelToken"></param>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.ToSimulation">
            <summary>
            Convert the simulation decription to a simulation.
            path.
            </summary>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.HasDescriptor(Models.Core.Run.SimulationDescription.Descriptor)">
            <summary>
            Return true if this simulation has a descriptor.
            </summary>
            <param name="descriptor">The descriptor to search for.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.AddReplacements">
            <summary>Add any replacements to all simulation descriptions.</summary>
        </member>
        <member name="T:Models.Core.Run.SimulationDescription.Descriptor">
            <summary>Encapsulates a descriptor for a simulation.</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Descriptor.Name">
            <summary>The name of the descriptor.</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationDescription.Descriptor.Value">
            <summary>The value of the descriptor.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.Descriptor.#ctor(System.String,System.String)">
            <summary>Constructor</summary>
            <param name="name">Name of the descriptor.</param>
            <param name="value">Value of the descriptor.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationDescription.Equals(System.Collections.Generic.List{Models.Core.Run.SimulationDescription.Descriptor},System.Collections.Generic.List{Models.Core.Run.SimulationDescription.Descriptor})">
            <summary>Compare two list of descriptors for equality.</summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>true if the are the same.</returns>
        </member>
        <member name="T:Models.Core.Run.SimulationGroup">
            <summary>
            Encapsulates a collection of jobs that are to be run. A job can be a simulation run or 
            a class instance that implements IRunnable e.g. EXCEL input run.
            </summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.relativeTo">
            <summary>The model to use to search for simulations to run.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.rootModel">
            <summary>Top level model.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.runSimulations">
            <summary>Run simulations?</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.runPostSimulationTools">
            <summary>Run post simulation tools?</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.runTests">
            <summary>Run tests?</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.initialised">
            <summary>Has this instance been initialised?</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.simulationNamesToRun">
            <summary>Specific simulation names to run.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.patternMatch">
            <summary>A pattern used to determine simulations to run.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.storage">
            <summary>The related storage model.</summary>
        </member>
        <member name="F:Models.Core.Run.SimulationGroup.startTime">
            <summary>Time when job collection first started.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.#ctor(Models.Core.IModel,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>Contstructor</summary>
            <param name="relativeTo">The model to use to search for simulations to run.</param>
            <param name="runSimulations">Run simulations?</param>
            <param name="runPostSimulationTools">Run post simulation tools?</param>
            <param name="runTests">Run tests?</param>
            <param name="simulationNamesToRun">Only run these simulations.</param>
            <param name="simulationNamePatternMatch">A regular expression used to match simulation names to run.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.#ctor(System.String,System.Boolean,System.String)">
            <summary>Contstructor</summary>
            <param name="fileName">The name of the file to run.</param>
            <param name="runTests">Run tests?</param>
            <param name="simulationNamePatternMatch">A regular expression used to match simulation names to run.</param>
        </member>
        <member name="P:Models.Core.Run.SimulationGroup.FileName">
            <summary>Name of file where the jobs came from.</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationGroup.PrePostExceptionsThrown">
            <summary>A list of exceptions thrown before and after the simulation runs. Will be null when no exceptions found.</summary>
        </member>
        <member name="P:Models.Core.Run.SimulationGroup.Status">
            <summary>
            Status of the jobs.
            </summary>
            <remarks>
            I'm not sure that this really belongs here, but since this class
            handles the running of post-simulation tools, it kind of has to be here.
            </remarks>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.FindAllSimulationNames(Models.Core.IModel,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            List all simulation names beneath a given model.
            </summary>
            <param name="model"></param>
            <param name="simulationNamesToRun"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.FindDuplicateSimulationNames">
            <summary>Find and return a list of duplicate simulation names.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.PreRun">
            <summary>Called once to do initialisation before any jobs are run. Should throw on error.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.PostAllRuns">
            <summary>Called once when all jobs have completed running. Should throw on error.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.Initialise">
            <summary>Initialise the instance.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.FindListOfSimulationsToRun(Models.Core.IModel,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Determine the list of jobs to run</summary>
            <param name="relativeTo">The model to use to search for simulations to run.</param>
            <param name="simulationNamesToRun">Only run these simulations.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.SimulationNameIsMatched(System.String)">
            <summary>Return true if simulation name is a match.</summary>
            <param name="simulationName">Simulation name to look for.</param>
            <returns>True if matched.</returns>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.RunPostSimulationTools">
            <summary>Run all post simulation tools.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.RunTests">
            <summary>Run all tests.</summary>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.AddException(System.Exception)">
            <summary>
            Add an exception to our list of exceptions.
            </summary>
            <param name="err">The exception to add.</param>
        </member>
        <member name="M:Models.Core.Run.SimulationGroup.DisposeStorage">
            <summary>
            Tells us to Dispose (close) our datastore
            </summary>
        </member>
        <member name="T:Models.Core.ScopingRules">
            <summary>
            Implements APSIMs scoping rules.
            </summary>
        </member>
        <member name="M:Models.Core.ScopingRules.FindAll(Models.Core.IModel)">
            <summary>
            Return a list of models in scope to the one specified.
            </summary>
            <param name="relativeTo">The model to base scoping rules on</param>
        </member>
        <member name="M:Models.Core.ScopingRules.FindScopedParentModel(Models.Core.IModel)">
            <summary>
            Find a parent of 'relativeTo' that has a [ScopedModel] attribute. 
            Returns null if non found.
            </summary>
            <param name="relativeTo">The model to use as a base.</param>
        </member>
        <member name="M:Models.Core.ScopingRules.InScopeOf(Models.Core.IModel,Models.Core.IModel)">
            <summary>
            Returns true iff model x is in scope of model y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Models.Core.ScopingRules.IsScopedModel(Models.Core.IModel)">
            <summary>
            Return true if model is a scoped model
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ScopingRules.Clear">
            <summary>
            Clear the current cache
            </summary>
        </member>
        <member name="T:Models.Core.ScriptCompiler">
            <summary>Encapsulates the ability to compile a c# script into an assembly.</summary>
        </member>
        <member name="M:Models.Core.ScriptCompiler.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Models.Core.ScriptCompiler.Compile(System.String,Models.Core.IModel,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>Compile a c# script.</summary>
            <param name="code">The c# code to compile.</param>
            <param name="model">The model owning the script.</param>
            <param name="referencedAssemblies">Optional referenced assemblies.</param>
            <returns>Compile errors or null if no errors.</returns>
        </member>
        <member name="M:Models.Core.ScriptCompiler.GetReferenceAssemblies(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},System.String)">
            <summary>Gets a list of assembly names that are needed for compiling.</summary>
            <param name="referencedAssemblies"></param>
            <param name="modelName">Name of model.</param>
        </member>
        <member name="M:Models.Core.ScriptCompiler.CompileTextToAssembly(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},System.String@)">
            <summary>
            Compile the specified 'code' into an executable assembly. If 'assemblyFileName'
            is null then compile to an in-memory assembly.
            </summary>
            <param name="code">The code to compile.</param>
            <param name="referencedAssemblies">Any referenced assemblies.</param>
            <param name="sourceName">Path to a file on disk containing the source.</param>
            <returns>Any compile errors or null if compile was successful.</returns>
        </member>
        <member name="M:Models.Core.ScriptCompiler.ResolveManagerAssemblies(System.Object,System.ResolveEventArgs)">
            <summary>A handler to resolve the loading of manager assemblies when binary deserialization happens.</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Models.Core.ScriptCompiler.Cleanup">
            <summary>Cleanup old files.</summary>
        </member>
        <member name="T:Models.Core.ScriptCompiler.Results">
            <summary>Encapsulates results from a compile.</summary>
        </member>
        <member name="M:Models.Core.ScriptCompiler.Results.#ctor(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Models.Core.ScriptCompiler.Results.#ctor(System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.Results.ErrorMessages">
            <summary>Compile error messages. Null for no errors.</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.Results.WasCompiled">
            <summary>Was the script compiled or was it already up to date?</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.Results.Instance">
            <summary>A newly created instance.</summary>
        </member>
        <member name="T:Models.Core.ScriptCompiler.PreviousCompilation">
            <summary>Encapsulates a previous compilation.</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.PreviousCompilation.ModelFullPath">
            <summary>The model full path.</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.PreviousCompilation.Code">
            <summary>The code that was compiled.</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.PreviousCompilation.CompiledAssembly">
            <summary>The compiled assembly.</summary>
        </member>
        <member name="P:Models.Core.ScriptCompiler.PreviousCompilation.Reference">
            <summary>
            A reference to the compiled assembly
            </summary>
        </member>
        <member name="T:Models.Core.Simulation">
            <summary>
            A simulation model
            </summary>
        </member>
        <member name="E:Models.Core.Simulation.Commencing">
            <summary>Invoked when simulation is about to commence.</summary>
        </member>
        <member name="E:Models.Core.Simulation.DoCommence">
            <summary>Invoked to signal start of simulation.</summary>
        </member>
        <member name="E:Models.Core.Simulation.Completed">
            <summary>Invoked when the simulation is completed.</summary>
        </member>
        <member name="P:Models.Core.Simulation.Area">
            <summary>Return total area.</summary>
        </member>
        <member name="T:Models.Core.Simulation.ErrorLevel">
            <summary>
            An enum that is used to indicate message severity when writing messages to the .db
            </summary>
        </member>
        <member name="F:Models.Core.Simulation.ErrorLevel.Information">
            <summary>Information</summary>
        </member>
        <member name="F:Models.Core.Simulation.ErrorLevel.Warning">
            <summary>Warning</summary>
        </member>
        <member name="F:Models.Core.Simulation.ErrorLevel.Error">
            <summary>Error</summary>
        </member>
        <member name="T:Models.Core.Simulation.MessageType">
            <summary>
            An enum that is used to indicate message severity when writing messages to the status window.
            </summary>
        </member>
        <member name="F:Models.Core.Simulation.MessageType.Information">
            <summary>Information</summary>
        </member>
        <member name="F:Models.Core.Simulation.MessageType.Warning">
            <summary>Warning</summary>
        </member>
        <member name="P:Models.Core.Simulation.Scope">
            <summary>Returns the object responsible for scoping rules.</summary>
        </member>
        <member name="F:Models.Core.Simulation.locater">
            <summary>A locater object for finding models and variables.</summary>
        </member>
        <member name="P:Models.Core.Simulation.Locater">
            <summary>Cache to speed up scope lookups.</summary>
            <value>The locater.</value>
        </member>
        <member name="P:Models.Core.Simulation.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="P:Models.Core.Simulation.IsRunning">
            <summary>Is the simulation running?</summary>
        </member>
        <member name="P:Models.Core.Simulation.Descriptors">
            <summary>A list of keyword/value meta data descriptors for this simulation.</summary>
        </member>
        <member name="M:Models.Core.Simulation.Get(System.String)">
            <summary>Gets the value of a variable or model.</summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Simulation.GetVariableObject(System.String)">
            <summary>Get the underlying variable object for the given path.</summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Simulation.Set(System.String,System.Object)">
            <summary>Sets the value of a variable. Will throw if variable doesn't exist.</summary>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="P:Models.Core.Simulation.FileName">
            <summary>Return the filename that this simulation sits in.</summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Models.Core.Simulation.Services">
            <summary>Collection of models that will be used in resolving links. Can be null.</summary>
        </member>
        <member name="P:Models.Core.Simulation.Status">
            <summary>Status message.</summary>
        </member>
        <member name="M:Models.Core.Simulation.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation has completed. Clear scope and locator
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Core.Simulation.ClearCaches">
            <summary>
            Clears the existing Scoping Rules
            </summary>
        </member>
        <member name="M:Models.Core.Simulation.GenerateSimulationDescriptions">
            <summary>Gets the next job to run</summary>
        </member>
        <member name="M:Models.Core.Simulation.Prepare">
            <summary>
            Prepare the simulation for running.
            </summary>
        </member>
        <member name="M:Models.Core.Simulation.Run(System.Threading.CancellationTokenSource)">
            <summary>
            Runs the simulation on the current thread and waits for the simulation
            to complete before returning to caller. Simulation is NOT cloned before
            running. Use instance of Runner to get more options for running a 
            simulation or groups of simulations. 
            </summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="M:Models.Core.Simulation.RemoveDisabledModels(Models.Core.IModel)">
            <summary>
            Remove all disabled child models from the specified model.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Models.Core.Simulation.Locator">
            <summary>
            Gets the locater model.
            </summary>
        </member>
        <member name="M:Models.Core.Simulation.Document">
            <summary>
            Document the model, and any child models which should be documented.
            </summary>
            <remarks>
            It is a mistake to call this method without first resolving links.
            </remarks>
        </member>
        <member name="T:Models.Core.SimulationException">
            <summary>
            An exception thrown during a simulation run.
            </summary>
        </member>
        <member name="P:Models.Core.SimulationException.SimulationName">
            <summary>
            Name of the simulation in which the error was thrown.
            </summary>
        </member>
        <member name="P:Models.Core.SimulationException.FileName">
            <summary>
            Name of the file containing the simulation.
            </summary>
        </member>
        <member name="M:Models.Core.SimulationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor provided for binary deserialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Models.Core.SimulationException.#ctor(System.String,System.String,System.String)">
            <summary>
            /// Create a <see cref="T:Models.Core.SimulationException" /> instance.
            </summary>
            <param name="message">Error message.</param>
            <param name="simulationName">Name of the simulation in which the error was thrown.</param>
            <param name="fileName">Name of the file containing the simulation.</param>
        </member>
        <member name="M:Models.Core.SimulationException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            /// Create a <see cref="T:Models.Core.SimulationException" /> instance.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception data.</param>
            <param name="simulationName">Name of the simulation in which the error was thrown.</param>
            <param name="fileName">Name of the file containing the simulation.</param>
        </member>
        <member name="M:Models.Core.SimulationException.ToString">
            <summary>
            Convert to string.
            </summary>
        </member>
        <member name="M:Models.Core.SimulationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get object data for serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Models.Core.Simulations">
            <summary>
            Encapsulates a collection of simulations. It is responsible for creating this collection, changing the structure of the components within the simulations, renaming components, adding new ones, deleting components. The user interface talks to an instance of this class.
            </summary>
        </member>
        <member name="P:Models.Core.Simulations.ExplorerWidth">
            <summary>Gets or sets the width of the explorer.</summary>
            <value>The width of the explorer.</value>
        </member>
        <member name="P:Models.Core.Simulations.Version">
            <summary>Gets or sets the version.</summary>
        </member>
        <member name="P:Models.Core.Simulations.FileName">
            <summary>The name of the file containing the simulations.</summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Models.Core.Simulations.Links">
            <summary>Returns an instance of a links service</summary>
        </member>
        <member name="P:Models.Core.Simulations.ScriptCompiler">
            <summary>Gets a c# script compiler.</summary>
        </member>
        <member name="M:Models.Core.Simulations.GetEventService(Models.Core.IModel)">
            <summary>Returns an instance of an events service</summary>
            <param name="model">The model the service is for</param>
        </member>
        <member name="M:Models.Core.Simulations.GetLocatorService(Models.Core.IModel)">
            <summary>Returns an instance of an locator service</summary>
            <param name="model">The model the service is for</param>
        </member>
        <member name="M:Models.Core.Simulations.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.Simulations.Create(System.Collections.Generic.IEnumerable{Models.Core.IModel})">
            <summary>
            Create a simulations model
            </summary>
            <param name="children">The child models</param>
        </member>
        <member name="P:Models.Core.Simulations.ApsimVersion">
            <summary>
            Return the current APSIM version number.
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.GetApsimVersion">
            <summary>
            Return the current APSIM version number.
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.AddCheckpoint(System.String)">
            <summary>
            Checkpoint the simulation.
            </summary>
            <param name="checkpointName">Name of checkpoint</param>
        </member>
        <member name="M:Models.Core.Simulations.RevertCheckpoint(System.String)">
            <summary>
            Revert this object to a previous one.
            </summary>
            <param name="checkpointName">Name of checkpoint</param>
            <returns>A new simulations object that represents the file on disk</returns>
        </member>
        <member name="M:Models.Core.Simulations.Write(System.String)">
            <summary>Write the specified simulation set to the specified filename</summary>
            <param name="FileName">Name of the file.</param>
        </member>
        <member name="M:Models.Core.Simulations.SetFileNameInAllSimulations">
            <summary>Look through all models. For each simulation found set the filename.</summary>
        </member>
        <member name="M:Models.Core.Simulations.ClearLinks">
            <summary>
            Nulls the link object, which will force it to be recreated when it's needed
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.GetServices">
            <summary>
            Gets the services objects.
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.CreateLinks">
            <summary>Create a links object</summary>
        </member>
        <member name="M:Models.Core.Simulations.ClearSimulationReferences">
            <summary>
            A cleanup routine to be used when we close this set of simulations
            The goal is to avoid cyclic references that can prevent the garbage collector
            from clearing the memory we have used
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.FindAllReferencedFiles">
            <summary>Find all referenced files from all models.</summary>
        </member>
        <member name="M:Models.Core.Simulations.Document">
            <summary>
            Get a list of tags which describe the model.
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.DocumentModel(System.String,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32)">
            <summary>Documents the specified model.</summary>
            <param name="modelNameToDocument">The model name to document.</param>
            <param name="tags">The auto doc tags.</param>
            <param name="headingLevel">The starting heading level.</param>
        </member>
        <member name="T:Models.Core.VariableObject">
            <summary>
            This class encapsulates a single property of a model. Has properties for getting the value
            of the property, the value in the base model and the default value as definned in the 
            source code.
            </summary>
        </member>
        <member name="M:Models.Core.VariableObject.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Name">
            <summary>
            Return the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Value">
            <summary>
            Returns the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Description">
            <summary>
            Returns a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Units">
            <summary>
            Returns the units of the property (in brackets) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableObject.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="P:Models.Core.VariableObject.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.VariableObject.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="T:Models.Core.VariableField">
            <summary>
            This class encapsulates a single field of a model. Has properties for getting the value
            of the property, the value in the base model and the default value as definned in the 
            source code.
            </summary>
        </member>
        <member name="M:Models.Core.VariableField.#ctor(System.Object,System.Reflection.FieldInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Name">
            <summary>
            Return the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Value">
            <summary>
            Returns the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Description">
            <summary>
            Returns a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Units">
            <summary>
            Returns the units of the property (in brackets) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableField.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="P:Models.Core.VariableField.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.VariableField.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="T:Models.Core.VariableComposite">
            <summary>
            This class encapsulates a list of IVariables that are evaluated when
            the Value property is called.
            source code.
            </summary>
        </member>
        <member name="F:Models.Core.VariableComposite.name">
            <summary>
            The name of the composite variable
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Variables">
            <summary>
            The list of variables to be evaluated
            </summary>
        </member>
        <member name="M:Models.Core.VariableComposite.#ctor(System.String,System.Collections.Generic.List{Models.Core.IVariable})">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableComposite" /> class.
            </summary>
            <param name="name">The name</param>
            <param name="variables">The list of variables to be evaluated</param>
        </member>
        <member name="P:Models.Core.VariableComposite.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Description">
            <summary>
            Gets a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Units">
            <summary>
            Gets the units of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableComposite.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="P:Models.Core.VariableComposite.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="T:Models.Core.VariableExpression">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="F:Models.Core.VariableExpression.expression">
            <summary>
            The expression string.
            </summary>
        </member>
        <member name="F:Models.Core.VariableExpression.fn">
            <summary>
            An instance of the expression evaluator once the expression has been parsed.
            </summary>
        </member>
        <member name="M:Models.Core.VariableExpression.#ctor(System.String,Models.Core.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableExpression" /> class.
            </summary>
            <param name="expression">The string expression</param>
            <param name="model">The model</param>
        </member>
        <member name="P:Models.Core.VariableExpression.Object">
            <summary>
            A reference to the variables class so that getting of variable values is possible.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Description">
            <summary>
            Gets a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Units">
            <summary>
            Gets the units of the property (in brackets) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="M:Models.Core.VariableExpression.FillVariableNames">
            <summary>
            Fill the function variables with names.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableExpression.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="P:Models.Core.VariableExpression.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="T:Models.Core.VariableMethod">
            <summary>
            Encapsulates a discovered method of a model. 
            </summary>
        </member>
        <member name="F:Models.Core.VariableMethod.method">
            <summary>
            Gets or sets the PropertyInfo for this property.
            </summary>
        </member>
        <member name="F:Models.Core.VariableMethod.arguments">
            <summary>
            A list of arguments to pass to the method
            </summary>
        </member>
        <member name="M:Models.Core.VariableMethod.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableMethod" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="method">The PropertyInfo for this property</param>
        </member>
        <member name="M:Models.Core.VariableMethod.#ctor(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableMethod" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="method">The PropertyInfo for this property</param>
            <param name="arguments">An array of arguments to pass to the method</param>
        </member>
        <member name="P:Models.Core.VariableMethod.Object">
            <summary>
            Gets or sets the underlying model that this property belongs to.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Name">
            <summary>
            Return the name of the method.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Description">
            <summary>
            Gets the description of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Units">
            <summary>
            Gets the units of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.AllowableUnits">
            <summary>
            Gets a list of allowable units
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.IsReadOnly">
            <summary>
            Gets a value indicating whether the method is readonly.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Metadata">
            <summary>
            Gets the metadata for each layer. Returns new string[0] if none available.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.DataType">
            <summary>
            Gets the data type of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Value">
            <summary>
            Gets the values of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Display">
            <summary>
            Gets the associated display type for the related method.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableMethod.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="P:Models.Core.VariableMethod.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="T:Models.Core.VariableProperty">
            <summary>
            Encapsulates a discovered property of a model. Provides properties for
            returning information about the property. 
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.property">
            <summary>
            Gets or sets the PropertyInfo for this property.
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.lowerArraySpecifier">
            <summary>
            An optional lower bound array index.
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.upperArraySpecifier">
            <summary>
            An optional upper bound array index.
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.elementPropertyName">
            <summary>The name of the property to call on each array element.</summary>
        </member>
        <member name="M:Models.Core.VariableProperty.#ctor(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableProperty" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="property">The PropertyInfo for this property</param>
            <param name="arraySpecifier">An optional array specification e.g. 1:3</param>
        </member>
        <member name="M:Models.Core.VariableProperty.#ctor(System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableProperty" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="elementPropertyName">The name of the property to call on each array element.</param>
            <param name="arraySpecifier">An optional array specification e.g. 1:3</param>
        </member>
        <member name="P:Models.Core.VariableProperty.Object">
            <summary>
            Gets or sets the underlying model that this property belongs to.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Name">
            <summary>
            Return the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Description">
            <summary>
            Gets the description of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Tooltip">
            <summary>
            Gets a tooltip for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Caption">
            <summary>
            Gets the text to use as a label for the property.
            This is derived from the BriefLabel attribute or,
            if that does not exist, from the Description attribute
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Units">
            <summary>
            Gets the units of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.GetEnumDescription(System.Enum)">
            <summary>
            Looks for a description string associated with an enumerated value
            Adapted from http://blog.spontaneouspublicity.com/associating-strings-with-enums-in-c
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Core.VariableProperty.NameLabelPair">
            <summary>
            Simple structure to hold both a name and an associated label
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.NameLabelPair.Name">
            <summary>
            Name of an object
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.NameLabelPair.Label">
            <summary>
            Display label for the object
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.NameLabelPair.#ctor(System.String,System.String)">
            <summary>
            Constructs a NameLabelPair
            </summary>
            <param name="name">Name of the object</param>
            <param name="label">Display label for the object</param>
        </member>
        <member name="P:Models.Core.VariableProperty.AllowableUnits">
            <summary>
            Gets a list of allowable units
            The list contains both the actual name and a display name for each entry
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.IsReadOnly">
            <summary>
            Gets a value indicating whether the property is readonly.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Metadata">
            <summary>
            Gets the metadata for each layer. Returns new string[0] if none available.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Value">
            <summary>
            Gets the values of the property
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.ProcessPropertyOfArrayElement">
            <summary>
            Special case where trying to get a property of an array(IList). In this case
            we want to return the property value for all items in the array.
            e.g. Maize.Root.Zones.WaterUptake
            Zones is a List of ZoneState objects.
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.ValueAsString">
            <summary>
            Returns the string representation of our value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Core.VariableProperty.AsString(System.Object)">
            <summary>
            Returns the string representation of a scalar value. 
            Uses InvariantCulture when converting doubles
            to ensure a consistent representation of Nan and Inf
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.VariableProperty.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Format">
            <summary>
            Gets the display format for this property e.g. 'N3'. Can return null if not present.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.CropName">
            <summary>
            Gets the crop name of the property or null if this property isn't a crop one.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Total">
            <summary>
            Gets the sum of all values in this array property if the property has been 
            marked as [DisplayTotal]. Otherwise return double.Nan
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Display">
            Gets the associated display type for the related property.
        </member>
        <member name="M:Models.Core.VariableProperty.SetFromString(System.String)">
            <summary>
            Set the value of this object via a string.
            </summary>
            <param name="value">The string value to set this property to</param>
        </member>
        <member name="M:Models.Core.VariableProperty.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="M:Models.Core.VariableProperty.EnumToStrings(System.Object)">
            <summary>
            Convert the specified enum to a list of strings.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.VariableProperty.ParseEnum(System.Type,System.Object)">
            <summary>
            Parse the specified object to an enum. 
            Similar to Enum.Parse(), but this will check against the enum's description attribute.
            </summary>
            <param name="obj">Object to parse. Should probably be a string.</param>
            <param name="t">Enum in which we will try to find a matching member.</param>
            <returns>Enum member.</returns>
        </member>
        <member name="M:Models.Core.VariableProperty.ProcessArraySpecifier(System.String)">
            <summary>
            Convert a string array specifier into integer lower and upper bounds.
            </summary>
            <param name="arraySpecifier">The array specifier.</param>
        </member>
        <member name="P:Models.Core.VariableProperty.Summary">
            <summary>Return the summary comments from the source code.</summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Remarks">
            <summary>Return the remarks comments from the source code.</summary>
        </member>
        <member name="T:Models.Core.Zone">
            <summary>
            A generic system that can have children
            </summary>
        </member>
        <member name="P:Models.Core.Zone.Area">
            <summary>Area of the zone.</summary>
        </member>
        <member name="P:Models.Core.Zone.Slope">
            <summary>Gets or sets the slope.</summary>
        </member>
        <member name="P:Models.Core.Zone.AspectAngle">
            <summary>Angle of the aspect, from north (degrees).</summary>
        </member>
        <member name="P:Models.Core.Zone.Altitude">
            <summary>Local altitude (meters above sea level).</summary>
        </member>
        <member name="P:Models.Core.Zone.Plants">
            <summary>Return a list of plant models.</summary>
        </member>
        <member name="P:Models.Core.Zone.Index">
            <summary>Return the index of this paddock</summary>
        </member>
        <member name="M:Models.Core.Zone.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Core.Zone.Get(System.String)">
            <summary>Gets the value of a variable or model.</summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Zone.GetVariableObject(System.String)">
            <summary>Get the underlying variable object for the given path.</summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Zone.Set(System.String,System.Object)">
            <summary>Sets the value of a variable. Will throw if variable doesn't exist.</summary>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Zone.Validate">
            <summary>
            Ensure that child zones' total area does not exceed this zone's area.
            </summary>
        </member>
        <member name="M:Models.Core.Zone.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="T:Models.DCAPST.DCaPSTModelNG">
            <summary>
            APSIM Next Generation wrapper around the DCaPST model.
            </summary>
        </member>
        <member name="F:Models.DCAPST.DCaPSTModelNG.clock">
            <summary>
            Clock object reference (dcapst needs to know day of year).
            </summary>
        </member>
        <member name="F:Models.DCAPST.DCaPSTModelNG.weather">
            <summary>
            Weather provider.
            </summary>
        </member>
        <member name="F:Models.DCAPST.DCaPSTModelNG.soilWater">
            <summary>
            Soil water balance.
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCaPSTModelNG.CropName">
            <summary>
            The crop against which DCaPST will be run.
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCaPSTModelNG.Parameters">
            <summary>
            Canopy parameters, as specified by user.
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCaPSTModelNG.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Performs error checking at start of simulation.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Models.DCAPST.DCaPSTModelNG.OnDoDCaPST(System.Object,System.EventArgs)">
            <summary>
            Called once per day when it's time for dcapst to run.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.DCAPST.DCaPSTModelNG.SetUpModel(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="CP"></param>
            <param name="PP"></param>
            <param name="DOY"></param>
            <param name="latitude"></param>
            <param name="maxT"></param>
            <param name="minT"></param>
            <param name="radn"></param>
            <param name="rpar"></param>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.DCaPSTModelNG.GetPlantNames">
            <summary>
            Get the names of all plants in scope.
            </summary>
        </member>
        <member name="T:Models.DCAPST.DCaPSTParameters">
            <summary>
            Encapsulates all parameters passed to DCaPST.
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCaPSTParameters.Rpar">
            <summary>
            PAR energy fraction
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCaPSTParameters.Canopy">
            <summary>
            Canopy parameters.
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCaPSTParameters.Pathway">
            <summary>
            Pathway parameters.
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.IAssimilationArea">
            <summary>
            Represents an area of a canopy that can undergo assimilation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IAssimilationArea.At25C">
            <summary>
            The rates of various parameters at 25 Celsius
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IAssimilationArea.LAI">
            <summary>
            Leaf area index of this region of the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IAssimilationArea.AbsorbedRadiation">
            <summary>
            The energy the canopy absorbs through solar radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IAssimilationArea.PhotonCount">
            <summary>
            The number of photosynthetic active photons which reach the canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IAssimilationArea.GetAreaValues">
            <summary>
            Retrieves the current data values of the area in a seperate object
            </summary>
            <remarks>
            This is intended to enable the extraction / tracking of data if necessary
            </remarks>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IAssimilationArea.DoPhotosynthesis(Models.DCAPST.Interfaces.ITemperature,Models.DCAPST.Canopy.Transpiration)">
            <summary>
            Runs the photosynthesis calculations for the canopy
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.ParameterRates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ParameterRates.VcMax">
            <summary>
            Maximum rubisco activity
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ParameterRates.Rd">
            <summary>
            Maximum respiration
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ParameterRates.JMax">
            <summary>
            Maximum electron transport rate
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ParameterRates.VpMax">
            <summary>
            Maximum PEPc activity
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ParameterRates.Gm">
            <summary>
            Maximum mesophyll CO2 conductance
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.ICanopyAttributes">
            <summary>
            Represents attributes of a plant canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyAttributes.Canopy">
            <summary>
            A collection of predefined parameters used by the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyAttributes.Sunlit">
            <summary>
            The section of canopy currently in sunlight
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyAttributes.Shaded">
            <summary>
            The section of canopy currently in shade
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ICanopyAttributes.InitialiseDay(System.Double,System.Double)">
            <summary>
            Performs initial calculations for the canopy provided daily conditions 
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ICanopyAttributes.DoTimestepAdjustment(Models.DCAPST.Interfaces.ISolarRadiation)">
            <summary>
            Updates the total canopy on a new timestep
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ICanopyAttributes.DoSolarAdjustment(System.Double)">
            <summary>
            Adjusts the properties of the canopy to account for the suns movement across the sky
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ICanopyAttributes.GetInterceptedRadiation">
            <summary>
            Gets the amount of radiation intercepted by the canopy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ICanopyAttributes.CalcBoundaryHeatConductance">
            <summary>
            Calculates the total boundary heat conductance of the canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ICanopyAttributes.CalcSunlitBoundaryHeatConductance">
            <summary>
            Calculates the boundary heat conductance of the sunlit area of the canopy
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.IAssimilation">
            <summary>
            
            </summary>    
        </member>
        <member name="M:Models.DCAPST.Interfaces.IAssimilation.GetFunction(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <summary>
            Generates the function used to calculate assimilation
            </summary>
            <param name="pathway">The assimilating pathway</param>
            <param name="leaf">The leaf temperature response model</param>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IAssimilation.UpdateIntercellularCO2(Models.DCAPST.AssimilationPathway,System.Double,System.Double)">
            <summary>
            Updates the intercellular CO2 for a pathway
            </summary>
            <param name="pathway">The pathway to update</param>
            <param name="gt">Water conductance</param>
            <param name="waterUseMolsSecond">Water usage rate</param>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IAssimilation.UpdatePartialPressures(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse,Models.DCAPST.AssimilationFunction)">
            <summary>
            Updates the partial pressures for a pathway
            </summary>
            <param name="pathway">The pathway to update</param>
            <param name="leaf">The leaf temperature response model</param>
            <param name="function">The assimilation function specific to the pathway</param>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IAssimilation.Iterations">
            <summary>
            Maximum number of iterations when calculating assimilation convergence
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.IPhotosynthesisModel">
            <summary>
            Represents a model that simulates daily photosynthesis
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IPhotosynthesisModel.DailyRun(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="lai"></param>
            <param name="sln"></param>
            <param name="soilWater"></param>
            <param name="RootShootRatio"></param>
        </member>
        <member name="T:Models.DCAPST.Interfaces.ISolarGeometry">
            <summary>
            Represents a model that simulates solar geometry on a given day
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarGeometry.DayOfYear">
            <summary>
            Day of year.
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarGeometry.Sunrise">
            <summary>
            Time of sunrise
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarGeometry.Sunset">
            <summary>
            Time of sunset
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarGeometry.DayLength">
            <summary>
            Total time the sun is up
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarGeometry.SolarConstant">
            <summary>
            Mean solar radiation per unit area
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ISolarGeometry.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ISolarGeometry.SunAngle(System.Double)">
            <summary>
            Calculates the angle of the sun in the sky at the given time
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.ISolarRadiation">
            <summary>
            Represents a model that simulates incoming solar radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarRadiation.Total">
            <summary>
            The total solar radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarRadiation.Direct">
            <summary>
            The direct component of solar radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarRadiation.Diffuse">
            <summary>
            The diffuse component of solar radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarRadiation.DirectPAR">
            <summary>
            Direct radiation expressed in terms of photon count
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ISolarRadiation.DiffusePAR">
            <summary>
            Diffuse radiation expressed in terms of photon count
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ISolarRadiation.UpdateRadiationValues(System.Double)">
            <summary>
            Sets the radiation values based on the provided time (0.0 to 24.0)
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.ITemperature">
            <summary>
            Represents an object that models temperature across a day
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ITemperature.AtmosphericPressure">
            <summary>
            Air pressure on location
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ITemperature.AirMolarDensity">
            <summary>
            Air density on location in terms of mols
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ITemperature.AirTemperature">
            <summary>
            Current air temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ITemperature.MaxTemperature">
            <summary>
            Maximum daily temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ITemperature.MinTemperature">
            <summary>
            Minimum daily temperature
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.ITemperature.UpdateAirTemperature(System.Double)">
            <summary>
            Sets the AirTemperature value based on the provided time
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.IWaterInteraction">
            <summary>
            Represents a model that simulates a leaf-water interaction
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IWaterInteraction.SetConditions(System.Double,System.Double)">
            <summary>
            Sets the current conditions of the leaf water model
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IWaterInteraction.UnlimitedWaterResistance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the resistance to water when supply is unlimited
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IWaterInteraction.LimitedWaterResistance(System.Double)">
            <summary>
            Calculates the resistance to water when supply is limited
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IWaterInteraction.TotalCO2Conductance(System.Double)">
            <summary>
            Finds the total leaf CO2 conductance at a given resistance to water
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IWaterInteraction.LeafTemperature(System.Double)">
            <summary>
            Finds the leaf temperature as a result of the water interaction
            </summary>
        </member>
        <member name="M:Models.DCAPST.Interfaces.IWaterInteraction.HourlyWaterUse(System.Double)">
            <summary>
            Finds the water demand of a leaf canopy across an hour
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IWaterInteraction.LeafTemp">
            <summary>
            Leaf temperature.
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IWaterInteraction.VPD">
            <summary> Leaf to air vapour pressure deficit </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.CanopyType">
            <summary>
            Possible canopy types
            </summary>
        </member>
        <member name="F:Models.DCAPST.Interfaces.CanopyType.C3">
            <summary>
            
            </summary> 
        </member>
        <member name="F:Models.DCAPST.Interfaces.CanopyType.C4">
             <summary>
            
             </summary>
        </member>
        <member name="F:Models.DCAPST.Interfaces.CanopyType.CCM">
             <summary>
            
             </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.ICanopyParameters">
            <summary>
            Describes parameters used by a crop canopy to calculate photosynthesis
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.Type">
            <summary>
            The type of canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.AirCO2">
            <summary>
            Partial pressure of CO2 in air (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.AirO2">
            <summary>
            Partial pressure of O2 in air (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.CurvatureFactor">
            <summary>
            Empirical curvature factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.DiffusivitySolubilityRatio">
            <summary>
            The ratio of diffusivity to solubility
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.MinimumN">
            <summary>
            The minimum nitrogen value at or below which CO2 assimilation rate is zero (mmol N m^-2)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.SLNRatioTop">
            <summary>
            Ratio of the average canopy specific leaf nitrogen (SLN) to the SLN at the top of canopy (g N m^-2 leaf)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.LeafAngle">
            <summary>
            Canopy-average leaf inclination relative to the horizontal (degrees)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.LeafWidth">
            <summary>
            The leaf width in the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.LeafScatteringCoeff">
            <summary>
            Leaf-level coefficient of scattering radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.LeafScatteringCoeffNIR">
            <summary>
            Leaf-level coefficient of near-infrared scattering radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.DiffuseExtCoeff">
            <summary>
            Extinction coefficient for diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.DiffuseExtCoeffNIR">
            <summary>
            Extinction coefficient for near-infrared diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.DiffuseReflectionCoeff">
            <summary>
            Reflection coefficient for diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.DiffuseReflectionCoeffNIR">
            <summary>
            Reflection coefficient for near-infrared diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.Windspeed">
            <summary>
            Local wind speed (m/s)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.ICanopyParameters.WindSpeedExtinction">
            <summary>
            Extinction coefficient for local wind speed
            </summary>
        </member>
        <member name="T:Models.DCAPST.Interfaces.IPathwayParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.IntercellularToAirCO2Ratio">
            <summary>
            Ratio of intercellular CO2 to air CO2
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.FractionOfCyclicElectronFlow">
            <summary>
            Fraction of cyclic electron floww
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.RespirationSLNRatio">
            <summary>
            Ratio of respiration to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.MaxRubiscoActivitySLNRatio">
            <summary>
            Ratio of Rubisco activity to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.MaxElectronTransportSLNRatio">
            <summary>
            Ratio of electron transport to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.MaxPEPcActivitySLNRatio">
            <summary>
            Ratio of PEPc Activity to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.MesophyllCO2ConductanceSLNRatio">
            <summary>
            Ratio of Mesophyll CO2 conductance to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.MesophyllElectronTransportFraction">
            <summary>
            Mesophyll electron transport fraction
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.ATPProductionElectronTransportFactor">
            <summary>
            ATP production electron transport factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.ExtraATPCost">
            <summary>
            Extra ATP cost
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.RubiscoCarboxylation">
            <summary>
            Describes how Rubisco carboxylation changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.RubiscoOxygenation">
            <summary>
            Describes how Rubisco oxygenation changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.RubiscoCarboxylationToOxygenation">
            <summary>
            Describes how Rubisco carboxylation to oxygenation changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.RubiscoActivity">
            <summary>
            Describes how Rubisco activity changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.PEPc">
            <summary>
            Describes how PEPc changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.PEPcActivity">
            <summary>
            Describes how PEPc activity changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.Respiration">
            <summary>
            Describes how Respiration changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.ElectronTransportRateParams">
            <summary>
            Describes how electron transport rate changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.MesophyllCO2ConductanceParams">
            <summary>
            Describes how Mesophyll conductance changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.SpectralCorrectionFactor">
            <summary>
            Spectral correction factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.PS2ActivityFraction">
            <summary>
            Fraction of photosystem II activity in the bundle sheath
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.PEPRegeneration">
            <summary>
            PEP regeneration rate per leaf area
            </summary>
        </member>
        <member name="P:Models.DCAPST.Interfaces.IPathwayParameters.BundleSheathConductance">
            <summary>
            Bundle sheath CO2 conductance per leaf
            </summary>
        </member>
        <member name="T:Models.DCAPST.Assimilation">
            <summary>
            Tracks the state of an assimilation type
            </summary>
        </member>
        <member name="P:Models.DCAPST.Assimilation.Iterations">
            <inheritdoc/>
        </member>
        <member name="F:Models.DCAPST.Assimilation.canopy">
            <summary>
            The parameters describing the canopy
            </summary>
        </member>
        <member name="F:Models.DCAPST.Assimilation.parameters">
            <summary>
            The parameters describing the pathways
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Models.DCAPST.Assimilation.GetFunction(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <summary>
            Factory method for accessing the different possible terms for assimilation
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.UpdatePartialPressures(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse,Models.DCAPST.AssimilationFunction)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.Assimilation.UpdateIntercellularCO2(Models.DCAPST.AssimilationPathway,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.Assimilation.UpdateMesophyllCO2(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <summary>
            Updates the mesophyll CO2 parameter
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.UpdateChloroplasticO2(Models.DCAPST.AssimilationPathway)">
            <summary>
            Updates the chloroplastic O2 parameter
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.UpdateChloroplasticCO2(Models.DCAPST.AssimilationPathway,Models.DCAPST.AssimilationFunction)">
            <summary>
            Updates the chloroplastic CO2 parameter
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.GetAc1Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <summary>
            Retrieves a function describing assimilation along the Ac1 pathway
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.GetAc2Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <summary>
            Retrieves a function describing assimilation along the Ac2 pathway
            </summary>
        </member>
        <member name="M:Models.DCAPST.Assimilation.GetAjFunction(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <summary>
            Retrieves a function describing assimilation along the Aj pathway
            </summary>
        </member>
        <member name="T:Models.DCAPST.Canopy.AssimilationArea">
            <summary>
            Models a subsection of the canopy (used for distinguishing between sunlit and shaded)
            </summary>
        </member>
        <member name="F:Models.DCAPST.Canopy.AssimilationArea.assimilation">
            <summary>
            The assimilation model
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AssimilationArea.At25C">
            <summary>
            A group of parameters valued at the reference temperature of 25 Celsius
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AssimilationArea.LAI">
            <summary>
            The leaf area index of this part of the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AssimilationArea.AbsorbedRadiation">
            <summary>
            The sunlight absorbed by the canopy over a period of time
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AssimilationArea.PhotonCount">
            <summary>
            The number of photons which reached the canopy over a period of time
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AssimilationArea.CO2AssimilationRate">
            <summary>
            CO2 assimilation rate over a period of time
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AssimilationArea.WaterUse">
            <summary>
            Water used during photosynthesis
            </summary>
        </member>
        <member name="F:Models.DCAPST.Canopy.AssimilationArea.pathways">
            <summary>
            The possible assimilation pathways
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.#ctor(Models.DCAPST.AssimilationPathway,Models.DCAPST.AssimilationPathway,Models.DCAPST.AssimilationPathway,Models.DCAPST.Interfaces.IAssimilation)">
            <summary>
            
            </summary>
            <param name="Ac1"></param>
            <param name="Ac2"></param>
            <param name="Aj"></param>
            <param name="assimilation"></param>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.GetCO2Rate">
            <summary>
            Finds the CO2 assimilation rate
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.GetWaterUse">
            <summary>
            Finds the water used during CO2 assimilation
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.DoPhotosynthesis(Models.DCAPST.Interfaces.ITemperature,Models.DCAPST.Canopy.Transpiration)">
            <summary>
            Calculates the CO2 assimilated by the partial canopy during photosynthesis,
            and the water used by the process
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.DoIterations(Models.DCAPST.Canopy.Transpiration,System.Double,System.Boolean)">
            <summary>
            Repeat the assimilation calculation to let the result converge
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.UpdateAssimilation(Models.DCAPST.Canopy.Transpiration,System.Boolean)">
            <summary>
            Calculates the assimilation values for each pathway
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.AssimilationArea.GetAreaValues">
            <inheritdoc/>
        </member>
        <member name="T:Models.DCAPST.Canopy.AreaValues">
            <summary>
            An instance of values present within an assimilation area
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AreaValues.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.AreaValues.Water">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Models.DCAPST.Canopy.AreaValues.Temperature">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Models.DCAPST.Canopy.AreaValues.Ac1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Models.DCAPST.Canopy.AreaValues.Ac2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Models.DCAPST.Canopy.AreaValues.Aj">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Models.DCAPST.Canopy.CanopyAttributes">
            <summary>
            Models a complete canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.Canopy">
            <summary>
            The initial parameters of the canopy
            </summary>
        </member>
        <member name="F:Models.DCAPST.Canopy.CanopyAttributes.pathway">
            <summary>
            The pathway parameters
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.Sunlit">
            <summary>
            The part of the canopy in sunlight
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.Shaded">
            <summary>
            The part of the canopy in shade
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.Absorbed">
            <summary>
            Models radiation absorbed by the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.LAI">
            <summary>
            Leaf area index of the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.LeafAngle">
            <summary>
            The leaf angle (radians)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.LeafWidth">
            <summary>
            The width of the leaf
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.LeafNTopCanopy">
            <summary>
            Nitrogen at the top of the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.WindSpeed">
            <summary>
            Wind speed
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.WindSpeedExtinction">
            <summary>
            Wind speed extinction
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.NAllocation">
            <summary>
            Coefficient of nitrogen allocation through the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyAttributes.Layers">
            <summary>
            The number of layers in the canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters,Models.DCAPST.Interfaces.IAssimilationArea,Models.DCAPST.Interfaces.IAssimilationArea)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="pathway"></param>
            <param name="sunlit"></param>
            <param name="shaded"></param>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.InitialiseDay(System.Double,System.Double)">
            <summary>
            Establishes the initial conditions for the daily photosynthesis calculation
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.DoTimestepAdjustment(Models.DCAPST.Interfaces.ISolarRadiation)">
            <summary>
            Recalculates canopy parameters for a new time step
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcLAI">
            <summary>
            Calculates the LAI for the sunlit/shaded areas of the canopy, based on the position of the sun
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcAbsorbedRadiations(Models.DCAPST.Interfaces.ISolarRadiation)">
            <summary>
            Calculates the radiation absorbed by the canopy, based on the position of the sun
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcMaximumRates">
            <summary>
            Calculates properties of the canopy, based on how much of the canopy is currently in direct sunlight
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcMaximumRate(System.Double,System.Double)">
            <summary>
            Models a maximum rate calculation
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcBoundaryHeatConductance">
            <summary>
            Find the total heat conductance across the boundary of the canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcSunlitBoundaryHeatConductance">
            <summary>
            Find the heat conductance across the boundary of the sunlit area of the canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.DoSolarAdjustment(System.Double)">
            <summary>
            Calculates how the movement of the sun affects the absorbed radiation
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.GetInterceptedRadiation">
            <summary>
            Calculates the radiation intercepted by the current layer of the canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyAttributes.CalcShadowProjection(System.Double)">
            <summary>
            Calculates the geometry of the shadows across the canopy
            </summary>
        </member>
        <member name="T:Models.DCAPST.Canopy.CanopyRadiation">
            <summary>
            Models solar radiation on the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.LeafScattering">
            <summary>
            Leaf level scattering coefficient for radiation
            </summary>
            <remarks>Different values for PAR/NIR</remarks>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.DiffuseExtinction">
            <summary>
            Diffuse extinction coefficient for radiation
            </summary>
            <remarks>Different values for PAR/NIR</remarks>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.DiffuseReflection">
            <summary>
            Diffuse reflection coefficient for radiation
            </summary>
            <remarks>Different values for PAR/NIR</remarks>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.DiffuseScatteredDiffuse">
            <summary>
            Diffuse and scattered diffuse extinction coefficient
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.DirectExtinction">
            <summary>
            Direct extinction coefficient for radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.DirectReflection">
            <summary>
            Direct reflection coefficient for radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.DirectScatteredDirect">
            <summary>
            Direct and scattered direct coefficient for radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.CanopyRadiation.HorizontalReflection">
            <summary>
            Horizontal reflection coefficient for radiation
            </summary>
        </member>
        <member name="F:Models.DCAPST.Canopy.CanopyRadiation.AccumLAI_1">
            <summary>
            The accumulated LAI of all layers up to the Nth layer
            </summary>
        </member>
        <member name="F:Models.DCAPST.Canopy.CanopyRadiation.AccumLAI_0">
            <summary>
            The accumulated LAI of all layers up to the (N - 1)th layer
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.#ctor(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="layers"></param>
            <param name="lai"></param>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcTotalRadiation(System.Double,System.Double)">
            <summary>
            Calculates the total radiation absorbed by the canopy
            </summary>
            <param name="direct">The direct solar radiation</param>
            <param name="diffuse">The diffuse solar radiation</param>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcSunlitRadiation(System.Double,System.Double)">
            <summary>
            Calculates the total radiation absorbed by the sunlit part of the canopy
            </summary>
            <param name="direct">The direct solar radiation</param>
            <param name="diffuse">The diffuse solar radiation</param>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcSunlitDirect(System.Double)">
            <summary>
            Calculates the direct radiation absorbed by the sunlit canopy
            </summary>
            <param name="direct">The direct solar radiation</param>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcSunlitDiffuse(System.Double)">
            <summary>
            Calculates the diffuse radiation absorbed by the sunlit canopy
            </summary>
            <param name="diffuse">The diffuse solar radiation</param>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcSunlitScattered(System.Double)">
            <summary>
            Calculates the scattered radiation absorbed by the sunlit canopy
            </summary>
            <param name="direct">The direct solar radiation</param>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalculateSunlitLAI">
            <summary>
            Calculates the LAI of the sunlit canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcInterceptedRadiation">
            <summary>
            Calculates the total intercepted radiation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.Canopy.CanopyRadiation.CalcExp(System.Double)">
            <summary>
            Models a function which finds the difference between two exponentials
            </summary>
        </member>
        <member name="T:Models.DCAPST.Canopy.Transpiration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Canopy">
            <summary>
            The canopy parameters
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Pathway">
            <summary>
            The pathway parameters
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Water">
            <summary>
            Models the leaf water interaction
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Leaf">
            <summary>
            Models how the leaf responds to different temperatures
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Limited">
            <summary>
            If the transpiration rate is limited
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.BoundaryHeatConductance">
            <summary>
            The boundary heat conductance
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.MaxRate">
            <summary>
            Maximum transpiration rate
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Fraction">
            <summary>
            Fraction of water allocated
            </summary>
        </member>
        <member name="P:Models.DCAPST.Canopy.Transpiration.Resistance">
            <summary>
            Resistance to water
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.Transpiration.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters,Models.DCAPST.Interfaces.IWaterInteraction,Models.DCAPST.TemperatureResponse)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="pathway"></param>
            <param name="water"></param>
            <param name="leaf"></param>
        </member>
        <member name="M:Models.DCAPST.Canopy.Transpiration.SetConditions(Models.DCAPST.Interfaces.ParameterRates,System.Double,System.Double)">
            <summary>
            Sets the current conditions for transpiration
            </summary>
        </member>
        <member name="M:Models.DCAPST.Canopy.Transpiration.UpdateA(Models.DCAPST.Interfaces.IAssimilation,Models.DCAPST.AssimilationPathway)">
            <summary>
            
            </summary>
            <param name="assimilation"></param>
            <param name="pathway"></param>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.Canopy.Transpiration.UpdateTemperature(Models.DCAPST.AssimilationPathway)">
            <summary>
            Updates the temperature of a pathway
            </summary>
        </member>
        <member name="T:Models.DCAPST.AssimilationFunction">
            <summary>
            Manages the calculation of CO2 assimilation rate
            </summary>
            <remarks>
            See the supplementary material from the paper
            "Simulating daily field crop canopy photosynthesis: an integrated software package",
            by A. Wu et al (2018) for the theory behind this function.
            
            Note that some adjustments have been made to account for the CCM model, 
            which as of Feb 2020 has not been published.
            </remarks>
        </member>
        <member name="F:Models.DCAPST.AssimilationFunction.x">
            <summary>
            Function terms
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationFunction.Ci">
            <summary>
            Intercellular CO2
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationFunction.Rm">
            <summary>
            Mesophyll resistance
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationFunction.MesophyllRespiration">
            <summary>
            Mesophyll respiration
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationFunction.BundleSheathConductance">
            <summary>
             The bundle sheath conductance
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationFunction.Respiration">
            <summary>
            Leaf respiration
            </summary>
        </member>
        <member name="M:Models.DCAPST.AssimilationFunction.SolveQuadratic(System.Double,System.Double,System.Double)">
            <summary>
            The quadratic equation
            </summary>
        </member>
        <member name="M:Models.DCAPST.AssimilationFunction.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.DCAPST.Terms">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._4">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._5">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._6">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._7">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._8">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.Terms._9">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.DCAPST.PathwayType">
            <summary>
            The possible types of assimilation pathways
            </summary>
        </member>
        <member name="F:Models.DCAPST.PathwayType.Ac1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.DCAPST.PathwayType.Ac2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.DCAPST.PathwayType.Aj">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.DCAPST.AssimilationPathway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationPathway.Canopy">
            <summary>
            The canopy parameters
            </summary>
        </member>
        <member name="F:Models.DCAPST.AssimilationPathway.Pathway">
            <summary>
            The pathway parameters
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.Type">
            <summary>
            The current pathway type
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.Temperature">
            <summary>
            The current temperature of the pathway
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.CO2Rate">
            <summary>
            The rate at which CO2 is assimilated
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.WaterUse">
            <summary>
            The water required to maintain the CO2 rate
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.VPD">
            <summary>
            Vapour pressure deficit
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.IntercellularCO2">
            <summary>
            Intercellular airspace CO2 partial pressure (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.MesophyllCO2">
            <summary>
            Mesophyll CO2 partial pressure (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.ChloroplasticCO2">
            <summary>
            Chloroplastic CO2 partial pressure at the site of Rubisco carboxylation (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.ChloroplasticO2">
            <summary>
            Chloroplastic O2 partial pressure at the site of Rubisco carboxylation (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.Gbs">
            <summary>
            Bundle sheath conductance
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationPathway.Vpr">
            <summary>
            PEP regeneration
            </summary>
        </member>
        <member name="M:Models.DCAPST.AssimilationPathway.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="pathway"></param>
        </member>
        <member name="M:Models.DCAPST.AssimilationPathway.SetConditions(System.Double,System.Double)">
            <summary>
            Establishes the current conditions of the pathway
            </summary>
            <param name="temperature">The current temperature</param>
            <param name="lai">The current leaf area index</param>
        </member>
        <member name="M:Models.DCAPST.AssimilationPathway.GetPathValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.DCAPST.PathValues">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathValues.Assimilation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathValues.Water">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathValues.Temperature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathValues.VPD">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.DCAPST.AssimilationC3">
            <summary>
            Defines the pathway functions for a C3 canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.AssimilationC3.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.AssimilationC3.GetAc1Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationC3.GetAc2Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationC3.GetAjFunction(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="T:Models.DCAPST.AssimilationC4">
            <summary>
            Defines the pathway functions for a C4 canopy
            </summary>
        </member>
        <member name="M:Models.DCAPST.AssimilationC4.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.AssimilationC4.UpdateIntercellularCO2(Models.DCAPST.AssimilationPathway,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationC4.UpdateMesophyllCO2(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationC4.GetAc1Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationC4.GetAc2Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationC4.GetAjFunction(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="T:Models.DCAPST.AssimilationCCM">
            <summary>
            Defines the pathway functions for a CCM canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.AssimilationCCM.Iterations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.UpdateIntercellularCO2(Models.DCAPST.AssimilationPathway,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.UpdateMesophyllCO2(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.UpdateChloroplasticO2(Models.DCAPST.AssimilationPathway)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.UpdateChloroplasticCO2(Models.DCAPST.AssimilationPathway,Models.DCAPST.AssimilationFunction)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.GetAc1Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.GetAc2Function(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.AssimilationCCM.GetAjFunction(Models.DCAPST.AssimilationPathway,Models.DCAPST.TemperatureResponse)">
            <inheritdoc/>
        </member>
        <member name="T:Models.DCAPST.DCAPSTModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.Solar">
            <summary>
            The solar geometry
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.Radiation">
            <summary>
            The solar radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.Temperature">
            <summary>
            The environmental temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.Canopy">
            <summary>
            The canopy undergoing photosynthesis
            </summary>
        </member>
        <member name="F:Models.DCAPST.DCAPSTModel.pathway">
            <summary>
            The pathway parameters
            </summary>
        </member>
        <member name="F:Models.DCAPST.DCAPSTModel.transpiration">
            <summary>
            The transpiration model
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.PrintIntervalValues">
            <summary>
            A public option to toggle if the interval values are tracked or not
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.Biolimit">
            <summary>
            The biological transpiration limit of a plant
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.Reduction">
            <summary>
            Excess water reduction fraction
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.IntervalResults">
            <summary>
            Used to track the interval values that are printed
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.B">
            <summary>
            Biochemical Conversion and Maintenance Respiration
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.PotentialBiomass">
            <summary>
            Potential total daily biomass
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.ActualBiomass">
            <summary>
            Actual total daily biomass 
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.WaterDemanded">
            <summary>
            Daily water demand
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.WaterSupplied">
            <summary>
            Daily water supplied
            </summary>
        </member>
        <member name="P:Models.DCAPST.DCAPSTModel.InterceptedRadiation">
            <summary>
            Daily intercepted radiation
            </summary>
        </member>
        <member name="F:Models.DCAPST.DCAPSTModel.Intervals">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.#ctor(Models.DCAPST.Interfaces.ISolarGeometry,Models.DCAPST.Interfaces.ISolarRadiation,Models.DCAPST.Interfaces.ITemperature,Models.DCAPST.Interfaces.IPathwayParameters,Models.DCAPST.Interfaces.ICanopyAttributes,Models.DCAPST.Canopy.Transpiration)">
            <summary>
            
            </summary>
            <param name="solar"></param>
            <param name="radiation"></param>
            <param name="temperature"></param>
            <param name="pathway"></param>
            <param name="canopy"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.DailyRun(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the potential and actual biomass growth of a canopy across the span of a day,
            as well as the water requirements for both cases.
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.RatioFunction(System.Double,System.Double)">
            <summary>
            Calculates the ratio of A to A + B
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.ReductionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Reduces the value of any excess water past the limit by a given percentage
            </summary>
            <param name="water">The total water</param>
            <param name="limit">The water limit</param>
            <param name="percent">The precentage to reduce excess water by</param>
            <returns>Water with reduced excess</returns>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.TryInitiliase(Models.DCAPST.IntervalValues)">
            <summary>
            Attempt to initialise models based on the current time, and test if they are sensible
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.IsSensible">
            <summary>
            Tests if the basic conditions for photosynthesis to occur are met
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.CalculatePotential">
            <summary>
            Determine the total potential biomass for the day under ideal conditions
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.CalculateLimited(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the potential biomass in the case where a plant has a biological limit
            on transpiration rate
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.CalculateActual(System.Double[])">
            <summary>
            Determine the total biomass that can be assimilated under the actual conditions 
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.DoTimestepUpdate(Models.DCAPST.IntervalValues,System.Double,System.Double)">
            <summary>
            Updates the model to a new timestep
            </summary>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.PerformPhotosynthesis(Models.DCAPST.Interfaces.IAssimilationArea,System.Double,System.Double)">
            <summary>
            Runs the photosynthesis simulation for an assimilating area
            </summary>
            <param name="area">The area to run photosynthesis for</param>
            <param name="gbh">The boundary heat conductance</param>
            <param name="fraction">Fraction of water allowance</param>
        </member>
        <member name="M:Models.DCAPST.DCAPSTModel.CalculateWaterSupplyLimits(System.Double,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            In the case where there is greater water demand than supply allows, the water supply limit for each hour
            must be calculated. 
            
            This is done by adjusting the maximum rate of water supply each hour, until the total water demand across
            the day is within some tolerance of the actual water available, as we want to make use of all the 
            accessible water.
            </summary>
        </member>
        <member name="T:Models.DCAPST.IntervalValues">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.IntervalValues.Time">
            <summary>
            The time of the interval
            </summary>
        </member>
        <member name="P:Models.DCAPST.IntervalValues.AirTemperature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.IntervalValues.Sunlit">
            <summary>
            Area values for the sunlit canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.IntervalValues.Shaded">
            <summary>
            Area values for the shaded canopy
            </summary>
        </member>
        <member name="T:Models.DCAPST.Environment.SolarGeometry">
            <summary>
            Models the position of the sun
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.Latitude">
            <summary>
            Geographic latitude (radians)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.SolarDeclination">
            <summary>
            The angle between the solar disk and the equatorial plane
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.SunsetAngle">
            <summary>
            Angle of the sun at sunset (radians)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.SolarConstant">
            <summary>
            The rate at which the suns energy reaches the earth
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.DayOfYear">
            <summary>
            Day of the year
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.DayLength">
            <summary>
            Time the sun is in the sky (hours)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.Sunrise">
            <summary>
            Time of sunrise (hours)
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarGeometry.Sunset">
            <summary>
            Time of sunset (hours)
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarGeometry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarGeometry.Initialise">
            <summary>
            Initialise the solar geometry model
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarGeometry.CalcSolarDeclination">
            <summary>
            Calculates the solar declination angle (radians)
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarGeometry.CalcSunsetAngle">
            <summary>
            Calculates the angle of the sun at sunset
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarGeometry.SunAngle(System.Double)">
            <summary>
            Calculates the angle of the sun in the sky (radians)
            </summary>
            <param name="hour">The time in hours</param>        
        </member>
        <member name="T:Models.DCAPST.Environment.SolarRadiation">
            <summary>
            Models the different forms of environmental radiation
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.SolarRadiation.solar">
            <summary>
            Models the solar geometry
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.SolarRadiation.diffuseFraction">
            <summary>
            Fraction of incoming radiation that is diffuse
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.Daily">
            <summary>
            The radiation measured across a day
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarRadiation.#ctor(Models.DCAPST.Interfaces.ISolarGeometry)">
            <summary>
            
            </summary>
            <param name="solar"></param>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.RPAR">
            <summary>
            PAR energy fraction
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.Total">
            <summary>
            The total incoming solar radiation over a time period
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.Direct">
            <summary>
            The amount of incoming direct solar radiation over a time period
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.Diffuse">
            <summary>
            The amount of incoming diffuse solar radiation over a time period
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.DirectPAR">
            <summary>
            The amount of incoming direct photosynthetic active radiation over a time period
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.SolarRadiation.DiffusePAR">
            <summary>
            The amount of incoming diffuse photosynthetic active radiation over a time period
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarRadiation.UpdateRadiationValues(System.Double)">
            <summary>
            Updates the incoming radiation values to a new time period 
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarRadiation.CurrentTotal(System.Double)">
            <summary>
            Finds the total radiation value at the current time
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.SolarRadiation.CurrentDiffuse(System.Double)">
            <summary>
            Finds the diffuse radiation value at the current time
            </summary>
        </member>
        <member name="T:Models.DCAPST.Environment.Temperature">
            <summary>
            Models the environmental temperature
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.Temperature.solar">
            <summary>
            The solar geometry
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.AtmosphericPressure">
            <summary>
            The atmospheric pressure
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.MaxTemperature">
            <summary>
            The daily maximum temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.MinTemperature">
            <summary>
            The daily minimum temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.XLag">
            <summary>
            Maximum temperature lag coefficient
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.YLag">
            <summary>
            Night time temperature lag coefficient
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.ZLag">
            <summary>
            Minimum temperature lag coefficient
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.AirTemperature">
            <summary>
            The current air temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.Temperature.AirMolarDensity">
            <summary>
            Air density in mols
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.Temperature.#ctor(Models.DCAPST.Interfaces.ISolarGeometry)">
            <summary>
            
            </summary>
            <param name="solar"></param>
        </member>
        <member name="M:Models.DCAPST.Environment.Temperature.UpdateAirTemperature(System.Double)">
            <summary>
            Calculates the air temperature based on the current time
            </summary>
        </member>
        <member name="T:Models.DCAPST.Environment.WaterInteraction">
            <summary>
            Models how temperature impacts the water used by the leaf during photosynthesis
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.kb">
            <summary>
            Boltzmann's constant
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.sAir">
            <summary>
            Volumetric heat capacity of air
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.g">
            <summary>
            Psychrometric constant
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.latentHeatOfVapourisation">
            <summary>
            Heat of vapourisation of water
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.m">
            <summary>
            Boundary water diffusion factor
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.n">
            <summary>
            Stomata water diffusion factor
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.hrs_to_seconds">
            <summary>
            Hours to seconds unit conversion
            </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.temp">
            <summary> Environment temperature model </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.LeafTemp">
            <summary> Current leaf temperature </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.gbh">
            <summary> Canopy boundary heat conductance </summary>
        </member>
        <member name="F:Models.DCAPST.Environment.WaterInteraction.radiation">
            <summary> Absorbed radiation </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.Gbw">
            <summary> Boundary H20 conductance </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.Rbh">
            <summary> Boundary heat resistance </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.GbCO2">
            <summary> Boundary CO2 conductance </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.ThermalRadiation">
            <summary> Outgoing thermal radiation</summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.VpLeaf">
            <summary> Vapour pressure at the leaf temperature </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.VpAir">
            <summary> Vapour pressure at the air temperature</summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.VpAir1">
            <summary> Vapour pressure at one degree above air temperature</summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.VptMin">
            <summary> Vapour pressure at the daily minimum temperature</summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.DeltaAirVP">
            <summary> Difference in air vapour pressures </summary>
        </member>
        <member name="P:Models.DCAPST.Environment.WaterInteraction.VPD">
            <inheritdoc/>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.#ctor(Models.DCAPST.Interfaces.ITemperature)">
            <summary>
            
            </summary>
            <param name="temperature"></param>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.SetConditions(System.Double,System.Double)">
            <summary>
            Sets conditions for the water interaction
            </summary>
            <param name="gbh">Boundary heat conductance</param>
            <param name="radiation">Radiation</param>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.UnlimitedWaterResistance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the leaf resistance to water when the supply is unlimited
            </summary>
            <param name="A">CO2 assimilation rate</param>
            <param name="Ca">Air CO2 partial pressure</param>
            <param name="Ci">Intercellular CO2 partial pressure</param>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.LimitedWaterResistance(System.Double)">
            <summary>
            Calculates the leaf resistance to water when supply is limited
            </summary>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.HourlyWaterUse(System.Double)">
            <summary>
            Calculates the hourly water requirements
            </summary>
            <param name="rtw">Resistance to water</param>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.TotalCO2Conductance(System.Double)">
            <summary>
            Calculates the total CO2 conductance across the leaf
            </summary>
            <param name="rtw">Resistance to water</param>
        </member>
        <member name="M:Models.DCAPST.Environment.WaterInteraction.LeafTemperature(System.Double)">
            <summary>
            Finds the leaf temperature after the water interaction
            </summary>
            <param name="rtw">Resistance to water</param>
        </member>
        <member name="T:Models.DCAPST.CanopyParameters">
            <summary>
            Implements the canopy parameters
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.Type">
            <summary>
            Canopy type.
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.AirO2">
            <summary>
            Partial pressure of O2 in air.
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.AirCO2">
            <summary>
            Partial pressure of CO2 in air
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.LeafAngle">
            <summary>
            Canopy average leaf inclination relative to the horizontal (degrees)
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.LeafWidth">
            <summary>
            The leaf width in the canopy
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.LeafScatteringCoeff">
            <summary>
            Leaf-level coefficient of scattering radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.LeafScatteringCoeffNIR">
            <summary>
            Leaf-level coefficient of near-infrared scattering radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.DiffuseExtCoeff">
            <summary>
            Extinction coefficient for diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.DiffuseExtCoeffNIR">
            <summary>
            Extinction coefficient for near-infrared diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.DiffuseReflectionCoeff">
            <summary>
            Reflection coefficient for diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.DiffuseReflectionCoeffNIR">
            <summary>
            Reflection coefficient for near-infrared diffuse radiation
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.Windspeed">
            <summary>
            Local wind speed
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.WindSpeedExtinction">
            <summary>
            Extinction coefficient for local wind speed
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.CurvatureFactor">
            <summary>
            Empirical curvature factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.DiffusivitySolubilityRatio">
            <inheritdoc />
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.MinimumN">
            <summary>
            The minimum nitrogen value at or below which CO2 assimilation rate is zero (mmol N m^-2)
            </summary>
        </member>
        <member name="P:Models.DCAPST.CanopyParameters.SLNRatioTop">
            <summary>
            Ratio of the average canopy specific leaf nitrogen (SLN) to the SLN at the top of canopy (g N m^-2 leaf)
            </summary>
        </member>
        <member name="T:Models.DCAPST.PathwayParameters">
            <summary>
            Pathway Parameters.
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.IntercellularToAirCO2Ratio">
            <inheritdoc/>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.FractionOfCyclicElectronFlow">
            <summary>
            Fraction of cyclic electron flow
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.RespirationSLNRatio">
            <summary>
            Ratio of respiration to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.MaxRubiscoActivitySLNRatio">
            <summary>
            Ratio of Rubisco activity to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.MaxElectronTransportSLNRatio">
            <summary>
            Ratio of electron transport to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.MaxPEPcActivitySLNRatio">
            <summary>
            Ratio of PEPc Activity to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.MesophyllCO2ConductanceSLNRatio">
            <summary>
            Ratio of Mesophyll CO2 conductance to SLN
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.MesophyllElectronTransportFraction">
            <summary>
            Mesophyll electron transport fraction
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.ATPProductionElectronTransportFactor">
            <summary>
            ATP production electron transport factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.ExtraATPCost">
            <summary>
            Extra ATP cost
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.RubiscoCarboxylation">
            <summary>
            Rubisco carboxylation temperature response
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.RubiscoOxygenation">
            <summary>
            Rubisco oxygenation temperature response
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.RubiscoCarboxylationToOxygenation">
            <summary>
            Rubisco carboxylation to oxygenation temperature response factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.RubiscoActivity">
            <summary>
            Describes how Rubisco activity changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.PEPc">
            <summary>
            Rubisco carboxylation temperature response factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.PEPcActivity">
            <summary>
            Describes how PEPc activity changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.Respiration">
            <summary>
            Describes how Respiration changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.ElectronTransportRateParams">
            <summary>
            Describes how electron transport rate changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.MesophyllCO2ConductanceParams">
            <summary>
            Describes how mesophyll CO2 conductance changes with temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.SpectralCorrectionFactor">
            <summary>
            Spectral correction factor
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.PS2ActivityFraction">
            <summary>
            Fraction of photosystem II activity in the bundle sheath
            </summary>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.PEPRegeneration">
            <inheritdoc/>
        </member>
        <member name="P:Models.DCAPST.PathwayParameters.BundleSheathConductance">
            <inheritdoc/>
        </member>
        <member name="T:Models.DCAPST.TemperatureResponseValues">
            <summary>
            Describes a temperature response.
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponseValues.Factor">
            <summary>
            The value of the temperature response factor for a given parameter
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponseValues.At25">
            <summary>
            The value of the temperature response factor at 25 degrees
            </summary>
        </member>
        <member name="T:Models.DCAPST.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.DCAPST.Extensions.ToRadians(System.Double)">
            <summary>
            Convert an angle from degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
        </member>
        <member name="M:Models.DCAPST.Extensions.ToDegrees(System.Double)">
            <summary>
            Convert an angle from radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="T:Models.DCAPST.TemperatureResponse">
            <summary>
            Models the parameters of the leaf necessary to calculate photosynthesis
            </summary>
        </member>
        <member name="F:Models.DCAPST.TemperatureResponse.rateAt25">
            <summary>
            A collection of parameters as valued at 25 degrees Celsius
            </summary>
        </member>
        <member name="F:Models.DCAPST.TemperatureResponse.canopy">
            <summary>
            The parameters describing the canopy
            </summary>
        </member>
        <member name="F:Models.DCAPST.TemperatureResponse.pathway">
            <summary>
            The static parameters describing the assimilation pathway
            </summary>
        </member>
        <member name="M:Models.DCAPST.TemperatureResponse.#ctor(Models.DCAPST.Interfaces.ICanopyParameters,Models.DCAPST.Interfaces.IPathwayParameters)">
            <summary>
            
            </summary>
            <param name="canopy"></param>
            <param name="pathway"></param>
        </member>
        <member name="M:Models.DCAPST.TemperatureResponse.SetConditions(Models.DCAPST.Interfaces.ParameterRates,System.Double)">
            <summary>
            
            </summary>
            <param name="rates"></param>
            <param name="photons"></param>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.temperature">
            <summary>
            The current leaf temperature
            </summary>
        </member>
        <member name="F:Models.DCAPST.TemperatureResponse.photoncount">
            <summary>
            Number of photons that reached the leaf
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.VcMaxT">
            <summary>
            Maximum rate of rubisco carboxylation at the current leaf temperature (micro mol CO2 m^-2 ground s^-1)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.RdT">
            <summary>
            Leaf respiration at the current leaf temperature (micro mol CO2 m^-2 ground s^-1)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.JMaxT">
            <summary>
            Maximum rate of electron transport at the current leaf temperature (micro mol CO2 m^-2 ground s^-1)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.VpMaxT">
            <summary>
            Maximum PEP carboxylase activity at the current leaf temperature (micro mol CO2 m^-2 ground s^-1)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.GmT">
            <summary>
            Mesophyll conductance at the current leaf temperature (mol CO2 m^-2 ground s^-1 bar^-1)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.Kc">
            <summary>
            Michaelis-Menten constant of Rubsico for CO2 (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.Ko">
            <summary>
            Michaelis-Menten constant of Rubsico for O2 (microbar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.VcVo">
            <summary>
            Ratio of Rubisco carboxylation to Rubisco oxygenation
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.Kp">
            <summary>
            Michaelis-Menten constant of PEP carboxylase for CO2 (micro bar)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.J">
            <summary>
            Electron transport rate
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.Sco">
            <summary>
            Relative CO2/O2 specificity of Rubisco (bar bar^-1)
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.Gamma">
            <summary>
            Half the reciprocal of the relative rubisco specificity
            </summary>
        </member>
        <member name="P:Models.DCAPST.TemperatureResponse.GmRd">
            <summary>
            Mesophyll respiration
            </summary>
        </member>
        <member name="M:Models.DCAPST.TemperatureResponse.Value(System.Double,System.Double,System.Double)">
            <summary>
            Uses an exponential function to model temperature response parameters
            </summary>
            <remarks>
            See equation (1), A. Wu et al (2018) for details
            </remarks>
        </member>
        <member name="M:Models.DCAPST.TemperatureResponse.ValueOptimum(System.Double,System.Double,Models.DCAPST.LeafTemperatureParameters)">
            <summary>
            Uses a normal distribution to model parameters with an apparent optimum in temperature response
            </summary>
            /// <remarks>
            See equation (2), A. Wu et al (2018) for details
            </remarks>
        </member>
        <member name="M:Models.DCAPST.TemperatureResponse.CalcElectronTransportRate">
            <summary>
            Calculates the electron transport rate of the leaf
            </summary>
        </member>
        <member name="T:Models.DCAPST.LeafTemperatureParameters">
            <summary>
            Describes parameters used in leaf temperature calculations
            </summary>
        </member>
        <member name="P:Models.DCAPST.LeafTemperatureParameters.C">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.DCAPST.LeafTemperatureParameters.TMax">
            <summary>
            The maximum temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.LeafTemperatureParameters.TMin">
            <summary>
            The minimum temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.LeafTemperatureParameters.TOpt">
            <summary>
            The optimum temperature
            </summary>
        </member>
        <member name="P:Models.DCAPST.LeafTemperatureParameters.Beta">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.Factorial.CompositeFactor">
            <summary>
            This class represents a series of paths and the same number of object values.
            Its sole purpose is to apply the object values to the model represented by the paths.
            If Specifications are specified then they are used instead of paths and values.
            </summary>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.#ctor">
            <summary>Parameterless constrctor needed for serialisation</summary>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.#ctor(System.String,System.String,System.Object)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.#ctor(Models.Factorial.Factor,System.String,System.Object)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.#ctor(Models.Factorial.Factor,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.Factorial.CompositeFactor.Specifications">
            <summary>Gets or sets the specification to create overides for a simulation.</summary>
        </member>
        <member name="P:Models.Factorial.CompositeFactor.Paths">
            <summary>Gets all paths.</summary>
        </member>
        <member name="P:Models.Factorial.CompositeFactor.Values">
            <summary>Gets all values.</summary>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.ApplyToSimulation(Models.Core.Run.SimulationDescription)">
            <summary>
            Apply this CompositeFactor to the specified simulation
            </summary>
            <param name="simulationDescription">A description of a simulation.</param>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.ParseSpecification(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            Parse the specification into paths and values.
            </summary>
            <param name="specification">The specification to parse.</param>
            <param name="allPaths">The list of paths to add to.</param>
            <param name="allValues">The list of values to add to.</param>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.GetReferencedFileNames">
            <summary>Return paths to all files referenced by this model.</summary>
        </member>
        <member name="M:Models.Factorial.CompositeFactor.RemovePathsFromReferencedFileNames">
            <summary>Remove all paths from referenced filenames.</summary>
        </member>
        <member name="T:Models.Factorial.Experiment">
            <summary>
            Encapsulates a factorial experiment.
            </summary>
        </member>
        <member name="P:Models.Factorial.Experiment.DisabledSimNames">
            <summary>
            List of names of the disabled simulations. Any simulation name not in this list is assumed to be enabled.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.GenerateSimulationDescriptions">
            <summary>Gets a list of simulation descriptions.</summary>
        </member>
        <member name="M:Models.Factorial.Experiment.NumSimulations">
            <summary>
            Get the total number of simulations generated by this experiment.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.GetSimulationDescriptions">
            <summary>Gets a list of simulation descriptions.</summary>
        </member>
        <member name="M:Models.Factorial.Experiment.Document">
            <summary>
            Document the model, and any child models which should be documented.
            </summary>
            <remarks>
            It is a mistake to call this method without first resolving links.
            </remarks>
        </member>
        <member name="M:Models.Factorial.Experiment.DocumentChildren">
            <summary>
            Document the appropriate children of the experiment (memos,
            graphs, and folders).
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.GetDesign">
            <summary>
            Get a human-readable description of the experiment (e.g. "NRate x Water").
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.CalculateAllCombinations">
            <summary>
            Calculate a list of fall combinations of factors.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.GetName(System.Collections.Generic.List{Models.Factorial.CompositeFactor})">
            <summary>
            Generates the name for a combination of FactorValues.
            </summary>
            <param name="factors"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Factorial.Factor">
            <summary>
            A class representing a treatment of an experiment (e.g. fertiliser).
            It produces a series of factor values.
            </summary>
            <remarks>
            Specification can be of the form:
                [SowingRule].Script.SowingDate = 2003-11-01, 2003-12-20
            or
                [FertiliserRule].Script.ApplicationAmount = 0 to 100 step 20
            or
                [IrrigationSchedule]
                to indicate a path to a model that will be replaced by the child
                nodes.
            or
                left null to indicate there are child FactorValues. 
            </remarks>
        </member>
        <member name="P:Models.Factorial.Factor.Specification">
            <summary>A specification for producing a series of factor values.</summary>
        </member>
        <member name="M:Models.Factorial.Factor.GetCompositeFactors">
            <summary>
            Return all possible factor values for this factor.
            </summary>
        </member>
        <member name="M:Models.Factorial.Factor.ExpandFactor(Models.Factorial.CompositeFactor)">
            <summary>
            
            </summary>
            <param name="compositeFactor"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Factorial.Factor.SetSpecificationToFactorValues(System.String)">
            <summary>
            Convert a simple specification into factor values.
            </summary>
            <param name="specification">The specification to examine</param>
        </member>
        <member name="M:Models.Factorial.Factor.RangeSpecificationToFactorValues(System.String)">
            <summary>
            Convert a range specification into factor values.
            </summary>
            <param name="specification">The specification to examine</param>
        </member>
        <member name="M:Models.Factorial.Factor.ModelReplacementToFactorValues(System.String)">
            <summary>
            Convert a range specification into factor values.
            </summary>
            <param name="specification">The specification to examine</param>
        </member>
        <member name="M:Models.Factorial.Factor.GetReferencedFileNames">
            <summary>Return paths to all files referenced by this model.</summary>
        </member>
        <member name="M:Models.Factorial.Factor.RemovePathsFromReferencedFileNames">
            <summary>Remove all paths from referenced filenames.</summary>
        </member>
        <member name="T:Models.Factorial.Factors">
            <summary>
            A model representing an experiment's factors
            </summary>
        </member>
        <member name="P:Models.Factorial.Factors.factors">
            <summary>Gets the factors.</summary>
            <value>The factors.</value>
        </member>
        <member name="T:Models.Factorial.Permutation">
            <summary>
            This class permutates all child models by each other.
            </summary>
        </member>
        <member name="M:Models.Factorial.Permutation.GetPermutations">
            <summary>
            Get a list of all permutations of child factors and compositefactors.
            </summary>
        </member>
        <member name="T:Models.ForageDigestibility.DigestibleBiomass">
            <summary>A class to hold a mass of digestible biomass. NOTE: mass is in kg/ha.</summary>
        </member>
        <member name="M:Models.ForageDigestibility.DigestibleBiomass.#ctor(Models.PMF.Interfaces.DamageableBiomass,Models.ForageDigestibility.ForageMaterialParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="material">Biomass.</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:Models.ForageDigestibility.DigestibleBiomass.#ctor(Models.PMF.Interfaces.DamageableBiomass,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="material">Biomass.</param>
            <param name="digestibility">Digestibility.</param>
        </member>
        <member name="P:Models.ForageDigestibility.DigestibleBiomass.Name">
            <summary>Name of material.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.DigestibleBiomass.Total">
            <summary>Total biomass (g/m2).</summary>
        </member>
        <member name="P:Models.ForageDigestibility.DigestibleBiomass.Consumable">
            <summary>Consumable biomass (g/m2).</summary>
        </member>
        <member name="P:Models.ForageDigestibility.DigestibleBiomass.IsLive">
            <summary>Is biomass live.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.DigestibleBiomass.Digestibility">
            <summary>Digestibility of material.</summary>
        </member>
        <member name="T:Models.ForageDigestibility.ForageMaterialParameters">
            <summary>Encapsulates parameters for a forage material (e.g. leaf.live, leaf.dead, stem.live  etc).</summary>
        </member>
        <member name="M:Models.ForageDigestibility.ForageMaterialParameters.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Models.ForageDigestibility.ForageMaterialParameters.#ctor(Models.Core.IModel,System.String,System.Boolean,System.String,System.Double,System.Double)">
            <summary>
            Constuctor
            </summary>
            <param name="parentModel">Parent model.</param>
            <param name="name">Name.</param>
            <param name="live">Is live material?</param>
            <param name="digestibility">Digestibility.</param>
            <param name="fractionConsumable">Fraction consumable.</param>
            <param name="minimum">Minimum mass to maintain (kg/ha).</param>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.Name">
            <summary>Name of material.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.IsLive">
            <summary>Is it live material?</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.DigestibilityString">
            <summary>Digestibility of material (0-1). Can be value or expresison.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.FractionConsumable">
            <summary>Fraction of material that is consumable.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.MinimumAmount">
            <summary>Minimum amount (mass) of material that is consumable (kg/ha).</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.Digestibility">
            <summary>Digestibility of material (0-1).</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ForageMaterialParameters.UseDigestibilityFromModel">
            <summary>Use digestibility from the mode?</summary>
        </member>
        <member name="M:Models.ForageDigestibility.ForageMaterialParameters.Initialise(Models.Core.IModel)">
            <summary>Initialise the instance.</summary>
            <param name="parentModel">Parent model.</param>
        </member>
        <member name="T:Models.ForageDigestibility.Forages">
            <summary>
            Encapsulates a collection of forage parameters and a collection of forage models (e.g. wheat).
            The user interface calls the Tables property to get a table representation of all
            forage parameters.
            The stock model calls methods of this class to discover what forages are consumable by animals.
            </summary>
        </member>
        <member name="P:Models.ForageDigestibility.Forages.Parameters">
            <summary>Forage parameters for all models and all organs.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.Forages.Tables">
            <summary>Gets or sets the table of values.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.Forages.ModelsWithDigestibleBiomass">
            <summary>Return a collection of models that have digestible biomasses.</summary>
        </member>
        <member name="M:Models.ForageDigestibility.Forages.GetParametersAsGrid">
            <summary>Return a table of all parameters.</summary>
        </member>
        <member name="M:Models.ForageDigestibility.Forages.GetForageParametersAsRow(System.Data.DataTable,System.String,System.String)">
            <summary>
            Get, as a DataRow, forage parameters for a model and organ.
            </summary>
            <param name="data">The DataTable the row is to belong to.</param>
            <param name="modelName">The name of the model.</param>
            <param name="organName">The name of the organ.</param>
            <returns></returns>
        </member>
        <member name="M:Models.ForageDigestibility.Forages.SetParametersFromGrid(System.Data.DataTable)">
            <summary>
            Set the parameters property from a data table.
            </summary>
            <param name="data">The data table.</param>
        </member>
        <member name="T:Models.ForageDigestibility.ModelWithDigestibleBiomass">
            <summary>Encapsulates a model that has zero or more digestible biomass instances.</summary>
        </member>
        <member name="M:Models.ForageDigestibility.ModelWithDigestibleBiomass.#ctor(Models.PMF.Interfaces.IHasDamageableBiomass,System.Collections.Generic.IEnumerable{Models.ForageDigestibility.ForageMaterialParameters})">
            <summary>Constructor.</summary>
            <param name="forageModel">A model that has damageable biomass.</param>
            <param name="parameters">Parameters for this forage.</param>
        </member>
        <member name="P:Models.ForageDigestibility.ModelWithDigestibleBiomass.Name">
            <summary>Name of forage model.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ModelWithDigestibleBiomass.Zone">
            <summary>Zone that forage is located in.</summary>
        </member>
        <member name="P:Models.ForageDigestibility.ModelWithDigestibleBiomass.Material">
            <summary>A collection of digestible material that can be grazed.</summary>
        </member>
        <member name="M:Models.ForageDigestibility.ModelWithDigestibleBiomass.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Remove biomass from an organ.
            </summary>
            <param name="materialName">Name of organ.</param>
            <param name="biomassToRemove">Biomass to remove.</param>
        </member>
        <member name="M:Models.ForageDigestibility.ModelWithDigestibleBiomass.RemoveBiomass(System.Double,System.Double,System.Double,Models.Core.ISummary)">
            <summary>Removes a given amount of biomass (and N) from the plant.</summary>
            <param name="amountToRemove">The amount of biomass to remove (g/m2).</param>
            <param name="PreferenceForGreenOverDead">Relative preference for live over dead material during graze (>0.0).</param>
            <param name="PreferenceForLeafOverStems">Relative preference for leaf over stem-stolon material during graze (>0.0).</param>
            <param name="summary">Optional summary object.</param>
        </member>
        <member name="M:Models.ForageDigestibility.ModelWithDigestibleBiomass.RemoveBiomass(System.String,System.Double,Models.Core.ISummary)">
            <summary>Removes plant material simulating a graze event.</summary>
            <param name="type">The type of amount being defined (SetResidueAmount or SetRemoveAmount)</param>
            <param name="amount">The DM amount (g/m2)</param>
            <param name="summary">Optional summary object.</param>
        </member>
        <member name="T:Models.Functions.AccumulateAtEvent">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateAtEvent.events">
            Links
             -----------------------------------------------------------------------------------------------------------
            <summary>Link to an event service.</summary>
        </member>
        <member name="F:Models.Functions.AccumulateAtEvent.phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.AccumulateAtEvent.accumulatedValue">
            Private fields
            -----------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Models.Functions.AccumulateAtEvent.StartStageName">
            Public Properties
             -----------------------------------------------------------------------------------------------------------
             <summary>The start stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateAtEvent.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateAtEvent.AccumulateEventName">
            <summary>The end stage name</summary>
        </member>
        <member name="M:Models.Functions.AccumulateAtEvent.Value(System.Int32)">
            6. Public methods
             -----------------------------------------------------------------------------------------------------------
             <summary>Gets the value.</summary>
             <value>The value.</value>
        </member>
        <member name="M:Models.Functions.AccumulateAtEvent.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="M:Models.Functions.AccumulateAtEvent.OnConnectToEvents(System.Object,System.EventArgs)">
            7. Private methods
             -----------------------------------------------------------------------------------------------------------
            <summary>
            Connect event handlers.
            </summary>
            <param name="sender">Sender object..</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateAtEvent.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateAtEvent.OnCalcEvent(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Models.Functions.AccumulateByDate">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateByDate.AccumulatedValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByDate.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByDate.clock">
            <summary>The Clock</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByDate.StartDate">
            <summary>The start date</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByDate.EndDate">
            <summary>The end date</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByDate.ResetDate">
            <summary>The reset date</summary>
        </member>
        <member name="M:Models.Functions.AccumulateByDate.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByDate.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Called at the start of each day</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateByDate.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.AccumulateByNumericPhase">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateByNumericPhase.AccumulatedValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByNumericPhase.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByNumericPhase.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.StartStageName">
            <summary>The start stage name in numeric values</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.ResetStageName">
            <summary>The reset stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnCut">
            <summary>The fraction removed on Cut event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnHarvest">
            <summary>The fraction removed on Harvest event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnGraze">
            <summary>The fraction removed on Graze event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnPrune">
            <summary>The fraction removed on Prun event</summary>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.PostPhenology(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnCut(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnHarvest(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnGraze(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnPrune(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.AccumulateFunction">
            <summary>Accumulates a child function between a start and end stage.
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateFunction.phenology">
            Links
             -----------------------------------------------------------------------------------------------------------
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.AccumulateFunction.startStageIndex">
            Private class members
            -----------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Models.Functions.AccumulateFunction.StartStageName">
            Public Properties
             -----------------------------------------------------------------------------------------------------------
            <summary>The start stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.ResetStageName">
            <summary>The reset stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnCut">
            <summary>The fraction removed on Cut event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnHarvest">
            <summary>The fraction removed on Harvest event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnGraze">
            <summary>The fraction removed on Graze event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnPrune">
            <summary>The fraction removed on Prun event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.ChildFunctionList">
            <summary>String list of child functions</summary>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.PostPhenology(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnCut(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnHarvest(System.Object,System.EventArgs)">
            <summary>Called when harvest.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnGraze(System.Object,System.EventArgs)">
            <summary>Called when Graze.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnPrune(System.Object,System.EventArgs)">
            <summary>Called when winter pruning.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.AccumulateResetAtStage">
            <summary>
            A function that accumulates values from child functions, and reset to zero each time the specisified stage is passed.
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateResetAtStage.AccumulatedValue">
            Private class members
            -----------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Models.Functions.AccumulateResetAtStage.ResetStageName">
            Public Properties
             -----------------------------------------------------------------------------------------------------------
            <summary>The reset stage name</summary>
        </member>
        <member name="M:Models.Functions.AccumulateResetAtStage.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateResetAtStage.PostPhenology(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateResetAtStage.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.AccumulateResetAtStage.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.AccumulateResetAtStage.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateResetAtStage.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.AddFunction">
            <summary>A class that returns the sum of its child functions.</summary>
        </member>
        <member name="F:Models.Functions.AddFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.AddFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.AddFunction.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.AgeCalculatorFunction">
            <summary>
            An age calculator function
            </summary>
        </member>
        <member name="M:Models.Functions.AgeCalculatorFunction.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AgeCalculatorFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="T:Models.Functions.ArrayFunction">
            <summary>
            Returns the value at the given index. If the index is outside the array, the last value will be returned.
            </summary>
        </member>
        <member name="P:Models.Functions.ArrayFunction.Values">
            <summary>Gets the value.</summary>
        </member>
        <member name="P:Models.Functions.ArrayFunction.Units">
            <summary>Gets the optional units</summary>
        </member>
        <member name="M:Models.Functions.ArrayFunction.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.Functions.BellCurveFunction">
            <summary>
            Calculates the maximum leaf size (mm2/leaf) given its node position (Elings, 2000 - Agronomy Journal 92, 436-444)
            </summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.LargestLeafPosition">
            <summary>The largest leaf position</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.AreaMax">
            <summary>The area maximum</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.Breadth">
            <summary>The breadth</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.Skewness">
            <summary>The skewness</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.Structure">
            <summary>The structure</summary>
        </member>
        <member name="M:Models.Functions.BellCurveFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="T:Models.Functions.BetaGrowthFunction">
            <summary>
            Takes the value of the child as the x value and returns the y value 
            from a beta growth function of the form y = Ymax * (1 + (te - t)/(te-tm))* (t/te)^(te/(te-tm))
            See Yin et al 2003 A Flexible Sigmoid Function of Determinate Growth
            </summary>
        </member>
        <member name="F:Models.Functions.BetaGrowthFunction.Ymax">
            <summary>Ymax, the maximum value for weight, length or others </summary>
        </member>
        <member name="F:Models.Functions.BetaGrowthFunction.XValue">
            <summary>The thermal time value</summary>
        </member>
        <member name="P:Models.Functions.BetaGrowthFunction.tm">
            <summary>tm, the time at which the maximum growth RATE is obtained  </summary>
        </member>
        <member name="P:Models.Functions.BetaGrowthFunction.te">
            <summary>te, the time at which Ymax is obtained </summary>
        </member>
        <member name="M:Models.Functions.BetaGrowthFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Error with values to Betagrwoth function</exception>
        </member>
        <member name="T:Models.Functions.BoundFunction">
            <summary>
            Bounds the child function between lower and upper bounds
            </summary>
        </member>
        <member name="F:Models.Functions.BoundFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.BoundFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.BoundFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.CalculateOnceFunction">
            <summary>
            Returns the a value calculated at the start of the simulation and then held constant
            </summary>
        </member>
        <member name="F:Models.Functions.CalculateOnceFunction._Value">
            <summary>The _ value</summary>
        </member>
        <member name="F:Models.Functions.CalculateOnceFunction.ValueToHold">
            <summary>The value to calculate and hold</summary>
        </member>
        <member name="M:Models.Functions.CalculateOnceFunction.OnCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.CalculateOnceFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.Constant">
            <summary>
            A constant function (name=value)
            </summary>
        </member>
        <member name="P:Models.Functions.Constant.FixedValue">
            <summary>Gets the value.</summary>
        </member>
        <member name="P:Models.Functions.Constant.Units">
            <summary>Gets the optional units</summary>
        </member>
        <member name="M:Models.Functions.Constant.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="M:Models.Functions.Constant.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.CSharpExpressionFunction">
            <summary>
            A c# expression is evaluated.
            </summary>
        </member>
        <member name="M:Models.Functions.CSharpExpressionFunction.Compile``1(System.String,Models.Core.IModel,Models.Core.ScriptCompiler,``0@,System.String@)">
            <summary>
            Compile the expression and return the compiled function.
            </summary>
            <param name="expression">The expression to compile.</param>
            <param name="relativeTo">The model the expression is for.</param>
            <param name="compiler">An instance of the script compiler.</param>
            <param name="function">The returned function or null if not compilable.</param>
            <param name="errorMessages">The error messages from the compiler.</param>
        </member>
        <member name="T:Models.Functions.DailyMeanVPD">
            <summary>
            This Function calculates a mean daily VPD from Max and Min weighted toward Max according to the specified MaximumVPDWeight factor.  
            This is then passed into the XY matrix as the x property and the function returns the y value
            </summary>
        </member>
        <member name="P:Models.Functions.DailyMeanVPD.MaximumVPDWeight">
            <summary>The maximum temperature weighting</summary>
        </member>
        <member name="F:Models.Functions.DailyMeanVPD.MetData">
            <summary>The met data</summary>
        </member>
        <member name="M:Models.Functions.DailyMeanVPD.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DailyMeanVPD.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.DecumulateFunction">
            <summary>
            Starts with an initial value and subtracts the value of a child
            function each day.
            </summary>
        </member>
        <member name="P:Models.Functions.DecumulateFunction.InitialValue">
            <summary>
            The initial value.
            </summary>
        </member>
        <member name="P:Models.Functions.DecumulateFunction.MinValue">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Models.Functions.DecumulateFunction.StartStageName">
            <summary>
            Optional: Name of the stage at which to start decumulation.
            </summary>
        </member>
        <member name="P:Models.Functions.DecumulateFunction.ResetStageName">
            <summary>
            Optional: Name of the phenological stage at which the value should be reset.
            </summary>
        </member>
        <member name="P:Models.Functions.DecumulateFunction.StopStageName">
            <summary>
            Optional: Name of the phenological stage at which to stop decumulation.
            </summary>
        </member>
        <member name="F:Models.Functions.DecumulateFunction.accumulator">
            <summary>
            The daily value we want to track.
            </summary>
        </member>
        <member name="F:Models.Functions.DecumulateFunction.child">
            <summary>
            Child function whose value will be successively subtracted from the
            accumulator.
            </summary>
        </member>
        <member name="F:Models.Functions.DecumulateFunction.phenology">
            <summary>
            Phenology.
            </summary>
        </member>
        <member name="M:Models.Functions.DecumulateFunction.OnCommencing(System.Object,System.EventArgs)">
            <summary>
            Invoked at the start of simulation. Sets the accumulator to its
            initial value.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Functions.DecumulateFunction.OnPostPhenology(System.Object,System.EventArgs)">
            <summary>
            Invoked after daily phenology. Updates the accumulator.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Functions.DecumulateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <param name="arrayIndex">The array index (unused).</param>
        </member>
        <member name="T:Models.Functions.DeltaFunction">
            <summary>
            This function returns the daily delta for its child function
            </summary>
        </member>
        <member name="F:Models.Functions.DeltaFunction.YesterdaysValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="P:Models.Functions.DeltaFunction.StartStageName">
            <summary>The start stage name</summary>
        </member>
        <member name="F:Models.Functions.DeltaFunction.Integral">
            <summary>The child function to return a delta for</summary>
        </member>
        <member name="F:Models.Functions.DeltaFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="M:Models.Functions.DeltaFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DeltaFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DeltaFunction.OnStageReset(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DeltaFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.AllometricDemandFunction">
            <summary>This function calculated dry matter demand using plant allometry which is described using a simple power function (y=kX^p).</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.AllometricDemandFunction.Const">
            <summary>The constant</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.AllometricDemandFunction.Power">
            <summary>The power</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.AllometricDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Cannot find variable:  + XProperty +  in function:  + this.Name
            or
            Cannot find variable:  + YProperty +  in function:  + this.Name
            </exception>
        </member>
        <member name="M:Models.Functions.DemandFunctions.AllometricDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.BerryFillingRateFunction">
            <summary>Filling rate is calculated from grain number, a maximum mass to be filled and the duration of the filling process.</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.FirstPhase">
            <summary>InitialGrowthPhase</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.SecondPhase">
            <summary>SecondaryGrowthPhase</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wo1">
            <summary>Wo1</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wf1">
            <summary>Wf1</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Mu1">
            <summary>Mu1</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wo2">
            <summary>Wo2</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wf2">
            <summary>Wf2</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Mu2">
            <summary>Mu2</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.BerryFillingRateFunction.Phenology">
            <summary>
            Link to phenology
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.BerryFillingRateFunction.TT">
            <summary>
            Thermal time that drives berry development
            </summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.BerryFillingRateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.BerryFillingRateFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.BerryFillingRateFunction.OnPruning(System.Object,System.EventArgs)">
            <summary>Called when crop is being prunned.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.FillingRateFunction">
            <summary>Filling rate is calculated from grain number, a maximum mass to be filled and the duration of the filling process.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.FillingDuration">
            <summary>The partition fraction</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.NumberFunction">
            <summary>The filling rate</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.ThermalTime">
            <summary>Thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.PotentialSizeIncrement">
            <summary>The maximum weight or maximum amount of N incremented for individual grains in a given phase</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.FillingRateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.FillingRateFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.InternodeCohortDemandFunction">
            <summary>Calculate individual internode demand base on age and maxSize.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.#ctor">
            <summary>YinBetaFunction Constructor</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Lmax">
            <summary>Lmax</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.te">
            <summary>te</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.tm">
            <summary>The tm</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Leaf">
            <summary>The leaf </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Structure">
            <summary>The structure</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.InternodeDemandFunction">
            <summary>Internode demand is calculated fromm the product of change in node number, stem population and internode weight.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeDemandFunction.InterNodeWt">
            <summary>The inter node wt</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeDemandFunction.Structure">
            <summary>The structure</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.PartitionFractionDemandFunction">
            <summary>Returns the product of its PartitionFraction and the total DM supplied to the arbitrator by all organs.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.PartitionFraction">
            <summary>The partition fraction</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.arbitrator">
            <summary>The arbitrator</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.PopulationBasedDemandFunction">
            <summary>Demand is calculated from the product of growth rate, thermal time and population.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.ThermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.OrganPopulation">
            <summary>The number of growing organs</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.ExpansionStress">
            <summary>The expansion stress</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.MaximumOrganWt">
            <summary>The maximum organ wt</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.StartStage">
            <summary>The start stage</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.GrowthDuration">
            <summary>The growth duration</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.AccumulatedThermalTime">
            <summary>The accumulated thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.ThermalTimeToday">
            <summary>The thermal time today</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when DoDailyInitialisation invoked</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.PotentialSizeDemandFunction">
            <summary>Demand is calculated from the product of potential growth increment, organ number and thermal time.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.StartStageName">
            <summary>The start stage name</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.PotentialGrowthIncrement">
            <summary>The potential growth increment</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.OrganNumber">
            <summary>The organ number</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.ThermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.AccumThermalTime">
            <summary>The accum thermal time</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.AccumulatedThermalTime">
            <summary>Gets the accumulated thermal time.</summary>
            <value>The accumulated thermal time.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction">
            <summary>This function calculates DM demand beyond the start stage as the product of current organ wt (g), relative growth rate and the specified organ number.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.InitialWt">
            <summary>The initial wt</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.InitialStageName">
            <summary>The initial stage name</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.RelativeGrowthRate">
            <summary>The relative growth rate</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.OrganNumber">
            <summary>The organ number</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Live">
            <summary>The live</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.StartWt">
            <summary>The start wt</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.StorageDMDemandFunction">
            <summary>The partitioning of daily growth to storage biomass is based on a storage fraction.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.StorageDMDemandFunction.storageFraction">
            <summary>The Storage Fraction</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageDMDemandFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageDMDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageDMDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.StorageNDemandFunction">
            <summary>The partitioning of daily N supply to storage N attempts to bring the organ's N content to the maximum concentration.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.StorageNDemandFunction.maxNConc">
            <summary>The maximum N concentration of the organ</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.StorageNDemandFunction.nitrogenDemandSwitch">
            <summary>Switch to modulate N demand</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageNDemandFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageNDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageNDemandFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.DemandFunctions.TEWaterDemandFunction">
            <summary>Water demand is calculated using the Transpiration Efficiency (TE) approach (ie TE=Coefficient/VDP).</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.SVPFrac">
            <summary>Average Daily Vapour Pressure Deficit as a proportion of daily Maximum.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.TranspirationEfficiencyCoefficient">
            <summary>Transpiration Efficiency Coefficient to relate TE to daily VPD</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.TEWaterDemandFunction.VPD">
            <summary>Computes the vapour pressure deficit.</summary>
            <value>The vapour pressure deficit (hPa?)</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.TEWaterDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.TEWaterDemandFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.DivideFunction">
            <summary>A class that divides all child functions.</summary>
        </member>
        <member name="F:Models.Functions.DivideFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.DivideFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DivideFunction.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.EndOfDayFunction">
            <summary>
            Tracks the value of a child function but only refreshes the value at
            end of day.
            </summary>
        </member>
        <member name="F:Models.Functions.EndOfDayFunction.value">
            <summary>
            Yesterday's value.
            </summary>
        </member>
        <member name="F:Models.Functions.EndOfDayFunction.child">
            <summary>
            The child function.
            </summary>
        </member>
        <member name="M:Models.Functions.EndOfDayFunction.OnEndOfDay(System.Object,System.EventArgs)">
            <summary>
            Invoked at the end of each day. Updates the stored value.
            </summary>
        </member>
        <member name="M:Models.Functions.EndOfDayFunction.Value(System.Int32)">
            <summary>
            Returns the the value of a child function as of the end of
            yesterday.
            </summary>
            <param name="arrayIndex">Ignored.</param>
        </member>
        <member name="T:Models.Functions.ExponentialFunction">
            <summary>
            An exponential function
            </summary>
        </member>
        <member name="M:Models.Functions.ExponentialFunction.#ctor">
            <summary>ExponentialFunction Constructor</summary>
        </member>
        <member name="P:Models.Functions.ExponentialFunction.A">
            <summary>a</summary>
        </member>
        <member name="P:Models.Functions.ExponentialFunction.B">
            <summary>The b</summary>
        </member>
        <member name="P:Models.Functions.ExponentialFunction.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Functions.ExponentialFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.ExponentialFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Sigmoid function must have only one argument</exception>
        </member>
        <member name="T:Models.Functions.ExpressionFunction">
            <summary>
            A mathematical expression is evaluated using variables exposed within the Plant Modelling Framework.
            </summary>
        </member>
        <member name="F:Models.Functions.ExpressionFunction.expression">
            <summary>The expression.</summary>
        </member>
        <member name="P:Models.Functions.ExpressionFunction.Expression">
            <summary>The expression.</summary>
        </member>
        <member name="F:Models.Functions.ExpressionFunction.fn">
            <summary>The function</summary>
        </member>
        <member name="F:Models.Functions.ExpressionFunction.parsed">
            <summary>The parsed</summary>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Parse(APSIM.Shared.Utilities.ExpressionEvaluator,System.String)">
            <summary>Parses the specified function.</summary>
            <param name="fn">The function.</param>
            <param name="ExpressionProperty">The expression property.</param>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.FillVariableNames(APSIM.Shared.Utilities.ExpressionEvaluator,Models.Core.Model,System.Int32)">
            <summary>Fills the variable names.</summary>
            <param name="fn">The function.</param>
            <param name="RelativeTo">The relative to.</param>
            <param name="arrayIndex">The array index</param>
            <exception cref="T:System.Exception">Cannot find variable:  + sym.m_name +  in function:  + RelativeTo.Name</exception>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Evaluate(APSIM.Shared.Utilities.ExpressionEvaluator)">
            <summary>Evaluates the specified function.</summary>
            <param name="fn">The function.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Evaluate(System.String,Models.Core.Model)">
            <summary>
            Return the value of the specified property as an object. The PropertyName
            is relative to the RelativeTo argument (usually Plant).
            Format:
            [function(]VariableName[)]
            Where:
            function is optional and can be one of Sum, subtract, multiply, divide, max, min
            VariableName is the name of a Plant variable. It can also include an array. Array can
            have a filter inside of square brackets. Filter can be an array index (0 based)
            or be the name of a class or base class.
            e.g. Leaf.MinT
            sum(Leaf.Leaves[].Live.Wt)              - sums all live weights of all objects in leaves array.
            subtract(Leaf.Leaves[].Live.Wt)         - subtracts all live weights of all objects in leaves array.
            Leaf.Leaves[1].Live.Wt                  - returns the live weight of the 2nd element of the leaves array.
            sum(Leaf.Leaves[AboveGround].Live.Wt)   - returns the live weight of the 2nd element of the leaves array.
            </summary>
            <param name="Expression">The expression.</param>
            <param name="RelativeTo">The relative to.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.ExternalVariable">
            <summary>
            Returns the value of a nominated external APSIM numerical variable.
            Note: This should be merged with the variable function when naming convention
            to refer to internal and external variable is standardized. FIXME
            </summary>
        </member>
        <member name="P:Models.Functions.ExternalVariable.VariableName">
            <summary>The variable name</summary>
        </member>
        <member name="M:Models.Functions.ExternalVariable.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="T:Models.Functions.GrainNumberFunction">
            <summary>
            Calculates the current grain number.
            </summary>
        </member>
        <member name="F:Models.Functions.GrainNumberFunction.potentialGrainNumber">
            <summary>
            Potential total number of grains
            </summary>
        </member>
        <member name="F:Models.Functions.GrainNumberFunction.growthRateFactor">
            <summary>
            Amount of grain growth per day
            </summary>
        </member>
        <member name="F:Models.Functions.GrainNumberFunction.stressFactor">
            <summary>
            Effect of stress on daily growth (between 0-1).
            </summary>
        </member>
        <member name="M:Models.Functions.GrainNumberFunction.Value(System.Int32)">
            <summary>
            Get the grain number.
            </summary>
            <param name="arrayIndex">Array index (irrelevant for this function).</param>
        </member>
        <member name="T:Models.Functions.HoldFunction">
            <summary>
            Returns the a value which is updated daily until a given stage is reached, beyond which it is held constant
            </summary>
        </member>
        <member name="F:Models.Functions.HoldFunction._Value">
            <summary>The _ value</summary>
        </member>
        <member name="P:Models.Functions.HoldFunction.WhenToHold">
            <summary>The set event</summary>
        </member>
        <member name="F:Models.Functions.HoldFunction.ValueToHold">
            <summary>The value to hold after event</summary>
        </member>
        <member name="F:Models.Functions.HoldFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="M:Models.Functions.HoldFunction.OnCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.HoldFunction.OnDoUpdate(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.HoldFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.HoldFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="M:Models.Functions.HoldFunction.GetValue">
            <summary>Get value</summary>
        </member>
        <member name="T:Models.Functions.HourlyInterpolation">
            <summary>
            This class uses aggregates, using a child aggregation function, sub-daily values from a child response function..
            Each of the interpolated values are passed into the response function and then given to the aggregation function.
            </summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.InterpolationMethod">
            <summary> Method for interpolating Max and Min temperature to sub daily values </summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.Response">
            <summary>The temperature response function applied to each sub daily temperature and averaged to give daily mean</summary>
        </member>
        <member name="P:Models.Functions.HourlyInterpolation.agregationMethod">
            <summary>Method used to agreagate sub daily values</summary>
        </member>
        <member name="T:Models.Functions.HourlyInterpolation.AgregationMethod">
            <summary>Method used to agreagate sub daily values</summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.AgregationMethod.Average">
            <summary>Return average of sub daily values</summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.AgregationMethod.Sum">
            <summary>Return sum of sub daily values</summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.SubDailyInput">
            <summary>Temperatures interpolated to sub daily values from Tmin and Tmax</summary>
        </member>
        <member name="F:Models.Functions.HourlyInterpolation.SubDailyResponse">
            <summary>Temperatures interpolated to sub daily values from Tmin and Tmax</summary>
        </member>
        <member name="M:Models.Functions.HourlyInterpolation.Value(System.Int32)">
            <summary>Daily average temperature calculated from sub daily temperature interpolations</summary>
        </member>
        <member name="M:Models.Functions.HourlyInterpolation.OnDailyInitialisation(System.Object,System.EventArgs)">
            <summary> Set the sub dialy temperature values for the day then call temperature response function and set value for each sub daily period</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Functions.HourlyInterpolation.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.ThreeHourSin">
            <summary>
            Firstly 3-hourly estimates of air temperature (Ta) are interpolated 
            using the method of [jones_ceres-maize:_1986] which assumes a sinusoidal temperature. 
            pattern between Tmax and Tmin.  
            </summary>
        </member>
        <member name="F:Models.Functions.ThreeHourSin.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.ThreeHourSin.TempRangeFactors">
            <summary>Factors used to multiply daily range to give diurnal pattern of temperatures between Tmax and Tmin</summary>
        </member>
        <member name="P:Models.Functions.ThreeHourSin.OutputValueType">
            <summary>The type of variable for sub-daily values</summary>
        </member>
        <member name="M:Models.Functions.ThreeHourSin.SubDailyValues">
            <summary>
            Calculate temperatures at 3 hourly intervals from min and max using sin curve
            </summary>
            <returns>list of 8 temperature estimates for 3 hourly periods</returns>
        </member>
        <member name="M:Models.Functions.ThreeHourSin.OnCommencing(System.Object,System.EventArgs)">
            <summary> Set the sub daily temperature range factor values at sowing</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Functions.ThreeHourSin.t_range_fract">
            <summary>Fraction_of of day's range_of for this 3 hr period</summary>
        </member>
        <member name="M:Models.Functions.ThreeHourSin.Document">
            <summary>Writes documentation for this function</summary>
        </member>
        <member name="T:Models.Functions.HourlySinPpAdjusted">
            <summary>
            Firstly hourly estimates of air temperature (Ta) are interpolated from Tmax, Tmin and daylength (d) 
            using the method of [Goudriaan1994].  
            During sunlight hours Ta is calculated each hour using a 
            sinusoidal curve fitted to Tmin and Tmax . 
            After sunset Ta is calculated as an exponential decline from Ta at sunset 
            to the Tmin at sunrise the next day.
            The hour (Th) of sunrise is calculated as Th = 12 − d/2 and Ta is assumed 
            to equal Tmin at this time.  Tmax is reached when Th equals 13.5. 
            </summary>
        </member>
        <member name="F:Models.Functions.HourlySinPpAdjusted.MetData">
            <summary>The met data</summary>
        </member>
        <member name="P:Models.Functions.HourlySinPpAdjusted.OutputValueType">
            <summary>The type of variable for sub-daily values</summary>
        </member>
        <member name="P:Models.Functions.HourlySinPpAdjusted.Tsset">
            <summary>
            Temperature at the most recent sunset
            </summary>
        </member>
        <member name="M:Models.Functions.HourlySinPpAdjusted.OnCommencing(System.Object,System.EventArgs)">
            <summary> Set the sub daily temperature range factor values at sowing</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Functions.HourlySinPpAdjusted.SubDailyValues">
            <summary>Creates a list of temperature range factors used to estimate daily temperature from Min and Max temp</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.HourlySinPpAdjusted.Document">
            <summary>Writes documentation for this function</summary>
        </member>
        <member name="T:Models.Functions.HourlyRadiation">
            <summary>
            Firstly hourly estimates of solar radiation are interpolated from solar daily radiation
            </summary>
        </member>
        <member name="F:Models.Functions.HourlyRadiation.MetData">
            <summary>
            Link to the weather object
            </summary>
        </member>
        <member name="F:Models.Functions.HourlyRadiation.clock">
            <summary>
            Link to the clock object
            </summary>
        </member>
        <member name="P:Models.Functions.HourlyRadiation.OutputValueType">
            <summary>The type of variable for sub-daily values</summary>
        </member>
        <member name="M:Models.Functions.HourlyRadiation.SubDailyValues">
            <summary>
            Hourly radiation estimation ported from https://github.com/BrianCollinss/ApsimX/blob/12a89f9981e2636f13251b0faa30200a98b713ce/Models/Functions/SupplyFunctions/MaximumHourlyTrModel.cs#L260
            by Hamish
            Note, this has not been tested and probably has errors as it is not a dirrect port
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.HourlyRadiation.Document">
            <summary>Writes documentation for this function</summary>
        </member>
        <member name="T:Models.Functions.IInterpolationMethod">
            <summary>An interface that defines what needs to be implemented by an organthat has a water demand.</summary>
        </member>
        <member name="M:Models.Functions.IInterpolationMethod.SubDailyValues">
            <summary>Calculate temperature at specified periods during the day.</summary>
        </member>
        <member name="P:Models.Functions.IInterpolationMethod.OutputValueType">
            <summary>The type of variable for sub-daily values</summary>
        </member>
        <member name="T:Models.Functions.LessThanFunction">
            <summary>Value returned is determined according to given criteria</summary>
        </member>
        <member name="F:Models.Functions.LessThanFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.LessThanFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.LessThanFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.LinearAfterThresholdFunction">
            <summary>
            Function to return the value for a function with a trigger and slope from it
                           /
                          /
            -------------/
                        x
            </summary>
        </member>
        <member name="P:Models.Functions.LinearAfterThresholdFunction.XProperty">
            <summary>The x property</summary>
        </member>
        <member name="P:Models.Functions.LinearAfterThresholdFunction.XTrigger">
            <summary>
            The trigger value on the X axis
            </summary>
        </member>
        <member name="P:Models.Functions.LinearAfterThresholdFunction.Slope">
            <summary>
            The slope or gradient of the linear series
            </summary>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="xproperty"></param>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.Value(System.Int32)">
            <summary>
            Get the value of the function
            </summary>
            <param name="arrayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.ValueForX(System.Double)">
            <summary>
            Gets the value of the function for a given value of the x property.
            </summary>
            <param name="x">An x-value.</param>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.LinearInterpolationFunction">
            <summary>
            A linear interpolation model.
            </summary>
        </member>
        <member name="F:Models.Functions.LinearInterpolationFunction.YsAreAllTheSame">
            <summary>The ys are all the same</summary>
        </member>
        <member name="F:Models.Functions.LinearInterpolationFunction.XYPairs">
            <summary>Gets the xy pairs.</summary>
        </member>
        <member name="F:Models.Functions.LinearInterpolationFunction.XValue">
            <summary>The x value to use for interpolation</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.#ctor(System.Double[],System.Double[])">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.Functions.LinearInterpolationFunction.XVariableName">
            <summary>Return the name of the x variable. Used as graph x axis title.</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.#ctor(System.String,System.Double[],System.Double[])">
            <summary>Constructor</summary>
            <param name="xProperty">name of the x property</param>
            <param name="x">x values.</param>
            <param name="y">y values.</param>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.OnCreated">
            <summary>Called when model has been created.</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot find value for  + Name +  XProperty:  + XProperty</exception>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.ValueForX(System.Double)">
            <summary>Values for x.</summary>
            <param name="XValue">The x value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.LiveOnEventFunction">
            <summary>
            Returns the live value of a child function depending on whether an event has occurred.
            Similar to OnEventFunction, except that OnEventFunction only updates its value
            when phase changes. This function will always return the live value of the appropriate child.
            </summary>
        </member>
        <member name="P:Models.Functions.LiveOnEventFunction.SetEvent">
            <summary>The set event</summary>
        </member>
        <member name="P:Models.Functions.LiveOnEventFunction.ReSetEvent">
            <summary>The re set event</summary>
        </member>
        <member name="F:Models.Functions.LiveOnEventFunction.preEvent">
            <summary>
            When true, we return the pre-event value.
            When false, we return the post-event value.
            </summary>
        </member>
        <member name="F:Models.Functions.LiveOnEventFunction.PreEventValue">
            <summary>The pre event value</summary>
        </member>
        <member name="F:Models.Functions.LiveOnEventFunction.PostEventValue">
            <summary>The post event value</summary>
        </member>
        <member name="M:Models.Functions.LiveOnEventFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.LiveOnEventFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.LiveOnEventFunction.OnHarvesting(System.Object,System.EventArgs)">
            <summary>Called when crop is being harvested.</summary>
        </member>
        <member name="M:Models.Functions.LiveOnEventFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.LiveOnEventFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.MaximumFunction">
            <summary>This class calculates the minimum of all child functions.</summary>
        </member>
        <member name="F:Models.Functions.MaximumFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MaximumFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Models.Functions.MaximumFunction.ChildFunctionList">
            <summary>String list of child functions</summary>
        </member>
        <member name="M:Models.Functions.MaximumFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.MinimumFunction">
            <summary>This class calculates the minimum of all child functions.</summary>
        </member>
        <member name="F:Models.Functions.MinimumFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MinimumFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Models.Functions.MinimumFunction.ChildFunctionList">
            <summary>String list of child functions</summary>
        </member>
        <member name="M:Models.Functions.MinimumFunction.DocumentMinMaxFunction(System.String,System.String,System.Collections.Generic.IEnumerable{Models.Core.IModel})">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.Functions.MinimumFunction.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.MovingAverageFunction">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.NumberOfDays">
            <summary>The number of days over which to calculate the moving average</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.StageToStartMovingAverage">
            <summary>The stage to start calculating moving average</summary>
        </member>
        <member name="F:Models.Functions.MovingAverageFunction.AccumulatedValues">
            <summary>The accumulated value</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.InitialisedToday">
            <summary>Was the moving average array initialised today</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.Calculate">
            <summary>Was the moving average array initialised today</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.ChildFunction">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.OnSowing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.EndOfDay(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs at the end of the day.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.MovingSumFunction">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="P:Models.Functions.MovingSumFunction.NumberOfDays">
            <summary>The number of days over which to calculate the moving sum</summary>
        </member>
        <member name="F:Models.Functions.MovingSumFunction.AccumulatedValues">
            <summary>The accumulated value</summary>
        </member>
        <member name="P:Models.Functions.MovingSumFunction.ChildFunction">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.EndOfDay(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.MultiplyFunction">
            <summary>A class that returns the product of its child functions.</summary>
        </member>
        <member name="F:Models.Functions.MultiplyFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MultiplyFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.MultiplyFunction.DocumentMathFunction(System.Char,System.String,System.Collections.Generic.IEnumerable{Models.Core.IModel})">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.Functions.MultiplyFunction.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.OnEventFunction">
            <summary>
            Returns the a value depending on whether an event has occurred.
            </summary>
        </member>
        <member name="F:Models.Functions.OnEventFunction._Value">
            <summary>The _ value</summary>
        </member>
        <member name="P:Models.Functions.OnEventFunction.SetEvent">
            <summary>The set event</summary>
        </member>
        <member name="P:Models.Functions.OnEventFunction.ReSetEvent">
            <summary>The re set event</summary>
        </member>
        <member name="F:Models.Functions.OnEventFunction.PreEventValue">
            <summary>The pre event value</summary>
        </member>
        <member name="F:Models.Functions.OnEventFunction.PostEventValue">
            <summary>The post event value</summary>
        </member>
        <member name="M:Models.Functions.OnEventFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.OnEventFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.OnEventFunction.OnHarvesting(System.Object,System.EventArgs)">
            <summary>Called when crop is being harvested.</summary>
        </member>
        <member name="M:Models.Functions.OnEventFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.OnEventFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.PhaseLookup">
            <summary>
            Look up a value based upon the current growth phase.
            </summary>
        </member>
        <member name="F:Models.Functions.PhaseLookup.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.PhaseLookup.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.PhaseLookup.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.PhaseLookupValue">
            <summary>
            This function has a value between the specified start and end phases.
            </summary>
        </member>
        <member name="F:Models.Functions.PhaseLookupValue.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.PhaseLookupValue.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="P:Models.Functions.PhaseLookupValue.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.Functions.PhaseLookupValue.End">
            <summary>The end</summary>
        </member>
        <member name="M:Models.Functions.PhaseLookupValue.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Phase start name not set: + Name
            or
            Phase end name not set: + Name
            </exception>
        </member>
        <member name="P:Models.Functions.PhaseLookupValue.InPhase">
            <summary>Gets a value indicating whether [in phase].</summary>
            <value><c>true</c> if [in phase]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Models.Functions.PhaseLookupValue.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="M:Models.Functions.PhaseLookupValue.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.PhotoperiodDeltaFunction">
            <summary>
            Returns the difference between today's and yesterday's photoperiods in hours.
            </summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodDeltaFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodDeltaFunction.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodDeltaFunction.Twilight">
            <summary>The twilight</summary>
        </member>
        <member name="M:Models.Functions.PhotoperiodDeltaFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.PhotoperiodFunction">
            <summary>
            Returns the duration of the day, or photoperiod, in hours.  This is calculated using the specified latitude (given in the weather file)
            and twilight sun angle threshold.  If a variable called ClimateControl.PhotoPeriod is found in the simulation, it will be used instead.
            </summary>
            <remarks>The day length is calculated with \ref MathUtilities.DayLength.</remarks>
            \pre A \ref Models.WeatherFile function has to exist.
            \pre A \ref Models.Clock function has to be existed to retrieve day of year
            \param Twilight The interval between sunrise or sunset and the time when the true centre of the sun is below the horizon as a specified angle.
            \retval The day length of a specified day and location. Variable "photoperiod" will be returned if simulation environment has a variable called ClimateControl.PhotoPeriod.
        </member>
        <member name="F:Models.Functions.PhotoperiodFunction.MetData">
            <summary>The met data.</summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodFunction.Clock">
            <summary>The clock.</summary>
        </member>
        <member name="P:Models.Functions.PhotoperiodFunction.Twilight">
            <summary>The twilight angle.</summary>
        </member>
        <member name="P:Models.Functions.PhotoperiodFunction.DayLength">
            <summary>The daylight length.</summary>
        </member>
        <member name="M:Models.Functions.PhotoperiodFunction.Value(System.Int32)">
            <summary>Gets the main output of this function.</summary>
            <param name="arrayIndex">Not expected for this function.</param>
            <returns>The daylight duration (hours).</returns>
        </member>
        <member name="M:Models.Functions.PhotoperiodFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.PowerFunction">
            <summary>
            Raises the value of the child to the power of the exponent specified
            </summary>
        </member>
        <member name="M:Models.Functions.PowerFunction.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:Models.Functions.PowerFunction.Exponent">
            <summary>The exponent</summary>
        </member>
        <member name="F:Models.Functions.PowerFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.PowerFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Power function must have only one argument</exception>
        </member>
        <member name="T:Models.Functions.ProtectedDivideFunction">
            <summary>
            [DocumentMathFunction /]
            Returns special values if
            the numerator is 0 or if the denominator is 0.
            </summary>
            <remarks>
            Currently used in sorghum/maize code to mimic divide functions
            in old apsim which return 10 if the denominator is 0 or 0 if
            the numerator is 0.
            </remarks>
        </member>
        <member name="P:Models.Functions.ProtectedDivideFunction.NumeratorErrVal">
            <summary>Value to return if numerator is 0.</summary>
        </member>
        <member name="P:Models.Functions.ProtectedDivideFunction.DenominatorErrVal">
            <summary>Value to return if denominator is 0.</summary>
        </member>
        <member name="M:Models.Functions.ProtectedDivideFunction.Value(System.Int32)">
            <summary>
            Returns the value of the function.
            </summary>
        </member>
        <member name="T:Models.Functions.QualitativePPEffect">
            <summary>
             Qualitative Photoperiod effect on developmental rate
            </summary>
        </member>
        <member name="F:Models.Functions.QualitativePPEffect.Photoperiod">
            <summary>The photoperiod</summary>
        </member>
        <member name="P:Models.Functions.QualitativePPEffect.OptimumPhotoperiod">
            <summary>Gets or sets the Optimum Photoperiod</summary>
            <value>Optimum Photoperiod</value>
        </member>
        <member name="P:Models.Functions.QualitativePPEffect.CriticalPhotoperiod">
            <summary>Gets or sets the Critical Photoperiod</summary>
            <value>Critical Photoperiod</value>
        </member>
        <member name="M:Models.Functions.QualitativePPEffect.Value(System.Int32)">
            <summary>Photoperiod factor</summary>
        </member>
        <member name="T:Models.Functions.RootShape.RootShapeCylinder">
            <summary>
            This model calculates the proportion of each soil layer occupided by roots.
            </summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeCylinder.CalcRootProportionInLayers(Models.PMF.Organs.ZoneState)">
            <summary>Calculates the root area for a layer of soil</summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeCylinder.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.RootShape.RootShapeSemiCircle">
            <summary>
            This model calculates the proportion of each soil layer occupided by roots.
            </summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeSemiCircle.CalcRootProportionInLayers(Models.PMF.Organs.ZoneState)">
            <summary>Calculates the root area for a layer of soil</summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeSemiCircle.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.RootShape.RootShapeSemiCircleSorghum">
            <summary>
            This model calculates the proportion of each soil layer occupided by roots.
            The formula used for the circle is wrong as it does not account for the coordinate of the centre!
            </summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeSemiCircleSorghum.CalcRootProportionInLayers(Models.PMF.Organs.ZoneState)">
            <summary>Calculates the root area for a layer of soil</summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeSemiCircleSorghum.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.RootShape.RootShapeSemiEllipse">
            <summary>
            This model calculates the proportion of each soil layer occupided by roots.
            </summary>
        </member>
        <member name="F:Models.Functions.RootShape.RootShapeSemiEllipse.RootAngle">
            <summary>The Root Angle</summary>
        </member>
        <member name="F:Models.Functions.RootShape.RootShapeSemiEllipse.RootAngleBase">
            <summary>The Root Angle for which soil LL values were estimated</summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeSemiEllipse.CalcRootProportionInLayers(Models.PMF.Organs.ZoneState)">
            <summary>Calculates the root area for a layer of soil</summary>
        </member>
        <member name="M:Models.Functions.RootShape.RootShapeSemiEllipse.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.AgeSenescenceFunction">
            <summary>Calculate Senescence due to age for C4Maize</summary>
        </member>
        <member name="F:Models.Functions.AgeSenescenceFunction.phenology">
            <summary>Phenology</summary>
        </member>
        <member name="M:Models.Functions.AgeSenescenceFunction.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AgeSenescenceFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AgeSenescenceFunction.Value(System.Int32)">
            <summary>Calculate Senescence due to age for C4Maize</summary>
        </member>
        <member name="T:Models.Functions.FrostSenescenceFunction">
            <summary>
            [DocumentMathFunction /]
            </summary>
        </member>
        <member name="F:Models.Functions.FrostSenescenceFunction.weather">
            <summary>
            Linke to weather, used for frost senescence calcs.
            </summary>
        </member>
        <member name="F:Models.Functions.FrostSenescenceFunction.metData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.FrostSenescenceFunction.frostKill">
            <summary> Temperature threshold for leaf death, when plant is between floral init and flowering. </summary>
        </member>
        <member name="F:Models.Functions.FrostSenescenceFunction.frostKillSevere">
            <summary>Temperature threshold for leaf death.</summary>
        </member>
        <member name="M:Models.Functions.FrostSenescenceFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.FrostSenescenceFunction.FrostSenescenceMessage(System.Boolean)">
            <summary>
            Generates a message to be displayed when senescence due to frost
            occurs. Putting this in a method for now so we don't have the same
            code twice, but if frost senescence is tweaked in the future it might
            just be easier to do away with the method and hardcode similar
            messages multiple times.
            </summary>
            <param name="fatal">Was the frost event fatal?</param>
        </member>
        <member name="T:Models.Functions.LightSenescenceFunction">
            <summary>
            [DocumentMathFunction /]
            </summary>
        </member>
        <member name="F:Models.Functions.LightSenescenceFunction.metData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.LightSenescenceFunction.senRadnCrit">
            <summary>Radiation level for onset of light senescence.</summary>
        </member>
        <member name="M:Models.Functions.LightSenescenceFunction.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.LightSenescenceFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.LightSenescenceFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.WaterSenescenceFunction">
            <summary>
            [DocumentMathFunction /]
            </summary>
        </member>
        <member name="F:Models.Functions.WaterSenescenceFunction.metData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.WaterSenescenceFunction.senWaterTimeConst">
            <summary>Delay factor for water senescence.</summary>
        </member>
        <member name="F:Models.Functions.WaterSenescenceFunction.senThreshold">
            <summary>supply:demand ratio for onset of water senescence.</summary>
        </member>
        <member name="F:Models.Functions.WaterSenescenceFunction.SDRatio">
            <summary>SupplyDemand Ratio</summary>
        </member>
        <member name="M:Models.Functions.WaterSenescenceFunction.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.WaterSenescenceFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.WaterSenescenceFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.SigmoidFunction">
            <summary>
            This function is calcualted using a sigmoid function of the form y = Xmax * 1 / 1 + e^-(Xvalue - Xo) / b^.
            </summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.Ymax">
            <summary>The ymax</summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.XValue">
            <summary>The x value</summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.Xo">
            <summary>The Xo</summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.b">
            <summary>The b</summary>
        </member>
        <member name="M:Models.Functions.SigmoidFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Error with values to Sigmoid function</exception>
        </member>
        <member name="M:Models.Functions.SigmoidFunction.ValueIndexed(System.Double)">
            <summary>Values the indexed.</summary>
            <param name="dX">The d x.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.SigmoidFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.CERESDenitrificationModel">
            <summary>Fraction of NO3 which denitrifies today</summary>
            \pre All children have to contain a public function "Value"
            \retval fraction of NO3 denitrified.
        </member>
        <member name="P:Models.Functions.CERESDenitrificationModel.DenitrificationRateModifier">
            <summary>
            Rate modifier on the CERES denitrification model. Default = 0.0006.
            </summary>
        </member>
        <member name="P:Models.Functions.CERESDenitrificationModel.IsInertActive">
            <summary>
            Kludge
            </summary>
        </member>
        <member name="M:Models.Functions.CERESDenitrificationModel.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Models.Functions.CERESDenitrificationModel.Values">
            <summary>
            Get the values for all soil layers.
            </summary>
        </member>
        <member name="T:Models.Functions.CERESDenitrificationTemperatureFactor">
            <summary>Temperature effect on denitrification</summary>
            \pre All children have to contain a public function "Value"
            \retval Temperature effect on denitrification.
        </member>
        <member name="M:Models.Functions.CERESDenitrificationTemperatureFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Models.Functions.CERESDenitrificationTemperatureFactor.Values">
            <summary>
            Get the values for all soil layers.
            </summary>
        </member>
        <member name="T:Models.Functions.CERESDenitrificationWaterFactor">
            <summary>Water effect on denitrification</summary>
            \pre All children have to contain a public function "Value"
            \retval Water effect on denitrification.
        </member>
        <member name="M:Models.Functions.CERESDenitrificationWaterFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Models.Functions.CERESDenitrificationWaterFactor.Values">
            <summary>
            Get the values for all soil layers.
            </summary>
        </member>
        <member name="T:Models.Functions.CERESMineralisationFOMCNRFactor">
            <summary>C:N Ratio factor for daily FOM Mineralisation</summary>
            \pre All children have to contain a public function "Value"
            \retval C:N Ratio factor for daily FOM Mineralisation
        </member>
        <member name="M:Models.Functions.CERESMineralisationFOMCNRFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.CERESMineralisationTemperatureFactor">
            <summary>Fraction of NH4 which nitrifies today</summary>
            \pre All children have to contain a public function "Value"
            \retval fraction of NH4 nitrified.
        </member>
        <member name="M:Models.Functions.CERESMineralisationTemperatureFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.CERESMineralisationWaterFactor">
            <summary>Water factor for daily soil organic matter mineralisation</summary>
            \pre All children have to contain a public function "Value"
            \retval fraction of NH4 nitrified.
        </member>
        <member name="F:Models.Functions.CERESMineralisationWaterFactor.isSand">
            <summary>Boolean to indicate sandy soil</summary>
        </member>
        <member name="M:Models.Functions.CERESMineralisationWaterFactor.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Handler method for the start of simulation event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Models.Functions.CERESMineralisationWaterFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.CERESNitrificationModel">
            <summary>Fraction of NH4 which nitrifies today</summary>
            \pre All children have to contain a public function "Value"
            \retval fraction of NH4 nitrified.
        </member>
        <member name="M:Models.Functions.CERESNitrificationModel.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.CERESNitrificationpHFactor">
            <summary>pH factor for daily nitrification of ammonium</summary>
            \pre All children have to contain a public function "Value"
            \retval pH factor for daily nitrification of ammonium
        </member>
        <member name="M:Models.Functions.CERESNitrificationpHFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.CERESNitrificationWaterFactor">
            <summary>Water factor for daily nitrification of ammonium</summary>
            \pre All children have to contain a public function "Value"
            \retval Water factor for daily nitrification of ammonium
        </member>
        <member name="M:Models.Functions.CERESNitrificationWaterFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.CERESUreaHydrolysisModel">
            <summary>Fraction of urea that hydrolyses per day</summary>
            \pre All children have to contain a public function "Value"
            \retval fraction of Urea hydrolysed.
        </member>
        <member name="M:Models.Functions.CERESUreaHydrolysisModel.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DayCentN2OFractionModel">
            <summary>Fraction of N denitrified which is N2O</summary>
            \pre All children have to contain a public function "Value"
            \retval Fraction of N denitrified which is N2O.
        </member>
        <member name="F:Models.Functions.DayCentN2OFractionModel.waterBalance">
            <summary>The water balance model</summary>
        </member>
        <member name="M:Models.Functions.DayCentN2OFractionModel.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.PAvailabilityLossTemperatureFactor">
            <summary>Temperature effect on P Availability Loss</summary>
            \pre All children have to contain a public function "Value"
            \retval Temperature effect on denitrification.
        </member>
        <member name="M:Models.Functions.PAvailabilityLossTemperatureFactor.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.SoilTemperatureDepthFunction">
            <summary>
            Return soil temperature (oC) from a specified soil profile layer.
            The source of soil temperature array can be either SoilN ("st" property) or SoilTemp ("ave_soil_temp" property)
            </summary>
        </member>
        <member name="P:Models.Functions.SoilTemperatureDepthFunction.Depth">
            <summary>The depth</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureDepthFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Models.Functions.SoilTemperatureDepthFunction.LayerIndex(System.Double,System.Double[])">
            <summary>Returns the soil layer index for a specified soil depth (mm)</summary>
            <param name="depth">Soil depth (mm)</param>
            <param name="dlayer">Array of soil layer depths in the profile (mm)</param>
            <returns>soil layer index</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Models.Functions.SoilTemperatureWeightedFunction">
            <summary>
            Returns the temperature of the surface soil layer with the weighting: " +
            0.25*DayBeforeYesterday + 0.5*Yesterday + 0.25*Today
            </summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureWeightedFunction.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.DayBeforeYesterday">
            <summary>The day before yesterday</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.Yesterday">
            <summary>The yesterday</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.Today">
            <summary>The today</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.XYPairs">
            <summary>Gets or sets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="P:Models.Functions.SoilTemperatureWeightedFunction.maxt_soil_surface">
            <summary>The maxt_soil_surface</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureWeightedFunction.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>EventHandler for OnPrepare.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.SoilTemperatureWeightedFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.SoilWaterScale">
            <summary>
            A simple scale to convert soil water content into a value between 0 and 2 where 0 = LL15, 1 = DUL and 2 = SAT
            </summary>
        </member>
        <member name="M:Models.Functions.SoilWaterScale.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.Functions.SplineInterpolationFunction">
            <summary>
            A value is returned via Akima spline interpolation of a given set of XY pairs
            </summary>
        </member>
        <member name="F:Models.Functions.SplineInterpolationFunction.XYPairs">
            <summary>Gets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="P:Models.Functions.SplineInterpolationFunction.XProperty">
            <summary>The x property</summary>
        </member>
        <member name="F:Models.Functions.SplineInterpolationFunction.spline">
            <summary>The spline</summary>
        </member>
        <member name="M:Models.Functions.SplineInterpolationFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Functions.SplineInterpolationFunction"/> class.
            </summary>
        </member>
        <member name="M:Models.Functions.SplineInterpolationFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot find value for  + Name +  XProperty:  + XProperty</exception>
        </member>
        <member name="M:Models.Functions.SplineInterpolationFunction.Interpolate(System.Double)">
            <summary>Interpolates the specified x.</summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Functions.StageBasedInterpolation">
            <summary>
            A value is linearly interpolated between phenological growth stages
            </summary>
        </member>
        <member name="F:Models.Functions.StageBasedInterpolation._Proportional">
            <summary>The _ proportional</summary>
        </member>
        <member name="F:Models.Functions.StageBasedInterpolation.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.Functions.StageBasedInterpolation.Stages">
            <summary>Gets or sets the stages.</summary>
            <value>The stages.</value>
        </member>
        <member name="P:Models.Functions.StageBasedInterpolation.Codes">
            <summary>Gets or sets the codes.</summary>
            <value>The codes.</value>
        </member>
        <member name="F:Models.Functions.StageBasedInterpolation.StageCodes">
            <summary>The stage codes</summary>
        </member>
        <member name="P:Models.Functions.StageBasedInterpolation.Proportional">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Models.Functions.StageBasedInterpolation"/> is proportional.
            </summary>
            <value><c>true</c> if proportional; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Models.Functions.StageBasedInterpolation.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.StageBasedInterpolation.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Something is a miss here.  Specifically, the number of values in your StageCode function don't match the number of stage names.  Sort it out numb nuts!!</exception>
        </member>
        <member name="T:Models.Functions.StringComparisonFunction">
            <summary>Value returned is determined according to given criteria</summary>
        </member>
        <member name="P:Models.Functions.StringComparisonFunction.PropertyName">
            <summary>The propertyname</summary>
        </member>
        <member name="P:Models.Functions.StringComparisonFunction.StringValue">
            <summary>The string value</summary>
        </member>
        <member name="F:Models.Functions.StringComparisonFunction.TrueValue">
            <summary>The True Value</summary>
        </member>
        <member name="F:Models.Functions.StringComparisonFunction.FalseValue">
            <summary>The False Value</summary>
        </member>
        <member name="M:Models.Functions.StringComparisonFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.StringComparisonFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.SubtractFunction">
            <summary>A class that returns the difference of its child functions.</summary>
        </member>
        <member name="F:Models.Functions.SubtractFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.SubtractFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.SubtractFunction.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly">
            <summary>
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            float DLL CanopyGrossPhotosynthesis(float fPgMax, float fLUE, float fLAI,
                                            float fLatitude,int nDay,float fHour, float fPARdir,float fPARdif)
            Author:   Enli Wang
            Date:      10.11.1996
            Purpose:   This function calculates the canopy gross photosynthesis rate for a given crop with fPgMax,fLUE,fLAI
                     at latitude (fLatitude) on day (julian day fDay) at fHour
            Inputs:   1. fPgMax   - Maximum leaf gross photosynthesis rate at light saturation (kgCO2/ha.hr)
                     2. fLUE      - Light use efficiency of the leaf at current conditions ((kgCO2/ha leaf.hr)/(W/m2))
                     3. fLAI      - Effective LAI (-)
                     4. fLatitude- Location latitude (Degree)
                     5. nDay      - Julain day (-)
                     6. fHour   - Current time (Hour)
                     7. fPARdir   - Direct component of incident photosynthetic active radiation (W/m2)
                     7. fPARdif   - Diffuse component of incident photosynthetic active radiation (W/m2)
            Outputs:   1. Return   - Calculated canopy photosynthesis rate (kgCO2/ha.hr)
            Functions Called:
                     None
            Comments:   The input variable fPgMax and fLUE should be calculated using the following functions:
                     fPgMax = LeafMaxGrossPhotosynthesis(...);
                     fLUE   = LeafLightUseEfficiency(...)
            Reference:1. Wang,Enli. xxxx.
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</summary>
             <summary>Daily growth increment of total plant biomass</summary>
             <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly.KDIF">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly.Value(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="fPgMax"></param>
            <param name="fLUE"></param>
            <param name="fLAI"></param>
            <param name="fLatitude"></param>
            <param name="nDay"></param>
            <param name="fHour"></param>
            <param name="fPARdir"></param>
            <param name="fPARdif"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.CanopyPhotosynthesis">
            <summary>
            Daily gross CO2 assimilation and biomass growth is simulated using a canopy photosynthesis model adopted from SPASS, which was a modified version of the original SUCROS model.
            The daily gross photosynthesis is called in reponse to event DoPotentialPlantGrowth.
            </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Plant">
            <summary>The Plant</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Canopy">
            <summary>The Canopy</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Weather">
            <summary>The Weather file</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Clock">
            <summary>The Weather file</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.HourlyGrossCanopyPhotosythesis">
            <summary>Link to the hourly photosynthesis model </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.LightUseEfficiencyLeaf">
            <summary>Link to the light use efficiency at low light </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.MaxGrossPhotosynthesisLeaf">
            <summary>Link to the leaf maximum gross photosynthesis rate</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.GrossPhotosynthesis">
            <summary> The amount of DM that is fixed by photosynthesis </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.DailyCanopyGrossPhotosythesis(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            float DLL DailyCanopyGrossPhotosythesis(LPSTR pCrop,float fLAI, float fLatitude,int nDay,
                                                    float fRad,float fTmpMax,float fTmpMin,float fCO2,
                                                    PZN pLfN,PZRESPONSE pTmpRsp)
            Author:   Enli Wang
            Date:      10.11.1996
            Purpose:   This function calculates the daily canopy photosynthesis rate under optimal water condition
            Inputs:   1. pCROP      - Pointer to a string containing the crop name,use the following names:
                                   WHEAT,BARLEY,MAIZE,MILLET,SOGHUM,POTATO,SUGARBEET,SOYBEAN,COTTON,C3,C4,CAM
                     2. fLAI         - Effective leaf area index (-)
                      3. fLatitude   - Location latitude (Degree)
                      4. nDay         - Julain day (-)
                      5. fRad         - Daily global radiation (MJ/d)
                      6. fTmpMax      - Daily maximum air temperature(C)
                      7. fTmpMin      - Daily minimum air temperature(C)
                      8. fCO2         - Current CO2 concentration in the air (vppm)
                     9. pLfN      - Pointer to a ORGANNC structure containing leaf nitrogen concentration
                     10. pTmpRsp      - Pointer to a ZRESPONSE structure containing temperature response data for photosynthesis
            Outputs:   1. Return      - Calculated daily gross photosynthesis rate of unit leaf area (kgCO2/ha.day)
            Functions Called:
                     LeafMaxGrossPhotosynthesis
                     LeafLightUseEfficiency
                     CanopyGrossPhotosynthesis
            Comments:   This function checks at first the data contained under pResp. If these data are valid, they will be
                     used to construct the temperature response function for photosynthesis. If not, the cardinal temperatures
                     at pCardTemp will be used to construct the temperature response function. If pCardTemp equals NULL,
                     a minimum, optimum and maximum temperature of 0, 22 and 35C will be assumed respectively.
                     If pLfN equals NULL, no nitrogen stress will be considered.
            Reference:1. Wang,Enli. xxxx.
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Value(System.Int32)">
            <summary>Daily growth increment of total plant biomass</summary>
            <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.LeafLightUseEfficiency">
            <summary>
            This function calculate the light use efficiency (LUE) of leaf at low light (Eff).
            For C3 crops, LUE increases with CO2 concentration while decreases with rising temperature.
            For C4 crops, LUE does not change with CO2 concentration and temperature.
            The current version for C3 crop was based on Bauman et al (2001) ORYZA2000.
            </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.LUEref">
            <summary>LUE at low light at 340ppm and 20C </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.pathway">
            <summary>Photosynthesis pathway (C3/C4)</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.Value(System.Double,System.Double)">
            <param name="Temp"></param>
            <param name="fCO2"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis">
            <summary>
            Leaf gross photosynthesis rate is determined using an input gross photosynthesis rate at reference CO2 concentration (340~350ppm) and at optimal temperature of 27.5C, 
            together with the CO2 concentrartion in the air and the daily daytime temperature. 
            For C3 crop, the Ps-CO2 relationship used is from ORYZA2000 Bauman et al (2001)
            For C4 crop, the Ps-CO2 relationship is based on what used for AgPasture Proposed by Cullen et al. (2009) based on FACE experiments
            The temperature response function is the WangEngel fucntion with cardinal tempearture of 0, 27.5 and 35C based on Wang et al (2017)
            </summary>
            
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.Pgmmax">
            <summary>Leaf gross photosynthesis rate at 340ppm CO2 </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.pathway">
            <summary>Photosynthesis pathway (C3/C4)</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.TemperatureResponse">
            <summary>Function to return a temperature factor for a given function </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.Value(System.Double,System.Double)">
            <param name="CO2"></param>
            <param name="Fact"></param>
            <returns></returns>
            
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.LimitedTranspirationRate">
            <summary>
            This module simulates photosynthesis using the Soil-Plant-Atmosphere System Simulation(SPASS) developed by Wang(1997), with a few modifications, such as a downscaling to hourly time step with the temperature diurnal pattern from Resource et al. (1981). Hence, the model simulates hourly potential biomass assimilation.VPD is calculated as the difference between hourly saturated vapor pressure(SVP) and SVP at minimum temperature(Messina et al., 2015) and is used to calculate hourly transpiration as follows:
            
            TR<sub>pot,t</sub> = (ΔDM<sub>pot, t</sub>× VPD<sub>t</sub>) / TEC
            
            where TR<sub>pot</sub> is the potential transpiration driven by radiation interception (mm), ΔDM<sub>pot</sub>is the hourly potential increase in dry matter (i.e.amount of CO<sub>2</sub> fixed by photosynthesis; g.m<sup>-2</sup>), TEC is the transpiration efficiency coefficient (kPa.gC<sup>-1</sup>.m<sup>-2</sup>.mm water<sup>-1</sup>), and t is time.
            
            The potential transpiration is then adjusted based on the level of evaporative demand and soil water stress when applicable.First, VPD-limited hourly transpiration(TR<sub>VPD-limited,t</sub>) is calculated as follows for VPD<sub>t</sub> > VPD<sub>ref</sub>:
            
            TR<sub>VPDref</sub> = (ΔDM<sub>pot, VPDref</sub> × VPD<sub>ref</sub>)/TEC
            
            Reduction<sub>t</sub> = Max(0, TR<sub>pot,t </sub> - TR<sub>VPDref</sub>) × α
            
            TR<sub>VPD-limited,t</sub> = TR<sub>pot,t</sub> - Reduction<sub>t</sub>
            
            where VPD<sub>ref</sub> is the threshold VPD above which transpiration rate is reduced (kPa), TR<sub>VPDref</sub> is the transpiration rate at VPD<sub>ref</sub> (mm.hr<sup>-1</sup>), ΔDM<sub>pot,VPDref</sub> is the interpolated hourly growth at VPD<sub>ref</sub> (g.m<sup>-2</sup>). Reduction is the reduction in transpiration rate above VPD<sub>ref</sub>(mm.hr<sup>-1</sup>), and α is the reduction factor for VPD<sub>t</sub> > VPD<sub>ref</sub>(decimal; zero for no reduction, 1 for complete capping of transpiration rate at TR<sub>VPDref</sub>)
            
            Then, soil-water-limited hourly transpiration (TR<sub>water-limited</sub>) is calculated.Hourly transpiration is capped starting from the maximum TR<sub>VPD-limited</sub> at midday until the total plant available soil moisture can meet the crop daily water demand.Finally, actual hourly increase in dry matter (ΔDM) is calculated based on TR<sub>water-limited</sub>, as follows:
            
            ΔDM<sub>t</sub> = (TR<sub>water-limited,t</sub> × TEC) / VPD<sub>t</sub>
            </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Weather">
            <summary>The weather data</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Clock">
            <summary>The Clock</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Plant">
            <summary>The Leaf organ</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Root">
            <summary>The Root organ</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.RadnInt">
            <summary>The daily radiation intercepted by crop canopy</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.TEC">
            <summary>The transpiration efficiency coefficient for net biomass assimilate</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.FCO2">
            <summary>The CO2 impact on RUE</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.LUEStress">
            <summary>The stress impact on PgMax</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.FT">
            <summary>The mean temperature impact on RUE</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.FN">
            <summary>The N deficiency impact on RUE</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.RUE">
            <summary>The radiation use efficiency</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.GrossAssimilateModel">
            <summary>The daily gross assimilate calculated by a another photosynthesis model</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.AssimilateType">
            <summary>The photosynthesis type (net/gross)</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.SWType">
            <summary>The photosynthesis type (net/gross)</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.VPDThresh">
            <summary>Threshold of hourly VPD at which hourly transpiration rate cease to linearly increase by VPD/TEC</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.HighVPDReduction">
            <summary>Fraction of (hourly VPD - VPDThresh) used in calculating hourly transpiration when VPD is above VPDThresh</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.MaxTr">
            <summary>The maximum hourly transpiration rate</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.MaximumTempWeight">
            <summary>The MaximumTempWeight</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.KDIF">
            <summary>The KDIF</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.LUEref">
            <summary>LUE at low light at 340ppm and 20C</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.PgMax">
            <summary>Leaf gross photosynthesis rate at 340ppm CO2</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Pathway">
            <summary>Photosynthesis Pathway</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.MaxHrVPD">
            <summary>The maximum hourly VPD without capping (kPa)</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.MeanDayVPD">
            <summary>The mean VPD during day time (kPa)</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LimitedTranspirationRate.DmStressFactor">
            <summary>Growth stress factor (actual biomass assimilate / potential biomass assimilate)</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.dailyPotDM">
            <summary>Total potential daily assimilation in g/m2</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.dailyActDM">
            <summary>Total daily assimilation in g/m2</summary>    
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LimitedTranspirationRate.TECGrossToNet">
            <summary>The ratio of TEC of gross assimilate to TEC of net assimilate</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Value(System.Int32)">
            <summary>Daily growth increment of total plant biomass</summary>
            <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LimitedTranspirationRate.Calculate(System.Object,System.EventArgs)">
            <summary>Daily growth increment of total plant biomass</summary>
            <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.RUECO2Function">
            <summary>
            This model calculates the CO~2~ impact on RUE using the approach of [Reyenga1999].
            
            For C3 plants,
            
                _F~CO2~ = (CO~2~ - CP) x (350 + 2 x CP)/(CO~2~ + 2 x CP) x (350 - CP)_
                
            where CP, is the compensation point calculated from daily average temperature (T) as
            
                _CP = (163.0 - T) / (5.0 - 0.1 * T)_
            
            For C4 plants,
            
                _F~CO2~ = 0.000143 * CO~2~ + 0.95_
            
            </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.RUECO2Function.PhotosyntheticPathway">
            <summary>The photosynthetic pathway</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUECO2Function.MetData">
            <summary>The met data</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUECO2Function.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Average daily temperature too high for RUE CO2 Function
            or
            CO2 concentration too low for RUE CO2 Function
            or
            Unknown photosynthetic pathway in RUECO2Function
            </exception>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUECO2Function.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.RUEModel">
            <summary>
            Biomass fixation is modelled as the product of intercepted radiation and its conversion efficiency, the radiation use efficiency (RUE) ([Monteith1977]).  
            This approach simulates net photosynthesis rather than providing separate estimates of growth and respiration.  
            The potential photosynthesis calculated using RUE is then adjusted according to stress factors, these account for plant nutrition (FN), air temperature (FT), vapour pressure deficit (FVPD), water supply (FW) and atmospheric CO~2~ concentration (FCO2).  
            NOTE: RUE in this model is expressed as g/MJ for a whole plant basis, including both above and below ground growth.
            </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.RUE">
            <summary>The rue</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FCO2">
            <summary>The fc o2</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FN">
            <summary>The function</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FT">
            <summary>The ft</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FW">
            <summary>The fw</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FVPD">
            <summary>The FVPD</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.RadnInt">
            <summary>The radiation interception data</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.RUEModel.VPD">
            <summary>Gets the VPD.</summary>
            <value>The VPD.</value>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.RUEModel.RueAct">
            <summary>
            Total plant "actual" radiation use efficiency (for the day) corrected by reducing factors (g biomass/MJ global solar radiation) CHCK-EIT
            </summary>
            <value>The rue act.</value>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUEModel.Value(System.Int32)">
            <summary>Daily growth increment of total plant biomass</summary>
            <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUEModel.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.StomatalConductanceCO2Modifier">
            <summary>
            This model calculates the CO~2~ impact on stomatal conductance using the approach of [Elli2020].
            
                _StomatalConductanceCO2Modifier = PhotosynthesisCO2Modifier x (350 - CP)/(CO~2~ - CP)_
                
            where CP, is the compensation point calculated from daily average temperature (T) as
            
                _CP = (163.0 - T) / (5.0 - 0.1 * T)_
                
            </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.StomatalConductanceCO2Modifier.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.StomatalConductanceCO2Modifier.PhotosynthesisCO2Modifier">
            <summary>Photosynthesis CO2 Modifier</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.StomatalConductanceCO2Modifier.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.StomatalConductanceCO2Modifier.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.Functions.ThermalTimeWindowFunction">
            <summary>
            Calculates the amount of time that the supplied thermal time was within the specified window as a fraction of the whole window length
            </summary>
        </member>
        <member name="F:Models.Functions.ThermalTimeWindowFunction.ttWindowStart">
            <summary>
            Start of Thermal Time Window
            </summary>
        </member>
        <member name="F:Models.Functions.ThermalTimeWindowFunction.ttWindowEnd">
            <summary>
            End of Thermal Time Window
            </summary>
        </member>
        <member name="F:Models.Functions.ThermalTimeWindowFunction.thermalTime">
            <summary>
            Current Thermal Time
            </summary>
        </member>
        <member name="F:Models.Functions.ThermalTimeWindowFunction.dltThermalTime">
            <summary>
            Today's Thermal Time
            </summary>
        </member>
        <member name="M:Models.Functions.ThermalTimeWindowFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.TrackerFunction">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.variableValues">
            <summary>Values we have kept</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.referenceValues">
            <summary>Reference values we have kept</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.inTrackingWindow">
            <summary>Should we be keeping track of the variable?</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.variable">
            <summary>The variable to track</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.referenceVariable">
            <summary>The variable to track</summary>
        </member>
        <member name="P:Models.Functions.TrackerFunction.Statistic">
            <summary>The statistic to return e.g. value back 300</summary>
        </member>
        <member name="P:Models.Functions.TrackerFunction.StartEventName">
            <summary>Event name to start accumulation</summary>
        </member>
        <member name="P:Models.Functions.TrackerFunction.EndEventName">
            <summary>Event name to stop accumulation</summary>
        </member>
        <member name="M:Models.Functions.TrackerFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnConnectToEvents(System.Object,System.EventArgs)">
            <summary>
            Connect event handlers.
            </summary>
            <param name="sender">Sender object..</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnDoDailyTracking(System.Object,System.EventArgs)">
            <summary>
            Invoked when simulation has completed.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnStartEvent(System.Object,System.EventArgs)">
            <summary>
            Called to begin keeping track of variable
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnEndEvent(System.Object,System.EventArgs)">
            <summary>
            Called to end keeping track of variable
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.VariableReference">
            <summary>
            Return the value of a nominated internal \ref Models.PMF.Plant "Plant" numerical variable
            </summary>
            \warning You have to specify the full path of numerical variable, which starts from the child of \ref Models.PMF.Plant "Plant".
            For example,  <b>[Phenology].ThermalTime.Value</b> refers to value of ThermalTime under phenology function.
        </member>
        <member name="P:Models.Functions.VariableReference.VariableName">
            <summary>The variable name</summary>
        </member>
        <member name="M:Models.Functions.VariableReference.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.VariableReference.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.WangEngelTempFunction">
            <summary>
            Calculated using a Wang and Engel beta function which has a value of zero
            below the specified minimum temperature, increasing to a maximum value at
            a given optimum temperature, and  decreasing to zero again at a given
            maximum temperature ([WangEngel1998]).
            </summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.MinTemp">
            <summary>Minimum Temperature.</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.OptTemp">
            <summary>Optimum Temperature</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.MaxTemp">
            <summary>Maximum Temperature</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.RefTemp">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.WangEngelTempFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.MaximumTemperatureWeighting">
            <summary>The maximum temperature weighting</summary>
        </member>
        <member name="M:Models.Functions.WangEngelTempFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.Units">
            <summary>Gets the optional units</summary>
        </member>
        <member name="M:Models.Functions.WangEngelTempFunction.ValueIndexed(System.Double)">
            <summary>
            returns result of Wang Eagle beta function for given temperature
            </summary>
            <param name="T">Given temperature</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.WangEngelTempFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.WeightedTemperatureFunction">
            <summary>
            This Function calculates a mean daily temperature from Max and Min weighted toward Max according to the specified MaximumTemperatureWeighting factor.  This is then passed into the XY matrix as the x property and the function returns the y value
            </summary>
        </member>
        <member name="F:Models.Functions.WeightedTemperatureFunction.XYPairs">
            <summary>Gets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="P:Models.Functions.WeightedTemperatureFunction.MaximumTemperatureWeighting">
            <summary>The maximum temperature weighting</summary>
        </member>
        <member name="F:Models.Functions.WeightedTemperatureFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="M:Models.Functions.WeightedTemperatureFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.WeightedTemperatureFunction.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Functions.XYPairs">
            <summary>
            This function is calculated from an XY matrix which returns a value for Y 
            interpolated from the Xvalue provided.
            </summary>
        </member>
        <member name="P:Models.Functions.XYPairs.X">
            <summary>Gets or sets the x.</summary>
        </member>
        <member name="P:Models.Functions.XYPairs.Y">
            <summary>Gets or sets the y.</summary>
        </member>
        <member name="P:Models.Functions.XYPairs.XVariableName">
            <summary>The name of the x variable. Used in documentation.</summary>
        </member>
        <member name="M:Models.Functions.XYPairs.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot call Value on XYPairs function. Must be indexed.</exception>
        </member>
        <member name="M:Models.Functions.XYPairs.ValueIndexed(System.Double)">
            <summary>Values the indexed.</summary>
            <param name="dX">The d x.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.XYPairs.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.Functions.IFunction">
            <summary>Interface for a function</summary>
        </member>
        <member name="M:Models.Functions.IFunction.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.Functions.IIndexedFunction">
            <summary>Interface for a function</summary>
        </member>
        <member name="M:Models.Functions.IIndexedFunction.ValueIndexed(System.Double)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.Functions.IBooleanFunction">
            <summary>Interface for a boolean function</summary>
        </member>
        <member name="M:Models.Functions.IBooleanFunction.Value">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.DefaultPainter">
            <summary>A default painter for setting a simulation / zone pair to default values.</summary>
        </member>
        <member name="M:Models.DefaultPainter.#ctor(System.Drawing.Color,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.MarkerType)">
            <summary>Constructor</summary>
            <param name="c"></param>
            <param name="l"></param>
            <param name="m"></param>
        </member>
        <member name="M:Models.DefaultPainter.Paint(Models.SeriesDefinition)">
            <summary>Set visual aspects (colour, line type, marker type) of the series definition.</summary>
            <param name="seriesDefinition">The definition to paint.</param>
        </member>
        <member name="T:Models.EventNamesOnGraph">
            <summary>
            A class for putting text annotations on a graph.
            </summary>
        </member>
        <member name="F:Models.EventNamesOnGraph.data">
            <summary>The table to search for phenological stage names.</summary>
        </member>
        <member name="F:Models.EventNamesOnGraph.xFieldName">
            <summary>The x variable name</summary>
        </member>
        <member name="P:Models.EventNamesOnGraph.ColumnName">
            <summary>
            Gets or sets the column name to plot.
            </summary>
        </member>
        <member name="P:Models.EventNamesOnGraph.SimulationName">
            <summary>
            Gets or sets the simulation name to plot.
            </summary>
        </member>
        <member name="M:Models.EventNamesOnGraph.GetValidColumnNames">
            <summary>
            Gets a list of valid column names.
            </summary>
        </member>
        <member name="M:Models.EventNamesOnGraph.GetValidSimNames">
            <summary>
            Gets a list of names of simulations in scope. Called using reflection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.EventNamesOnGraph.GetExtraFieldsToRead(Models.SeriesDefinition)">
            <summary>Return a list of extra fields that the definition should read.</summary>
            <param name="seriesDefinition">The calling series definition.</param>
            <returns>A list of fields - never null.</returns>
        </member>
        <member name="M:Models.EventNamesOnGraph.CreateSeriesDefinitions(Models.Storage.IStorageReader,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.List{System.String})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="storage">Storage service</param>
            <param name="simDescriptions">A list of simulation descriptions that are in scope.</param>
            <param name="simulationFilter">(Optional) simulation name filter.</param>
        </member>
        <member name="M:Models.EventNamesOnGraph.GetSeriesToPutOnGraph(Models.Storage.IStorageReader,System.Collections.Generic.IEnumerable{Models.SeriesDefinition},System.Collections.Generic.List{System.String})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="storage">Storage service (unused but required by interface).</param>
            <param name="definitions">Series definitions to be used (allows for caching of data).</param>
            <param name="simulationFilter">(Optional) simulation name filter.</param>
        </member>
        <member name="M:Models.EventNamesOnGraph.GetAnnotations">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
        </member>
        <member name="M:Models.EventNamesOnGraph.FindPhenologyStageColumn(System.Data.DataTable)">
            <summary>Find and return the phenology stage column name.</summary>
            <param name="data">The data table to search</param>
        </member>
        <member name="T:Models.Graph">
            <summary>
            Represents a graph
            </summary>
        </member>
        <member name="F:Models.Graph.tables">
            <summary>The data tables on the graph.</summary>
        </member>
        <member name="P:Models.Graph.Caption">
            <summary>
            Gets or sets the caption at the bottom of the graph
            </summary>
        </member>
        <member name="P:Models.Graph.Axis">
            <summary>
            Gets or sets a list of all axes
            </summary>
        </member>
        <member name="P:Models.Graph.Series">
            <summary>
            Gets or sets a list of all series
            </summary>
        </member>
        <member name="P:Models.Graph.LegendPosition">
            <summary>
            Gets or sets the location of the legend
            </summary>
        </member>
        <member name="P:Models.Graph.LegendOrientation">
            <summary>
            Controls the orientation of legend items.
            </summary>
        </member>
        <member name="P:Models.Graph.AnnotationLocation">
            <summary>
            Gets or sets the location of the annotations - name/position map.
            </summary>
        </member>
        <member name="P:Models.Graph.DisabledSeries">
            <summary>
            Gets or sets a list of raw grpah series that should be disabled.
            </summary>
        </member>
        <member name="P:Models.Graph.LegendOutsideGraph">
            <summary>
            If set to true, the legend will be shown outside the graph area.
            </summary>
        </member>
        <member name="P:Models.Graph.SimulationDescriptions">
            <summary>
            Descriptions of simulations that are in scope.
            </summary>
        </member>
        <member name="M:Models.Graph.GetDefinitionsToGraph(Models.Storage.IStorageReader,System.Collections.Generic.List{System.String})">
            <summary>Gets the definitions to graph.</summary>
            <returns>A list of series definitions.</returns>
            <param name="storage">Storage service</param>
            <param name="simulationFilter">(Optional) Simulation name filter.</param>
        </member>
        <member name="M:Models.Graph.GetAnnotationsToGraph">
            <summary>Gets the annotations to graph.</summary>
            <returns>A list of series annotations.</returns>
        </member>
        <member name="M:Models.Graph.EnsureAllAxesExist">
            <summary>
            Ensure that we have all necessary axis objects.
            </summary>
        </member>
        <member name="M:Models.Graph.GetSeriesDefinitions">
            <summary>
            Get all series definitions using the GraphPage API - which will
            load the series' data in parallel.
            </summary>
        </member>
        <member name="M:Models.Graph.GetSeries">
            <summary>
            Get a list of 'standardised' series objects which are to be shown on the graph.
            </summary>
        </member>
        <member name="M:Models.Graph.GetSeries(System.Collections.Generic.IEnumerable{Models.SeriesDefinition})">
            <summary>
            Get a list of 'standardised' series objects which are to be shown on the graph.
            </summary>
            <param name="definitions"></param>
        </member>
        <member name="M:Models.Graph.Document">
            <summary>
            Document the model, and any child models which should be documented.
            </summary>
            <remarks>
            It is a mistake to call this method without first resolving links.
            </remarks>
        </member>
        <member name="M:Models.Graph.ToGraph">
            <summary>
            Generated a 'standardised' graph.
            </summary>
        </member>
        <member name="M:Models.Graph.ToGraph(System.Collections.Generic.IEnumerable{Models.SeriesDefinition})">
            <summary>
            Generated a 'standardised' graph, using the given series definitions.
            This is used to speed up the loading of pages of graphs - where we
            will load data for all series definitions in parallel ahead of time.
            </summary>
        </member>
        <member name="T:Models.GraphPage">
            <summary>Descibes a page of graphs for the tags system.</summary>
        </member>
        <member name="P:Models.GraphPage.Graphs">
            <summary>The image to put into the doc.</summary>
        </member>
        <member name="P:Models.GraphPage.Name">
            <summary>Unique name for image. Used to save image to temp folder.</summary>
        </member>
        <member name="M:Models.GraphPage.GetAllSeriesDefinitions(Models.Core.IModel,Models.Storage.IStorageReader,System.Collections.Generic.List{System.String})">
            <summary>
            Get series definitions for all graphs.
            </summary>
            <param name="parent">Parent model.</param>
            <param name="storage">Storage reader</param>
            <param name="simulationFilter">(Optional) Simulation name filter.</param>
            <returns></returns>
        </member>
        <member name="M:Models.GraphPage.FindSimulationDescriptions(Models.Core.IModel)">
            <summary>
            Find and return a list of all simulation descriptions.
            </summary>
        </member>
        <member name="M:Models.GraphPage.FindParent(Models.Core.IModel)">
            <summary>Find a parent to base our series on.</summary>
        </member>
        <member name="M:Models.GraphPage.GetSimulationDescriptionsUnderModel(Models.Core.IModel)">
            <summary>
            Get a list of simulation descriptions that are a child of the specified model.
            </summary>
            <param name="model">The model and it's child models to scan.</param>
        </member>
        <member name="M:Models.GraphPage.ReadAllData(Models.Storage.IStorageReader,System.Collections.Generic.IEnumerable{Models.SeriesDefinition},System.Collections.Generic.List{Models.Core.Run.SimulationDescription})">
            <summary>
            Create a datatable that covers a collection of series definitions.
            </summary>
            <param name="storage">A data store reader.</param>
            <param name="series">A list of series definitions.</param>
            <param name="simulationDescriptions">A list of simulation descriptions.</param>
            <returns></returns>
        </member>
        <member name="T:Models.GraphPage.GraphDefinitionMap">
            <summary>A map of between a graph and its series definitions.</summary>
        </member>
        <member name="P:Models.GraphPage.GraphDefinitionMap.Graph">
            <summary>The graph.</summary>
        </member>
        <member name="P:Models.GraphPage.GraphDefinitionMap.SeriesDefinitions">
            <summary>The series definitions.</summary>
        </member>
        <member name="T:Models.GraphPanel">
            <summary>
            Represents a panel of graphs which has more flexibility than the
            page of graphs shown by a folder.
            </summary>
        </member>
        <member name="T:Models.GraphPanel.LegendPositionType">
            <summary>
            When set to anything other than default, changes the legend
            position of all child graphs.
            </summary>
            <remarks>
            This is basically a duplicate of Graph.LegendPositionType, but the
            key difference is that this enum has an extra value - default which
            tells the UI to respect each graph's individual legend position.
            </remarks>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.Default">
            <summary>
            Respect each graph's individual legend position.
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.TopLeft">
            <summary>
            Top Left
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.TopRight">
            <summary>
            Top Right
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.LeftMiddle">
            <summary>
            Left-middle
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.RightMiddle">
            <summary>
            Right-middle
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.TopCenter">
            <summary>
            Top of the graph, in the middle
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendPositionType.BottomCenter">
            <summary>
            Bottom of the graph, in the middle
            </summary>
        </member>
        <member name="T:Models.GraphPanel.LegendOrientationType">
            <summary>
            When set to anything other than default, changes the legend
            orientation of all child graphs.
            </summary>
            <remarks>
            This is basically a duplicate of Graph.LegendPositionType, but the
            key difference is that this enum has an extra value - default, which
            tells the UI to respect each graph's individual legend position.
            </remarks>
        </member>
        <member name="F:Models.GraphPanel.LegendOrientationType.Default">
            <summary>
            Default legend orientation - respect each graph's
            individual settings.
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendOrientationType.Vertical">
            <summary>
            Forces all graphs to use vertical legend orientation.
            </summary>
        </member>
        <member name="F:Models.GraphPanel.LegendOrientationType.Horizontal">
            <summary>
            Forces all graphs to use horizontal legend orientation.
            </summary>
        </member>
        <member name="M:Models.GraphPanel.OnCreated">
            <summary>
            Called when the model is deserialised.
            </summary>
        </member>
        <member name="M:Models.GraphPanel.Run">
            <summary>
            Clears the cache after simulations are run.
            </summary>
        </member>
        <member name="M:Models.GraphPanel.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.HideTitles">
            <summary>
            Hide individual graph titles?
            </summary>
        </member>
        <member name="P:Models.GraphPanel.FontSize">
            <summary>
            Font Size.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.MarkerSize">
            <summary>
            Marker Size. Defaults to MarkerSizeType.Normal.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.SameXAxes">
            <summary>
            Use same x-axis scales for all graphs?
            </summary>
        </member>
        <member name="P:Models.GraphPanel.SameYAxes">
            <summary>
            Use same y-axis scales for all graphs?
            </summary>
        </member>
        <member name="P:Models.GraphPanel.LegendOutsideGraph">
            <summary>
            Move legends outside graph area?
            </summary>
        </member>
        <member name="P:Models.GraphPanel.LegendPosition">
            <summary>
            Graph legend position. Applies to all graphs.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.LegendOrientation">
            <summary>
            Graph legend orientation. Applies to all graphs.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.NumCols">
            <summary>
            Number of columns in page of graphs.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.Script">
            <summary>
            Script which controls tab generation.
            </summary>
        </member>
        <member name="F:Models.GraphPanel.cache">
            <summary>
            The cache can be huge so it cannot be de/serialized. Need to have
            field + property combo because we need the [NonSerialized]
            attribute, which is only legal on a field. If we just had a
            property, the backing field would be serialized because it wouldn't
            have a [NonSerialized] attribute.
            </summary>
        </member>
        <member name="P:Models.GraphPanel.Cache">
            <summary>
            Cached graph data.
            </summary>
        </member>
        <member name="T:Models.ICachableGraphable">
            <summary>
            Extends the IGraphable interface by allowing for the use of cached input data from another model.
            </summary>
            <remarks>
            Some IGraphable implementations (such as Regression) display metadata about data displayed
            by another model. In this case, it is convenient to reuse cached data rather than read
            the data from an IStorageReader (e.g. a database) more than once.
            
            This interface defines a common specification for such models.
            
            Note that implementators should still provide a working implementation of IGraphable,
            for scenarios where cached data is unavailable.
            </remarks>
        </member>
        <member name="M:Models.ICachableGraphable.GetSeriesToPutOnGraph(Models.Storage.IStorageReader,System.Collections.Generic.IEnumerable{Models.SeriesDefinition},System.Collections.Generic.List{System.String})">
            <summary>Get a list of all actual series to put on the graph.</summary>
            <param name="definitions">Cached series definitions.</param>
            <param name="simulationsFilter">Simulation names filter.</param>
            <param name="storage">Data retrieval service.</param>
        </member>
        <member name="T:Models.IGraphable">
            <summary>
            An interface for a model that can graph itself.
            </summary>
        </member>
        <member name="M:Models.IGraphable.CreateSeriesDefinitions(Models.Storage.IStorageReader,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.List{System.String})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="storage">Storage service</param>
            <param name="simulationDescriptions">A list of simulation descriptions that are in scope.</param>
            <param name="simulationFilter">(Optional) only show data for these simulations.</param>
        </member>
        <member name="M:Models.IGraphable.GetAnnotations">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
        </member>
        <member name="M:Models.IGraphable.GetExtraFieldsToRead(Models.SeriesDefinition)">
            <summary>Return a list of extra fields that the definition should read.</summary>
            <param name="seriesDefinition">The calling series definition.</param>
            <returns>A list of fields - never null.</returns>
        </member>
        <member name="T:Models.SeriesType">
            <summary>An enumeration for the different types of graph series</summary>
        </member>
        <member name="F:Models.SeriesType.Bar">
            <summary>A bar series</summary>
        </member>
        <member name="F:Models.SeriesType.Scatter">
            <summary>A scatter series</summary>
        </member>
        <member name="F:Models.SeriesType.Region">
            <summary>
            A region series - two series with the area between them filled with colour.
            </summary>
        </member>
        <member name="F:Models.SeriesType.Area">
            <summary>
            An area series - a line series with the area between the line and the x-axis filled with colour.
            </summary>
        </member>
        <member name="F:Models.SeriesType.StackedArea">
            <summary>
            A stacked area series - a line series with the area between the line and the x-axis filled with colour.
            </summary>
        </member>
        <member name="F:Models.SeriesType.Box">
            <summary>
            A box and whisker plot
            </summary>
        </member>
        <member name="T:Models.IAnnotation">
            <summary>Base interface for all annotations</summary>
        </member>
        <member name="T:Models.TextAnnotation">
            <summary>
            A class for defining a text annotation
            </summary>
        </member>
        <member name="F:Models.TextAnnotation.Name">
            <summary>Name of annotation.</summary>
        </member>
        <member name="F:Models.TextAnnotation.x">
            <summary>X position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.TextAnnotation.y">
            <summary>Y position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.TextAnnotation.text">
            <summary>A text annotation.</summary>
        </member>
        <member name="F:Models.TextAnnotation.colour">
            <summary>The colour of the text</summary>
        </member>
        <member name="F:Models.TextAnnotation.leftAlign">
            <summary>Left align the text?</summary>
        </member>
        <member name="F:Models.TextAnnotation.topAlign">
            <summary>Top align the text?</summary>
        </member>
        <member name="F:Models.TextAnnotation.textRotation">
            <summary>Text rotation angle</summary>
        </member>
        <member name="T:Models.LineAnnotation">
            <summary>
            A class for defining a line annotation
            </summary>
        </member>
        <member name="F:Models.LineAnnotation.x1">
            <summary>X1 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.LineAnnotation.y1">
            <summary>Y1 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.LineAnnotation.x2">
            <summary>X2 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.LineAnnotation.y2">
            <summary>Y2 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.LineAnnotation.colour">
            <summary>The colour of the text</summary>
        </member>
        <member name="F:Models.LineAnnotation.type">
            <summary>Gets the line type to show</summary>
        </member>
        <member name="F:Models.LineAnnotation.thickness">
            <summary>Gets the line thickness</summary>
        </member>
        <member name="P:Models.LineAnnotation.InFrontOfSeries">
            <summary>Draw the annotation in front of series?</summary>
        </member>
        <member name="P:Models.LineAnnotation.ToolTip">
            <summary>Annotation tooltip</summary>
        </member>
        <member name="T:Models.IGraphPanelScript">
            <summary>
            An interface for a graph panel script.
            </summary>
        </member>
        <member name="M:Models.IGraphPanelScript.GetSimulationNames(Models.Storage.IStorageReader,Models.GraphPanel)">
            <summary>
            Gets a list of simulation names. One tab of graphs will be generated
            for each simulation.
            </summary>
            <param name="storage">Provides access to the datastore.</param>
            <param name="panel">Provides access to the graph panel and the simulations tree.</param>
        </member>
        <member name="M:Models.IGraphPanelScript.TransformGraph(Models.Graph,System.String)">
            <summary>
            Called on each graph before it is drawn in a tab.
            </summary>
            <param name="graph">The graph.</param>
            <param name="simulationName">Simulation name for this tab.</param>
        </member>
        <member name="T:Models.ISeriesDefinitionPainter">
            <summary>A painter interface for setting visual elements of a simulation/zone pair</summary>
        </member>
        <member name="M:Models.ISeriesDefinitionPainter.Paint(Models.SeriesDefinition)">
            <summary>Set visual aspects (colour, line type, marker type) of the series definition.</summary>
            <param name="seriesDefinition">The definition to paint.</param>
        </member>
        <member name="T:Models.SetFunction">
            <summary>A delegate setter function.</summary>
            <param name="definition">The series definition to change.</param>
            <param name="index">The index</param>
        </member>
        <member name="T:Models.MultiDescriptorPainter">
            <summary>A painter for setting the visual element of a simulation description to values of two visual elements.</summary>
        </member>
        <member name="M:Models.MultiDescriptorPainter.#ctor(System.String,System.Int32,Models.SetFunction)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.MultiDescriptorPainter.#ctor(System.String,System.String,System.Int32,System.Int32,Models.SetFunction,Models.SetFunction)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.MultiDescriptorPainter.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,Models.SetFunction,Models.SetFunction,Models.SetFunction)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.MultiDescriptorPainter.Paint(Models.SeriesDefinition)">
            <summary>Set visual aspects (colour, line type, marker type) of the series definition.</summary>
            <param name="seriesDefinition">The definition to paint.</param>
        </member>
        <member name="T:Models.Regression">
            <summary>
            A regression model.
            </summary>
        </member>
        <member name="F:Models.Regression.stats">
            <summary>The stats from the regression</summary>
        </member>
        <member name="F:Models.Regression.equationColours">
            <summary>The colours to use for each equation.</summary>
        </member>
        <member name="P:Models.Regression.ForEachSeries">
            <summary>
            Gets or sets a value indicating whether a regression should be shown for each series.
            </summary>
            <value><c>true</c> if [for each series]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.Regression.showOneToOne">
            <summary>
            Gets or sets a value indicating whether a regression should be shown for each series.
            </summary>
            <value><c>true</c> if [for each series]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.Regression.showEquation">
            <summary>
            Gets or sets a value indicating whether a regression should be shown for each series.
            </summary>
            <value><c>true</c> if [for each series]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Models.Regression.CreateSeriesDefinitions(Models.Storage.IStorageReader,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.List{System.String})">
            <summary>Get a list of all actual series to put on the graph.</summary>
            <param name="storage">Storage service</param>
            <param name="simDescriptions">A list of simulation descriptions that are in scope.</param>
            <param name="simulationsFilter">Unused simulation names filter.</param>
        </member>
        <member name="M:Models.Regression.GetSeriesToPutOnGraph(Models.Storage.IStorageReader,System.Collections.Generic.IEnumerable{Models.SeriesDefinition},System.Collections.Generic.List{System.String})">
            <summary>Get a list of all actual series to put on the graph.</summary>
            <param name="storage">Storage service (required for access to checkpoint names).</param>
            <param name="definitions">Series definitions to be used (allows for caching of data).</param>
            <param name="simulationsFilter">Unused simulation names filter.</param>
        </member>
        <member name="M:Models.Regression.GetExtraFieldsToRead(Models.SeriesDefinition)">
            <summary>Return a list of extra fields that the definition should read.</summary>
            <param name="seriesDefinition">The calling series definition.</param>
            <returns>A list of fields - never null.</returns>
        </member>
        <member name="M:Models.Regression.PutRegressionLineOnGraph(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Drawing.Color,System.String)">
            <summary>Puts the regression line and 1:1 line on graph.</summary>
            <param name="x">The x data.</param>
            <param name="y">The y data.</param>
            <param name="colour">The colour of the regresion line.</param>
            <param name="title">The title to put in the legen.</param>
        </member>
        <member name="M:Models.Regression.Put1To1LineOnGraph(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Puts the 1:1 line on graph.</summary>
            <param name="x">The x data.</param>
            <param name="y">The y data.</param>
        </member>
        <member name="M:Models.Regression.GetAnnotations">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
        </member>
        <member name="T:Models.SequentialPainter">
            <summary>A painter for setting the visual element of a simulation description using consecutive values of up to three visual elements.</summary>
        </member>
        <member name="M:Models.SequentialPainter.#ctor(Models.Series,System.String,System.Int32,Models.SetFunction)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.SequentialPainter.#ctor(Models.Series,System.String,System.Int32,System.Int32,Models.SetFunction,Models.SetFunction)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.SequentialPainter.#ctor(Models.Series,System.String,System.Int32,System.Int32,System.Int32,Models.SetFunction,Models.SetFunction,Models.SetFunction)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.SequentialPainter.Paint(Models.SeriesDefinition)">
            <summary>Set visual aspects (colour, line type, marker type) of the series definition.</summary>
            <param name="seriesDefinition">The definition to paint.</param>
        </member>
        <member name="T:Models.Series">
            <summary>The class represents a single series on a graph</summary>
        </member>
        <member name="M:Models.Series.#ctor">
            <summary>Constructor for a series</summary>
        </member>
        <member name="P:Models.Series.Type">
            <summary>Gets or sets the series type</summary>
        </member>
        <member name="P:Models.Series.XAxis">
            <summary>Gets or sets the associated x axis</summary>
        </member>
        <member name="P:Models.Series.YAxis">
            <summary>Gets or sets the associated y axis</summary>
        </member>
        <member name="P:Models.Series.ColourArgb">
            <summary>
            Gets or sets the color represented as a red, green, blue integer
            </summary>
        </member>
        <member name="P:Models.Series.Colour">
            <summary>Gets or sets the color</summary>
        </member>
        <member name="P:Models.Series.FactorToVaryColours">
            <summary>The factor to vary for colours.</summary>
        </member>
        <member name="P:Models.Series.FactorToVaryMarkers">
            <summary>The factor to vary for markers types.</summary>
        </member>
        <member name="P:Models.Series.FactorToVaryLines">
            <summary>The factor to vary for line types.</summary>
        </member>
        <member name="P:Models.Series.Marker">
            <summary>Gets or sets the marker size</summary>
        </member>
        <member name="P:Models.Series.MarkerSize">
            <summary>Marker size.</summary>
        </member>
        <member name="P:Models.Series.Line">
            <summary>Gets or sets the line type to show</summary>
        </member>
        <member name="P:Models.Series.LineThickness">
            <summary>Gets or sets the line thickness</summary>
        </member>
        <member name="P:Models.Series.TableName">
            <summary>Gets or sets the name of the table to get data from.</summary>
        </member>
        <member name="P:Models.Series.XFieldName">
            <summary>Gets or sets the name of the x field</summary>
        </member>
        <member name="P:Models.Series.YFieldName">
            <summary>Gets or sets the name of the y field</summary>
        </member>
        <member name="P:Models.Series.X2FieldName">
            <summary>Gets or sets the name of the x2 field</summary>
        </member>
        <member name="P:Models.Series.Y2FieldName">
            <summary>Gets or sets the name of the y2 field</summary>
        </member>
        <member name="P:Models.Series.ShowInLegend">
            <summary>Gets or sets a value indicating whether the series should be shown in the legend</summary>
        </member>
        <member name="P:Models.Series.IncludeSeriesNameInLegend">
            <summary>Gets or sets a value indicating whether the series name should be shown in the legend</summary>
        </member>
        <member name="P:Models.Series.Cumulative">
            <summary>Gets or sets a value indicating whether the Y variables should be cumulative.</summary>
        </member>
        <member name="P:Models.Series.CumulativeX">
            <summary>Gets or sets a value indicating whether the X variables should be cumulative.</summary>
        </member>
        <member name="P:Models.Series.Filter">
            <summary>Optional data filter.</summary>
        </member>
        <member name="M:Models.Series.GetDescriptorNames(Models.Storage.IStorageReader)">
            <summary>A list of all descriptor names that can be listed as 'vary by' in markers/line types etc.</summary>
        </member>
        <member name="M:Models.Series.CreateSeriesDefinitions(Models.Storage.IStorageReader,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.List{System.String})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="reader">A storage reader.</param>
            <param name="simulationDescriptions">A list of simulation descriptions that are in scope.</param>
            <param name="simulationFilter"></param>
        </member>
        <member name="M:Models.Series.CreateChildSeriesDefinitions(Models.Storage.IStorageReader,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.IEnumerable{Models.SeriesDefinition},System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="reader">A storage reader.</param>
            <param name="simulationDescriptions">A list of simulation descriptions.</param>
            <param name="seriesDefinitions">A list of series definitions.</param>
            <param name="simulationFilter"></param>
        </member>
        <member name="M:Models.Series.GetAnnotations">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
        </member>
        <member name="M:Models.Series.GetExtraFieldsToRead(Models.SeriesDefinition)">
            <summary>Return a list of extra fields that the definition should read.</summary>
            <param name="seriesDefinition">The calling series definition.</param>
            <returns>A list of fields - never null.</returns>
        </member>
        <member name="M:Models.Series.CreateDefinitionsFromFieldInTable(Models.Storage.IStorageReader,System.String,System.Double,System.Double,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create series definitions assuming the vary by fields are text fields in the table.
            </summary>
            <param name="reader">The reader to read from.</param>
            <param name="checkpointName">The checkpoint name.</param>
            <param name="colourModifier">Checkpoint colour modifer.</param>
            <param name="markerModifier">Checkpoint marker size modifier.</param>
            <param name="varyByFieldNames">The vary by fields.</param>
            <param name="inScopeSimulationNames">An SQL WHERE clause for rows that are in scope.</param>
        </member>
        <member name="M:Models.Series.CreateInScopeWhereClause(Models.Storage.IStorageReader,System.Collections.Generic.List{System.String})">
            <summary>
            Create an SQL WHERE clause for rows that are in scope.
            </summary>
            <param name="reader">The reader to read from.</param>
            <param name="simulationFilter">The names of simulatiosn that are in scope.</param>
        </member>
        <member name="M:Models.Series.CreateDefinitionsUsingVaryBy(System.Collections.Generic.List{System.String},System.String,System.Double,System.Double,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create and return a list of series definitions for each group by field.
            </summary>
            <param name="varyByFieldNames">The vary by fields</param>
            <param name="checkpointName">Checkpoint name.</param>
            <param name="colourModifier">Checkpoint colour modifier.</param>
            <param name="markerModifier">Checkpoint marker size modifier.</param>
            <param name="simulationDescriptions">The simulation descriptions that are in scope.</param>
            <param name="whereClauseForInScopeData">An SQL WHERE clause for rows that are in scope.</param>
        </member>
        <member name="M:Models.Series.NeedsDescriptor(Models.Core.Run.SimulationDescription.Descriptor)">
            <summary>
            Check if the given descriptor is needed by the series definition.
            </summary>
            <param name="descriptor">The descriptor to be checked.</param>
        </member>
        <member name="M:Models.Series.SplitDescriptionsWithSameDescriptors(System.Collections.Generic.List{Models.Core.Run.SimulationDescription})">
            <summary>
            If a simulation description has the same descriptor more than once,
            split it into multiple descriptions.
            </summary>
            <remarks>
            A simulation description can have multiple zones
            e.g.
               Sim1 Descriptors: SimulationName=abc, Zone=field1, Zone=field2, x=1, x=2
            Need to split this into 4 separate simulation descriptions:
               Sim1 Descriptors: SimulationName=abc, Zone=field1, x=1
               Sim2 Descriptors: SimulationName=abc, Zone=field1, x=2
               Sim3 Descriptors: SimulationName=abc, Zone=field2, x=1
               Sim4 Descriptors: SimulationName=abc, Zone=field2f, x=2
            </remarks>
            <param name="simulationDescriptions">Simulation descriptions.</param>
        </member>
        <member name="M:Models.Series.GetSeriesPainter">
            <summary>Get series definition painter.</summary>
            <returns>Painter. Never returns null.</returns>
        </member>
        <member name="M:Models.Series.GetVaryByFieldNames">
            <summary>Return a list of field names that this series is varying.</summary>
        </member>
        <member name="T:Models.SeriesDefinition">
            <summary>
            A class for defining a graph series. A list of these is given to graph when graph is drawing itself.
            </summary>
        </member>
        <member name="P:Models.SeriesDefinition.Series">
            <summary>Base series where most properties come from.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.InScopeSimulationNames">
            <summary>Series definition filter.</summary>
        </member>
        <member name="F:Models.SeriesDefinition.userFilter">
            <summary>User specified filter.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.CheckpointName">
            <summary>The name of the checkpoint to show.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.ColourModifier">
            <summary>Colour brightness modifier for the series definition in range [-1, 1].</summary>
        </member>
        <member name="P:Models.SeriesDefinition.MarkerModifier">
            <summary>
            Marker size modifier for the series definition in range [0, 1].
            Larger value means smaller markers.
            </summary>
        </member>
        <member name="M:Models.SeriesDefinition.#ctor(Models.Series,System.String,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.List{Models.Core.Run.SimulationDescription.Descriptor},System.String)">
            <summary>Constructor</summary>
            <param name="series">The series instance to initialise from.</param>
            <param name="checkpoint">The checkpoint name.</param>
            <param name="colModifier">The brightness modifier for colour in range  [-1, 1]. Negative means darker.</param>
            <param name="markerModifier">Marker size modifier in range [0, 1]. Larger value means smaller markers.</param>
            <param name="inScopeSimulationNames">A list of in scope simulation names.</param>
            <param name="filter">User specified filter.</param>
            <param name="descriptors">The descriptors for this series definition.</param>
            <param name="customTitle">The title to use for the definition.</param>
        </member>
        <member name="M:Models.SeriesDefinition.#ctor(System.String,System.Drawing.Color,System.Double[],System.Double[],APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.MarkerType,System.Boolean,Models.SeriesType,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition)">
            <summary>Constructor</summary>
            <param name="title">The series title.</param>
            <param name="colour">The series colour.</param>
            <param name="line">The series line type.</param>
            <param name="marker">The series marker type.</param>
            <param name="showInLegend">Show series in legend?</param>
            <param name="type">The series type.</param>
            <param name="xAxis">The location of the x axis.</param>
            <param name="yAxis">The location of the y axis.</param>
            <param name="x">X data points.</param>
            <param name="y">Y data points.</param>
        </member>
        <member name="P:Models.SeriesDefinition.Descriptors">
            <summary>Descriptors associate with this definition.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Colour">
            <summary>Gets the colour.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Marker">
            <summary>Gets the marker to show.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Line">
            <summary>Gets the line type to show.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Type">
            <summary>Gets the series type.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.MarkerSize">
            <summary>Gets the marker size.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.LineThickness">
            <summary>Gets the line thickness.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.XAxis">
            <summary>Gets the associated x axis.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.YAxis">
            <summary>Gets the associated y axis.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.XFieldName">
            <summary>Gets the x field name.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.YFieldName">
            <summary>Gets the y field name.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.X2FieldName">
            <summary>Gets the x field name.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Y2FieldName">
            <summary>Gets the y field name.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.XFieldUnits">
            <summary>Units of measurement for X.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.YFieldUnits">
            <summary>Units of measurement for Y.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.ShowInLegend">
            <summary>Gets a value indicating whether this series should be shown in the level.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Title">
            <summary>Gets the title of the series</summary>
        </member>
        <member name="P:Models.SeriesDefinition.View">
            <summary>Gets the dataview</summary>
        </member>
        <member name="P:Models.SeriesDefinition.X">
            <summary>Gets the x values</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Y">
            <summary>Gets the y values</summary>
        </member>
        <member name="P:Models.SeriesDefinition.X2">
            <summary>Gets the x2 values</summary>
        </member>
        <member name="P:Models.SeriesDefinition.Y2">
            <summary>Gets the y2 values</summary>
        </member>
        <member name="P:Models.SeriesDefinition.SimulationNamesForEachPoint">
            <summary>The simulation names for each point.</summary>
        </member>
        <member name="P:Models.SeriesDefinition.XError">
            <summary>Gets the error values for the x series</summary>
        </member>
        <member name="P:Models.SeriesDefinition.YError">
            <summary>Gets the error values for the y series</summary>
        </member>
        <member name="M:Models.SeriesDefinition.AddToFilter(System.String,System.String)">
            <summary>Add a clause to the filter.</summary>
            <param name="filter">The filter to add to.</param>
            <param name="filterClause">The clause to add e.g. Exp = 'Exp1'.</param>
        </member>
        <member name="M:Models.SeriesDefinition.SetColour(Models.SeriesDefinition,System.Int32)">
            <summary>A static setter function for colour from an index.</summary>
            <param name="definition">The series definition to change.</param>
            <param name="index">The colour index into the colour palette.</param>
        </member>
        <member name="M:Models.SeriesDefinition.SetLineType(Models.SeriesDefinition,System.Int32)">
            <summary>A static setter function for line type from an index</summary>
            <param name="definition">The series definition to change.</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Models.SeriesDefinition.SetMarker(Models.SeriesDefinition,System.Int32)">
            <summary>A static setter function for marker from an index</summary>
            <param name="definition">The series definition to change.</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Models.SeriesDefinition.ReadData(System.Data.DataTable,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},Models.Storage.IStorageReader)">
            <summary>Reads all data from the specified reader.</summary>
            <param name="data">Data to read from.</param>
            <param name="simulationDescriptions">Complete list of simulation descriptions.</param>
            <param name="reader">Data store reader.</param>
        </member>
        <member name="M:Models.SeriesDefinition.GetFieldNames(System.Collections.Generic.List{System.String})">
            <summary>
            Return a list of field names that this definition will read from the data table.
            </summary>
            <param name="fieldsThatExist"></param>
            <returns></returns>
        </member>
        <member name="M:Models.SeriesDefinition.GetFilter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the filter to use for filtering the data.
            </summary>
            <param name="fieldsThatExist"></param>
            <returns></returns>
        </member>
        <member name="M:Models.SeriesDefinition.GetDataFromModels">
            <summary>
            Get all data from models.
            </summary>
        </member>
        <member name="M:Models.SeriesDefinition.ExtractFieldNamesFromFilter(System.String)">
            <summary>Extract and return a list of field names from the filter.</summary>
            <param name="filter">Filter to extract field names from.</param>
            <returns>The field names or an empty list. Never null.</returns>
        </member>
        <member name="M:Models.SeriesDefinition.GetDataFromModels(System.String)">
            <summary>Return data using reflection</summary>
            <param name="fieldName">The field name to get data for.</param>
            <returns>The return data or null if not found</returns>
        </member>
        <member name="M:Models.SeriesDefinition.GetDataFromView(System.Data.DataView,System.String)">
            <summary>Gets a column of data from a view.</summary>
            <param name="data">The table</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The column of data.</returns>
        </member>
        <member name="M:Models.SeriesDefinition.GetErrorDataFromView(System.Data.DataView,System.String)">
            <summary>Gets a column of error data from a view.</summary>
            <param name="data">The table</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The column of data.</returns>
        </member>
        <member name="T:Models.ShadedBarsOnGraph">
            <summary>
            A class for putting text annotations on a graph.
            </summary>
        </member>
        <member name="F:Models.ShadedBarsOnGraph.data">
            <summary>The table to search for phenological stage names.</summary>
        </member>
        <member name="F:Models.ShadedBarsOnGraph.xFieldName">
            <summary>The x variable name</summary>
        </member>
        <member name="P:Models.ShadedBarsOnGraph.ColumnName">
            <summary>
            Gets or sets the column name to plot.
            </summary>
        </member>
        <member name="P:Models.ShadedBarsOnGraph.SimulationName">
            <summary>
            Gets or sets the simulation name to plot.
            </summary>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.GetValidColumnNames">
            <summary>
            Gets a list of valid column names.
            </summary>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.GetValidSimNames">
            <summary>
            Gets a list of names of simulations in scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.GetExtraFieldsToRead(Models.SeriesDefinition)">
            <summary>Return a list of extra fields that the definition should read.</summary>
            <param name="seriesDefinition">The calling series definition.</param>
            <returns>A list of fields - never null.</returns>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.CreateSeriesDefinitions(Models.Storage.IStorageReader,System.Collections.Generic.List{Models.Core.Run.SimulationDescription},System.Collections.Generic.List{System.String})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="storage">Storage service</param>
            <param name="simDescriptions">A list of simulation descriptions that are in scope.</param>
            <param name="simulationFilter">(Optional) simulation name filter.</param>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.GetSeriesToPutOnGraph(Models.Storage.IStorageReader,System.Collections.Generic.IEnumerable{Models.SeriesDefinition},System.Collections.Generic.List{System.String})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="definitions">A list of definitions to add to.</param>
            <param name="storage">Storage service</param>
            <param name="simulationFilter">(Optional) simulation name filter.</param>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.GetAnnotations">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
        </member>
        <member name="M:Models.ShadedBarsOnGraph.FindColumn(System.Data.DataTable)">
            <summary>Find and return the phenology stage column name.</summary>
            <param name="data">The data table to search</param>
        </member>
        <member name="T:Models.GrazPlan.GrazParam">
            <summary>
            Class containing some common routine for dealing with parameter sets
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazParam.ALLLOCALES">
            <summary>
            magic string to serve as a wildcard for all locales
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazParam.PARAMKEY">
            <summary>
            Registry key for Grazplan configuration information
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazParam.userInterfaceLang">
            <summary>
            The UI language
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.InLocale(System.String,System.String)">
            <summary>
            Determine whether a locale name is included in a list of locale names
            </summary>
            <param name="locale">Locale name</param>
            <param name="localeList">semicolon delimited list of locale names</param>
            <returns>True if the locale is in the list</returns>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.GetUILang">
            <summary>
            Returns the 2-letter ISO 639 language code (e.g, 'en')
            </summary>
            <returns>
            The 2-letter language code
            </returns>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.SetUILang(System.String)">
            <summary>
            Force use of a language code, rather than determining it from system settings
            </summary>
            <param name="lang">2-letter language code to be used</param>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.DefaultLocale">
            <summary>
            Common locale for use across models and programs
            * The locale is a two-character country code that is stored in the registry.
            * If there is no entry in the registry, 'au' is returned.
            </summary>
            <returns>
            A 2-character country code
            </returns>
        </member>
        <member name="T:Models.GrazPlan.SuppInfo">
            <summary>
            Supplement information
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.IsRoughage">
            <summary>
            Gets or sets a value indicating whether the supplement is a roughage.
            </summary>
            <value>True if the supplement is a roughage</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.DMContent">
            <summary>
            Gets or sets the dry matter content of the supplement (kg/kg FW).
            </summary>
            <value>Dry matter content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.DMD">
            <summary>
            Gets or sets the dry matter digestibility of the supplement (kg/kg DM).
            </summary>
            <value>Dry matter digestibiility of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.MEContent">
            <summary>
            Gets or sets the metabolizable energy content of the supplement (MJ/kg).
            </summary>
            <value>Metabolizable energy content of the supplement (MJ/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.CPConc">
            <summary>
            Gets or sets the crude protein content of the supplement (kg/kg DM).
            </summary>
            <value>Crude protein content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.ProtDg">
            <summary>
            Gets or sets the degradability of the protein of the supplement (kg/kg CP).
            </summary>
            <value>Degradability of the protein of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.PConc">
            <summary>
            Gets or sets the phosphorus content of the supplement (kg/kg DM).
            </summary>
            <value>Phosphorus content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.SConc">
            <summary>
            Gets or sets the sulfur content of the supplement (kg/kg DM).
            </summary>
            <value>Sulfur content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.EEConc">
            <summary>
            Gets or sets the ether-extractable content of the supplement (kg/kg DM).
            </summary>
            <value>Ether-extractable content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.ADIP2CP">
            <summary>
            Gets or sets the ratio of acid detergent insoluble protein to CP for the supplement (kg/kg CP).
            </summary>
            <value>Ratio of acid detergent insoluble protein to CP for the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.AshAlk">
            <summary>
            Gets or sets the ash alkalinity of the supplement (mol/kg DM).
            </summary>
            <value>Ash alkalinity of the supplement (mol/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.MaxPassage">
            <summary>
            Gets or sets the maximum passage rate of the supplement (0-1).
            </summary>
            <value>Maximum passage rate of the supplement (kg/kg)</value>
        </member>
        <member name="T:Models.GrazPlan.FoodSupplement">
            <summary>
            Supplement encapsulates the attributes of a single supplement.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Translations">
            <summary>
            The translations array
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.maxPassage">
            <summary>
            Max. proportion passing through gut (used with whole grains)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.ashAlkalinity">
            <summary>
            Ash alkalinity (mol/kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.dmPropn">
            <summary>
            Proportion of dry matter by weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.dmDigestibility">
            <summary>
            Digestibility of dry matter
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.me2dm">
            <summary>
            Metabolizable energy:DM, MJ/kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.etherExtract">
            <summary>
            Ether-extractable fraction
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.crudeProt">
            <summary>
            Proportion which is crude protein
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.degProt">
            <summary>
            Proportion of protein that is rumen-degradable
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.adip2cp">
            <summary>
            Acid detergent insoluble protein:CP
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Rghg_MEDM_Intcpt">
            <summary>
            The Rghg_MEDM_Intcpt
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Rghg_MEDM_DMD">
            <summary>
            The Rghg_MEDM_DMD
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Conc_MEDM_Intcpt">
            <summary>
            The Conc_MEDM_Intcpt
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Conc_MEDM_DMD">
            <summary>
            The Conc_MEDM_DMD
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Conc_MEDM_EE">
            <summary>
            The Conc_MEDM_EE
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.N2PROTEIN">
            <summary>
            The n2 protein
            </summary>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.#ctor">
            <summary>
            FoodSupplement constructor
            </summary>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.#ctor(System.String)">
            <summary>
            constructor with text argument
            </summary>
            <param name="suppSt">The supplement name</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.#ctor(Models.GrazPlan.FoodSupplement)">
            <summary>
            copy consructor
            </summary>
            <param name="src">The source.</param>
        </member>
        <member name="T:Models.GrazPlan.FoodSupplement.SuppAttribute">
            <summary>
            Enumeration of the chemical properites of a supplement
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaDMP">
            <summary>
            The attribute DMP
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaDMD">
            <summary>
            The attribute DMD
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaMEDM">
            <summary>
            The attribute medm
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaEE">
            <summary>
            The attribute ee
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaCP">
            <summary>
            The attribute cp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaDG">
            <summary>
            The attribute dg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaADIP">
            <summary>
            The attribute adip
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaPH">
            <summary>
            The attribute ph
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaSU">
            <summary>
            The attribute su
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaAA">
            <summary>
            The attribute aa
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaMaxP">
            <summary>
            The attribute maximum p
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Name">
            <summary>
            Gets or sets the name of the supplement
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.IsRoughage">
            <summary>
            Gets or sets a value indicating whether this instance is roughage.
            </summary>
            <value>
            <c>true</c> if this instance is roughage; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.DMPropn">
            <summary>
            Gets or sets the d m_ propn.
            </summary>
            <value>
            The d m_ propn.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.DMDigestibility">
            <summary>
            Gets or sets the dry matter digestibility.
            </summary>
            <value>
            The dmDigestibility value.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.ME2DM">
            <summary>
            Gets or sets the metabolizable energy:DM (MJ/kg).
            </summary>
            <value>
            The me2dm value.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.EtherExtract">
            <summary>
            Gets or sets the ether extractable fraction.
            </summary>
            <value>
            The ether extract.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.CrudeProt">
            <summary>
            Gets or sets the proportion that is crude protein.
            </summary>
            <value>
            The crude prot.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.DegProt">
            <summary>
            Gets or sets the protein proportion that is rumen degradeable.
            </summary>
            <value>
            The degProt value.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.ADIP2CP">
            <summary>
            Gets or sets the acid detergent insoluble protein:CP.
            </summary>
            <value>The adip2cp.</value>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.phosphorus">
            <summary>
            Phosphorus content (P:DM)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Phosphorus">
            <summary>
            Gets or sets the phosphorus (P:DM).
            </summary>
            <value>
            The phosphorus.
            </value>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.sulphur">
            <summary>
            Sulphur content (S:DM)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Sulphur">
            <summary>
            Gets or sets the sulphur content (S:DM).
            </summary>
            <value>
            The sulphur.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.AshAlkalinity">
            <summary>
            Gets or sets the ash alkalinity.
            </summary>
            <value>
            The ash alkalinity.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.MaxPassage">
            <summary>
            Gets or sets the maximum proportion passing through the gut (used with whole grains).
            </summary>
            <value>
            The maximum passage.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Item(Models.GrazPlan.FoodSupplement.SuppAttribute)">
            <summary>
            Indexer to allow easy access of attributes of a supplement
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="attr">attibute to be retrieved or set</param>
            <returns>The value of the attribute chosen</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ConvertDMDToME2DM(System.Double,System.Boolean,System.Double)">
            <summary>
            Routine for default conversion from DMD to M/D
            </summary>
            <param name="dmd">Dry matter digestibility  (0-1)</param>
            <param name="isRoughage">True if the supplement is a roughage</param>
            <param name="fEE">Ether-extractable content (0-1)</param>
            <returns>M/D ratio (MJ/kg)</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ConvertME2DMToDMD(System.Double,System.Boolean,System.Double)">
            <summary>
            Routine for default conversion from M/D to DMD
            </summary>
            <param name="me2dm">M/D ratio (MJ/kg)</param>
            <param name="isRoughage">True if the supplement is a roughage</param>
            <param name="fEE">Ether-extractable content (0-1)</param>
            <returns>Dry matter digestibility  (0-1)</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.Mix(Models.GrazPlan.FoodSupplement,Models.GrazPlan.FoodSupplement,System.Double)">
            <summary>
            Mix two supplements together and store in Self
            Will work if Supp1=this or Supp2=this
            This method is only exact if the passage rates of the two supplements are equal
            </summary>
            <param name="supp1">The supp1.</param>
            <param name="supp2">The supp2.</param>
            <param name="propn1">The propn1.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.MixMany(Models.GrazPlan.FoodSupplement[],System.Double[])">
            <summary>
            Mixes the many supplements
            </summary>
            <param name="supps">The supplements</param>
            <param name="amounts">The amounts.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.MixMany(Models.GrazPlan.SupplementItem[])">
            <summary>
            Mixes the many supplements
            </summary>
            <param name="supps">The supplements</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.Assign(Models.GrazPlan.FoodSupplement)">
            <summary>
            Assigns the specified source supplement.
            </summary>
            <param name="srcSupp">The source supplement.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ParseKeyword(System.String@,System.String,System.String,System.Double,System.Double@)">
            <summary>
            This function looks for "token value units" at the head of SuppSt and
            if it finds it, scales the value which has been read in
            </summary>
            <param name="suppSt">String to parse</param>
            <param name="token">The expected token string</param>
            <param name="units">The expected units string</param>
            <param name="scalar">Multiplier for value field</param>
            <param name="value">Receives the value which was read</param>
            <returns>The scaled value</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ParseText(System.String,System.Boolean)">
            <summary>
            The CreateText method is fairly general. The layout of the string is:
            (Name) [ (keyword) (value) (unit)[(keyword)...] ]
            If (Name) is found in SuppTokens, then the supplement is initialised to
            the corresponding supplement.  Otherwise it is initialised to supplement
            number 1 (the first concentrate).  Any keywords then modify the
            composition.  Keywords are:
            DM_PC (%)  DMD (%) CP (%) DG (%) ME2DM (MJ)
            Finally, if only one of DMD and ME2DM was found, the regression equation
            on ether extract is used to estimate the other.
            </summary>
            <param name="suppSt">The supp st.</param>
            <param name="nameOnly">if set to <c>true</c> [b name only].</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.AddTranslation(System.String,System.String)">
            <summary>
            Adds the translation.
            </summary>
            <param name="lang">The language.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultFromName">
            <summary>
            Defaults from name.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultDMD">
            <summary>
            Computes a default value for DM digestibility from a (known) M/D ratio
            </summary>
            <returns>The digestibility</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultME2DM">
            <summary>
            Computes a default value for M/D from a (known) DM digestibility          }
            </summary>
            <returns>The M/D value</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultADIP2CP">
            <summary>
            Calculates the default acid-detergent insoluble protein : crude protein
            ratio for user defined supplements.
            </summary>
            <returns>The default acid-detergent insoluble protein : crude protein ratio</returns>
            <exception cref="T:System.Exception">result is out of range</exception>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultPhosphorus">
            <summary>
            Calculates the default phosphorus content for user defined supplements.
            </summary>
            <returns>The default phosphorus content</returns>
            <exception cref="T:System.Exception">the result is out of range</exception>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultSulphur">
            <summary>
            Calculates the default sulphur content for user defined supplements.
            </summary>
            <returns>The default sulphur value for the supplement type</returns>
            <exception cref="T:System.Exception">The result is out of range</exception>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.IsSameAs(Models.GrazPlan.FoodSupplement)">
            <summary>
            Determines whether [is same as] [the specified other supp].
            </summary>
            <param name="otherSupp">The other supp.</param>
            <returns>True is the supplements are the same</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.SetSuppAttrs(Models.GrazPlan.SuppToStockType)">
            <summary>
            Populates fields of this FoodSupplement from a SuppToStockType                            
            </summary>
            <param name="value">The supp to stock value</param>
        </member>
        <member name="T:Models.GrazPlan.FoodSupplement.Translation">
            <summary>
            The translation specification
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Translation.Lang">
            <summary>
            The supplement base language
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Translation.Text">
            <summary>
            The s text
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SupplementItem">
            <summary>
            A record to allow us to hold amount and cost information along
            with the FoodSupplement information
            In FoodSupplementItem, the "amount" should be read as kg of supplement fresh
            weight. and the cost should be per kg fresh weight.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementItem.#ctor">
            <summary>
            SupplementItem constructor
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementItem.#ctor(Models.GrazPlan.FoodSupplement,System.Double,System.Double)">
            <summary>
            Constructor
            Note that it makes a copy of the FoodSupplement
            </summary>
            <param name="src">The source.</param>
            <param name="amt">The amt.</param>
            <param name="cst">The CST.</param>
        </member>
        <member name="P:Models.GrazPlan.SupplementItem.Amount">
            <summary>
            Gets or sets the amount in kg.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SupplementItem.Cost">
            <summary>
            Gets or sets the cost.
            </summary>
            <value>
            The cost.
            </value>
        </member>
        <member name="M:Models.GrazPlan.SupplementItem.Assign(Models.GrazPlan.SupplementItem)">
            <summary>
            Assigns the specified source supp.
            </summary>
            <param name="srcSupp">The source supp.</param>
        </member>
        <member name="T:Models.GrazPlan.SupplementRation">
            <summary>
            SupplementRation encapsulates zero or more supplements mixed together.
            In essence, it is a list of SupplementItem.
            This is the class used for specifying the supplement fed to a group of
            animals in AnimGrp.pas
            Apart from the usual read/write properties and list-handling methods, the
            class has the following special methods:
            * AverageSuppt      computes the composition of a supplement mixture in
            proportions given by the fAmount values.
            * AverageCost       computes the cost of a supplement mixture in
            proportions given by the fAmount values.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.SuppArray">
            <summary>
            The supplements array
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.rationChoice">
            <summary>
            The ration choice
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SupplementRation.RationChoice">
            <summary>
            The ration choice type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.RationChoice.rcStandard">
            <summary>
            The rc standard mix as specified
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.RationChoice.rcOnlyStored">
            <summary>
            The rc only stored
            use only stored fodder while it lasts
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.RationChoice.rcIncStored">
            <summary>
            The rc inc stored
            use stored fodder as first ingredient
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementRation.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count</value>
        </member>
        <member name="P:Models.GrazPlan.SupplementRation.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
            <value>
            The total amount.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SupplementRation.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Models.GrazPlan.SupplementItem"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:Models.GrazPlan.SupplementItem"/>.
            </value>
            <param name="idx">The index.</param>
            <returns>The supplement object</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Assign(Models.GrazPlan.SupplementRation)">
            <summary>
            Assigns the specified source ration.
            </summary>
            <param name="srcRation">The source ration.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.GetFWFract(System.Int32)">
            <summary>
            Gets the fresh weight fraction.
            </summary>
            <param name="idx">The index of the supplement.</param>
            <returns>The fresh weight fraction for the supplement at idx</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Add(Models.GrazPlan.FoodSupplement,System.Double,System.Double)">
            <summary>
            Adds the specified supp.
            </summary>
            <param name="supp">The supp.</param>
            <param name="amt">The amt.</param>
            <param name="cost">The cost.</param>
            <returns>The array index of the new supplement</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Add(Models.GrazPlan.SupplementItem)">
            <summary>
            Adds the specified supp item.
            </summary>
            <param name="suppItem">The supp item.</param>
            <returns>The array index of the new supplement</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Insert(System.Int32,Models.GrazPlan.FoodSupplement,System.Double,System.Double)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="idx">The index.</param>
            <param name="supp">The supp.</param>
            <param name="amt">The amt.</param>
            <param name="cost">The cost.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Delete(System.Int32)">
            <summary>
            Deletes the specified index.
            </summary>
            <param name="idx">The index.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.IndexOf(System.String,System.Boolean)">
            <summary>
            Get the index of the supplement in the supplements array
            </summary>
            <param name="name">Name of the supplement.</param>
            <param name="checkTrans">if set to <c>true</c> [check trans].</param>
            <returns>The array index of the supplement or -1 if not found</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.AverageSuppt">
            <summary>
            Computes a weighted average supplement composition
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.AverageCost">
            <summary>
            Weighted average cost of a supplement
            </summary>
            <returns>
            The weighted average cost in the same units as SupplementItem.cost
            </returns>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.PROPNATTRS">
            <summary>
            The property n_ attrs
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.RescaleRation(Models.GrazPlan.FoodSupplement,System.Collections.Generic.IList{Models.GrazPlan.FoodSupplement.SuppAttribute})">
            <summary>
            Scales the attributes of the members of the supplement so that the weighted
            average attributes match those of aveSupp. Ensures that fractional values
            remain within the range 0-1
            * Assumes that all values are non-negative
            </summary>
            <param name="scaleToSupp">The scale to supp.</param>
            <param name="attrs">The attrs.</param>
        </member>
        <member name="T:Models.GrazPlan.SupplementLibrary">
            <summary>
            SupplementLibrary is a SupplementRation descendant that is intended for
            use in manipulating lists of supplements within GUIs.
            For SupplementLibrary, the "amounts" may be read in relative or absolute
            terms, depending on the application.
            Apart from the usual read/write properties and list-handling methods, the
            class has the following special methods:
            * the Add and Insert methods have variants that allow the user to set up a
            supplement by using its name; other attributes are looked up from the
            DefaultSuppConsts library.
            * PopulateDefaults     sets the library up to contain the complete set of
            default supplement compositions.
            * CopyFrom             adds either the entire contents of another library,
            or else a nominated subset of supplements from the
            other library.
            * ReadFromRegistry     Populates the library from a set of formatted strings
            contained in a file pointed to by SUPP_LIB_KEY
            * WriteToRegistry      Write a formatted set of strings that can be read by
            ReadFromStrings to the file pointed to by
            in a file pointed to by SUPP_LIB_KEY
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementLibrary.GDefSupp">
            <summary>
            The g definition supp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementLibrary.ATTRHEADER">
            <summary>
            The s att r_ header
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementLibrary.defSuppLock">
            <summary>
            Lock object controlling access to GDefSupp
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementLibrary.DefaultSuppConsts">
            <summary>
            Gets the default supp consts.
            </summary>
            <value>
            The default supp consts.
            </value>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.SetupDefaultSupplements">
            <summary>
            Setups the default supplements.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.Add(System.String,System.Double,System.Double)">
            <summary>
            Adds the specified s name.
            </summary>
            <param name="name">Name of the supplement.</param>
            <param name="amount">The amount.</param>
            <param name="cost">The cost.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.Insert(System.Int32,System.String,System.Double,System.Double)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="idx">The index.</param>
            <param name="suppName">Name of the supplement.</param>
            <param name="amount">The amount.</param>
            <param name="cost">The cost.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.GetDefaultSupp(System.String,Models.GrazPlan.SupplementItem@)">
            <summary>
            Locates a supplement by name in the DefaultSupptCosts array and returns it
            </summary>
            <param name="suppName">Name of the supplement.</param>
            <param name="suppt">The supplement.</param>
            <returns>The supplement object</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.PopulateDefaults">
            <summary>
            Populates the defaults.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.RevertToDefault(System.Int32)">
            <summary>
            Reverts to default.
            </summary>
            <param name="idx">The index.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.CopyFrom(Models.GrazPlan.SupplementLibrary,System.String[])">
            <summary>
            Copies from.
            </summary>
            <param name="srcLibrary">The source library.</param>
            <param name="copyNames">The copy names.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.ReadFromStrings(System.String,System.String[])">
            <summary>
            Reads from strings.
            </summary>
            <param name="locale">The locale.</param>
            <param name="strings">The strings.</param>
            <exception cref="T:System.Exception">
            Error reading supplement library - must contain a header line
            or
            Error reading supplement library - header line is invalid
            or
            Error reading supplement library - line for  + sNameStr +  is invalid
            </exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.ReadFromRegistryFile(System.String)">
            <summary>
            Reads from registry file.
            </summary>
            <param name="locale">The locale.</param>
            <returns>True if this locale is found</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.ReadFromResource(System.String)">
            <summary>
            Reads from resource.
            </summary>
            <param name="locale">The locale.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.IndexOf(Models.GrazPlan.SupplementItem)">
            <summary>
            Returns the index of FoodSupplement in the array of supplements
            </summary>
            <param name="item">The supplement item</param>
            <returns>The array index, or -1 if not found</returns>
        </member>
        <member name="T:Models.GrazPlan.SupplementModel">
            <summary>
            SupplementModel contains a list of supplement "stores", each of which
            consists of an amount and a description of a supplementary feed as a
            Supplement from GrazSupp.cs.
            Key properties and methods of SupplementModel are:
            * Count         Number of valid supplement stores
            * Store[]       Supplement attributes for each store (zero-offset)
            * StoredKg[]    Amount in each supplement store (zero-offset)
            * AddToStore    Adds an amount of supplement to a store. Used in setting
            up, in "buy" events, and in storing conserved fodder.
            * FeedOut       Transfers feed from a store. Used in the "feed" event.
            Notes:
            1.  All SupplementModels have a "fodder" store.  This is where material
            passed to the supplement component as a result of fodder conservation
            should go.
            2.  If the composition parameters in the AddToStore method (DMP, DMD, MEDM,
            CP, DG, EE and ADIP2CP) are set to zero, the class will use the default
            value for the supplement name from grazSUPP.  Using this feature with a
            supplement not named in grazSUPP will result in an wheat being used.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.DEFAULT">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.ROUGHAGE">
            <summary>
            The roughage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.FODDER">
            <summary>
            The fodder
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.Paddocks">
            <summary>
            The paddocks
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.currPaddSupp">
            <summary>
            The FCurrPaddSupp
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.GrazPlan.SupplementModel"/> class.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementModel.SpoilageTime">
            <summary>
            Gets or sets the spoilage time.
            </summary>
            <value>
            The spoilage time.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SupplementModel.PaddockCount">
            <summary>
            Gets the paddock count.
            </summary>
            <value>
            The paddock count.
            </value>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddPaddock(System.Int32,System.String)">
            <summary>
            Adds the paddock.
            </summary>
            <param name="paddId">The padd identifier.</param>
            <param name="paddName">Name of the padd.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.ClearPaddockList">
            <summary>
            Clears the paddock list.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.PaddockName(System.Int32)">
            <summary>
            Gets the paddock name at an index
            </summary>
            <param name="idx">The index.</param>
            <returns>The paddock name</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.FindFedSuppt(System.Int32,System.Double@)">
            <summary>
            Finds the amount of supplement fed in a paddock
            </summary>
            <param name="paddIdx">Index of the padd.</param>
            <param name="amount">The amount.</param>
            <returns>The amount of supplement fed</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.GetFedSuppt(System.String,System.Double@)">
            <summary>
            Gets the fed supplement for the paddock name.
            </summary>
            <param name="paddName">Name of the padd.</param>
            <param name="amount">The amount.</param>
            <returns>The supplement object that was fed</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.GetFedSuppt(System.Int32,System.Double@)">
            <summary>
            Gets the fed suppt.
            </summary>
            <param name="paddIdx">The padd identifier.</param>
            <param name="amount">The amount.</param>
            <returns>The supplement object that was fed</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.FeedSuppFirst(System.Int32)">
            <summary>
            Returns the flag to feed supplement first that would
            have been entered when calling a feed() event.
            </summary>
            <param name="paddIdx">Paddock index</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.PaddockIndexOf(System.String)">
            <summary>
            Index of the paddock by name
            </summary>
            <param name="name">The name of a paddock</param>
            <returns>The paddock index</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.PaddockIndexOf(System.Int32)">
            <summary>
            Index of the paddock by ID number
            </summary>
            <param name="id">The identifier.</param>
            <returns>The paddock index</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddToStore(System.Double,System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an amount of a supplement to a store.
            * If the store name already exists in the FStores array, the method adds
            the supplement to that store.  Otherwise a new store is created.
            * The DMP, DMD, MEDM, CP, DG, EE and ADIP2CP parameters may be set to zero,
            in which case the default values for the supplement name are used.
            Defaults are taken from the current store if the name is already defined,
            and from grazSUPP.PAS otherwise.  If defaults cannot be found for a name,
            wheat is used as the default composition.
            </summary>
            <param name="suppKg">Amount (kg fresh weight) of the supplement to be included in the store.</param>
            <param name="suppName">Name of the supplement.</param>
            <param name="roughage">The roughage.</param>
            <param name="dmp">Proportion of the fresh weight which is dry matter   kg/kg FW</param>
            <param name="dmd">Dry matter digestibility of the supplement           kg/kg DM</param>
            <param name="medm">Metabolisable energy content of dry matter          MJ/kg DM</param>
            <param name="cp">Crude protein content                                 kg/kg DM</param>
            <param name="dg">Degradability of the crude protein                    kg/kg CP</param>
            <param name="ee">Ether-extractable content                             kg/kg DM</param>
            <param name="adip2cp">Ratio of acid detergent insoluble protein to CP  kg/kg CP</param>
            <param name="phos">Phosphorus content                                  kg/kg DM</param>
            <param name="sulf">Sulphur content                                     kg/kg DM</param>
            <param name="ashAlk">Ash alkalinity                                    mol/kg DM</param>
            <param name="maxPass">Maximum passage rate                             0-1</param>
            <returns>
            Index of the supplement in the store
            </returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddToStore(System.Double,Models.GrazPlan.FoodSupplement)">
            <summary>
            Adds the supplement to the store.
            </summary>
            <param name="suppKg">The supp kg.</param>
            <param name="suppComp">The supp comp.</param>
            <returns>The supplement index</returns>
            <exception cref="T:System.Exception">Supplement submodel: cannot combine roughage and concentrate, both named  + suppComp.sName</exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.FeedOut(System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Feeds the supplement out.
            </summary>
            <param name="suppName">Name of the supp.</param>
            <param name="fedKg">The fed kg.</param>
            <param name="paddName">Name of the padd.</param>
            <param name="feedSuppFirst">Feed the supplement before pasture consumption. Bail feeding.</param>
            <exception cref="T:System.Exception">
            Supplement \ + suppName + \ not recognised
            or
            </exception>
            Paddock \ + paddName + \ not recognised
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddFodder(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the fodder.
            </summary>
            <param name="destStore">The dest store.</param>
            <param name="fodderFW">The fodder fw.</param>
            <param name="DMP">The DMP.</param>
            <param name="DMD">The DMD.</param>
            <param name="NConc">The n conc.</param>
            <param name="PConc">The p conc.</param>
            <param name="SConc">The s conc.</param>
            <param name="ashAlk">The ash alk.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.Blend(System.String,System.Double,System.String)">
            <summary>
            Blends the specified source store.
            </summary>
            <param name="srcStore">The source store.</param>
            <param name="transferKg">The transfer kg.</param>
            <param name="destStore">The dest store.</param>
            <exception cref="T:System.Exception">Supplement \ + srcStore + \ not recognised</exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.RemoveSuppt(System.Int32,System.Double)">
            <summary>
            Removes the supplement
            </summary>
            <param name="paddIdx">Index of the padd.</param>
            <param name="suppKg">The supp kg.</param>
            <exception cref="T:System.Exception">Paddock not recognised</exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.RemoveEaten(System.String,System.Double)">
            <summary>
            Removes the eaten supplement
            </summary>
            <param name="paddName">Name of the padd.</param>
            <param name="suppKg">The supp kg.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.RemoveEaten(System.Int32,System.Double)">
            <summary>
            Removes the eaten supplement
            </summary>
            <param name="paddId">The padd identifier.</param>
            <param name="suppKg">The supp kg.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.CompleteTimeStep">
            <summary>
            Completes the time step.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.SuppIntoRation(Models.GrazPlan.SupplementRation,System.Int32,Models.GrazPlan.FoodSupplement,System.Double)">
            <summary>
            Mixes the supplement into the ration.
            </summary>
            <param name="ration">The ration.</param>
            <param name="idx">The index.</param>
            <param name="supp">The supp.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.Transfer(Models.GrazPlan.SupplementRation,System.Int32,Models.GrazPlan.SupplementRation,System.Int32,System.Double)">
            <summary>
            Transfers the specified source.
            </summary>
            <param name="src">The source.</param>
            <param name="srcIdx">Index of the source.</param>
            <param name="dest">The dest ration in a paddock.</param>
            <param name="destIdx">Index of the dest.</param>
            <param name="amount">The amount.</param>
            <exception cref="T:System.Exception">Invalid transfer of feed</exception>
        </member>
        <member name="T:Models.GrazPlan.SupplementModel.PaddockInfo">
            <summary>
            Paddock information about the supplement fed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.PaddId">
            <summary>
            The padd identifier
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.SupptFed">
            <summary>
            The suppt fed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.FeedSuppFirst">
            <summary>
            For bail feeding
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StoreType">
            <summary>
            A stored supplement name and quantity
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StoreType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.StoreType.Stored">
            <summary>
            Gets or sets the amount of supplement.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Models.GrazPlan.SuppToStockType">
            <summary>
            Paddock and amount of ration
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SuppToStockType.Paddock">
            <summary>
            Gets or sets the paddock name.
            </summary>
            <value>
            The paddock name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SuppToStockType.Amount">
            <summary>
            Gets or sets the amount of ration (kg).
            </summary>
            <value>
            The amount of ration (kg).
            </value>
        </member>
        <member name="P:Models.GrazPlan.SuppToStockType.FeedSuppFirst">
            <summary>
            Gets or sets the flag to feed supplement before pasture. Bail feeding.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SuppEatenType">
            <summary>
            Paddock and amount eaten
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SuppEatenType.Paddock">
            <summary>
            Gets or sets the paddock name.
            </summary>
            <value>
            The paddock name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SuppEatenType.Eaten">
            <summary>
            Gets or sets the amount of ration eaten (kg).
            </summary>
            <value>
            The amount of ration eaten (kg).
            </value>
        </member>
        <member name="T:Models.GrazPlan.BuySuppType">
            <summary>
            Buy an amount of supplement by name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.BuySuppType.Supplement">
            <summary>
            Gets or sets the supplement name.
            </summary>
            <value>
            The supplement name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.BuySuppType.Amount">
            <summary>
            Gets or sets the amount of supplement eaten (kg).
            </summary>
            <value>
            The amount of supplement eaten (kg).
            </value>
        </member>
        <member name="T:Models.GrazPlan.FeedSuppType">
            <summary>
            Feed an amount of supplement by name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FeedSuppType.Supplement">
            <summary>
            Gets or sets the supplement name.
            </summary>
            <value>
            The supplement name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FeedSuppType.Amount">
            <summary>
            Gets or sets the amount of supplement offered (kg).
            </summary>
            <value>
            The amount of supplement offered (kg).
            </value>
        </member>
        <member name="P:Models.GrazPlan.FeedSuppType.Paddock">
            <summary>
            Gets or sets the paddock name.
            </summary>
            <value>
            The paddock name.
            </value>
        </member>
        <member name="T:Models.GrazPlan.MixSuppType">
            <summary>
            Mix an amount of supplement
            </summary>
        </member>
        <member name="P:Models.GrazPlan.MixSuppType.Source">
            <summary>
            Gets or sets the source supplement name.
            </summary>
            <value>
            The source supplement name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.MixSuppType.Amount">
            <summary>
            Gets or sets the amount of supplement transferred (kg).
            </summary>
            <value>
            The amount of supplement transferred (kg).
            </value>
        </member>
        <member name="P:Models.GrazPlan.MixSuppType.Destination">
            <summary>
            Gets or sets the destination supplement name.
            </summary>
            <value>
            The destination supplement name.
            </value>
        </member>
        <member name="T:Models.GrazPlan.ConserveType">
            <summary>
            The type used when calling OnConserve()
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.FreshWt">
            <summary>
            Gets or sets the fresh weight (kg)
            </summary>
            <value>The fresh weight (kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.DMContent">
            <summary>
            Gets or sets the dry matter content of the supplement (kg/kg FW).
            </summary>
            <value>Dry matter content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.DMD">
            <summary>
            Gets or sets the dry matter digestibility of the supplement (kg/kg DM).
            </summary>
            <value>Dry matter digestibiility of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.NConc">
            <summary>
            Gets or sets the phosphorus content of the supplement (kg/kg DM).
            </summary>
            <value>Phosphorus content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.PConc">
            <summary>
            Gets or sets the nitrogen content of the supplement (kg/kg DM).
            </summary>
            <value>Nitrogen content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.SConc">
            <summary>
            Gets or sets the sulfur content of the supplement (kg/kg DM).
            </summary>
            <value>Sulfur content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.AshAlk">
            <summary>
            Gets or sets the ash alkalinity of the supplement (mol/kg DM).
            </summary>
            <value>Ash alkalinity of the supplement (mol/kg)</value>
        </member>
        <member name="T:Models.GrazPlan.Supplement">
             <summary>
             # Supplement
             This component represents one or more stores of supplementary feed. 
             
             A component instance represents the stores and paddock-available amounts of several supplements. 
             Each supplement type is distinguished by a name and is represented by the amount in store together 
             with a number of attributes relating to its quality as a diet for animals.
             
             Feed may be bought and then (logically) placed in one of the "paddocks" to which animals in the 
             Stock component may be assigned. Feed which has been placed in a paddock is accessible to grazing stock 
             in that paddock. If more than one supplement is placed into a paddock, the animals access a mixture.
             
             **Mangement Operations in Supplement**
             
            **1. Buy**
            
             * Increases the amount of supplement in a store.
             
            **2. Feed**
            
             * Transfers an amount of supplement from store to one of the paddocks, where it will be accessible to grazing stock.
             It is possible to feed supplement before grazing.
             
            **3. Mix**
            
             * Transfers an amount of supplement from one store into another. The transferred supplement is mixed
             with any supplement already in the destination store. 
             
            **4. Conserve**
            
             * Notifies the component that an amount of forage has been conserved. This forage is added to the first item in the stores array.
             
             **Using Supplement**
             
             If supplements (e.g. cut and carry forages, grain, silages, …) are to be fed to Stock then they must first be created in “Supplement”. Think of Supplement as the grain silo or silage stack – it creates a space to store the supplements and keeps track of additions and removals but does no other actions.
            
             Multiple supplements can be named and characterised. If, for example, silages of different quality were required they should be added with different names (e.g. “silage12” for high-quality silage with an ME of 12 and “silage10” for lower quality silage with an ME of 10).
             
             *To add a new supplement:*
             
             * In the Supplement UI click “Add” and double-click the closest type from the list that will appear after clicking “Add”
             * That double-click will close the list and populate the quality parameters with defaults
             * Edit the default quality parameters as required, particularly note the dry matter content
             * At this stage the new supplement type will not appear in the list “Create a list of supplements” but just trust the process, click away and back again and your new supplement will appear
             
             *To edit the properties of a supplement:*
             
             * In the Supplement UI and “Create a list of supplements” click on the name of the supplement that you want to edit
             * Edit the characteristics (including the name if wanted) in the box “Composition of currently selected supplement”
             * Note that the case of the supplement name matters when using all commands related to it
             
             Once these quality parameters are set against a named supplement they are retained and all that is needed is to buy, sell or feed the named supplement. Supplements can also be deleted or have their quality parameters reset to defaults.
             
             Setting the dry matter percentage to 100: In the quality parameters, note that we set the dry matter percentage to 100. This is does not affect the feeding quality of the supplement but means that all buy, sell, feed, etc. commands are given on a dry matter rather than wet matter basis.
             </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.simulation">
            <summary>
            The simulation
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.animals">
            <summary>
            Link to the Stock component.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.OutputSummary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.CurIndex">
            <summary>
            Used to keep track of the selected SupplementItem in the user interface
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.theModel">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.paddocksGiven">
            <summary>
            The paddocks given
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.haveReceivedDoManagementToday">
            <summary>
            Has this model received it's DoManagement event today.
            This is needed to ensure the feeding schedule happens on
            the first day when FeedBegin is called after this model
            has already received it's DoManagement.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.feedingSchedule">
            <summary>
            A list of feeding instances to be applied every day.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Supplement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.GrazPlan.Supplement" /> class.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Supplement.SpoilageTime">
            <summary>
            Gets or sets the time over which an amount of supplement placed in a paddock will become inaccessible to grazing stock
            Default value is 0.0, i.e. supplement only persists for the time step that it is fed out
            </summary>
            <value>
            The spoilage time in days
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.Stores">
            <summary>
            Gets or sets the array of attributes and initial amount in each supplement store
            </summary>
            <value>
            List of stores
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.PaddockList">
            <summary>
            Gets or sets the list of paddock names
            If the variable is not given, or if it has zero length, the component will autodetect paddocks
            by querying for modules that own the area variable
            </summary>
            <value>
            The list of paddocks
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.NoStores">
            <summary>
            Gets or set the number of stores
            </summary>
            <value>
            The number of stores
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.NoPaddocks">
            <summary>
            Gets or set the number of paddocks recognised by the component instance
            </summary>
            <value>
            The number of paddocks
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.PaddNames">
            <summary>
            Gets the name of each paddock recognised by the component instance
            </summary>
            <value>
            The list of paddock names
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.PaddAmounts">
            <summary>
            Gets the amount of supplement currently accessible to stock in each paddock recognised by the component instance
            </summary>
            <value>
            The list of supplement amounts in each paddock
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.SuppToStock">
            <summary>
            Gets the amount and attributes of supplementary feed present in each paddock
            </summary>
            <value>
            The list of amount and attributes of supplementary feed present in each paddock
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.Item(System.String)">
            <summary>
            Gets the <see cref="T:Models.GrazPlan.StoreType"/> with the specified supp name.
            </summary>
            <value>
            The <see cref="T:Models.GrazPlan.StoreType"/>.
            </value>
            <param name="suppName">Name of the supp.</param>
            <returns>The supplement store type</returns>
        </member>
        <member name="P:Models.GrazPlan.Supplement.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Models.GrazPlan.SupplementItem"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:Models.GrazPlan.SupplementItem"/>.
            </value>
            <param name="idx">The index.</param>
            <returns>The SupplementItem</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Runs at the start of the simulation
            Sets up the list of paddocks, if that hasn't been provided explicitly
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.Exception">Invalid AribtrationMethod selected</exception>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation has completed.
            Clear values from this run, so they don't carry over into the next
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnEndOfDay(System.Object,System.EventArgs)">
            <summary>
            Performs every-day calculations - end of day processes
            Determine the amount of supplementary feed eaten
            This event determines the amount of supplementary feed eaten by livestock and removes
            it from the amount present in each paddock. It then computes ''spoilage'' of supplement
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnConserve(Models.GrazPlan.ConserveType)">
            <summary>
            Notifies the component that an amount of forage has been conserved
            </summary>
            <param name="conserved">Describes the conserved forage.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Conserve(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Conserves the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="freshWt">The fresh wt.</param>
            <param name="DMContent">Content of the dm.</param>
            <param name="dmd">The DMD.</param>
            <param name="NConc">The n conc.</param>
            <param name="PConc">The p conc.</param>
            <param name="SConc">The s conc.</param>
            <param name="AshAlk">The ash alk.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnBuy(Models.GrazPlan.BuySuppType)">
            <summary>
            Called to buy new supplements into the store
            </summary>
            <param name="purchase">Specifies the supplement and amount being purchased.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Buy(System.Double,System.String)">
            <summary>
            Buys the specified amount.
            </summary>
            <param name="amount">Amount (kg fresh weight) of the supplement to be included in the store</param>
            <param name="supplement">The supplement.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnFeed(Models.GrazPlan.FeedSuppType)">
            <summary>
            Called to feed a supplement from the store
            </summary>
            <param name="feed">Specifies the supplement and amount being offered.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Feed(System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Feeds the specified supplement.
            </summary>
            <param name="supplement">The supplement.</param>
            <param name="amount">The amount.</param>
            <param name="paddock">The paddock.</param>
            <param name="feedSuppFirst">Feed supplement before pasture. Bail feeding.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.FeedBegin(System.String,System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Begin feeding the specified supplement every day.
            </summary>
            <param name="name">Feeding name. Used to end feeding.</param>
            <param name="supplement">The supplement.</param>
            <param name="amount">The amount.</param>
            <param name="paddock">The paddock.</param>
            <param name="feedSuppFirst">Feed supplement before pasture. Bail feeding.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.FeedEnd(System.String)">
            <summary>
            End feeding the specified supplement every day.
            </summary>
            <param name="name">Feeding name. Matches name passed into FeedBegin.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Invoked by clock at the start of every day.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnDoManagement(System.Object,System.EventArgs)">
            <summary>
            Invoked by Clock to do our management for the day.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnMix(Models.GrazPlan.MixSuppType)">
            <summary>
            Called to buy mix supplements in the store
            </summary>
            <param name="mix">Specifies the source and destination supplements, and the amount being mixed.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Mix(System.String,System.Double,System.String)">
            <summary>
            Mixes the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="amount">The amount.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Add(System.String)">
            <summary>
            Adds the specified supp name.
            </summary>
            <param name="suppName">Name of the supp.</param>
            <returns>The supplement index</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Add(Models.GrazPlan.FoodSupplement)">
            <summary>
            Adds the specified FoodSupplement.
            </summary>
            <param name="supplement">Supplement to be added</param>
            <returns>Index of the added supplement</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Delete(System.Int32)">
            <summary>
            Deletes the specified index.
            </summary>
            <param name="idx">The index.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.IndexOf(Models.GrazPlan.SupplementItem)">
            <summary>
            Returns the index of FoodSupplement in the array of supplements
            </summary>
            <param name="item">The supplement item</param>
            <returns>The array index, or -1 if not found</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.IndexOf(System.String)">
            <summary>
            Returns true if the currently named supplement is already in the mix
            </summary>
            <param name="suppName">Supplement name</param>
            <returns>The index of the supplement or -1 if not found</returns>
        </member>
        <member name="T:Models.GrazPlan.Supplement.SupplementFeeding">
            <summary>
            This class encapsulates an amount of feed of a particular type that will
            be fed each day.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Supplement.SupplementFeeding.#ctor(System.String,System.String,System.Double,System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="nam">Name of feed schedule.</param>
            <param name="sup">The supplement.</param>
            <param name="amt">The amount.</param>
            <param name="pad">The paddock.</param>
            <param name="feedSupFirst">Feed supplement before pasture. Bail feeding.</param>
        </member>
        <member name="P:Models.GrazPlan.Supplement.SupplementFeeding.Name">
            <summary>Name of feeding.</summary>
        </member>
        <member name="M:Models.GrazPlan.Supplement.SupplementFeeding.Feed(Models.GrazPlan.Supplement)">
            <summary>
            Tell supplement to do a feed.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AgeInfo">
            <summary>
            The age information
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeInfo.Propn">
            <summary>
            Proportion
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeInfo.PropnPreg">
            <summary>
            Proportion pregnant
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeInfo.PropnLact">
            <summary>
            Proportion lactating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeInfo.Numbers">
            <summary>
            The animal numbers preg and lactating
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AgeInfo.AgeDays">
            <summary>
            Gets or sets the age of animal
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AgeInfo.NormalBaseWt">
            <summary>
            Gets or sets the normal base weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AgeInfo.BaseWeight">
            <summary>
            Gets or sets the animals base weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AgeInfo.FleeceWt">
            <summary>
            Gets or sets the fleece weight in kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AgeInfo.AgeAtMating">
            <summary>
            Gets or sets the age at mating in days
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AgeInfo.SizeAtMating">
            <summary>
            Gets or sets the size at mating in kg
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AgeListElement">
            <summary>
            An age list item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeListElement.AgeDays">
            <summary>
            Age in days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeListElement.NumMales">
            <summary>
            Number of males
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeListElement.NumFemales">
            <summary>
            Number of females
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AgeList">
            <summary>
            An agelist
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeList.FData">
            <summary>
            Array of agelist objects  
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.SetCount(System.Int32)">
            <summary>
            Set the count of age lists
            </summary>
            <param name="value">The count</param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Pack">
            <summary>
            Gets rid of empty elements of a AgeList                                  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeList.RandFactory">
            <summary>
            Random number factory instance
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.#ctor(StdUnits.MyRandom)">
            <summary>
            AgeList constructor
            </summary>
            <param name="randomFactory">An instance of a random number object</param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.#ctor(Models.GrazPlan.AgeList,StdUnits.MyRandom)">
            <summary>
            Create a copy
            </summary>
            <param name="srcList">The source agelist</param>
            <param name="randomFactory">The random number object</param>
        </member>
        <member name="P:Models.GrazPlan.AgeList.Count">
            <summary>
            Gets the count of items in the age list
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Input(System.Int32,System.Int32,System.Int32)">
            <summary>
            Used instead of Add or Insert to add data to the age list.  The Input     
            method ensures that there are no duplicate ages in the list and that it   
            is maintained in increasing order of age                                  
            </summary>
            <param name="ageDays">Age in days</param>
            <param name="numMales">Number of males</param>
            <param name="numFemales">Number of females</param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Resize(System.Int32,System.Int32)">
            <summary>
            Change the numbers of male and female animals to new values.              
            </summary>
            <param name="numMales">New total number of male animals to place in the list</param>
            <param name="numFemales">New total number of female animals to place in the list</param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Clear">
            <summary>
            Set the count of items to 0
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Merge(Models.GrazPlan.AgeList)">
            <summary>
            Add all elements of OtherAges into the object.  Unlike AnimalGroup.Merge,
            AgeList.Merge does not free otherAges.                                   
            </summary>
            <param name="otherAges">The other agelist</param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Split(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Split the age group by age. If ByAge=TRUE, oldest animals are placed in the result.
            If ByAge=FALSE, the age structures are made the same as far as possible.
            </summary>
            <param name="numMale">Number of male</param>
            <param name="numFemale">Number of female</param>
            <param name="ByAge">Split by age</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AgeList.AgeBy(System.Int32)">
            <summary>
            Increase all ages by the same amount (NoDays)                             
            </summary>
            <param name="NoDays"></param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.MeanAge">
            <summary>
            Compute the mean age of all animals in the list                           
            </summary>
            <returns>The mean age</returns>
        </member>
        <member name="M:Models.GrazPlan.AgeList.GetOlder(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the number of male and female animals      
            which are aged greater than ageDays days                                        
            </summary>
            <param name="ageDays">Age in days</param>
            <param name="numMale">Number of male</param>
            <param name="numFemale">Number of female</param>
        </member>
        <member name="T:Models.GrazPlan.AnimalGroup">
            <summary>
            AnimalGroup class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.animalsDynamicGlb">
            <summary>
            AnimalsDynamicGlb differentiates between the "static" version of the      
            model used in GrazFeed and the "dynamic" version used elsewhere           
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.latePregLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.stubble_mm">
            <summary>
            Depth of wool left after shearing (cm)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.weather">
            <summary>The weather model.</summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.clock">
            <summary>The clock model.</summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.stockList">
            <summary>The parent stock list</summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.matedToGenotypeParameters">
            <summary>
            Paramters of the animal mated to
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.ages">
            <summary>
            Distribution of ages
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.totalWeight">
            <summary>
            All weights in kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.woolWt">
            <summary>
            Greasy fleece weight (including stubble)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.lactStatus">
            <summary>
            Lactation status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.numberFoetuses">
            <summary>
            Number of foetuses
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.numberOffspring">
            <summary>
            Number of offspring
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.previousOffspring">
            <summary>
            Previous offspring
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.mothers">
            <summary>
            The mothers animal group
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.mateCycle">
            <summary>
            Day in the mating cycle; -1 if not mating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.daysToMate">
            <summary>
            Days left in joining period
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.foetalAge">
            <summary>
            Days since conception
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.midLatePregWeight">
            <summary>
            Base weight 42 days before parturition   
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.maxPrevWeight">
            <summary>
            Highest previous weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.coatDepth">
            <summary>
            Hair or fleece depth (cm)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.basePhosphorusWeight">
            <summary>
            Phosphorus in base weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.baseSulphurWeight">
            <summary>
            Sulphur in base weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.birthWeight">
            <summary>
            Weight of these animals at birth (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.normalWeight">
            <summary>
            Normal weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.daysLactating">
            <summary>
            Days since parturition (if lactating)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.milkPhosphorusProduction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.milkSulphurProduction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.proportionOfMaxMilk">
            <summary>
            Proportion of potential milk production  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.lactationAdjustment">
            <summary>
            Scales max. intake etc for underweight in lactating animals  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.lactationRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.dryOffTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.feedingLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.startFU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.baseWeightGainSolid">
            <summary>
            Fraction of base weight gain from solid intake. 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.netSupplementDMI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.timeStepNetSupplementDMI">
            <summary>
            Sub time step value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.chillIndex">
            <summary>
            Chill index
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.implantEffect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.timeStepState">
            <summary>
            Output at this step
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.randFactory">
            <summary>
            ptr to the hosts random number factory
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.#ctor(Models.GrazPlan.Genotype,Models.GrazPlan.GrazType.ReproType,System.Int32,System.Int32,System.Double,System.Double,StdUnits.MyRandom,Models.Clock,Models.Interfaces.IWeather,Models.GrazPlan.StockList,System.Boolean)">
            <summary>
            Animal group constructor
            </summary>
            <param name="Params"></param>
            <param name="Repro"></param>
            <param name="Number"></param>
            <param name="AgeD"></param>
            <param name="LiveWt"></param>
            <param name="GFW"></param>
            <param name="RandomFactory"></param>
            <param name="clockModel">The clock model.</param>
            <param name="weatherModel">The weather model.</param>
            <param name="stockListModel">The stock list model.</param>
            <param name="bTakeParams"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.#ctor(Models.GrazPlan.AnimalGroup,System.Double,Models.Clock,Models.Interfaces.IWeather)">
            <summary>
            AnimalGroup constructor for creating young.
            </summary>
            <param name="Parents"></param>
            <param name="LiveWt"></param>
            <param name="clockModel">The clock model.</param>
            <param name="weatherModel">The weather model.</param>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NODIFF">
            <summary>
            Represents no difference
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Genotype">
            <summary>
            The animals genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NoAnimals">
            <summary>
            Number of animals in the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaleNo">
            <summary>
            Gets or sets the number of males
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FemaleNo">
            <summary>
            Gets or sets the number of females
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AgeDays">
            <summary>
            Gets or sets the mean age of the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.standardReferenceWeight">
            <summary>
            Standard reference weight of the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.LiveWeight">
            <summary>
            Gets or sets the live weight of the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.BaseWeight">
            <summary>
            Gets or sets the animal base weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.EmptyShornWeight">
            <summary>
            Gets or sets the fleece-free, conceptus-free weight, but including the wool stubble        
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FleeceCutWeight">
            <summary>
            Gets or sets the cut weight of fleece
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.WoolWeight">
            <summary>
            Gets or sets the wool weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.CoatDepth">
            <summary>
            Gets or sets the depth of coat
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaxPrevWeight">
            <summary>
            Gets or sets the maximum previous weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FibreDiam">
            <summary>
            Gets or sets the wool fibre diameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MatedTo">
            <summary>
            Gets or sets the animal parameters for the animal mated to
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Pregnancy">
            <summary>
            Gets or sets the stage of pregnancy. Days since conception. 
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Lactation">
            <summary>
            Gets or sets the days lactating
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NoFoetuses">
            <summary>
            Gets or sets the number of foetuses
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NoOffspring">
            <summary>
            Gets or sets the number of offspring
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.BirthCondition">
            <summary>
            Gets or sets the condition at birth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Deaths">
            <summary>
            Gets or sets the daily deaths
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Young">
            <summary>
            Pointers to the young of lactating animals, or the mothers of suckling ones
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AnimalState">
            <summary>
            Animal output
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.PaddSteep">
            <summary>
            Gets or sets the steepness code (1-2) of the paddock 
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Herbage">
            <summary>
            Gets or sets the herbage being eaten
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.OrgFaeces">
            <summary>
            Organic faeces
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.InOrgFaeces">
            <summary>
            Gets the inorganic faeces
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Urine">
            <summary>
            Gets the urine value
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Excretion">
            <summary>
            Gets the excretion information
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.PaddOccupied">
            <summary>
            Gets or sets the paddock occupied
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Tag">
            <summary>
            Gets or sets the tag number
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.InitState">
            <summary>
            0=mothers, 1=suckling young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.RDPFactor">
            <summary>
            RDP factor
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.InitForageInputs">
            <summary>
            Index is to forage-within-paddock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.StepForageInputs">
            <summary>
            Forage inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.PaddockInputs">
            <summary>
            Paddock grazing inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.PastIntakeRate">
            <summary>
            Pasture intake
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.SuppIntakeRate">
            <summary>
            Supplement intake
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Join(Models.GrazPlan.Genotype,System.Int32)">
            <summary>
             Commence joining                                                          
            </summary>
            <param name="maleParams"></param>
            <param name="matingPeriod"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Wean(System.Boolean,System.Boolean,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Wean male or female lambs/calves
            </summary>
            <param name="weanFemales"></param>
            <param name="weanMales"></param>
            <param name="newGroups"></param>
            <param name="weanedOff"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Shear(System.Boolean,System.Boolean)">
            <summary>
            Shear the animals and return the cfw per head
            </summary>
            <param name="shearAdults">Shear adults?</param>
            <param name="shearYoung">Shear lambs?</param>
            <returns>CFW per head</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DryOff">
            <summary>
            End lactation in cows whose calves have already been weaned               
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Castrate">
            <summary>
            Castrate the animals
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.MoveToPaddock(System.String)">
            <summary>
            Move the animal group to a new paddock.
            </summary>
            <param name="paddockName"></param>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Animal">
            <summary>
            Gets the animal
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.StdReferenceWt">
            <summary>
            Gets the standard reference weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AgeClass">
            <summary>
            Gets the age class of the animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.ReproState">
            <summary>
            Gets the reproductive state
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.RelativeSize">
            <summary>
            Gets the relative size of the animal. Ratio of normal weight to SRW. 0-1.0
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.BodyCondition">
            <summary>
            Body condition
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.WeightChange">
            <summary>
            Gets the weight change
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.CleanFleeceWeight">
            <summary>
            Gets the clean fleece weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.CleanFleeceGrowth">
            <summary>
            Gets the clean fleece growth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.GreasyFleeceGrowth">
            <summary>
            Gets the greasy fleece growth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.DayFibreDiam">
            <summary>
            Gets the days fibre diameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkYield">
            <summary>
            Gets the milk yield
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkVolume">
            <summary>
            Gets the milk volume
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaxMilkYield">
            <summary>
            Gets the milk yield
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkEnergy">
            <summary>
            Gets the milk energy
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkProtein">
            <summary>
            Gets the milk protein
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FoetalWeight">
            <summary>
            Gets the foetal weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.ConceptusWeight">
            <summary>
            Gets the conceptus weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaleWeight">
            <summary>
            Gets the male weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FemaleWeight">
            <summary>
            Gets the female weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.DrySheepEquivs">
            <summary>
            Gets the DSE
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.PotIntake">
            <summary>
            Gets or sets the potential intake
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MethaneWeight">
            <summary>
            Gets the methane weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.SupplementFreshWeightIntake">
            <summary>
            Gets the fresh weight supplement intake
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.IntakeSupplement">
            <summary>
            Gets the intake of supplement
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.WaterLogging">
            <summary>
            Gets or sets the waterlogging index (0-1)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.RationFed">
            <summary>
            Gets the supplement ration used
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AnimalsPerHa">
            <summary>
            Gets or sets the number of animals per hectare
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.DistanceWalked">
            <summary>
            Gets or sets the distance walked
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.IntakeModifier">
            <summary>
            Gets or sets the intake modifier scaling factor for potential intake
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Copy">
            <summary>
            Copy a AnimalGroup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Merge(Models.GrazPlan.AnimalGroup@)">
            <summary>
            Merge two animal groups
            </summary>
            <param name="otherGrp"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Split(System.Int32,System.Boolean,Models.GrazPlan.DifferenceRecord,Models.GrazPlan.DifferenceRecord)">
            <summary>
            Split the animal group
            </summary>
            <param name="number"></param>
            <param name="byAge"></param>
            <param name="diffs"></param>
            <param name="yngDiffs"></param>
            <returns>Animal group</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitYoung">
            <summary>
            Split young
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Similar(Models.GrazPlan.AnimalGroup)">
            <summary>
            Is an animal group similar enough to another for them to be merged?       
            </summary>
            <param name="animalGrp">An animal group</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ConditionScore(Models.GrazPlan.StockUtilities.Cond_System)">
            <summary>
            Condition score
            </summary>
            <param name="system"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetConditionScore(System.Double,Models.GrazPlan.StockUtilities.Cond_System)">
            <summary>
            Set the condition score
            </summary>
            <param name="value"></param>
            <param name="system"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetConditionAtWeight(System.Double)">
            <summary>
            Sets the value of MaxPrevWeight using current base weight, age and a      
            (relative) body condition. Intended for use with young animals.           
            </summary>
            <param name="bodyCondition"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Age(System.Int32,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Age the animals
            </summary>
            <param name="numDays"></param>
            <param name="newGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CalculateIntakeLimit">
            <summary>
            Routine to compute the potential intake of a group of animals.  The       
            result is stored as TheAnimals.IntakeLimit.  A variety of other fields   
            of TheAnimals are also updated: the normal weight, mature normal weight, 
            highest previous weight (in young animals), relative size and relative    
            condition.                                                                
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ResetGrazing">
            <summary>
            Reset the grazing values
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Grazing(System.Double,System.Boolean,System.Boolean,Models.GrazPlan.GrazType.GrazingOutputs@,System.Double@)">
            <summary>
            Do grazing
            </summary>
            <param name="deltaT">Fraction of an animal's active day</param>
            <param name="reset">TRUE at the start of the day</param>
            <param name="feedSuppFirst">Feed supplement first</param>
            <param name="pastIntakeRate"></param>
            <param name="suppIntakeRate"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Nutrition">
            <summary>
            Nutrition function
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.RDPIntakeFactor">
            <summary>
            Test whether intake of RDP matches the requirement for RDP.               
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CompleteGrowth(System.Double)">
            <summary>
            Complete growth function
            </summary>
            <param name="rdpFactor"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.StoreStateInfo(Models.GrazPlan.AnimalStateInfo@)">
            <summary>
            Records state information prior to the grazing and nutrition calculations     
            so that it can be restored if there is an RDP insufficiency.                
            </summary>
            <param name="animalInfo"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.RevertStateInfo(Models.GrazPlan.AnimalStateInfo)">
            <summary>
            Restores state information about animal groups if there is an RDP insufficiency.                                                              
            </summary>
            <param name="animalInfo"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CalculateRelIntake(Models.GrazPlan.AnimalGroup,System.Double,System.Boolean,System.Double,System.Double[]@,System.Double[0:,0:]@,System.Double@)">
            <summary>
            Calculate relative intake
            </summary>
            <param name="theAnimals">The Animal group</param>
            <param name="timeStepLength"></param>
            <param name="feedSuppFirst"></param>
            <param name="waterLogScalar"></param>
            <param name="herbageRI"></param>
            <param name="seedRI"></param>
            <param name="suppRelIntake"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.WeightRangeForCond(Models.GrazPlan.GrazType.ReproType,System.Int32,System.Double,Models.GrazPlan.Genotype,System.Double@,System.Double@)">
            <summary>
            Feasible range of weights for a given age and (relative) body condition   
            This weight range is a consequence of the normal weight function          
            (AnimalGroup.NormalWeightFunc)                                           
            </summary>
            <param name="reprod"></param>
            <param name="ageDays">Age in days</param>
            <param name="bodyCond">Body condition</param>
            <param name="paramSet">Animal params</param>
            <param name="lowBaseWt"></param>
            <param name="highBaseWt"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetOlder(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the number of male and female animals  
            which are aged greater than a number of days
            </summary>
            <param name="ageDays">Days of age</param>
            <param name="numMale">Number of male</param>
            <param name="numFemale">Number of female</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AddDietElement(Models.GrazPlan.GrazType.IntakeRecord@,System.Double,Models.GrazPlan.GrazType.IntakeRecord@)">
            <summary>
            
            </summary>
            <param name="classAttr"></param>
            <param name="netClassIntake"></param>
            <param name="summaryIntake"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SummariseIntakeRecord(Models.GrazPlan.GrazType.IntakeRecord@)">
            <summary>
            Summarise the intake record
            </summary>
            <param name="summaryIntake">The intake record</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DescribeTheDiet(System.Double[]@,System.Double[0:,0:]@,System.Double@,Models.GrazPlan.AnimalOutput@)">
            <summary>
             DescribeTheDiet                                                           
            Calculate the following for each applicable component of the diet         
            (herbage, supplement and milk):                                             
              - Dry weight of intake             - Intake of ME                       
              - Weight of protein in the intake  - Intake of P                        
              - Digestibility                    - Intake of S                        
              - Digestible organic matter (DOM)  - Concentration of protein           
              - ME:DM ratio                                                           
            These results are all stored in the TimeStepState static variable for     
            reference by other routines.                                              
            </summary>
            <param name="herbageRI">"Relative intakes" of each herbage digestibility class</param>
            <param name="seedRI">"Relative intakes" of seeds</param>
            <param name="suppRI">"Relative intakes" of supplement</param>
            <param name="timeStepState"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeRDP(System.Double,System.Double,Models.GrazPlan.Diet@,System.Double@,System.Double@,Models.GrazPlan.Diet@)">
            <summary>
            Compute RDP intake and requirement for a given MEI and feeding level      
            </summary>
            <param name="intakeScale"></param>
            <param name="feedingLevel"></param>
            <param name="corrDg"></param>
            <param name="rdpi"></param>
            <param name="rdpr"></param>
            <param name="udpis"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeSRW">
            <summary>
            Set the standard reference weight of a group of animals based on breed  
            and sex                                                                   
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.BirthWeightForSize">
            <summary>
            Reference birth weight, adjusted for number of foetuses and relative size 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.FoetalNormWt">
            <summary>
             "Normal weight" of the foetus and the weight of the conceptus in pregnant animals.         
            </summary>
            <returns>The normal weight</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Gompertz(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gompertz function, constrained to give f(A)=1.0                              
            </summary>
            <param name="t"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ConceptusWt">
            <summary>
            Weight of the conceptus, i.e. foetus(es) plus uterus etc                  
            </summary>
            <returns>Conceptus weight</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.NormalWeightFunc(System.Int32,System.Double,System.Double)">
            <summary>
            Normal weight equation                                                 
            </summary>
            <param name="ageDays"></param>
            <param name="maxOldWt"></param>
            <param name="weighting"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CalculateWeights">
            <summary>
            Calculate normal weight, size and condition of a group of animals.      
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CalculateCoatDepth">
            <summary>
            Compute coat depth from GFW and fibre diameter                              
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CoatDepth2Wool(System.Double)">
            <summary>
            In sheep, the coat depth is used to set the total wool weight (this is the  
            way that shearing is done)                                                  
            </summary>
            <param name="coatDepth">Coat depth for which a greasy wool weight is to be calculated (cm)</param>
            <returns>Wool weight</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetConceptionRates">
            <summary>
            Get the conception rates array
            </summary>
            <returns>Conception rates</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.MakePregnantAnimals(System.Double[],System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Make the animals pregnant
            </summary>
            <param name="conceptionRate">Conception rates</param>
            <param name="newGroups">The new animal groups</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ConstructOffspringParams">
            <summary>
            Used in createYoung() to set up the genotypic parameters of the lambs     
            or calves that are about to be born/created.                              
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Conceive(System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
             Carry out one cycle's worth of conceptions                                
            </summary>
            <param name="newGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DeathRateFunc">
            <summary>
            Death rate calculation
            </summary>
            <returns>The death rate</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExposureFunc">
            <summary>
            Exposure calculations
            </summary>
            <returns>Exposure value</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Kill(System.Double,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Mortality submodel                                                        
            </summary>
            <param name="chill"></param>
            <param name="newGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.LoseYoung(Models.GrazPlan.AnimalGroup,System.Int32)">
            <summary>
            Decrease the number of young by N per mother                               
            </summary>
            <param name="animalGrp"></param>
            <param name="number">Number of animals</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.KillEndPreg(System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Pregnancy toxaemia and dystokia                                           
            </summary>
            <param name="newGroups">The new groups</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.YoungStopSuckling">
            <summary>
            Automatic end to lactation in response to reduced milk production         
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.NoSuckling">
            <summary>
            Number of offspring that are actually suckling
            </summary>
            <returns>The number of suckling young</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AdjustRecords(Models.GrazPlan.AnimalGroup,System.Double,Models.GrazPlan.DifferenceRecord)">
            <summary>
            TODO: check that this function returns changed values
            </summary>
            <param name="ag"></param>
            <param name="x"></param>
            <param name="diffs"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitSex(System.Int32,System.Int32,System.Boolean,Models.GrazPlan.DifferenceRecord)">
            <summary>
            Used by the public Split function
            </summary>
            <param name="numberMales"></param>
            <param name="numberFemales"></param>
            <param name="byAge"></param>
            <param name="diffs"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetNoAnimals">
            <summary>
            Get the total number of females and males
            </summary>
            <returns>Total number of animals</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetNoAnimals(System.Int32)">
            <summary>
            Set the number of animals
            </summary>
            <param name="count">Number of animals</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetLiveWt(System.Double)">
            <summary>
            Set the live weight
            </summary>
            <param name="liveWeight">Live weight</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetFleeceCutWt">
            <summary>
            Weight of fleece that would be cut if the animals were shorn (kg greasy) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetFleeceCutWt(System.Double)">
            <summary>
            Set the weight of fleece
            </summary>
            <param name="gfw"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetWoolWt(System.Double)">
            <summary>
            Total weight of wool including stubble (kg greasy)                        
            </summary>
            <param name="woolWeight"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetMaxPrevWt(System.Double)">
            <summary>
            Set the maximum previous weight
            </summary>
            <param name="maxPrevWeight"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetCoatDepth(System.Double)">
            <summary>
            In sheep, the coat depth is used to set the total wool weight 
            </summary>
            <param name="newCoatDepth">New coat depth (cm)</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetMatedTo(Models.GrazPlan.Genotype)">
            <summary>
            Set the animal to be mated to
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetPregnancy(System.Int32)">
            <summary>
            Set the pregnancy progress
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetLactation(System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetNoFoetuses(System.Int32)">
            <summary>
            Set the number of foetuses
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetNoOffspring(System.Int32)">
            <summary>
             On creation, lambs and calves are always suckling their mothers. This may 
            change in the course of a simulation (see the YoungStopSuckling function) 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetOrgFaeces">
            <summary>
            Return the total faecal carbon and nitrogen an urine nitrogen produced by 
            a group of animals.  The values are in kilograms, not kg/head (i.e. they  
            are totalled over all animals in the group)                               
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetInOrgFaeces">
            <summary>
            Get the inorganic faeces amount
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetUrine">
            <summary>
            Get the urine amount
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetExcretion">
            <summary>
            Get excretion parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetAnimal">
            <summary>
            Get the animal type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetBreed">
            <summary>
            Get the breed name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetAgeClass">
            <summary>
            Get the age class 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMaleWeight">
            <summary>
            Get the weight of the male
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetFemaleWeight">
            <summary>
            Get the weight of the female
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetDSEs">
            <summary>
            Get the animal DSE's
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetCFW">
            <summary>
            Get the clean fleece weight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetDeltaCFW">
            <summary>
            CleanFleeceGrowth
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMaxMilkYield">
            <summary>
            Get the maximum milk yield
            </summary>
            <returns>kg</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMilkVolume">
            <summary>
            Get the milk volume
            </summary>
            <returns>Litres</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMethaneEnergy">
            <summary>
            Get the methane energy
            </summary>
            <returns>MJ</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMethaneWeight">
            <summary>
            Get the methane weight
            </summary>
            <returns>kg</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.MaxNormWtFunc(System.Double,System.Double,System.Int32,Models.GrazPlan.Genotype)">
            <summary>
            GrowthCurve calculates MaxNormalWt (see below) for an animal with the   
            default birth weight.                                                   
            </summary>
            <param name="srw"></param>
            <param name="bw"></param>
            <param name="ageDays"></param>
            <param name="parameters"></param>
            <returns>Maximum normal weight</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GrowthCurve(System.Int32,Models.GrazPlan.GrazType.ReproType,Models.GrazPlan.Genotype)">
            <summary>
            Normal weight as a function of age and sex                                
            </summary>
            <param name="ageDays"></param>
            <param name="reprdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Construct(Models.GrazPlan.Genotype,Models.GrazPlan.GrazType.ReproType,System.Int32,System.Int32,System.Double,System.Double,StdUnits.MyRandom,System.Boolean)">
            <summary>
            Used during construction
            </summary>
            <param name="parameters"></param>
            <param name="reproductiveStatus"></param>
            <param name="number"></param>
            <param name="age"></param>
            <param name="liveWeight"></param>
            <param name="gfw"></param>
            <param name="randomFactory"></param>
            <param name="takeParams"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AverageField(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Weighted average of corresponding fields in the two TAnimalGroups.    }
            </summary>
            <param name="total1"></param>
            <param name="total2"></param>
            <param name="field1"></param>
            <param name="field2"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SexAve(System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="maleScale"></param>
            <param name="numMale"></param>
            <param name="numFemale"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitNumbers(System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Split the numbers off the group
            </summary>
            <param name="newGroups"></param>
            <param name="nf"></param>
            <param name="nym"></param>
            <param name="nyf"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.WOOD(System.Double,System.Double,System.Double)">
            <summary>
            Wood-type function, scaled to give a maximum of 1.0 at time Tmax          
            </summary>
            <param name="t"></param>
            <param name="tmax"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.InverseWOOD(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Inverse of the WOOD function, evaluated iteratively                       
            </summary>
            <param name="y"></param>
            <param name="tmax"></param>
            <param name="b"></param>
            <param name="declining"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetDryoffTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the drying off time
            </summary>
            <param name="daysSinceBirth">Days since birth</param>
            <param name="daysSinceDryoff">Days since drying off</param>
            <param name="prevSuckling"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetUpForYesterday(Models.GrazPlan.AnimalGroup)">
            <summary>
            Used in GrazFeed to initialise the state variables for which yesterday's  
            value must be known in order to get today's calculation                   
            </summary>
            <param name="prevGroup"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AdvanceAge(Models.GrazPlan.AnimalGroup,System.Int32,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Advance the age of the animals
            </summary>
            <param name="amimalGrp"></param>
            <param name="numDays"></param>
            <param name="newGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateAve(System.Double@,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="full"></param>
            <param name="fullDenom"></param>
            <param name="ts"></param>
            <param name="tsDenom"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateGrazingOutputs(System.Double,Models.GrazPlan.GrazType.GrazingOutputs@,Models.GrazPlan.GrazType.GrazingOutputs)">
            <summary>
            Update the grazing outputs
            </summary>
            <param name="timeStep"></param>
            <param name="full"></param>
            <param name="ts"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateIntakeRecord(Models.GrazPlan.GrazType.IntakeRecord@,Models.GrazPlan.GrazType.IntakeRecord,System.Double)">
            <summary>
            Update the intake record
            </summary>
            <param name="full"></param>
            <param name="ts"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateDietRecord(System.Double,System.Boolean,Models.GrazPlan.Diet@,Models.GrazPlan.Diet)">
            <summary>
            Update the diet record
            </summary>
            <param name="timeStep">The fraction of the timestep</param>
            <param name="suppFullDay"></param>
            <param name="full">The full diet</param>
            <param name="ts">The extra diet</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateDietAve(Models.GrazPlan.Diet@,Models.GrazPlan.Diet,Models.GrazPlan.Diet,Models.GrazPlan.Diet,System.Double,System.Double)">
            <summary>
            Update the diet
            </summary>
            <param name="full">The full diet</param>
            <param name="fullDenom"></param>
            <param name="ts"></param>
            <param name="tsDenom"></param>
            <param name="herbDT"></param>
            <param name="suppDT"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateAnimalState(System.Double,System.Boolean,System.Double)">
            <summary>
            Update the animal state
            </summary>
            <param name="timeStep"></param>
            <param name="suppFullDay"></param>
            <param name="suppRI"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Efficiencies">
            <summary>
            Compute proportional contribution of diet components (milk, fodder and      
            supplement) and the efficiencies of energy use                            
            This procedure corresponds to section 5 of the model specification        
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeMaintenance">
            <summary>
            Basal metabolism routine.  Outputs (EnergyUse.Metab,EnergyUse.Maint,      
            ProteinUse.Maint) are stored in AnimalState.                              
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DUDPFunc(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="isRoughage"></param>
            <param name="cp"></param>
            <param name="dg"></param>
            <param name="adip2Cp"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeDPLS">
            <summary>
            Compute microbial crude protein and DPLS
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DeltaGompertz(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputePregnancy">
            <summary>
            Requirements for pregnancy:                                               
              'Normal' weight of foetus is calculated from its age, maturity of       
              the mother and her no. of young and is adjusted for mother's            
              condition. The "FoetalWt" field of TheAnimals^ is updated here, as      
              are the "EnergyUse.Preg" and "ProteinUse.Preg" fields of TimeStepState   
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeLactation">
            <summary>
            Requirements for lactation:                                             
              The potential production of milk on the particular day of lactation,  
              expressed as the ME value of the milk for the young, is predicted     
              from a Wood-type function, scaled for the absolute and relative size  
              of the mother, her condition at parturition and the no. of young.     
              If ME intake is inadequate for potential production, yield is reduced 
              by a proportion of the energy deficit.                                
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeWool(System.Double)">
            <summary>
            Wool production is calculated from the intake of ME, except that used   
            for pregnancy and lactation, and from the intake of undegraded dietary  
            protein. N.B. that the stored fleece weights are on a greasy basis      
            </summary>
            <param name="dplsAdjust"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ApplyWoolGrowth">
            <summary>
            Apply the wool growth
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeChilling">
            <summary>
            Chilling routine.                                                       
            Energy use in maintaining body temperature is computed in 2-hour blocks.
            Although the "day" in the animal model runs from 9 am, we first compute 
            the value of the insulation and the lower critical temperature in the   
            middle of the night (i.e. at the time of minimum temperature).  Even    
            though wind increases during the day, the minimum value of the          
            Insulation variable will be no less than half the value of Insulation   
            at this time for any reasonable value of wind speed; we can therefore   
            put a bound on LCT.                                                     
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AdjustKGain">
            <summary>
            Computes the efficiency of energy use for weight change.  This routine  
            is called twice if chilling energy use is computed                      
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeGain">
            <summary>
            The remaining surplus of net energy is converted to weight gain in a      
            logistic function dependent on the relative size of the animal.           
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputePhosphorus">
            <summary>
            Usage of and mass balance for phosphorus                                  
            * Only a proportion of the phosphorus intake is absorbed (available).     
            * There are endogenous losses of P which will appear in the excreta       
              regardless of intake.                                                   
            * P content of the day's conceptus growth varies with stage of pregnancy. 
            * P contents of milk and wool are constants.                              
            * P usage in liveweight change is computed to try and maintain body P     
              content at PhosC[9].                                                    
            * All P is excreted in faeces, but some is organic and the rest is        
              inorganic.  Organic P excretion is a constant proportion of DMI.        
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeSulfur">
            <summary>
            Usage of and mass balance for sulphur                                     
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeAshAlk">
            <summary>
            Proton balance                                                            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CheckAnimList(System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            
            </summary>
            <param name="animalList"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExportWeaners(Models.GrazPlan.AnimalGroup@,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Export the animal group
            </summary>
            <param name="weanedGroup"></param>
            <param name="weanedOff"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExportWithYoung(Models.GrazPlan.AnimalGroup@,Models.GrazPlan.AnimalGroup@,System.Int32,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            Export the group with young
            </summary>
            <param name="motherGroup"></param>
            <param name="youngGroup"></param>
            <param name="numberYoung"></param>
            <param name="newGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitMothers(Models.GrazPlan.AnimalGroup@,System.Int32,System.Double,System.Collections.Generic.List{Models.GrazPlan.AnimalGroup}@)">
            <summary>
            In the case where only one sex of lambs has been weaned, re-constitute
            groups of mothers with unweaned lambs or calves.                      
            For example, if male lambs have been weaned (bDoFemales=TRUE), then:  
            - if pre-weaning lambs/ewe = 1, 100% of the ewe lambs become singles  
            - if pre-weaning lambs/ewe = 2, 50% of the ewe lambs become singles   
                                            50% remain as twins                   
            - if pre-weaning lambs/ewe = 3, 25% of the ewe lambs become singles   
                                            50% become twins                      
                                            25% remain as triplets                
            * We then have to round the numbers of lambs (or calves) that remain  
              twins or triplets down so that they have an integer number of       
              mothers.                                                            
            * In order to conserve animals numbers, the number remaining as       
              singles is done by difference                                       
            * The re-constituted groups of mothers are sent off to the NewGroups  
              list, leaving Self as the group of mothers whach has had all its    
              offspring weaned                                                    
            </summary>
            <param name="youngGroup"></param>
            <param name="totalYoung"></param>
            <param name="GroupPropn"></param>
            <param name="newGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExpectedSurvival(System.Int32)">
            <summary>
            Integration of the age-dependent mortality function                       
            </summary>
            <param name="overDays">Number of days</param>
            <returns>Integrated value</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AddDMPool(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.GrazType.DM_Pool)">
            <summary>
            Combine two pools
            </summary>
            <param name="pool1">Pool one</param>
            <param name="pool2">Pool two</param>
            <returns>Combined pool</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.MultiplyDMPool(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            Multiply pools
            </summary>
            <param name="srcPool"></param>
            <param name="factor"></param>
            <returns>The product</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.EatSupplement(Models.GrazPlan.AnimalGroup,System.Double,System.Double,Models.GrazPlan.FoodSupplement,System.Double,System.Boolean,System.Double@,System.Double@)">
            <summary>
            Supplement relative intake.
            </summary>
            <param name="theAnimals">The animal group</param>
            <param name="timeStepLength"></param>
            <param name="suppDWPerHead"></param>
            <param name="supp"></param>
            <param name="suppRQ"></param>
            <param name="eatenFirst"></param>
            <param name="suppRI"></param>
            <param name="fracUnsat"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.RelativeFill(Models.GrazPlan.AnimalGroup,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            "Relative fill" of pasture [F(d)]                                     
            </summary>
            <param name="theAnimals">The animal group</param>
            <param name="fu"></param>
            <param name="classFeed"></param>
            <param name="totalFeed"></param>
            <param name="hr"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.EatPasture(Models.GrazPlan.AnimalGroup,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Eat some pasture
            </summary>
            <param name="theAnimals">The animal group</param>
            <param name="classFeed"></param>
            <param name="totalFeed"></param>
            <param name="hr"></param>
            <param name="relQ"></param>
            <param name="ri"></param>
            <param name="fu"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.WeightAverage(System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Weighted average of two values                                            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ChillFunc(System.Double,System.Double,System.Double)">
            <summary>
            Chill index
            </summary>
            <param name="temp">Temperature value</param>
            <param name="wind">Wind speed</param>
            <param name="precip">The rainfall</param>
            <returns>Chill value</returns>
        </member>
        <member name="T:Models.GrazPlan.AnimalOutput">
            <summary>
            The Animal outputs object
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.IntakeLimitLegume">
            <summary>
            Potential intake, after correction for legume content of the diet
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.IntakePerHead">
            <summary>
            Intakes for interface with pasture model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.PaddockIntake">
            <summary>
            Intakes summarised for use in the nutrition model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.SuppIntake">
            <summary>
            Intakes summarised for use in the nutrition model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DM_Intake">
            <summary>
            Daily dry matter intake (kg) - not milk
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.CP_Intake">
            <summary>
            Daily crude protein intake (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Phos_Intake">
            <summary>
            Daily phosphorus intake (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Sulf_Intake">
            <summary>
            Daily sulphur intake (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ME_Intake">
            <summary>
            Metabolizable energy intake (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Digestibility">
            <summary>
            Digestibility of diet components (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ProteinConc">
            <summary>
            Crude protein concentrations (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ME_2_DM">
            <summary>
            ME:dry matter ratios (MJ/kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DietPropn">
            <summary>
            Proportion of each component in the diet 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.CorrDgProt">
            <summary>
            Degradability of protein in diet (0-1), corrected 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.MicrobialCP">
            <summary>
            Microbial crude protein (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS">
            <summary>
            Digestible protein leaving the stomach (kg): total
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS_Milk">
            <summary>
            Digestible protein leaving the stomach (kg): from milk
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS_MCP">
            <summary>
            Digestible protein leaving the stomach (kg): from MCP
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS_Avail_Wool">
            <summary>
            DPLS available for wool growth (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.UDP_Intake">
            <summary>
            Intake of undegradable protein (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.UDP_Dig">
            <summary>
            Digestibility of UDP (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.UDP_Reqd">
            <summary>
            Requirement for UDP (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.RDP_Intake">
            <summary>
            Daily intake for RDP (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.RDP_Reqd">
            <summary>
            Daily requirement for RDP (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.EnergyUse">
            <summary>
            Allocation of energy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ProteinUse">
            <summary>
            Allocation of protein
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Phos_Use">
            <summary>
            Physiology record
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Sulf_Use">
            <summary>
            Sulphur use
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Efficiency">
            <summary>
            Efficiencies of ME use (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.EndoFaeces">
            <summary>
            Endogenous faecal losses      (N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.OrgFaeces">
            <summary>
            Total organic faecal losses   (DM,N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.InOrgFaeces">
            <summary>
            Total inorganic faecal losses (N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Urine">
            <summary>
            Total urinary losses of       (N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DermalNLoss">
            <summary>
            N in dermal losses (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.GainEContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.GainPContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ConceptusGrowth">
            <summary>
            Increase in conceptus weight (kg/d)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.TotalWoolEnergy">
            <summary>
            Net energy retained in wool (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Therm0HeatProdn">
            <summary>
            Thermoneutral heat production (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.LowerCritTemp">
            <summary>
            Lower critical temperature from the chilling submodel (oC)      
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.RDP_IntakeEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalOutput.Copy">
            <summary>
            Copy a AnimalOutput object
            </summary>
            <returns>The clone of an animal output</returns>
        </member>
        <member name="T:Models.GrazPlan.Animals">
            <summary>
            Information required to initialise a single animal group
            The YoungWt and YoungGFW fields may be set to MISSING, in which case    
            TStockList will estimate defaults.                                       
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.AnimalType">
            <summary>The type of animal.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Genotype">
            <summary>Genotype of this group of animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Number">
            <summary>Number of animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Sex">
            <summary>Reproductive status of animals</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.AgeDays">
            <summary>Age (days)</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Weight">
            <summary>Unfasted live weight of the animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.MaxPrevWt">
            <summary>Highest weight recorded to date.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.FleeceWt">
            <summary>Greasy fleece weight of the animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.FibreDiam">
            <summary>Average wool fibre diameter of the animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.MatedTo">
            <summary>Genotype of the bulls/rams to which pregnant or lactating animals were mated.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Lactating">
            <summary>Days lactating. 1 or more denotes the time since parturition.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Pregnant">
            <summary>Days pregnant. Zero denotes not pregnant.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.NumFoetuses">
            <summary>Number of foetuses or suckling lambs.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Paddock">
            <summary>Paddock occupied by the animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.Tag">
            <summary>Initial tag value for the animal group.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.NumSuckling">
            <summary>Number of suckling young.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.YoungWt">
            <summary>Unfasted live weight of suckling calves/lambs.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.BirthCS">
            <summary>Birth Condition score.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.YoungGFW">
            <summary>Greasy fleece weight of suckling lambs.</summary>
        </member>
        <member name="M:Models.GrazPlan.Animals.GetAnimalTypes">
            <summary>Get the names of all genotypes for the current animal type.</summary>
        </member>
        <member name="M:Models.GrazPlan.Animals.GetGenotypeNames">
            <summary>Get the names of all genotypes for the current animal type.</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.IsSheepSelected">
            <summary>Is the animal type sheep?</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.AreYoungPresent">
            <summary>Is the animal type sheep?</summary>
        </member>
        <member name="P:Models.GrazPlan.Animals.ArePregnant">
            <summary>Are the animals pregnant?</summary>
        </member>
        <member name="M:Models.GrazPlan.Animals.GetFieldNames">
            <summary>Get the names of all fields.</summary>
        </member>
        <member name="M:Models.GrazPlan.Animals.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Invoked at the start of the simulation.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Models.GrazPlan.AnimalStateInfo">
            <summary>
            AnimalStateInfo type. Information required to reset the state in the case of RDP insufficiency                                                                
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.BaseWeight">
            <summary>
            Base weight without wool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.WoolWt">
            <summary>
            Weight of wool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.WoolMicron">
            <summary>
            Wool microns
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.CoatDepth">
            <summary>
            Depth of coat
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.FoetalWt">
            <summary>
            Foetal weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.LactAdjust">
            <summary>
            Lactation adjustment
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.LactRatio">
            <summary>
            Lactation ratio
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.BasePhos">
            <summary>
            Phosphorous value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.BaseSulf">
            <summary>
            Sulphur value
            </summary>
        </member>
        <member name="T:Models.GrazPlan.CohortsInfo">
            <summary>
            Attributes of a set of livstock cohorts, used in TStockList.AddStock         
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Genotype">
            <summary>
            Genotype name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Number">
            <summary>
            Total number of animals to enter the simulation. 
            The animals will be distributed across the age cohorts, 
            taking the genotype-specific death rate into account
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.ReproClass">
            <summary>
            Reproduction status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MinYears">
            <summary>
            Minimum years of the youngest cohort
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MaxYears">
            <summary>
            Maximum years of the oldest cohort
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.AgeOffsetDays">
            <summary>
            Age offset
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MeanLiveWt">
            <summary>
            Average unfasted live weight of the animals across all age cohorts
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.CondScore">
            <summary>
            Average condition score of the animals 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MeanGFW">
            <summary>
            Average greasy fleece weight of the animals across all age cohorts
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.FleeceDays">
            <summary>
            Days since shearing
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MatedTo">
            <summary>
            Genotype of the rams or bulls with which the animals were mated prior to entry
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.DaysPreg">
            <summary>
            Days pregnant
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Foetuses">
            <summary>
            Average number of foetuses per animal (including barren animals) across all age classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.DaysLact">
            <summary>
            The time since parturition in those animals that are lactating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Offspring">
            <summary>
            Average number of suckling offspring per animal (including dry animals) across all age classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.OffspringWt">
            <summary>
            Average unfasted live weight of any suckling lambs or calves
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.OffspringCS">
            <summary>
            Average body condition score of any suckling lambs or calves
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.LambGFW">
            <summary>
            Average greasy fleece weight of any suckling lambs
            </summary>
        </member>
        <member name="T:Models.GrazPlan.Diet">
            <summary>
            Record containing the different sources from which an animal acquires energy, protein etc                                
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Diet.Herbage">
            <summary>
            Herbage value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Diet.Supp">
            <summary>
            Supplement value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Diet.Milk">
            <summary>
            Milk value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Diet.Solid">
            <summary>
            "Solid" is herbage and supplement taken together
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Diet.Total">
            <summary>
            Total value
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ExcretionInfo">
            <summary>
            ExcretionInfo type. Totalled amounts of excretion                           
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.OrgFaeces">
            <summary>
            Organic faeces pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.InOrgFaeces">
            <summary>
            Inorganic faeces pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.Urine">
            <summary>
            Urine pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.Defaecations">
            <summary>
            Number in the time step by all animals (not including unweaned young)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.DefaecationVolume">
            <summary>
            Volume per defaecation, m^3 (fresh basis)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.DefaecationArea">
            <summary>
            Area per defaecation, m^2 (fresh basis)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.DefaecationEccentricity">
            <summary>
            Eccentricity of faeces
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.FaecalNO3Propn">
            <summary>
            Proportion of faecal inorganic N that is nitrate
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.Urinations">
            <summary>
            Number in the time step by all animals (not including unweaned young)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.UrinationVolume">
            <summary>
            Fluid volume per urination, m^3
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.UrinationArea">
            <summary>
            Area covered by each urination at the soil surface, m^2
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dUrinationEccentricity">
            <summary>
            Eccentricity of urinations
            </summary>
        </member>
        <member name="T:Models.GrazPlan.Genotype">
            <summary>Encapsulates a parameter set for an animal.</summary>
        </member>
        <member name="F:Models.GrazPlan.Genotype.FParentage">
            <summary>The breed ancestry of the parameter set.</summary>
        </member>
        <member name="M:Models.GrazPlan.Genotype.#ctor">
            <summary>Construct an animal parameter set.</summary>
        </member>
        <member name="M:Models.GrazPlan.Genotype.#ctor(Models.GrazPlan.Genotype)">
            <summary>Construct an animal parameter set from a source parameters set.</summary>
            <param name="srcSet">The source parameter set.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotype.#ctor(System.String,Models.GrazPlan.Genotype,Models.GrazPlan.Genotype,System.Double,System.Double)">
            <summary>
            Constructor for a breed cross. Blend two animal parameter sets.
            </summary>
            <param name="nameOfNewGenotype">The name given to the new parameter set.</param>
            <param name="damBreed">The dam breed.</param>
            <param name="sireBreed">The sire breed.</param>
            <param name="damProportion">The dam proportion.</param>
            <param name="sireProportion">The sire proportion.</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.#ctor(System.String,System.String,System.Collections.Generic.List{Models.Core.Run.PropertyReplacement})">
            <summary>
            Construct a parameter set from a set of parameter values.
            </summary>
            <param name="name">Name of the animal parameter set.</param>
            <param name="animalTypeString">The animal type.</param>
            <param name="parameters">The parameter values to apply.</param>
        </member>
        <member name="P:Models.GrazPlan.Genotype.sEditor">
            <summary>Editor of the parameters</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.sEditDate">
            <summary>Date edited</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.Animal">
            <summary>Animal type</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.FDairyIntakePeak">
            <summary>Dairy intake peak (c-idy-0)</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.SRWScalars">
            <summary>Standard reference weights</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MaxFleeceDiam">
            <summary>Maximum fleece diameter c-mu- (microns)</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.bDairyBreed">
            <summary>Fixed attribute (read in)</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MortRate">
            <summary>Background death rate, per day  [1..2]</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MortAge">
            <summary>Mortality age c-d-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MortIntensity">
            <summary>Rate of mortality increase for underweight animals.</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MortCondConst">
            <summary>Fraction of normal body weight in animals of Size=1 at which mortality starts to increase</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MortWtDiff">
            <summary>Weight differential in dying animals</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.GrowthC">
            <summary>Growth C c-n-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.IntakeC">
            <summary>Intake C c-i-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.IntakeLactC">
            <summary>Intake Lact C c-imx-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.GrazeC">
            <summary>Graze C c-r-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.EfficC">
            <summary>Effic C c-k</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MaintC">
            <summary>Maintenance C c-m-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.DgProtC">
            <summary>DgProtC c-rd-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.ProtC">
            <summary>Prot C c-a-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.PregC">
            <summary>Preg C c-p-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.PregScale">
            <summary>Preg scale c-p14-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.BirthWtScale">
            <summary>Birth weight scale c-p15</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.PeakLactC">
            <summary>Peak Lact C c-l0-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.LactC">
            <summary>Lact C c-l-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.WoolC">
            <summary>Wool C c-w-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.ChillC">
            <summary>Chill C c-c</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.GainC">
            <summary>Gain C c-g</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.PhosC">
            <summary>Phos C c-ph</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.SulfC">
            <summary>Sulf C c-su-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MethC">
            <summary>Methane C c-h-1,2,3,4,5,6,7  
            1. gross energy content of DM intake MJ/g
            2. constant term at maintenance
            3. M/D term at maintenance kg/MJ
            4. constant term in feediing level effect
            5. M/D term in feeding level effect kg/MJ
            6. weight:energy ratio kg/MJ
            7. volume:energy ratio m^3/MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.AshAlkC">
            <summary>Ash alkalinity C c-aa-1,2,3
            1. Ash alkalinity of basal weight and conceptus    
            2. Ash alkalinity of greasy wool  
            3. Ash alkalinity of faeces  
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.OvulationPeriod">
            <summary>Ovulation period c-f  
            Conception: length of oestrus cycle
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.Puberty">
            <summary>Puberty c-pbt-1,2  
            1. Puberty: females
            2. Puberty: males
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.DayLengthConst">
            <summary>Day length constant c-f1</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.F2">
            <summary>Conceive sigs c-f2</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.F3">
            <summary>Conceive sigs c-f3</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.ToxaemiaSigs">
            <summary>ToxaemiaSigss c-d</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.DystokiaSigs">
            <summary>DystokiaSigs c-</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.ExposureConsts">
            <summary>Exposure constants c-d</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.SelfWeanPropn">
            <summary>Self wean proportion c-swn</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.MaxYoung">
            <summary>Maximum young</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.BreedSRW">
            <summary>Breed standard reference weight (kg)</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.PotFleeceWt">
            <summary>Potential fleece weight (kg)</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.FleeceRatio">
            <summary>Potential greasy fleece weight:SRW</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.PeakMilk">
            <summary>Peak milk</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.ConceiveSigs">
            <summary>ConceiveSigs</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.FertWtDiff">
            <summary>FertWtDiff</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.FleeceYield">
            <summary>Fleece yield</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.Conceptions">
            <summary>Conception values</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotype.Gestation">
            <summary>Get gestation</summary>
        </member>
        <member name="M:Models.GrazPlan.Genotype.Initialise">
            <summary>
            Initialise the component.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Genotype.InitialiseWithParams(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double)">
            <summary>
            Initialise this instance with starting values for various parameters
            </summary>
            <param name="srw">Standard reference weight (kg).</param>
            <param name="potentialFleeceWeight">Potential fleece weight (kg).</param>
            <param name="maxMicrons">Maximum fleece microns.</param>
            <param name="fleeceYield">Fleece yield (kg).</param>
            <param name="potMilkYield">Potential milk yield.</param>
            <param name="conceptions">Conception values.</param>
            <param name="matureDeathRate">Mature animal death rate.</param>
            <param name="weanerDeathRate">Weaner death rate.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotype.DeriveParams">
            <summary>Calculate some derived parameters.</summary>
        </member>
        <member name="M:Models.GrazPlan.Genotype.ParentageCount">
            <summary>
            Count of parents
            </summary>
            <returns>The count of parents</returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.ParentageBreed(System.Int32)">
            <summary>
            Parent breed at the index
            </summary>
            <param name="parentIdx">The index of the parent</param>
            <returns>The parent breed</returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.ParentagePropn(System.Int32)">
            <summary>
            The proportion of the parent
            </summary>
            <param name="parentIdx">The index of the parent</param>
            <returns>The proportion</returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.AnnualDeaths(System.Boolean)">
            <summary>
            Get animal deaths.
            </summary>
            <param name="bIsWeaner">Get deaths for weaners?</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.SexStdRefWt(Models.GrazPlan.GrazType.ReproType)">
            <summary>
            Standard reference weight
            </summary>
            <param name="Repro"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.StdBirthWt(System.Int32)">
            <summary>
            Standard birth weight
            </summary>
            <param name="iNoYoung"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.Genotype.SetParentage(Models.GrazPlan.Genotype,System.Double)">
            <summary>
            Set parentage of a genotype.
            </summary>
            <param name="parentBreed">The parent breed.</param>
            <param name="proportion">The proportion of the parent.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotype.SetPeakMilk(System.Double)">
            <summary>
            Set the peak milk
            </summary>
            <param name="peakMilkValue">The peak milk value.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotype.ComputeConception(System.Double[],System.Int32,System.Double@)">
            <summary>Compute conceptions</summary>
            <param name="Sigs"></param>
            <param name="N"></param>
            <param name="fCR1"></param>
        </member>
        <member name="M:Models.GrazPlan.Genotype.SetConceptions(System.Double[])">
            <summary>Set conception rates.</summary>
            <param name="Rates">Rates array[1..  3]</param>
        </member>
        <member name="M:Models.GrazPlan.Genotype.CopyParams(Models.GrazPlan.Genotype)">
            <summary>
            Copies all the animal parameters
            </summary>
            <param name="srcSet">Parameter set to copy from.</param>
        </member>
        <member name="T:Models.GrazPlan.Genotype.Ancestry">
            <summary></summary>
        </member>
        <member name="F:Models.GrazPlan.Genotype.Ancestry.sBaseBreed">
            <summary></summary>
        </member>
        <member name="F:Models.GrazPlan.Genotype.Ancestry.fPropn">
            <summary></summary>
        </member>
        <member name="T:Models.GrazPlan.GenotypeCross">
            <summary>
            An instance of this class creates a genotype cross and adds it to the list of 
            available crosses.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.AnimalType">
            <summary>Gets or sets the animal type.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.PureBredBreed">
            <summary>The pure bred breed name.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.DamBreed">
            <summary>The dam breed name.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.SireBreed">
            <summary>The sire breed name.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.MatureDeathRate">
            <summary>Base rate of mortality in mature animals. Default is 0.0.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.WeanerDeathRate">
            <summary>Base rate of mortality in weaners. Default is 0.0.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.Conception">
            <summary>
            Expected rates of conception with 1, 2 and 3 young for mature ewes or cows in average body condition,
            over a mating period lasting 2.5 oestrus cycles.Only the first two elements are meaningful for cattle.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.Generation">
            <summary>
            Gets or sets the generation
            Number of generations of crossing: 0 denotes the pure-bred maternal genotype (in which case SireBreed is
            not used), 1 a first cross, 2 a second cross(75% sire:25% dam), etc.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.SRW">
            <summary>
            Gets or sets the standard reference weight
            Breed standard reference weight. The default value depends on DamBreed and SireBreed.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.PotFleeceWt">
            <summary>
            Gets or sets the potential fleece weight
            Breed reference fleece weight in sheep. The default value depends on DamBreed and SireBreed.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.MaxFibreDiam">
            <summary>
            Gets or sets the maximum wool fibre diameter
            Maximum average wool fibre diameter in sheep. The default depends on DamBreed and SireBreed.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.FleeceYield">
            <summary>
            Gets or sets the fleece yield
            Clean fleece weight as a proportion of greasy fleece weight in sheep. Default is 0.70.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.PeakMilk">
            <summary>
            Gets or sets the peak milk production
            Potential maximum milk yield per head, in 4% fat-corrected milk equivalents, in cattle. Default is 20.0.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.PurebredEnabled">
            <summary>Is the pure bred drop down enabled?</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeCross.CrossEnabled">
            <summary>Are the cross drop downs enabled?</summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeCross.GetAnimalTypes">
            <summary>Get the names of all genotypes for the current animal type.</summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeCross.GetGenotypeNames">
            <summary>Get the names of all genotypes for the current animal type.</summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeCross.DetermineAnimalType">
            <summary>the animal type from the breed names.</summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeCross.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.GenotypeCross.CreateGenotypeCross(System.String,System.String,System.Double,System.String,System.Double)">
            <summary>
            Create a genotype cross.                                      
            </summary>
            <param name="nameOfNewGenotype">Name of new genotype. Can be null.</param>
            <param name="damBreedName">Dam breed name.</param>
            <param name="damProportion">Proportion dam.</param>
            <param name="sireBreedName">Sire breed name.</param>
            <param name="sireProportion">Proportion sire.</param>
        </member>
        <member name="T:Models.GrazPlan.Genotypes">
            <summary>
            Encapsulates a collection of stock genotype parameters. It can read the GrazPlan .prm
            files as well as the APSIM ruminant JSON file format.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Genotypes.genotypes">
            <summary>
            User supplied genotypes. These are searched first when looking for genotypes.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Genotypes.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotypes.All">
            <summary>Get a list of all genotypes.</summary>
        </member>
        <member name="P:Models.GrazPlan.Genotypes.Names">
            <summary>Get a list of genotype names.</summary>
        </member>
        <member name="M:Models.GrazPlan.Genotypes.ReadPRM(System.String)">
            <summary>
            Read a parameter set and append to the json array.
            </summary>
            <param name="xmlString">The XML string to read.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotypes.Add(Models.GrazPlan.Genotype)">
            <summary>Set the user specified genotypes.</summary>
            <param name="animalParameterSet">The user specified animal parameter set.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotypes.Get(System.String)">
            <summary>Get a genotype. Throws if not found.</summary>
            <param name="genotypeName"></param>
        </member>
        <member name="M:Models.GrazPlan.Genotypes.ReadPRM(System.Xml.XmlNode)">
            <summary>
            Read a parameter set and append to the json array.
            </summary>
            <param name="parameterNode">The XML parameter node to convert.</param>
        </member>
        <member name="M:Models.GrazPlan.Genotypes.Add(Models.GrazPlan.GenotypeWrapper)">
            <summary>Add a genotype into the list of genotypes.</summary>
            <param name="genotypeToAdd">The genotype to add.</param>
        </member>
        <member name="T:Models.GrazPlan.GenotypeWrapper">
            <summary>
            Wraps a single genotype and lazy loads from a resource file if it needs to.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.#ctor(System.Xml.XmlNode)">
            <summary>Constructor for a genotype from ruminant.prm.</summary>
            <param name="parameterNode">The ruminant.prm xml node where this genotype is defined.</param>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.#ctor(Models.GrazPlan.Genotype)">
            <summary>Constructor</summary>
            <param name="animalParameterSet"></param>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resourceName">Name of stock resource.</param>
        </member>
        <member name="P:Models.GrazPlan.GenotypeWrapper.AnimalType">
            <summary>Animal type</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeWrapper.Name">
            <summary>Name of genotype.</summary>
        </member>
        <member name="P:Models.GrazPlan.GenotypeWrapper.Parameters">
            <summary>Gets genotype parameters.</summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.ReadParametersFromResource">
            <summary>
            Read parameters from json resource.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.ReadParametersFromPRM(System.Collections.Generic.List{System.String})">
            <summary>
            Get an animal parameter set for the given genotype name. Will throw if cannot find genotype.
            </summary>
            <param name="parameterXmlSections">The xml node sections to read from.</param>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.ReadPRMSection(System.Xml.XmlNode)">
            <summary>
            Read and convert a single section in a .prm file to a set of command overrides.
            </summary>
            <param name="parameterNode"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.ConvertScalarToCommand(System.Xml.XmlNode,System.String,System.String,System.Collections.Generic.List{Models.Core.Run.PropertyReplacement})">
            <summary>
            Convert an XML scalar parameter into a command.
            </summary>
            <param name="parameterNode">The XML parameter node.</param>
            <param name="parameterName">The name of the XML child parameter.</param>
            <param name="animalParamName">The name of a GrazPlan parameter.</param>
            <param name="commands">The list of comamnds to add to.</param>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.ConvertArrayToCommands(System.Xml.XmlNode,System.String,System.String,System.Collections.Generic.List{Models.Core.Run.PropertyReplacement},System.Int32)">
            <summary>
            Convert an XML parameter array into a series of commands.
            </summary>
            <param name="parentNode">The XML parameter node.</param>
            <param name="parameterName">The name of the XML child parameter.</param>
            <param name="animalParamName">The name of a GrazPlan parameter.</param>
            <param name="commands">The list of comamnds to add to.</param>
            <param name="numValuesInArray">The number of values that should be in the array.</param>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.FindChildWithPrefix(System.Xml.XmlNode,System.String)">
            <summary>Finds a direct child of the specified node that has a name starting with a prefix.</summary>
            <param name="node">The node.</param>
            <param name="namePrefix">The beginning of a name attribute to find.</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GenotypeWrapper.ConvertArrayToScalars(System.Xml.XmlNode,System.String,System.String[],System.Collections.Generic.List{Models.Core.Run.PropertyReplacement})">
            <summary>
            Convert an XML parameter array into a series of different animal parameters.
            </summary>
            <param name="parameterNode">The XML parameter node.</param>
            <param name="parameterName">The name of the XML child parameter.</param>
            <param name="animalParamNames">The names of a multiple GrazPlan paramaters, one for each parameter value.</param>
            <param name="commands">The list of comamnds to add to.</param>
        </member>
        <member name="T:Models.GrazPlan.GrazEnv">
            <summary>
            Environment interface
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.DAY2RAD">
            <summary>
            Convert day-of-year to radians
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.DEG2RAD">
            <summary>
            Convert degrees to radians
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.KMD_2_MS">
            <summary>
            Convert km/d to m/s
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.WM2_2_MJM2">
            <summary>
            Convert W/m^2 to MJ/m^2/d
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.C_2_K">
            <summary>
            Convert degrees C to K
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.HERBAGE_ALBEDO">
            <summary>
            The herbage albedo
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.REFERENCE_CO2">
            <summary>
            Reference [CO2] in ppm
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ReproductiveType">
            <summary>
            This is nearly the same information as "GrazType.ReproType" (below), but is intended for
            use in the GUI with Buy events, where we don't really want to include the
            pregnancy state of females. I'm placing it outside the GrazType namespace
            for simplicity when entering values in the GUI.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ReproductiveType.Female">
            <summary>
            female
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ReproductiveType.Male">
            <summary>
            male
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ReproductiveType.Castrate">
            <summary>
            castrated male
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType">
            <summary>
            Container for many GrazPlan constants
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.NONE">
            <summary>
            None item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOTAL">
            <summary>
            Total item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.SURFACE">
            <summary>
            Surface item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.VeryLarge">
            <summary>
            Represents a large value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.VerySmall">
            <summary>
            Represents a small value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DigClassNo">
            <summary>
            Number of digestibility classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.HerbClassNo">
            <summary>
            Total number of herbage classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.MaxPlantSpp">
            <summary>
            Maximum plant species
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.Ungrazeable">
            <summary>
            The ungrazeable amount of green in a paddock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.MaxSoilLayers">
            <summary>
            Maximum soil layers
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ptLEAF">
            <summary>
            Plant part leaf
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ptSTEM">
            <summary>
            Plant part stem
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ptROOT">
            <summary>
            Plant part root
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ptSEED">
            <summary>
            Plant part seed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.SOFT">
            <summary>
            Seed maturity
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.UNRIPE">
            <summary>
            Seed ripeness
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.TOMElement">
            <summary>
            Organic material elements
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.c">
            <summary>
            Carbon element
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.n">
            <summary>
            Nitrogen value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.p">
            <summary>
            Phosphorous element
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.s">
            <summary>
            Sulphur element
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.TPlantNutrient">
            <summary>
            Plant nutrients
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TPlantNutrient.pnNO3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TPlantNutrient.pnNH4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TPlantNutrient.pnPOx">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TPlantNutrient.pnSO4">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.DM_Pool">
            <summary>
            Dry matter pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM_Pool.DM">
            <summary>
            Dry matter in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM_Pool.Nu">
            <summary>
            Nutrients in kg element/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM_Pool.AshAlk">
            <summary>
            Ash alkalinity in mol/ha
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.ZeroDMPool(Models.GrazPlan.GrazType.DM_Pool@)">
            <summary>
            Zero the DM pool
            </summary>
            <param name="pool">Pool to zero</param>
        </member>
        <member name="T:Models.GrazPlan.GrazType.AnimalType">
            <summary>
            Sheep or Cattle animal type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AnimalType.Sheep">
            <summary>
            Is sheep
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AnimalType.Cattle">
            <summary>
            Is Cattle
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.AgeType">
            <summary>
            Age type of the animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.LambCalf">
            <summary>
            Lamb or calf
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.Weaner">
            <summary>
            A weaner
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.Yearling">
            <summary>
            A yearling animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.TwoYrOld">
            <summary>
            A two year old
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.Mature">
            <summary>
            A mature animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeText">
            <summary>
            Text for the age types
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.ReproType">
            <summary>
            Reproduction type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ReproType.Castrated">
            <summary>
            Castrated animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ReproType.Male">
            <summary>
            Is a male
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ReproType.Empty">
            <summary>
            Is empty
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ReproType.EarlyPreg">
            <summary>
            Early pregnancy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ReproType.LatePreg">
            <summary>
            Late pregnancy
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.LactType">
            <summary>
            Lactation type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.LactType.Dry">
            <summary>
            Is dry, not lactating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.LactType.Lactating">
            <summary>
            Is lactating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.LactType.Suckling">
            <summary>
            Has suckling
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AnimalText">
            <summary>
            Sheep or cattle text
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.IntakeRecord">
            <summary>
            One element of the available feed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.Biomass">
            <summary>
            Biomass
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.Digestibility">
            <summary>
            Digestibility value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.CrudeProtein">
            <summary>
            Crude protein
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.Degradability">
            <summary>
            Degradability value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.PhosContent">
            <summary>
            Phosphorous content
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.SulfContent">
            <summary>
            Sulphur content
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.HeightRatio">
            <summary>
            Average pasture height:default height
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.AshAlkalinity">
            <summary>
            Units are moles/kg DM
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.GrazingInputs">
            <summary>
            Grazing inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.Herbage">
            <summary>
            Available herbage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.TotalGreen">
            <summary>
            Total live + senescing pasture (kg/ha)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.TotalDead">
            <summary>
            Total dead pasture + litter (kg/ha)      
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.LegumePropn">
            <summary>
            Proportion of legume
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.Seeds">
            <summary>
            Seeds of various type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.SeedClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.SelectFactor">
            <summary>
            The selection factor
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.LegumeTrop">
            <summary>
            "Tropicality" of legumes 0 => temperate; 1 => tropical 
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingInputs.#ctor">
            <summary>
            Construct a GrazingInputs object
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingInputs.CopyFrom(Models.GrazPlan.GrazType.GrazingInputs)">
            <summary>
            Copy the whole object
            </summary>
            <param name="src">The source grazing inputs</param>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingInputs.#ctor(Models.GrazPlan.GrazType.GrazingInputs)">
            <summary>
            Copy constructor
            </summary>
            <param name="src">The grazing inputs source object</param>
        </member>
        <member name="M:Models.GrazPlan.GrazType.zeroGrazingInputs(Models.GrazPlan.GrazType.GrazingInputs@)">
            <summary>
            Zero the grazing inputs
            </summary>
            <param name="inputs">The grazing inputs to clear</param>
        </member>
        <member name="M:Models.GrazPlan.GrazType.addGrazingInputs(System.Int32,Models.GrazPlan.GrazType.GrazingInputs,Models.GrazPlan.GrazType.GrazingInputs@)">
            <summary>
            Add grazing inputs to total inputs
            </summary>
            <param name="iPopn">The seed population</param>
            <param name="partInputs">Partial inputs</param>
            <param name="totalInputs">Total inputs</param>
        </member>
        <member name="T:Models.GrazPlan.GrazType.GrazingOutputs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingOutputs.Herbage">
            <summary>
            Herbage classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingOutputs.Seed">
            <summary>
            The seed pools
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingOutputs.CopyFrom(Models.GrazPlan.GrazType.GrazingOutputs)">
            <summary>
            Copy from grazing outputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM2Carbon">
            <summary>
            Carbon content of dry matter
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.N2Protein">
            <summary>
            Conversion from N content to protein     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM2Height">
            <summary>
            Default conversion:  kg/ha -> cm height  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.REF_HERBAGE_BD">
            <summary>
            Herbage bulk density for HR=1 (kg/m^3)   
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.HerbageE2DM">
            <summary>
            Energy content of herbage (MJ/kg DM)     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.FatE2DM">
            <summary>
            Conversion factor
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ProteinE2DM">
            <summary>
            Conversion factor
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ClassDig">
            <summary>
            Default class digestibilities
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.WeightAverage(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get a weighted average
            </summary>
            <param name="x1">The x1 value</param>
            <param name="y1">The y1 value</param>
            <param name="x2">The x2 value</param>
            <param name="y2">The y2 value</param>
            <returns>The weighted average</returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.ScaleGrazingInputs(Models.GrazPlan.GrazType.GrazingInputs,System.Double)">
            <summary>
            Scale the grazing inputs
            </summary>
            <param name="inputs">The grazing inputs</param>
            <param name="scale">The scale value</param>
            <returns>The scaled grazing input</returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.PoolFraction(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            Rescale the DM pool
            </summary>
            <param name="aPool">The pool to scale</param>
            <param name="proportion">The proportion amount</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.MultiplyDMPool(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            Multiply the DM pool
            </summary>
            <param name="pool">Dry matter pool</param>
            <param name="scale">Scale value</param>
            <returns>The scaled dry matter pool</returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.AddDMPool(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.GrazType.DM_Pool)">
            <summary>
            Add dry matter pool to the total pool
            </summary>
            <param name="partPool">Part pool to add</param>
            <param name="totPool">Total pool</param>
        </member>
        <member name="T:Models.GrazPlan.PaddockInfo">
            <summary>
            Paddock details
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.#ctor(Models.Core.Zone)">
            <summary>
            Create the PaddockInfo
            </summary>
            <param name="zone">Optional zone.</param>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SummedGreenMass">
            <summary>
            Gets or sets the summed green mass
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Name">
            <summary>
            Gets or sets the paddock name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.zone">
            <summary>
            Gets or sets the paddock object
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.AddFaecesObj">
            <summary>
            Gets or sets the faeces destination
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.AddUrineObj">
            <summary>
            Gets or sets the urine destination
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SoilLayerThickness">
            <summary>The soil layer thickness</summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Area">
            <summary>
            Gets or sets the paddock area (ha)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Waterlog">
            <summary>
            Gets or sets the waterlogging index (0-1)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SummedPotIntake">
            <summary>
            Gets or sets the total pot. intake
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SuppRemovalKG">
            <summary>
            Gets or sets the supplement removal amount
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Slope">
            <summary>
            Gets or sets the paddock slope
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Steepness">
            <summary>
            Gets the steepness code (1-2)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SuppInPadd">
            <summary>
            Gets the supplement that is in the paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Forages">
            <summary>
            Gets the forage list
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.FeedSuppFirst">
            <summary>
            Gets a value indicating whether feeding the supplement first. Bail feeding.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.AssignForage(Models.GrazPlan.ForageInfo)">
            <summary>
            Assign a forage to this paddock
            </summary>
            <param name="forage">The forage object to assign to this paddock</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.ComputeTotals">
            <summary>
            Aggregates the initial forage availability of each species in the list       
            * If FForages.Count=0, then the aggregate forage availability is taken to    
              have been passed at the paddock level using setGrazingInputs()             
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.ZeroRemoval">
            <summary>
            Zero the removal amounts
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.FeedSupplement(System.Double,Models.GrazPlan.FoodSupplement,System.Boolean)">
            <summary>
            Feed the supplement
            </summary>
            <param name="newAmount">The amount to feed in kg</param>
            <param name="newSupp">The supplement to feed</param>
            <param name="feedSuppFirst">True if bail feeding</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.ClearSupplement">
            <summary>
            Clear the supplement ration that is in the paddock
            </summary>
        </member>
        <member name="T:Models.GrazPlan.PhysiologicalState">
            <summary>
            Allocation of energy, protein etc for:
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Maint">
            <summary>
            Basal metab.+movement+digestion+cold
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Preg">
            <summary>
            Pregnancy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Lact">
            <summary>
            Lactation
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Wool">
            <summary>
            Wool growth (sheep only)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Gain">
            <summary>
            Weight gain (after efficiency losses)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Metab">
            <summary>
            Basal metabolism
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Cold">
            <summary>
            Heat production in the cold
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiologicalState.Total">
            <summary>
            Total value
            </summary>
        </member>
        <member name="T:Models.GrazPlan.PurchaseInfo">
            <summary>
             Abbreviated animal initialisation set, used in TStockList.Buy                
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Genotype">
            <summary>
            Genotype name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Number">
            <summary>
            Number of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.LiveWt">
            <summary>
            Live weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.GFW">
            <summary>
            Greasy fleece weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.AgeDays">
            <summary>
            Age in days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.CondScore">
            <summary>
            Condition score
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Repro">
            <summary>
            Reproduction status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.MatedTo">
            <summary>
            Mated to animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Preg">
            <summary>
            Pregnant days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Lact">
            <summary>
            Lactation days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.NYoung">
            <summary>
            Number of young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.YoungWt">
            <summary>
            Weight of young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.YoungGFW">
            <summary>
            Greasy fleece weight of young
            </summary>
        </member>
        <member name="T:Models.GrazPlan.DifferenceRecord">
            <summary>
            Set of differences between two sub-groups of animals.  Used in the Split  
            method of AnimalGroup                                                     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DifferenceRecord.StdRefWt">
            <summary>
            Standard reference weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DifferenceRecord.BaseWeight">
            <summary>
            Base weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DifferenceRecord.FleeceWt">
            <summary>
            Fleece weight
            </summary>
        </member>
        <member name="T:Models.GrazPlan.Stock">
            <summary>
            # Stock
            The STOCK component encapsulates the GRAZPLAN animal biology model, as described in [FREER1997].
            
            [The GrazPlan animal model technical description](https://grazplan.csiro.au/wp-content/uploads/2007/08/TechPaperMay12.pdf)
            
            Animals may be of different genotypes. In particular, sheep and cattle may be represented within a single STOCK instance.
            
            Usually a single STOCK module is added to an AusFarm simulation, at the top level in the
            module hierarchy.
            
            In a grazing system, however, there may be a variety of different classes of livestock. Animals
            may be of different genotypes (including both sheep and cattle); may be males, females or
            castrates; are likely to have a range of different ages; and females may be pregnant and/or
            lactating. The set of classes of livestock can change over time as animals enter or leave the
            system, are mated, give birth or are weaned. Further, animals that are otherwise similar may be
            placed in different paddocks, where their growth rates may differ.
            
            ![The list of animal groups at a particular time during a hypothetical simulation containing a STOCK module. Group 1 is distinct from the others because it has a different genotype and sex. Groups 2 and 3 are distinct because they are in different age classes (yearling vs mature). Groups 2 and 4 are distinct because they are in different reproductive states (pregnant vs lactating). Note how the unweaned lambs are associated with their mothers.](StockGroupsExample.png)
            
            In the STOCK component, this complexity is handled by representing the set of animals in a
            simulated system as a list of animal groups (Figure 2.1). The members of each animal group
            have the same genotype and age class, but may have a range of ages (for example, an animal
            group containing mature animals may include four-year-old, five-year-old and six-year-old
            stock). The members of each animal group also have the same stage of pregnancy and/or
            lactation; the same number of suckling offspring; and occupy the same paddock.
            
            The set of animal groups changes as animals enter and leave the simulation, and as
            physiological events such as maturation, mating, birth or weaning take place. Animal groups
            that become sufficiently similar are merged into a single group. The state of any unweaned
            lambs or calves is stored alongside that of their mothers; at weaning, the male and female
            weaners are transferred into two new animal groups within the main list.
            
            In addition to the biological state variables that describe the animals, each animal group has
            four attributes that are of particular interest when writing management scripts.
            
            **Index**
            
            Each animal group has a unique, internally-assigned integer index, starting at 1.
            Because the set of groups present in a component instance is dynamic, the index
            number associated with a particular group of animals can – and usually does – change
            over time. This dynamic numbering scheme has consequences for the way that animals
            of a particular kind must be located when writing management scripts.
            
            **Paddock**
            
            Each animal group is also assigned a paddock. The forage and supplementary feed
            available to a group of animals are determined by the paddock it occupies. Paddocks are
            referred to by name in the STOCK component:
            
            * To set the paddock occupied by an animal group, use the **Move** event.
            * To determine the paddock occupied by an animal group, use the **Paddock** variable.
            
            It is the user’s responsibility to ensure that paddock names correspond to PADDOCK
            modules or other sources of necessary driving variables.
            
            **Tag Value**
            
            Each animal group also has a user-assigned tag value that takes an integer value. Tag
            values have two purposes:
            
            * They can be used to manage distinct groups of animals in a common fashion. For
            example, all lactating ewes might be assigned the same tag value, and then all
            animals with this tag value might undergo the same supplementary feeding regime.
            * If tag values are assigned sequentially (starting at 1), they can be used to generate
            summary variables. For example, **WeightTag[1]** gives the average live weight
            of all animals in groups with a tag value of 1.
            
            Note that animal groups with different tag values are never merged, even if they are
            otherwise similar.
            
            * To set the tag value of an animal group, use the **Tag** method.
            * To determine the tag value of an animal group, use the **TagNo** variable.
            
             **Merging groups of similar animals**
             
            Animal groups that become sufficiently similar are merged into a single group.
            Animals are similar if all these are the same:
            
            * Occupy the same paddock
            * Reproduction status (Castrated, Male, Empty, Early Preg,  Late Preg)
            * Number of foetuses
            * Mating cycle (day in the mating cycle)
            * Days to mating (Days left in joining period)
            * Pregnancy (Days since conception)
            * Lactation status (Days since parturition (if lactating)) – within 7 days
            * Has (not) young
            * If young exist, their reproductive status must be the same
            * Implants (hormone implants)
            * Mean age (if the animals are less than one year old )
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.userForages">
            <summary>
            The list of user specified forage component names
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.userPaddocks">
            <summary>
            The list of user specified paddocks
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.randFactory">
            <summary>
            The random number host
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.suppFed">
            <summary>
            The supplement used
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.excretionInfo">
            <summary>
            The excretion info
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.UNKNOWN">
            <summary>
            Used to show it is unset
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.systemClock">
            <summary>
            The simulation clock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.locWtr">
            <summary>
            The simulation weather component
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.suppFeed">
            <summary>
            The supplement component
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.outputSummary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.#ctor">
            <summary>
            The Stock class constructor
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RandSeed">
            <summary>
            The seed for the random number generator. Used when computing numbers of animals dying and conceiving from the equations for mortality and conception rates.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Genotypes">
            <summary>
            An instance that contains all stock genotypes.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.StockModel">
            <summary>
            Gives access to the list of animals. Needed for unit testing.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AnimalGroups">
            <summary>List of animal groups.</summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.ByTag(System.Int32)">
            <summary>Return animal groups that have a specific tag number.</summary>
            <param name="tag">Tag number of animal groups to return.</param>
        </member>
        <member name="P:Models.GrazPlan.Stock.Trampling">
            <summary>Mass of grazers per unit area</summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppEaten">
            <summary>
            Gets the consumption of supplementary feed by animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoGroups">
            <summary>
            Gets the number of animal groups
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Number">
            <summary>
            Gets the number of animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberAll">
            <summary>
            Gets the total number of animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberTag">
            <summary>
            Gets the number of animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberYng">
            <summary>
            Gets the number of unweaned young animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberYngAll">
            <summary>
            Gets the total number of unweaned young animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberYngTag">
            <summary>
            Gets the number of unweaned young animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemale">
            <summary>
            Gets the number of female animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleAll">
            <summary>
            Gets the total number of female animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleTag">
            <summary>
            Gets the number of female animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleYng">
            <summary>
            Gets the number of unweaned female animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleYngAll">
            <summary>
            Gets the total number of unweaned female animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleYngTag">
            <summary>
            Gets the number of unweaned female animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMale">
            <summary>
            Gets the number of male animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleAll">
            <summary>
            Gets the total number of male animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleTag">
            <summary>
            Gets the number of male animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleYng">
            <summary>
            Gets the number of unweaned male animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleYngAll">
            <summary>
            Gets the total number of unweaned male animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleYngTag">
            <summary>
            Gets the number of unweaned male animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DeathsAll">
            <summary>
            Gets the deaths of all non suckling animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Deaths">
            <summary>
            Gets the deaths of non suckling animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DeathsTag">
            <summary>
            Gets the deaths of non suckling animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Sex">
            <summary>
            Gets the sex field of the sheep and cattle initialisation variables. [wether | ram | steer | bull | ewe | heifer | cow]
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Age">
            <summary>
            Gets the age of animals by group.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeAll">
            <summary>
            Gets the age of animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeTag">
            <summary>
            Gets the age of animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeYng">
            <summary>
            Gets the age of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeYngAll">
            <summary>
            Gets the age of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeYngTag">
            <summary>
            Gets the age of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonths">
            <summary>
            Gets the age of animals, in months by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsAll">
            <summary>
            Gets the age of animals, in months total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsTag">
            <summary>
            Gets the age of animals, in months by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsYng">
            <summary>
            Gets the age of unweaned young animals, in months by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsYngAll">
            <summary>
            Gets the age of unweaned young animals, in months total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsYngTag">
            <summary>
            Gets the age of unweaned young animals, in months by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Weight">
            <summary>
            Gets the average live weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightAll">
            <summary>
            Gets the averge live weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightTag">
            <summary>
            Gets the average live weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightYng">
            <summary>
            Gets the average live weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightYngAll">
            <summary>
            Gets the average live weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightYngTag">
            <summary>
            Gets the average live weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWt">
            <summary>
            Gets the fleece-free, conceptus-free weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtAll">
            <summary>
            Gets the fleece-free, conceptus-free weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtTag">
            <summary>
            Gets the fleece-free, conceptus-free weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtYng">
            <summary>
            Gets the fleece-free, conceptus-free weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtYngAll">
            <summary>
            Gets the fleece-free, conceptus-free weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtYngTag">
            <summary>
            Gets the fleece-free, conceptus-free weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScore">
            <summary>
            Gets the condition score of animals (1-5 scale) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreAll">
            <summary>
            Gets the condition score of animals (1-5 scale) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreTag">
            <summary>
            Gets the condition score of animals (1-5 scale) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreYng">
            <summary>
            Gets the condition score of unweaned young animals (1-5 scale) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreYngAll">
            <summary>
            Gets the condition score of unweaned young animals (1-5 scale) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreYngTag">
            <summary>
            Gets the condition score of unweaned young animals (1-5 scale) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWt">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtAll">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtTag">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtYng">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtYngAll">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtYngTag">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWt">
            <summary>
            Gets the current greasy fleece weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtAll">
            <summary>
            Gets the current greasy fleece weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtTag">
            <summary>
            Gets the current greasy fleece weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtYng">
            <summary>
            Gets the current greasy fleece weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtYngAll">
            <summary>
            Gets the current greasy fleece weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtYngTag">
            <summary>
            Gets the current greasy fleece weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWt">
            <summary>
            Gets the current clean fleece weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtAll">
            <summary>
            Gets the current clean fleece weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtTag">
            <summary>
            Gets the current clean fleece weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtYng">
            <summary>
            Gets the current clean fleece weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtYngAll">
            <summary>
            Gets the current clean fleece weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtYngTag">
            <summary>
            Gets the current clean fleece weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiam">
            <summary>
            Gets the current average wool fibre diameter by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamAll">
            <summary>
            Gets the current average wool fibre diameter total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamTag">
            <summary>
            Gets the current average wool fibre diameter by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamYng">
            <summary>
            Gets the current average wool fibre diameter of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamYngAll">
            <summary>
            Gets the current average wool fibre diameter of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamYngTag">
            <summary>
            Gets the current average wool fibre diameter of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Pregnant">
            <summary>
            Gets the the pregnecy status. If the animals are pregnant, the number of days since conception; zero otherwise, by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PregnantAll">
            <summary>
            Gets the the pregnecy status. If the animals are pregnant, the number of days since conception; zero otherwise, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PregnantTag">
            <summary>
            Gets the the pregnecy status. If the animals are pregnant, the number of days since conception; zero otherwise, by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Lactating">
            <summary>
            Gets the lactation status. If the animals are lactating, the number of days since birth of the lamb or calf; zero otherwise, by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.LactatingAll">
            <summary>
            Gets the lactation status. If the animals are lactating, the number of days since birth of the lamb or calf; zero otherwise, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.LactatingTag">
            <summary>
            Gets the lactation status. If the animals are lactating, the number of days since birth of the lamb or calf; zero otherwise, by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFoetuses">
            <summary>
            Gets the number of foetuses per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFoetusesAll">
            <summary>
            Gets the number of foetuses per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFoetusesTag">
            <summary>
            Gets the number of foetuses per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoSuckling">
            <summary>
            Gets the number of unweaned lambs or calves per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoSucklingAll">
            <summary>
            Gets the number of unweaned lambs or calves per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoSucklingTag">
            <summary>
            Gets the number of unweaned lambs or calves per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BirthCS">
            <summary>
            Gets the condition score at last parturition; zero if lactating=0, by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BirthCSAll">
            <summary>
            Gets the condition score at last parturition; zero if lactating=0, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BirthCSTag">
            <summary>
            Gets the condition score at last parturition; zero if lactating=0, by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Paddock">
            <summary>
            Gets the paddock occupied by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.TagNo">
            <summary>
            Gets the tag value assigned to each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSE">
            <summary>
            Gets the dry sheep equivalents, based on potential intake by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEAll">
            <summary>
            Gets the dry sheep equivalents, based on potential intake total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSETag">
            <summary>
            Gets the dry sheep equivalents, based on potential intake by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEYng">
            <summary>
            Gets the dry sheep equivalents, based on potential intake of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEYngAll">
            <summary>
            Gets the dry sheep equivalents, based on potential intake of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEYngTag">
            <summary>
            Gets the dry sheep equivalents, based on potential intake of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChange">
            <summary>
            Gets the rate of change of base weight of each animal by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeAll">
            <summary>
            Gets the rate of change of base weight of each animal total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeTag">
            <summary>
            Gets the rate of change of base weight of each animal by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeYng">
            <summary>
            Gets the rate of change of base weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeYngAll">
            <summary>
            Gets the rate of change of base weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeYngTag">
            <summary>
            Gets the rate of change of base weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Intake">
            <summary>
            Gets the total intake per head of dry matter and nutrients by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeAll">
            <summary>
            Gets the total intake per head of dry matter and nutrients
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeTag">
            <summary>
            Gets the total intake per head of dry matter and nutrients by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeYng">
            <summary>
            Gets the total intake per head of dry matter and nutrients of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeYngAll">
            <summary>
            Gets the total intake per head of dry matter and nutrients of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeYngTag">
            <summary>
            Gets the total intake per head of dry matter and nutrients of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntake">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeAll">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeTag">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeYng">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeYngAll">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeYngTag">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntake">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeAll">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeTag">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeYng">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeYngAll">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeYngTag">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntake">
            <summary>
            Gets the intake per head of metabolizable energy by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeAll">
            <summary>
            Gets the intake per head of metabolizable energy total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeTag">
            <summary>
            Gets the intake per head of metabolizable energy by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeYng">
            <summary>
            Gets the intake per head of metabolizable energy of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeYngAll">
            <summary>
            Gets the intake per head of metabolizable energy of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeYngTag">
            <summary>
            Gets the intake per head of metabolizable energy of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntake">
            <summary>
            Gets the crude protein intake per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeAll">
            <summary>
            Gets the crude protein intake per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeTag">
            <summary>
            Gets the crude protein intake per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeYng">
            <summary>
            Gets the crude protein intake per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeYngAll">
            <summary>
            Gets the crude protein intake per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeYngTag">
            <summary>
            Gets the crude protein intake per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowth">
            <summary>
            Gets the growth rate of clean fleece by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthAll">
            <summary>
            Gets the growth rate of clean fleece total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthTag">
            <summary>
            Gets the growth rate of clean fleece by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthYng">
            <summary>
            Gets the growth rate of clean fleece of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthYngAll">
            <summary>
            Gets the growth rate of clean fleece of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthYngTag">
            <summary>
            Gets the growth rate of clean fleece of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiam">
            <summary>
            Gets the fibre diameter of the current day's wool growth by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamAll">
            <summary>
            Gets the fibre diameter of the current day's wool growth total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamTag">
            <summary>
            Gets the fibre diameter of the current day's wool growth by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamYng">
            <summary>
            Gets the fibre diameter of the current day's wool growth of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamYngAll">
            <summary>
            Gets the fibre diameter of the current day's wool growth of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamYngTag">
            <summary>
            Gets the fibre diameter of the current day's wool growth of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkWt">
            <summary>
            Gets the weight of milk produced per head, on a 4pc fat-corrected basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkWtAll">
            <summary>
            Gets the weight of milk produced per head, on a 4pc fat-corrected basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkWtTag">
            <summary>
            Gets the weight of milk produced per head, on a 4pc fat-corrected basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkME">
            <summary>
            Gets the metabolizable energy produced in milk (per head) by each animal group by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkMEAll">
            <summary>
            Gets the metabolizable energy produced in milk (per head) by each animal group total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkMETag">
            <summary>
            Gets the metabolizable energy produced in milk (per head) by each animal group by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedN">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNAll">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNTag">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNYng">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNYngAll">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNYngTag">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedP">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPAll">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPTag">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPYng">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPYngAll">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPYngTag">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedS">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSAll">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSTag">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSYng">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSYngAll">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSYngTag">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Faeces">
            <summary>
            Gets the faecal dry matter and nutrients per head by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesAll">
            <summary>
            Gets the faecal dry matter and nutrients per head
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesTag">
            <summary>
            Gets the faecal dry matter and nutrients per head by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesYng">
            <summary>
            Gets the faecal dry matter and nutrients per head of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesYngAll">
            <summary>
            Gets the faecal dry matter and nutrients per head of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesYngTag">
            <summary>
            Gets the faecal dry matter and nutrients per head of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorg">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgAll">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgTag">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgYng">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgYngAll">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgYngTag">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.EnergyUse">
            <summary>
            Gets the metabolizable energy use for each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Methane">
            <summary>
            Gets the output of methane (per head) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneAll">
            <summary>
            Gets the output of methane (per head) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneTag">
            <summary>
            Gets the output of methane (per head) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneYng">
            <summary>
            Gets the output of methane (per head) of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneYngAll">
            <summary>
            Gets the output of methane (per head) of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneYngTag">
            <summary>
            Gets the output of methane (per head) of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineN">
            <summary>
            Gets the urinary nitrogen output per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNAll">
            <summary>
            Gets the urinary nitrogen output per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNTag">
            <summary>
            Gets the urinary nitrogen output per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNYng">
            <summary>
            Gets the urinary nitrogen output per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNYngAll">
            <summary>
            Gets the urinary nitrogen output per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNYngTag">
            <summary>
            Gets the urinary nitrogen output per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineP">
            <summary>
            Gets the urinary phosphorus output per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePAll">
            <summary>
            Gets the urinary phosphorus output per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePTag">
            <summary>
            Gets the urinary phosphorus output per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePYng">
            <summary>
            Gets the urinary phosphorus output per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePYngAll">
            <summary>
            Gets the urinary phosphorus output per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePYngTag">
            <summary>
            Gets the urinary phosphorus output per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineS">
            <summary>
            Gets the urinary sulphur output per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSAll">
            <summary>
            Gets the urinary sulphur output per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSTag">
            <summary>
            Gets the urinary sulphur output per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSYng">
            <summary>
            Gets the urinary sulphur output per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSYngAll">
            <summary>
            Gets the urinary sulphur output per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSYngTag">
            <summary>
            Gets the urinary sulphur output per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntake">
            <summary>
            Gets the intake per head of rumen-degradable protein by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeAll">
            <summary>
            Gets the intake per head of rumen-degradable protein total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeTag">
            <summary>
            Gets the intake per head of rumen-degradable protein by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeYng">
            <summary>
            Gets the intake per head of rumen-degradable protein of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeYngAll">
            <summary>
            Gets the intake per head of rumen-degradable protein of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeYngTag">
            <summary>
            Gets the intake per head of rumen-degradable protein of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqd">
            <summary>
            Gets the requirement per head of rumen-degradable protein by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdAll">
            <summary>
            Gets the requirement per head of rumen-degradable protein total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdTag">
            <summary>
            Gets the requirement per head of rumen-degradable protein by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdYng">
            <summary>
            Gets the requirement per head of rumen-degradable protein of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdYngAll">
            <summary>
            Gets the requirement per head of rumen-degradable protein of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdYngTag">
            <summary>
            Gets the requirement per head of rumen-degradable protein of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactor">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorAll">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorTag">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorYng">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorYngAll">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorYngTag">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifier">
            <summary>
            Gets the externally-imposed scaling factor for potential intake (0-1.0). This property is resettable by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierAll">
            <summary>
            Gets the externally-imposed scaling factor for potential intake (0-1.0). This property is resettable, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierTag">
            <summary>
            Gets the externally-imposed scaling factor for potential intake (0-1.0). This property is resettable by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierYng">
            <summary>
            Gets the externally-imposed scaling factor for potential intake (0-1.0). This property is resettable, of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierYngAll">
            <summary>
            Gets the externally-imposed scaling factor for potential intake (0-1.0). This property is resettable, of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierYngTag">
            <summary>
            Gets the externally-imposed scaling factor for potential intake (0-1.0). This property is resettable, of unweaned young animals by tag number
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation, initialise all the paddocks and forages and nitrogen returns.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnEndOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation, initialise all the paddocks and forages and nitrogen returns.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnDoStock(System.Object,System.EventArgs)">
            <summary>
            Initialisation step
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Add(Models.GrazPlan.StockAdd)">
            <summary>
            Causes a set of related age cohorts of animals to enter the simulation. 
            Each age cohort may contain animals that are pregnant and/or lactating, in which case distributions of numbers of foetuses and/or suckling offspring are computed automatically. 
            This event is primarily intended to simplify the initialisation of flocks and herds in simulations.
            </summary>
            <param name="animals">The animal data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Buy(Models.GrazPlan.StockBuy)">
            <summary>
            Buys animals (i.e. they enter the simulation). The purchased animals will form a new animal group that is placed at the end of the list of animal groups.
            </summary>
            <param name="stock">The stock data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Buy(System.String,System.Double,Models.GrazPlan.ReproductiveType,System.Double,System.Double,System.Double)">
            <summary>
            Buys animals (i.e. they enter the simulation). The purchased animals will form a new animal group that is placed at the end of the list of animal groups.
            </summary>
            <param name="genotype">The genotype</param>
            <param name="number">The number of animals</param>
            <param name="sex">The sex of animals</param>
            <param name="age">The age of animals (months)</param>
            <param name="weight">The weight of animals (kg)</param>
            <param name="fleeceWeight">The fleece weight of animals (kg)</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Sell(System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Remove the specified number of animals (not including unweaned lambs/calves).
            </summary>
            <param name="number">The number of animals to remove.</param>
            <param name="group">The animal group to remove animals from. Null denotes all groups.</param>
            <returns>The number of animals sold.</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.Sell(System.Int32,System.Collections.Generic.IEnumerable{Models.GrazPlan.AnimalGroup})">
            <summary>
            Remove the specified number of animals (not including unweaned lambs/calves)
            Will iterate through the groups specified, removing as many animals from each
            until the specified number has been reached. If groups is null, will iterate
            through all animal groups.
            </summary>
            <param name="number">The number of animals to remove.</param>
            <param name="groups">The animal group to remove animals from. Null denotes all groups.</param>
            <returns>The number of animals sold.</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.Shear(System.Boolean,System.Boolean,Models.GrazPlan.AnimalGroup)">
            <summary>
            Shears sheep. The event has no effect on cattle.
            </summary>
            <param name="shearAdults">Shear adults?</param>
            <param name="shearYoung">Shear lambs?</param>
            <param name="group">The group to shear. null = all groups</param>
            <returns>cfw</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.Move(System.String,Models.GrazPlan.AnimalGroup)">
            <summary>Moves animals to a specified paddock.</summary>
            <param name="paddockName">Name of the paddock to which the animal group is to be moved.</param>
            <param name="group">The animal group to move.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Join(System.String,System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Commences mating of a particular group of animals.  If the animals are not empty females, or if they are too young, has no effect
            </summary>
            <param name="mateTo">Genotype of the rams or bulls with which the animals are mated. 
            Must match the name field of a member of the genotypes property.</param>
            <param name="mateDays">Length of the mating period in days.</param>
            <param name="group">The animal group to mate. null denotes that all empty females of sufficient age should be mated.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Castrate(System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Converts ram lambs to wether lambs, or bull calves to steers.  If the animal group(s) denoted by group has no suckling young, has no effect. 
            If the number of male lambs or calves in a nominated group is greater than the number to be castrated, the animal group will be split; 
            the sub-group with castrated offspring will remain at the original index and the sub-group with offspring that were not castrated will 
            be added at the end of the set of animal groups.
            </summary>
            <param name="number">Number of male lambs or calves to be castrated.</param>
            <param name="group">The animal group to castrate. null denotes that each animal group should be processed in turn until the nominated number of offspring has been castrated.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Wean(System.Int32,System.Boolean,System.Boolean,Models.GrazPlan.AnimalGroup)">
            <summary>
            Weans some or all of the lambs or calves from an animal group. 
            The newly weaned animals are added to the end of the list of animal groups, with males and females in separate groups.
            </summary>
            <param name="number">The number of lambs or calves to be weaned.</param>
            <param name="weanMales">Wean the male animals?</param>
            <param name="weanFemales">Wean the female animals?</param>
            <param name="group">The animal group to wean. null denotes that each animal group should be processed in turn until the nominated number of lambs or calves has been weaned.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.DryOff(System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Ends lactation in cows that have already had their calves weaned.  The event has no effect on other animals.
            If the number of cows in a nominated group is greater than the number to be dried off, the animal group will be split; 
            the sub-group that is no longer lactating will remain at the original index and the sub-group that continues lactating will be added at the end of the set of animal groups
            </summary>
            <param name="number">Number of females for which lactation is to end.</param>
            <param name="group">The animal group for which lactation is to end. Null denotes that each animal group should be processed in turn until the nominated number of cows has been dried off.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.SplitByAge(System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Split animal group by age
            </summary>
            <param name="age">Age in days</param>
            <param name="group">The animal group to split.</param>
            <returns>The new animal groups that were created.</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.SplitByWeight(System.Double,Models.GrazPlan.AnimalGroup)">
            <summary>
            Split animal group by weight
            </summary>
            <param name="weight">Weight to split on (kg/animal)</param>
            <param name="group">The animal group to split.</param>
            <returns>The new animal groups that were created.</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.SplitByYoung(Models.GrazPlan.AnimalGroup)">
            <summary>
            Split animal group by young.
            </summary>
            <param name="group">The animal group to split.</param>
            <returns>The new animal groups that were created.</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.Sort">
            <summary>
            Rearranges the list of animal groups in ascending order of tag value.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.RequestAvailableToAnimal">
            <summary>
            Do a request for all the biomasses in every paddock
            Note: This could be optimised to not request paddocks that are unstocked (drafting still needs to get the amounts)
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.PopulateFaeces(Models.GrazPlan.PaddockInfo,Models.Surface.AddFaecesType)">
            <summary>
            Populate the AddFaecesType object
            </summary>
            <param name="paddock">The paddock</param>
            <param name="faecesValue">The faeces data</param>
            <returns>True if the number of defaecations > 0</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.PopulateUrine(Models.GrazPlan.PaddockInfo,Models.Soils.AddUrineType)">
            <summary>
            Copy the urine info into the AddUrineType
            </summary>
            <param name="paddock">The paddock</param>
            <param name="urineValue">The urine data</param>
            <returns>True if the number of urinations > 0</returns>
        </member>
        <member name="T:Models.GrazPlan.StockList">
            <summary>
            StockList is primarily a list of AnimalGroups. Each animal group has a     
            "current paddock" (function getInPadd() ) and a "group tag" (function getTag()      
            associated with it. The correspondences between these and the animal         
            groups must be maintained.                                                   
            -                                                                               
            In addition, the class maintains two other lists:                            
            FPaddockInfo  holds paddock-specific information.  Animal groups are        
                            related to the members of FPaddockInfo by the FPaddockNos     
                            array.                                                        
            FSwardInfo    holds the herbage availabilities and amounts removed from     
                            each sward (i.e. all components which respond to the          
                            call for "sward2stock").  The animal groups never refer to    
                            this information directly; instead, the TStockList.Dynamics   
                            method (1) aggregates the availability in each sward into     
                            a paddock-level total, and (2) once the grazing logic has     
                            been executed it also allocates the amounts removed between   
                            the various swards.  Swards are allocated to paddocks on      
                            the basis of their FQDN's.                                    
            -                                                                              
             N.B. The use of a fixed-length array for priorities and paddock numbers      
                  limits the number of animal groups that can be stored in this           
                  implementation.                                                         
             N.B. The At property is 1-offset.  In many of the management methods, an     
                  index of 0 denotes "do to all groups".                                  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.MONTH2DAY">
            <summary>
            Conversion factor for months to days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.WEIGHT2DSE">
            <summary>
            Converts animal mass into "dse"s for trampling purposes                     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.parentStockModel">
            <summary>The parent stock model.</summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.clock">
            <summary>The clock model.</summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.weather">
            <summary>The weather model.</summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.stock">
            <summary>
            stock[0] is kept for use as temporary storage         
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.#ctor(Models.GrazPlan.Stock,Models.Clock,Models.Interfaces.IWeather,System.Collections.Generic.List{Models.Core.Zone})">
            <summary>
            Constructor
            </summary>
            <param name="stockModel">The parent stock model.</param>
            <param name="clockModel">The clock model.</param>
            <param name="weatherModel">The weather model.</param>
            <param name="paddocksInSimulation">The paddocks in the simulation.</param>
        </member>
        <member name="P:Models.GrazPlan.StockList.Animals">
            <summary>Gets an enumeration of all animal groups.</summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.Paddocks">
            <summary>
            Gets the list of paddocks
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.Enterprises">
            <summary>
            Gets the enterprise list
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.ForagesAll">
            <summary>
            Gets all the forage providers
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.Merge">
            <summary>
            Combine sufficiently-similar groups of animals and delete empty ones         
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.StoreInitialState(System.Int32)">
            <summary>
            Records state information prior to the grazing and nutrition calculations      
            so that it can be restored if there is an RDP insufficiency.                 
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.RevertInitialState(System.Int32)">
            <summary>
            Restores state information about animal groups if there is an RDP            
            insufficiency. Also alters the intake limit.                                 
            * Assumes that stock[*].fRDPFactor[] has ben populated - see the            
              computeNutritiion() method.                                                
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetInitialStockInputs(System.Int32)">
            <summary>
            1. Sets the livestock inputs (other than forage and supplement amounts) for    
               animal groups occupying the paddock denoted by aPaddock.                  
            2. Sets up the amounts of herbage available to each animal group from each   
               forage (for animal groups and forages in the paddock denoted by aPaddock).  
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeStepAvailability(System.Int32)">
            <summary>
            Caluculate ration availability
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeStepLength(Models.GrazPlan.PaddockInfo)">
            <summary>
            Limits the length of a grazing sub-step so that no more than MAX_CONSUMPTION 
            of the herbage is consumed.                                                  
            </summary>
            <param name="paddock">The paddock</param>
            <returns>The step length</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeIntakeLimit(Models.GrazPlan.AnimalGroup)">
            <summary>
            Calculate the intake limit
            </summary>
            <param name="group">Animal group</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeGrazing(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculate the grazing
            </summary>
            <param name="posIdx">Position in stock list</param>
            <param name="startTime">Start time</param>
            <param name="deltaTime">Time adjustment</param>
            <param name="feedSuppFirst">Feed supplement first</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeRemoval(Models.GrazPlan.PaddockInfo,System.Double)">
            <summary>
            Compute removal
            </summary>
            <param name="paddock">The paddock</param>
            <param name="deltaTime">Time adjustment</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeNutrition(System.Int32,System.Double@)">
            <summary>
            Compute the nutrition
            </summary>
            <param name="posIdx">Index in stock list</param>
            <param name="availRDP">The rumen degradable protein value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.CompleteGrowth(System.Int32)">
            <summary>
            Complete the animal growth
            </summary>
            <param name="posIdx">Index in the stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(Models.GrazPlan.AnimalGroup,Models.GrazPlan.PaddockInfo,System.Int32)">
            <summary>
            Add a group of animals to the list                                           
            Returns the group index of the group that was added. 0->n                    
            </summary>
            <param name="animalGroup">Animal group</param>
            <param name="paddInfo">The paddock information</param>
            <param name="tagNo">Tag value</param>
            <returns>The index of the new group in the stock array</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(Models.GrazPlan.Animals)">
            <summary>
            Returns the group index of the group that was added. 0->n                    
            </summary>
            <param name="animalInits">The animal data</param>
            <returns>The index of the new animal group</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(Models.GrazPlan.StockAdd)">
            <summary>Adds animals.</summary>
            <param name="stockInfo">The info about each animal.</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Delete(System.Int32)">
            <summary>
             * N.B. posn is 1-offset; stock list is effectively also a 1-offset array        
            </summary>
            <param name="posn">In all methods, posn is 1-offset</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Count">
            <summary>
            Only groups 1 to Length()-1 are counted                                    
            </summary>
            <returns>The number of items in the stock list</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.HighestTag">
            <summary>
            Get the highest tag number
            </summary>
            <returns>The highest tag value in the list</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.PlaceSuppInPadd(System.String,System.Double,Models.GrazPlan.FoodSupplement,System.Boolean)">
            <summary>
            Place the supplement in the paddock
            </summary>
            <param name="paddName">Paddock name</param>
            <param name="suppKG">The amount of supplement</param>
            <param name="supplement">The supplement to use</param>
            <param name="feedSuppFirst">Feed supplement first</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Dynamics">
            <summary>
            Advance the list by one time step.  All the input properties should be set first                                                                        
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.ReturnMassPerArea(Models.GrazPlan.PaddockInfo,Models.GrazPlan.ForageProvider,System.String)">
            <summary>
            Get the mass for the area
            </summary>
            <param name="thePadd">Paddock</param>
            <param name="provider">The forage provider object</param>
            <param name="units">The units</param>
            <returns>The mass</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.WeightedMean(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the weighted mean
            </summary>
            <param name="dY1">First Y value</param>
            <param name="dY2">Second Y value</param>
            <param name="dX1">First X value</param>
            <param name="dX2">Second X value</param>
            <returns>The weighted mean</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddExcretions(Models.GrazPlan.ExcretionInfo@,Models.GrazPlan.ExcretionInfo)">
            <summary>
            Used by returnExcretion()
            </summary>
            <param name="destExcretion">Output excretion data</param>
            <param name="srcExcretion">The excretion data</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ReturnExcretion(Models.GrazPlan.PaddockInfo,Models.GrazPlan.ExcretionInfo@)">
            <summary>
            Parameters:                                                               
            OrgFaeces    kg/ha  Excretion of organic matter in faeces                 
            InorgFaeces  kg/ha  Excretion of inorganic nutrients in faeces            
            Urine        kg/ha  Excretion of nutrients in urine                       
            -                                                                          
            Note:  TAnimalGroup.OrgFaeces returns the OM faecal excretion in kg, and  
                   is the total of mothers and young where appropriate; similarly for   
                   TAnimalGroup.InorgFaeces and TAnimalGroup.Urine.                   
                   TAnimalGroup.FaecalAA and TAnimalGroup.UrineAAN return weighted    
                   averages over mothers and young where appropriate. As a result we  
                   don't need to concern ourselves with unweaned young in this        
                   particular calculation except when computing PatchFract.           
            </summary>
            <param name="thePadd">Paddock</param>
            <param name="excretion">The excretion info</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SexString(System.Int32,System.Boolean)">
            <summary>
            Return the reproductive status of the group as a string.  These strings   
            are compatible with the ParseRepro routine.                               
            </summary>
            <param name="idx">Index of the group</param>
            <param name="useYoung">For the young</param>
            <returns>The reproduction status string</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.MaxNormWtFunc(System.Double,System.Double,System.Int32,Models.GrazPlan.Genotype)">
            <summary>
            GrowthCurve calculates MaxNormalWt (see below) for an animal with the   
            default birth weight.                                                   
            </summary>
            <param name="srw">Standard reference weight</param>
            <param name="bw">Birth weight</param>
            <param name="ageDays">Age in days</param>
            <param name="parameters">Breed parameter set</param>
            <returns>The maximum normal weight kg</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GrowthCurve(System.Int32,Models.GrazPlan.GrazType.ReproType,Models.GrazPlan.Genotype)">
            <summary>
            Calculate the growth from the standard growth curve
            </summary>
            <param name="ageDays">Age in days</param>
            <param name="reprodStatus">Reproductive status</param>
            <param name="parameters">Animal parameter set</param>
            <returns>The normal weight kg</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetReproRate(Models.GrazPlan.CohortsInfo,Models.GrazPlan.Genotype,Models.GrazPlan.AgeInfo[],System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Get the reproduction rate
            </summary>
            <param name="cohortsInfo">The animal cohorts</param>
            <param name="mainGenotype">The genotype parameters</param>
            <param name="ageInfo">The age information</param>
            <param name="latitude">Latitiude value</param>
            <param name="mateDOY">Mating day of year</param>
            <param name="condition">Animal condition</param>
            <param name="chill">Chill index</param>
            <returns>The reproduction rate</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddCohorts(Models.GrazPlan.CohortsInfo,System.Int32,System.Double,System.Collections.Generic.List{System.Int32})">
            <summary>
            Add animal cohorts
            </summary>
            <param name="cohortsInfo">The animal cohort</param>
            <param name="dayOfYear">Day of the year</param>
            <param name="latitude">The latitude</param>
            <param name="newGroups">List of new animal groups</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Buy(Models.GrazPlan.PurchaseInfo)">
            <summary>
            Executes a "buy" event
            </summary>
            <param name="animalInfo">The animal details</param>
            <returns>The index of the new group</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Wean(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            See the notes to the Castrate method; but weaning is even further         
            complicated because males and/or females may be weaned.                   
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="number">The number of animals</param>
            <param name="weanFemales">Wean the females</param>
            <param name="weanMales">Wean the males</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Wean(Models.GrazPlan.AnimalGroup,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Wean animals in an animal group.
            </summary>
            <param name="group">The group to wean animals in.</param>
            <param name="number">The number of animals to wean.</param>
            <param name="weanFemales">Wean females?</param>
            <param name="weanMales">Wean males?</param>
            <returns>The number of animals weaned.</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.DryOff(System.Collections.Generic.IEnumerable{Models.GrazPlan.AnimalGroup},System.Int32)">
            <summary>
            Ends lactation in cows that have already had their calves weaned.  
            The event has no effect on other animals.                                                   
            </summary>
            <param name="groups">Groups</param>
            <param name="number">Number of animals</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Split(System.Int32,System.Int32)">
            <summary>
            Break an animal group up in various ways; by number, by age, by weight    
            or by sex of lambs/calves.  The new group(s) have the same priority and   
            paddock as the original.  SplitWeight assumes a distribution of weights   
            around the group average.                                                 
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="numToKeep">Number to keep</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Split(Models.GrazPlan.AnimalGroup,System.Int32)">
            <summary>
            Break an animal group up in various ways; by number, by age, by weight    
            or by sex of lambs/calves.  The new group(s) have the same priority and   
            paddock as the original.  SplitWeight assumes a distribution of weights   
            around the group average.                                                 
            </summary>
            <param name="group">The animal group to split.</param>
            <param name="numToKeep">Number of animals to keep.</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SplitByAge(System.Int32,System.Collections.Generic.IEnumerable{Models.GrazPlan.AnimalGroup})">
            <summary>
            Split the groups by age
            </summary>
            <param name="ageDays">Age in days</param>
            <param name="groups">The animal groups to split.</param>
            <return>The new groups.</return>
        </member>
        <member name="M:Models.GrazPlan.StockList.SplitByWeight(System.Double,System.Collections.Generic.IEnumerable{Models.GrazPlan.AnimalGroup})">
            <summary>
            Split the group by weight
            </summary>
            <param name="splitWt">The weight (kg)</param>
            <param name="groups">The animal groups to split.</param>
            <returns>The new groups that were created.</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SplitByYoung(System.Collections.Generic.IEnumerable{Models.GrazPlan.AnimalGroup})">
            <summary>
            Split off the young
            </summary>
            <param name="groups">The animal groups to split.</param>
            <returns>The newly created animal groups.</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Sort">
            <summary>
            Sorting is done using the one-offset stock array                            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockList.TagComparer">
            <summary>A stock tag comparer.</summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.ParseRepro(Models.GrazPlan.ReproductiveType,Models.GrazPlan.GrazType.ReproType@)">
            <summary>
            Converts a ReproductiveType to a ReproType. 
            </summary>
            <param name="reproType">The keyword to match</param>
            <param name="repro">The reproduction record</param>
            <returns>True if the keyword is found</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.IsGiven(System.Double)">
            <summary>
            Tests for a non-MISSING, non-zero value                                      
            </summary>
            <param name="x">The test value</param>
            <returns>True if this is not a missing value</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.DaysFromDOY365Simple(System.Int32,System.Int32)">
            <summary>
            Calculate the days from the day of year in a non leap year
            </summary>
            <param name="firstDOY">Start day</param>
            <param name="secondDOY">End day</param>
            <returns>The days in the interval</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddDMPool(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.GrazType.DM_Pool)">
            <summary>
            Utility routines for manipulating the DM_Pool type.  AddDMPool adds the   
            contents of two pools together
            </summary>
            <param name="pool1">DM pool 1</param>
            <param name="pool2">DM pool 2</param>
            <returns>The combined pool</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.MultiplyDMPool(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            MultiplyDMPool scales the contents of a pool                                                                 
            </summary>
            <param name="srcPool">The dm pool to scale</param>
            <param name="scale">The scale</param>
            <returns>The scaled pool</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetOffspringRates(Models.GrazPlan.Genotype,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Get the young offspring rates
            </summary>
            <param name="parameters">The animal parameters</param>
            <param name="latitude">The latitude</param>
            <param name="mateDOY">Mating day of year</param>
            <param name="ageDays">Age in days</param>
            <param name="matingSize">Mating size</param>
            <param name="condition">Animal condition</param>
            <param name="chillIndex">The chill index</param>
            <returns>Offspring rates</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(System.Collections.Generic.List{Models.GrazPlan.AnimalGroup},Models.GrazPlan.PaddockInfo,System.Int32)">
            <summary>
            Add( TAnimalList, TPaddockInfo, integer, integer )                           
            Private variant. Adds all members of a TAnimalList back into the stock list  
            </summary>
            <param name="animalList">The source animal list</param>
            <param name="paddInfo">The paddock info</param>
            <param name="tagNo">The tag number</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Buy(Models.GrazPlan.StockBuy)">
            <summary>
            Buy animals.
            </summary>
            <param name="stockInfo">Information about the animals.</param>
        </member>
        <member name="T:Models.GrazPlan.StockUtilities">
            <summary>
            Collection of stock utility methods.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockUtilities.BASESCORE">
            <summary>Condition score for condition = 1.0.</summary>
        </member>
        <member name="F:Models.GrazPlan.StockUtilities.SCOREUNIT">
            <summary>Change in condition for unit CS change .</summary>
        </member>
        <member name="T:Models.GrazPlan.StockUtilities.Cond_System">
            <summary>Condition score system to use</summary>
        </member>
        <member name="F:Models.GrazPlan.StockUtilities.Cond_System.csSYSTEM1_5">
            <summary></summary>
        </member>
        <member name="F:Models.GrazPlan.StockUtilities.Cond_System.csSYSTEM1_8">
            <summary></summary>
        </member>
        <member name="F:Models.GrazPlan.StockUtilities.Cond_System.csSYSTEM1_9">
            <summary></summary>
        </member>
        <member name="M:Models.GrazPlan.StockUtilities.CondScore2Condition(System.Double,Models.GrazPlan.StockUtilities.Cond_System)">
            <summary>
            Convert condition score to condition.
            </summary>
            <param name="CondScore"></param>
            <param name="System"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.StockUtilities.Condition2CondScore(System.Double,Models.GrazPlan.StockUtilities.Cond_System)">
            <summary>
            
            </summary>
            <param name="Condition"></param>
            <param name="System"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.StockUtilities.DefaultFleece(Models.GrazPlan.Genotype,System.Int32,Models.GrazPlan.GrazType.ReproType,System.Int32)">
            <summary>
            Default fleece weight as a function of age, sex and time since shearing     
            </summary>
            <param name="Params"></param>
            <param name="iAgeDays"></param>
            <param name="Repr"></param>
            <param name="iFleeceDays"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.StockUtilities.DefaultMicron(Models.GrazPlan.Genotype,System.Int32,Models.GrazPlan.GrazType.ReproType,System.Int32,System.Double)">
            <summary>
            Default fibre diameter as a function of age, sex, time since shearing and fleece weight                                                             
            </summary>
            <param name="Params"></param>
            <param name="iAgeDays"></param>
            <param name="Repr"></param>
            <param name="iFleeceDays"></param>
            <param name="fGFW"></param>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.EnterpriseAgeInfo">
            <summary>
            Enterprise type init
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseAgeInfo.AgeDescr">
            <summary>
            Age description
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseAgeInfo.TagNumber">
            <summary>
            The tag number
            </summary>
        </member>
        <member name="T:Models.GrazPlan.TagFlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.TagFlock.MobDescr">
            <summary>
            Mob description
            </summary>
        </member>
        <member name="F:Models.GrazPlan.TagFlock.Male">
            <summary>
            Is male
            </summary>
        </member>
        <member name="F:Models.GrazPlan.TagFlock.Ages">
            <summary>
            age lamb,weaner, x-n
            </summary>
        </member>
        <member name="T:Models.GrazPlan.Reproduction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateDay">
            <summary>
            Mating day
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateAge">
            <summary>
            Mating age
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.Conception">
            <summary>
            Conception rates
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.Castrate">
            <summary>
            Do castrate
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanDay">
            <summary>
            Weaning day
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanAge">
            <summary>
            Weaning age
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateTags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.JoinedTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.DryTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanerMaleTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanerFemaleTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MaleRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.KeepMales">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateWith">
            <summary>
            ausfarm unique
            </summary>
        </member>
        <member name="T:Models.GrazPlan.EnterpriseInfo">
            <summary>
            The initial state of the Enterprise
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.ENT">
            <summary>
            The stock enterprise type names
            This should parallel the TStockEnterprise enumeration 
            </summary>
        </member>
        <member name="T:Models.GrazPlan.EnterpriseInfo.StockEnterprise">
            <summary>
            Enterprise type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entWether">
            <summary>
            Wether
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entEweWether">
            <summary>
            Ewes and wethers
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entSteer">
            <summary>
            Steers
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entBeefCow">
            <summary>
            Beef cow breeding
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entLamb">
            <summary>
            Trading lambs
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.EntTypeFromName(System.String)">
            <summary>
            Get the enterprise type from the name
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.EntClass">
            <summary>
            Enterprise type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.IsCattle">
            <summary>
            Is cattle
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.ManageReproduction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.ManageGrazing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.tag_update_day">
            <summary>
            doy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.tag_flock">
            <summary>
            mob - sex,breeding
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateDay">
            <summary>
            Mating day
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateYears">
            <summary>
            Mating age in years
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateWith">
            <summary>
            Mate with genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.Castrate">
            <summary>
            Do castrate
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.WeanDay">
            <summary>
            Weaning day
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateTagCount">
            <summary>
            Count of tags mated
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.GetMateTag(System.Int32)">
            <summary>
            Get the mating tag at idx
            </summary>
            <param name="idx">1-n</param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.JoinedTag">
            <summary>
            Joined tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.DryTag">
            <summary>
            Drying off tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.WeanerFTag">
            <summary>
            Weaner female tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.WeanerMTag">
            <summary>
            Weaner male tag
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.ContainsTag(System.Int32)">
            <summary>
            Determine if this Enterprise uses this tag number to specify an animal group.
            </summary>
            <param name="tagNo"></param>
            <returns></returns>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.reproduction">
            <summary>
            Reproduction object
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.AsStdDate(System.String)">
            <summary>
            Get the string date as a std date value
            </summary>
            <param name="strDay">Date string</param>
            <returns>The std date value</returns>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.SetFromStdDate(System.Int32)">
            <summary>
            Get the string of a std date (integer). The string form is 'dd mmm'
            </summary>
            <param name="value">Std date value</param>
            <returns>The string D mmm</returns>
        </member>
        <member name="T:Models.GrazPlan.GrazingPeriod">
            <summary>
            A period of grazing. Could be flexible or fixed dates
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.StartDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.FinishDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.Descr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.type">
            <summary>
            fixed/flexible
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.CheckEvery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.test">
            <summary>
            cover / dm / draft
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazingPeriod.TagPaddock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagPaddock.tag_no">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagPaddock.paddock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.tag_list">
            <summary>
            used for flexible
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazingPeriod.TagIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagIndex.index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagIndex.tag_no">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.paddock_list">
            <summary>
            used for fixed
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazingList">
            <summary>
            List of grazing periods
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.Count">
            <summary>
            Count of periods
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetMoveCheck(System.Int32)">
            <summary>
            Check the paddock every x days
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetTagPaddocks(System.Int32,System.Int32)">
            <summary>
            Get the count of paddocks in the tag list
            </summary>
            <param name="periodIdx">1-n</param>
            <param name="idx">1-n</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetTag(System.Int32,System.Int32)">
            <summary>
            Get the tag item for the grazing period
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetTagCount(System.Int32)">
            <summary>
            Get the count of tag items in the list
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetCriteria(System.Int32)">
            <summary>
            Get grazing criteria
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFinishDay(System.Int32)">
            <summary>
            Get the finish day
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPaddCount(System.Int32)">
            <summary>
            Get the number of paddocks
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPadd(System.Int32,System.Int32)">
            <summary>
            Get the paddock from the list
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPaddTagCount(System.Int32,System.Int32)">
            <summary>
            Get the count of tags in the paddocks
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPaddTag(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the tag from paddock
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="tagidx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetPeriodType(System.Int32)">
            <summary>
            Get the grazing period type
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetStartDay(System.Int32)">
            <summary>
            StartDay[1..n]
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetPaddock(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="paddIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.AsStdDate(System.String)">
            <summary>
            "dd mmm" -> StdDate
            </summary>
            <param name="strDay"></param>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.StockAdd">
            <summary>
            Used by the Add() method 
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Genotype">
            <summary>
            Gets or sets the genotype of the animals to enter the simulation. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Number">
            <summary>
            Gets or sets the total number of animals to enter the simulation. 
            The animals will be distributed across the age cohorts, taking the genotype-specific death rate into account.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Sex">
            <summary>
            Gets or sets the sex of the animals. Feasible values are as for sheep:sex or cattle:sex, as appropriate.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.BirthDay">
            <summary>
            Gets or sets the day of year (1-365) on which all animals are assumed to have been born.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MinYears">
            <summary>
            Gets or sets the age in years of the youngest age cohort (their exact age will depend on the current day of year and the value of birth_day).
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MaxYears">
            <summary>
            Gets or sets the age in years of the oldest age cohort
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MeanWeight">
            <summary>
            Gets or sets the average unfasted live weight of the animals across all age cohorts. 
            Animals in each age cohort will be given different weights, based on their normal weight for age, such that the overall average weight is that specified by this parameter. 
            This parameter may also be set to zero, in which case a default set of live weights will be computed, taking cond_score into account if it is nonzero.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.CondScore">
            <summary>
            Gets or sets the average condition score of the animals (assumed to be the same for all age cohorts). 
            If a value of zero is given, the default condition score for the weight and age will be used.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MeanFleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of the animals across all age cohorts. 
            Different values will be computed for each age cohort, such that the weighted average fleece weight equals the specified value. 
            This parameter may be set to zero, in which case a default set of fleece weights will be computed based on the current day of year and the shear_day parameter. 
            Only meaningful in sheep.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.ShearDay">
            <summary>
            Gets or sets the day of year on which the animals were last shorn. Only meaningful in sheep.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MatedTo">
            <summary>
            Gets or sets the genotype of the rams or bulls with which the animals were mated prior to entry. 
            Only meaningful if pregnant or lactating is non-zero. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Pregnant">
            <summary>
            Gets or sets the pregnancy status. Zero denotes no animals are pregnant; 1 or more denotes the time since conception of those animals that are pregnant. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Foetuses">
            <summary>
            Gets or sets the average number of foetuses per animal (including barren animals) across all age classes. 
            Different pregnancy rates will be computed for each age cohort, such that the weighted average number of foetuses per animal equals the specified value. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Lactating">
            <summary>
            Gets or sets the lactation status. Zero denotes no animals are lactating; 1 or more denotes the time since parturition in those animals that are lactating. 
            Only meaningful for females.
            d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Offspring">
            <summary>
            Gets or sets the average number of suckling offspring per animal (including dry animals) across all age classes. 
            Different numbers of offspring will be computed for each age cohort, such that the weighted average number of offspring per animal equals the specified value. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.YoungWt">
            <summary>
            Gets or sets the average unfasted live weight of any suckling lambs or calves.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.YoungCondScore">
            <summary>
            Gets or sets the average body condition score of any suckling lambs or calves.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.YoungFleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of any suckling lambs.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.UseTag">
            <summary>
            Gets or sets the optional tag number to use.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockBuy">
            <summary>
            Used by the Buy() method
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockBuy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Genotype">
            <summary>
            Gets or sets the genotype of the animals to be bought. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Number">
            <summary>
            Gets or sets the number of animals to be bought.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Sex">
            <summary>
            Gets or sets the sex of the animals. 
            Feasible values are as for sheep:sex or cattle:sex, as appropriate,
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Age">
            <summary>
            Gets or sets the average age of the animals.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Weight">
            <summary>
            Gets or sets the average unfasted live weight of the animals. 
            If a value of zero is given, a default value will be calculated, making use of the cond_score parameter if it is non-zero.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.FleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of the animals. 
            Only meaningful in sheep.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.CondScore">
            <summary>
            Gets or sets the average condition score of the animals. 
            If a value of zero is given, the default condition score for the weight and age will be used.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.MatedTo">
            <summary>
            Gets or sets the genotype of the rams or bulls with which the animals were mated prior to entry. 
            Only meaningful if pregnant or lactating is non-zero. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Pregnant">
            <summary>
            Gets or sets the pregnancy status. Zero denotes not pregnant; 1 or more denotes the time since conception. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Lactating">
            <summary>
            Gets or sets the latation status. Zero denotes not lactating; 1 or more denotes the time since parturition in lactating animals. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.NumYoung">
            <summary>
            Gets or sets the number of foetuses and/or suckling offspring.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.YoungWt">
            <summary>
            Gets or sets the average unfasted live weight of any suckling lambs or calves.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.YoungFleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of any suckling lambs.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.UseTag">
            <summary>
            Gets or sets the optional tag to use.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ChemData">
            <summary>
            Chemistry data for the forage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.MassKgHa">
            <summary>
            Mass in kg/ha 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.NitrogenKgHa">
            <summary>
            N in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.PhosphorusKgHa">
            <summary>
            P in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.SulphurKgHa">
            <summary>
            S in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.AshAlkMolHa">
            <summary>
            Ash alkalinity mol/ha
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ForageInfo">
            <summary>
            Up to 12 classes with separate digestible and indigestible pools
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.MISSINGPOINT">
            <summary>
            Missing value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.CLASSWIDTH">
            <summary>
            Width of the digestibility class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.HIGHESTDMD">
            <summary>
            Highest disgestibility value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.EPSILON">
            <summary>
            Used in CalcDMDDistribution()
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.MAXCHEMCLASSES">
            <summary>
            Maximum number of chemistry classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.useForageData">
            <summary>
            Use the forage data
            The computed attributes of this "forage", in the form used by AnimalGroup
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.forageData">
            <summary>
            The grazing forage data
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.greenBulkDensity">
            <summary>
            The bulk density of the green
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.legumeMass">
            <summary>
            Mass of the legume
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.C4GrassMass">
            <summary>
            Mass of the C4 grass
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.seedType">
            <summary>
            0 = non-seed, UNRIPE or RIPE
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.bottomMM">
            <summary>
            The herbage bottom
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.topMM">
            <summary>
            The herbage top
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.chemData">
            <summary>
            Chemistry details for each chem class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.herbageDMDFract">
            <summary>
            Herbage dmd fraction
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.seedRipeFract">
            <summary>
            See ripe fraction
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.#ctor">
            <summary>
            Construct a forage info
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.GreenMass">
            <summary>
            Gets or sets the green mass of the forage
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.TotalLive">
            <summary>
            Gets the total live herbage used as input in GrazingInputs
            Units: the same as the forage object
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.TotalDead">
            <summary>
            Gets the total dead herbage used as input in GrazingInputs
            Units: the same as the forage object
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Name">
            <summary>
            Gets or sets the full identifier for this forage e.g. Crop or pasture component full path name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.CohortID">
            <summary>
            Gets or sets the cohortID from the incoming AvailableToAnimal forage component
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Organ">
            <summary>
            Gets or sets the forage organ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.AgeClass">
            <summary>
            Gets or sets the forage item age class
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.InPaddock">
            <summary>
            Gets or sets the paddock of this forage
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.RemovalKG">
            <summary>
            Gets or sets the amount of this forage removed (output)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Bottom">
            <summary>
            Gets or sets the bottom of forage
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Top">
            <summary>
            Gets or sets the top of forage
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.GetBottom">
            <summary>
            Gets the bottom position
            </summary>
            <returns>The bottom mm</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.GetTop">
            <summary>
            Gets the top postion
            </summary>
            <returns>The top in mm</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.SummariseInitHerbage">
            <summary>
            Summarise the initial herbage 
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.CalcDMDDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the proportions in a DMD distribution
            </summary>
            <param name="meanDMD">The mean DMD</param>
            <param name="maxDMD">Upper range</param>
            <param name="minDMD">Lower range</param>
            <returns>A digestibility distribution</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.PopulateIntakeRecord(Models.GrazPlan.GrazType.IntakeRecord@,System.Int32,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Populate the intake record
            </summary>
            <param name="intakeRecord">The intake record to return</param>
            <param name="dmdClass">Digestibility class</param>
            <param name="useMeanDMD">Use mean digestibility</param>
            <param name="totalMass">Total herbage mass</param>
            <param name="meanDMD">Mean digestiblity</param>
            <param name="massFract">Mass fraction</param>
            <param name="ddm_N">Digestible N</param>
            <param name="idm_N">Indigestible N</param>
            <param name="ddm_P">Digestible P</param>
            <param name="idm_P">Indigestible P</param>
            <param name="ddm_S">Digestible sulphur</param>
            <param name="idm_S">Indigestible sulphur</param>
            <param name="ddm_AA">Digestible AshAlk</param>
            <param name="idm_AA">Indigestible AshAlk</param>
            <param name="bulkDensity">Bulk density</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.PopulateSeedRecord(Models.GrazPlan.GrazType.GrazingInputs@,System.Double,System.Int32,System.Int32)">
            <summary>
            Populate the seed record
            </summary>
            <param name="grazingInput">The grazing input</param>
            <param name="availPropn">Available proportion</param>
            <param name="idxDDM">Digestible index</param>
            <param name="idxIDM">Indigestible index</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.PopulateHerbageType(Models.GrazPlan.GrazType.GrazingInputs@)">
            <summary>
            Set the LegumePropn, SelectFactor and TropLegume fields of a GrazingInputs
            * Expects that the TotalGreen and TotalDead fields have already been computed
            </summary>
            <param name="grazingInput">The grazing inputs</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.SetAvailForage(Models.GrazPlan.GrazType.GrazingInputs)">
            <summary>
            The the forage data
            </summary>
            <param name="forageInputs">Forage inputs</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.AvailForage">
            <summary>
            Calculates the GrazingInputs values from the values stored during addForageData() 
            </summary>
            <returns>The grazing inputs</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.SomethingRemoved">
            <summary>
            Returns True if something has been removed from herbage or seed pool.
            </summary>
            <returns>True if some forage amount has been removed by the animals</returns>
        </member>
        <member name="T:Models.GrazPlan.ForageList">
            <summary>
            List of ForageInfo forages 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageList.items">
            <summary>
            The list of forage infos
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageList.ownsList">
            <summary>
            This object manages the lifetime of the item list
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageList.#ctor(System.Boolean)">
            <summary>
            Construct the forage list
            </summary>
            <param name="ownsForages">The object will manage the lifetime of the forage list</param>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Count">
            <summary>
            Count of forages
            </summary>
            <returns>The count of forages</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Add(Models.GrazPlan.ForageInfo)">
            <summary>
            Add a forage item
            </summary>
            <param name="forageInfo">The forage information</param>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Add(System.String)">
            <summary>
            Add a forage by name
            </summary>
            <param name="forageName">Forage name</param>
            <returns>The new forage item</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Delete(System.Int32)">
            <summary>
            Delete a forage by index
            </summary>
            <param name="indexValue">Index value</param>
        </member>
        <member name="M:Models.GrazPlan.ForageList.ByIndex(System.Int32)">
            <summary>
            Get a forage by index
            </summary>
            <param name="indexValue">The forage index</param>
            <returns>The forage. If not found then return null</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.ByName(System.String)">
            <summary>
            Get a forage by name
            </summary>
            <param name="forageName">The forage name</param>
            <returns>The forage info. If not found then null.</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.IndexOf(System.String)">
            <summary>
            Get the index of a forage by name
            </summary>
            <param name="forageName">The forage name</param>
            <returns>Returns the forage index</returns>
        </member>
        <member name="T:Models.GrazPlan.ForageProvider">
            <summary>
            New forage interface for AvailableToAnimal support
            TForageProvider maps to a cmp component such as Plant or AgPasture.
            Each of these can contain 0..n forage. The forage will be named
            with the cohortid string.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.forages">
            <summary>
            The list of forages
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.forageHostName">
            <summary>
            host crop, pasture component name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.hostID">
            <summary>
            plant/pasture comp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.paddockOwnerName">
            <summary>
            owning paddock FQN
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.owningPaddock">
            <summary>
            Ref to the paddock object in the model
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.#ctor">
            <summary>
            Construct the forage provider
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.PastureGreenDM">
            <summary>
            Gets or sets the total calculated green dm for the paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.OwningPaddock">
            <summary>
            Gets or sets the owning paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.PaddockOwnerName">
            <summary>
            Gets or sets the paddock owner name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.ForageHostName">
            <summary>
            Gets or sets the forage host name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.HostID">
            <summary>
            Gets or sets the component id of the host
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.ForageObj">
            <summary>
            Gets or sets the crop, pasture component
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.UpdateForages(Models.ForageDigestibility.ModelWithDigestibleBiomass)">
            <summary>
            Update the forage data for this crop/agpasture object
            </summary>
            <param name="forageObj">The crop/pasture object</param>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.ForageByName(System.String)">
            <summary>
            The forage name is the name of the cohort.
            </summary>
            <param name="forageName">The forage name</param>
            <returns>The forage object</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.ForageByIndex(System.Int32)">
            <summary>
            Get the forage by index
            </summary>
            <param name="idx">The index. 0..n</param>
            <returns>The forage index</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.PassGrazingInputs(Models.GrazPlan.ForageInfo,Models.GrazPlan.GrazType.GrazingInputs,System.String)">
            <summary>
            Use the GrazingInputs to initialise the forage object
            </summary>
            <param name="forage">The forage object</param>
            <param name="grazingInput">The grazing inputs</param>
            <param name="units">The units</param>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.Crop2GrazingInputs(Models.ForageDigestibility.ModelWithDigestibleBiomass)">
            <summary>
            Copies a Plant/AgPasture object biomass organs into GrazingInputs object
            This object may then get scaled to kg/ha
            </summary>
            <param name="forageObj">The forage object - a Plant/AgPasture component</param>
            <returns>The grazing inputs</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.RemoveHerbageFromPlant">
            <summary>
            The herbage is removed from the plant/agpasture
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.ReturnRemoval(Models.GrazPlan.ForageInfo,System.String)">
            <summary>
            Return the removal
            </summary>
            <param name="forage">The forage</param>
            <param name="units">The units</param>
            <returns>The grazing outputs/consumed</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.SomethingRemoved">
            <summary>
            Test the Removal to determine if there is any quantity of forage removed.
            </summary>
            <returns>True if some herbage has been removed</returns>
        </member>
        <member name="T:Models.GrazPlan.ForageProviders">
            <summary>
            ForageProviders is a collection of forage/cmp components that each in turn
            supply 1..n forage plants/species
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProviders.forageProviderList">
            <summary>
            The list of forage providers
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.#ctor">
            <summary>
            Construct a forage provider
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.Count">
            <summary>
            Count of forage providers
            </summary>
            <returns>The count of forage providers</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.AddProvider(Models.GrazPlan.PaddockInfo,System.String,System.String,System.Int32,System.Int32,Models.ForageDigestibility.ModelWithDigestibleBiomass)">
            <summary>
            Add a forage provider component
            </summary>
            <param name="paddock">The paddock info</param>
            <param name="paddName">The paddock name</param>
            <param name="forageName">The forage name</param>
            <param name="hostID">Component ID</param>
            <param name="driverID">Driver ID</param>
            <param name="forageObj">The forage object</param>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.FindProvider(System.String)">
            <summary>
            Find the forage provider for this forage/provider name
            </summary>
            <param name="providerName">The forage provider (component) name</param>
            <returns>The ForageProvider</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.FindProvider(System.Int32)">
            <summary>
            Find the forage provider for this component ID.
            </summary>
            <param name="hostID">The host component ID</param>
            <returns>The forage provider</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.ForageProvider(System.Int32)">
            <summary>
            Get a forage provider from the list. idx = 0..n
            </summary>
            <param name="idx">The index</param>
            <returns>The forage provider</returns>
        </member>
        <member name="T:Models.GrazPlan.EnergyUse">
            <summary>
            Livestock metabolizable energy partition
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.MaintBase">
            <summary>
            Gets or sets the basal maintenance requirement       
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.MaintMoveGraze">
            <summary>
            Gets or sets the E(graze) + E(move)                  
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.MaintCold">
            <summary>
            Gets or sets the E(cold)         
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Conceptus">
            <summary>
            Gets or sets the ME(c)           
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Lactation">
            <summary>
            Gets or sets the ME(l) 
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Fleece">
            <summary>
            Gets or sets the ME(w) = NE(w) / k(w)           
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Gain">
            <summary>
            Gets or sets the ME(g)      
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SupplementEaten">
            <summary>
            Supplement eaten type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementEaten.Paddock">
            <summary>
            Gets or sets the paddock name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementEaten.Eaten">
            <summary>
            Gets or sets the supplement eaten in kg
            </summary>
        </member>
        <member name="T:Models.GrazPlan.DMPoolHead">
            <summary>
            Dry matter pool
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.Weight">
            <summary>
            Gets or sets the dry matter pool weight in kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.N">
            <summary>
            Gets or sets the dry matter pool N amount kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.P">
            <summary>
            Gets or sets the dry matter pool P amount kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.S">
            <summary>
            Gets or sets the dry matter pool S amount mol/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.AshAlk">
            <summary>
            Gets or sets the dry matter pool AshAlk amount mol/d
            </summary>
        </member>
        <member name="T:Models.GrazPlan.InorgFaeces">
            <summary>
            Inorganic faeces type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.InorgFaeces.N">
            <summary>
            Gets or sets the N amount in kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.InorgFaeces.P">
            <summary>
            Gets or sets the P amount in kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.InorgFaeces.S">
            <summary>
            Gets or sets the S amount in mol/d
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockProps">
            <summary>
            Definitions of many property constants in the Stock component
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockVars">
            <summary>
            Container for Stock property access
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.MONTH2DAY">
            <summary>
            Convert to days
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockVars.CountType">
            <summary>
            The output counts for these type of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eBoth">
            <summary>
            Both males and females
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eFemale">
            <summary>
            Female animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eMale">
            <summary>
            Male animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eDeaths">
            <summary>
            Deaths of non suckling animals
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockVars.PopulateNumberValue(Models.GrazPlan.StockList,Models.GrazPlan.StockVars.CountType,System.Boolean,System.Boolean,System.Boolean,System.Int32[]@)">
            <summary>
            Populate the numbers array for the type of output required
            </summary>
            <param name="model">The Stock list model</param>
            <param name="code">The count type</param>
            <param name="useYoung">Report for young animals</param>
            <param name="useAll">Combined value</param>
            <param name="useTag">Use tag groups</param>
            <param name="numbers">The populated array of numbers</param>
            <returns>True if the code type is valid</returns>
        </member>
        <member name="M:Models.GrazPlan.StockVars.PopulateRealValue(Models.GrazPlan.StockList,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double[]@)">
            <summary>
            Fill the double[] with values from the model.
            </summary>
            <param name="model">The animal model</param>
            <param name="varCode">The variable code</param>
            <param name="useYoung">For young animals</param>
            <param name="useAll">For all groups</param>
            <param name="useTag">Use the tag number</param>
            <param name="arrayValues">The returned double array</param>
            <returns>True if the varCode is valid</returns>
        </member>
        <member name="M:Models.GrazPlan.StockVars.DMPool2Value(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.DMPoolHead@,System.Boolean)">
            <summary>
            Convert the dry matter pool
            </summary>
            <param name="pool">The DM pool</param>
            <param name="poolValue">The pool data</param>
            <param name="onlyNPSVal">The NPS values only</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.PopulateDMPoolValue(Models.GrazPlan.StockList,System.Int32,System.Boolean,System.Boolean,System.Boolean,Models.GrazPlan.DMPoolHead[]@)">
            <summary>
            Populate the dry matter pool
            </summary>
            <param name="model">The stock model</param>
            <param name="propCode">The property code</param>
            <param name="useYoung">For young</param>
            <param name="useAll">For all groups</param>
            <param name="useTag">For tag number</param>
            <param name="poolValues">The DM pool value returned</param>
            <returns>True if the propCode is valid</returns>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeSuppEaten(Models.GrazPlan.StockList,Models.GrazPlan.SupplementEaten[]@)">
            <summary>
            Copy the supplement eaten into a SupplementEaten[]
            </summary>
            <param name="model">The animal model</param>
            <param name="suppValues">The supplement data returned</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeEnergyUse(Models.GrazPlan.StockList,Models.GrazPlan.EnergyUse[]@)">
            <summary>
            Populate metabolizable energy use array 
            Note: these are an* ME* partition                                          
            </summary>
            <param name="model">The animal model</param>
            <param name="energyValues">The energy use returned</param>
        </member>
        <member name="T:Models.G_Range">
            <summary>
            Implements the plant growth model logic abstracted from G_Range
            Currently this is just an empty stub
            </summary>
        </member>
        <member name="M:Models.G_Range.PartitionLitter(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Partition the litter into structural and metabolic components, based on the lignin C to N ratio (PARTLITR in Savanna, kept in DECOMP.F)
            </summary>
        </member>
        <member name="M:Models.G_Range.WaterLoss">
            <summary>
            The primary water submodel, based on H2OLOSS in CENTURY.
            </summary>
        </member>
        <member name="M:Models.G_Range.NitrogenLosses">
            <summary>
            Nitrogen volatization and leaching routine, building on Century's version.  
            Century's version was simplified to only deal with nitrogen.
            </summary>
        </member>
        <member name="M:Models.G_Range.Decomposition">
            <summary>
            The main decomposition model, which is a simplified (or really, very similar version of) version of CENTURY that M. Coughenour adapted for use in Savanna.
            </summary>
        </member>
        <member name="M:Models.G_Range.EffectsOnDecomposition">
            <summary>
            calculate effects on decomposition, including temperature, water, and anerobic effects from precipitation.
            The differences in decomposition are the source of very different soil total carbon seen,
            and it appears to be because of these coefficients.Error in calculating minimum of temperature effect.
            Replacing runoff estimate, which is not well tracked, with drain estimate, which is a variable in Century and now in G-Range.That variable is a general coefficient, DRAIN=1 for sandy soils, DRAIN = 0 for clay soils.
            </summary>
        </member>
        <member name="M:Models.G_Range.TrackLignin(System.Int32,System.Int32,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            A routine that tracks lignin, called DECLIG in Savanna.
            </summary>
            <param name="iLayer"></param>
            <param name="ic"></param>
            <param name="woodc"></param>
            <param name="woodn"></param>
            <param name="defac"></param>
            <param name="decodt"></param>
            <param name="frlig"></param>
            <param name="tndec"></param>
            <param name="smintosom"></param>
        </member>
        <member name="T:Models.G_Range.Parms">
            <summary>
            Obtain the parameters associated with a specific vegetation type 
            There are 15 types.
            These data are extracted from Land_Units.grg of the original Fortran version, and were read in by the unit Initialize_Model.f95
            Some values don't vary across vegetation type. These come from Initialize_Model.f95
            
            This is being approached a bit differently than is was in the Fortran version. There most of these parameters 
            were stored in an external file - Land_Units.grg. Here I'm embedding them into the source. 
            
            Also, the original maintained an array of Parms, one for each vegetation type. That makes sense in the context
            of a global model, where you will need the data for each type. Here, we're looking at a point model, so once we know
            our location, we just need to work with a single set of parameters.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.meltingTemp">
            <summary>
            Melting temperature for snow, in C degrees
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.meltingSlope">
            <summary>
            Slope of melting equation(cm snow / degree C)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.prcpThreshold">
            <summary>
            Precipitation required, in cm, before runoff occurs (PRECRO)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.prcpThresholdFraction">
            <summary>
            The fraction of precipitation that is runoff (FRACRO)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.baseFlowFraction">
            <summary>
            The fraction of water classed as base flow (BASEF)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.soilTranspirationFraction">
            <summary>
            The water transpired for each depth (AWTL)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.initSoilCNRatio">
            <summary>
            Initial soil carbon to nitrogen ratio, from Potter and Klooster (1997) or similar source
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.initLigninNRatio">
            <summary>
            Initial lignin to nitrogen ratio in litter
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.treeCarbon">
            <summary>
            Initial tree carbon g/m2(RLEAVC, RLVCIS, FBRCIS ... others?  in Century)  ALIVE and DEAD, with LEAVES and FINE ROOTS DEAD NOT USED (RLWCIS+)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.shrubCarbon">
            <summary>
            Initial tree carbon g/m2(RLEAVC, RLVCIS, FBRCIS ... others?  in Century)  ALIVE and DEAD, with LEAVES and FINE ROOTS DEAD NOT USED (RLWCIS+)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.plantDimension">
            <summary>
            Dimension, in meters, of the length or width(i.e., square) of the root volume of plant
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.litterEffectOnSoilTemp">
            <summary>
            Effect of litter on soil temperature relative to live and standing dead biomass(ELITST in Century)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.biomassEffectOnMinSoilTemp">
            <summary>
            Effect of biomass on minimum soil surface temperature(PMNTMP in Century)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.maximumBiomassSoilTemp">
            <summary>
            Maximum biomass for soil temperature calculations(PMXBIO in Century)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.biomassEffectOnMaxSoilTemp">
            <summary>
            Effect of biomass on maximum soil surface temperature(PMXTMP in Century)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.pptRegressionPoints">
            <summary>
            Controls on the shape of the regression line connecting available water to PET ratio and plant production.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.temperatureProduction">
            <summary>
            Parameters describing the effect of temperature on potential production.See the Century Parameterization Workbook for examples. (PPDF)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.standingDeadProductionHalved">
            <summary>
            Level of aboveground standing dead + 10% surface structural C that reduces production by half due to phyiscal obstruction(BIOK5 in CENTURY)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.radiationProductionCoefficient">
            <summary>
            Coefficient for calculating potential aboveground monthly production as a function of solar radiation.PRDX in CENTURY, with its meaning defined in the CENTURY code, and the online material outdated.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionCarbonToRoots">
            <summary>
            Fraction of carbon production allocated to roots(likely from CENTURY 4.  CENTURY 4.5 uses a complex dynamic carbon allocation between roots and shoots) (FRTC+)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.grazingEffect">
            <summary>
            A flag from 1 to 6, describing grazing effect responses (GRZEFF)_
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.grazingEffectMultiplier">
            <summary>
            A multiplier applied to grazing effects 4, 5, and 6
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.temperatureEffectDecomposition">
            <summary>
            Four values, 1) [0 in C#] x location of inflection point, 2) [1 in C#] y location of inflection point, 3) [2 in C#] setp size(distance from the maximum point to the minimum point), 4) [3 in C#] slope of line at inflection point.Default values are:  15.40, 11.75, 29.70, 0.031 
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.anerobicEffectDecomposition">
            <summary>
            Three values, 1) [0 in C#] ratio below which there is no effect, 2) [1 in C#] ratio below which there is a maximum effect, 3) [2 in C#] minimum value of impact of precipitation on anerobic decomposition.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.effectOfCo2OnProduction">
            <summary>
            Effect of CO2 concentration on production, with 1 meaning no effect, per facet [THIS WILL REQUIRE SPECIAL CARE!]
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateStructuralLitter">
            <summary>
            Decomposition rate of structural litter(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateMetabolicLitter">
            <summary>
            Decomposition rate of metabolic litter(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateFastSom">
            <summary>
            Decomposition rate of the fast SOM(soil organic matter) pool(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateSlowSom">
            <summary>
            Decomposition rate of the slow SOM(soil organic matter) pool(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateInterSom">
            <summary>
            Decomposition rate of the intermediate SOM(soil organic matter) pool(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateFineBranch">
            <summary>
            Decomposition rate of fine branches(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateCoarseBranch">
            <summary>
            Decomposition rate of coarse branches(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateCoarseRoot">
            <summary>
            Decomposition rate of coarse roots(per year)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompRateStructuralLitterInverts">
            <summary>
            Decomposition rate of structural litter in layers 1 and 2 due to invertebrates (DECINV)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.drainageAffectingAnaerobicDecomp">
            <summary>
            Drainage affecting the rate of anaerobic decomposition, spanning from 0 to 1. (DRAIN)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fecesLignin">
            <summary>
            Feces lignin content (FECLIG)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.ligninContentFractionAndPrecip">
            <summary>
            1,1 [0,0 in C#]= Intercept, aboveground, 1,2 [0,1 in C#] = Slope, aboveground, 2,1 [1,0 in C#] = Intercept, belowground, 2,2 [1,1 in C#] = Slope, belowground (FLIGNI)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionUrineVolatized">
            <summary>
            Fraction of urine volatilized (URINEVOL)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionGrossNMineralVolatized">
            <summary>
            Fraction of gross N mineral volitalized
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.rateVolatizationMineralN">
            <summary>
            Rate of volitalization of mineral N
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.precipNDeposition">
            <summary>
            Parameters relating precipitation to deposition N rate	(EPNFA)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.decompLitterMixFacets">
            <summary>
            Degree of mixing of litter fall among facets(0 = none, 1 = complete) (FLITRMIX)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.degreeDaysPhen">
            <summary>
            Degree days and the relationship to plant phenology, by FACET, by 10 values shaping the curve. 
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.degreeDaysReset">
            <summary>
            Total degree days to reset phenology
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.rootEffectOnNutrients">
            <summary>
            Effect of root biomass on available nutrients used to determine growth(RICTRL)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.rootInterceptOnNutrients">
            <summary>
            Intercept of relationship of effect of root biomass on available nutrients(RIINT)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.treeSitePotential">
            <summary>
            Site potential for trees, which adjusts nitrogen availability in savannas (SITPOT)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.treeBasalAreaToGrassNitrogen">
            <summary>
            Correction relating tree basal area to grass nitrogen fraction
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.treeBasalAreaToWoodBiomass">
            <summary>
            Correction relating tree basal area to grass nitrogen fraction
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.maxSymbioticNFixationRatio">
            <summary>
            Symbiotic nitrogen fixation maximum for grassland (g N fixed / g C new growth) (SNFXMX)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionNitrogenAvailable">
            <summary>
            Fraction of nitrogen available to plants
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.minimumCNRatio">
            <summary>
            Minimum carbon / nitrogen ratio(Parts > 2 for grasses will be empty)(CERCRP set in FLTCE, BUT SET HERE, not doing dynamic carbon as in Century)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.maximumCNRatio">
            <summary>
            Maximum carbon / nitrogen ratio(Parts > 2 for grasses will be empty)(CERCRP set in FLTCE, BUT SET HERE, not doing dynamic carbon as in Century)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionNppToRespiration">
            <summary>
            Fraction of net primary production that goes to maintenance respiration
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.herbMaxFractionNppToRespiration">
            <summary>
            Grass maximum fraction of net primary production that goes to maintenance respiration
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.woodyMaxFractionNppToRespiration">
            <summary>
            Woody maximum fraction of net primary production that goes to maintenance respiration
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.maximumLeafAreaIndex">
            <summary>
            Maximum leaf area index for trees (MAXLAI)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.kLeafAreaIndex">
            <summary>
            I don't know what this is ... ASK.  Not documented on the web or in code. (KLAI)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.biomassToLeafAreaIndexFactor">
            <summary>
            Biomass to leaf area index factor (BTOLAI)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.annualFractionVolatilizedN">
            <summary>
            Annual fraction of nitrogen volatilized (VLOSSE)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.maxHerbRootDeathRate">
            <summary>
            Maximum herbaceous root death rate per month
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionNAbsorbedByResidue">
            <summary>
            Fraction of nitrogen absorbed by residue, for surface(1) and soil(2)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.shootDeathRate">
            <summary>
            Shoot death rate due to 1 [0]) water stress, 2 [1]) phenology, 3 [2]) shading, according to carbon centration in 4 [3].  (FSDETH)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.propAnnuals">
            <summary>
            The proportion of annual plants in the herbaceous facet.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.monthToRemoveAnnuals">
            <summary>
            Month to remove annual plants, following their standing dead for some time, contributing to litter, etc.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.relativeSeedProduction">
            <summary>
            Annual seed production, in relative number per year.Increase one group to favor it.Increase all groups to increase general establishment.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionAgroundNppToSeeds">
            <summary>
            Fraction of aboveground net primary productivity that goes to seeds, by facets.For woody plants, it is the proportion of carbon for leaf growth diverted to seeds.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionSeedsNotGerminated">
            <summary>
            Fraction of seeds that do not germinate.This is not used in population dynamics, but rather in decomposition
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.waterEffectOnEstablish">
            <summary>
            Available water:PET ratio effect on establishment, per facet, and with 2 pairs of values used in a regression.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.herbRootEffectOnEstablish">
            <summary>
            Herbaceous root biomass effect on establishment, per facet, and with 2 pairs of values used in a regression.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.litterEffectOnEstablish">
            <summary>
            Litter cover effect on establishment, per facet, and with 2 pairs of values used in a regression.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.woodyCoverEffectOnEstablish">
            <summary>
            Woody cover effect on establishment, per facet, and with 2 pairs of values used in a regression.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.nominalPlantDeathRate">
            <summary>
            Nominal plant death rate.This may be increased by various factors.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.waterEffectOnDeathRate">
            <summary>
            Available water:PET ratio effect on plant death rate, per facet, and with 2 pairs per value used in regression.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.grazingEffectOnDeathRate">
            <summary>
            Grazing rate effect on plant death rate, per facet, and with 2 pairs per value used in regression.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.shadingEffectOnDeathRate">
            <summary>
            Effect of shading, associated with LAI, on death rate.Suitable for younger age classes of trees as well (although not explicitly modeled here).
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fallRateOfStandingDead">
            <summary>
            Rate per month of standing dead to fall to litter (FALR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.deathRateOfDeciduousLeaves">
            <summary>
            The rate of death of leaves after fall has arrived.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.temperatureLeafOutAndFall">
            <summary>
            Temperature in C at leaf on(1 [0]) in spring and leaf fall(2 [1]) in fall
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.droughtDeciduous">
            <summary>
            Whether the deciduous fraction of the plants are typical deciduous(FALSE) or drought deciduous(TRUE)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionWoodyLeafNTranslocated">
            <summary>
            The fraction of nitrogen in dead leaves that is translocated into storage. (FORRTF)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.leafDeathRate">
            <summary>
            Leaf death rate per month, per facet.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fineRootDeathRate">
            <summary>
            Death rate of fine root in woody plants, per facet(herbs are a placeholder)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fineBranchDeathRate">
            <summary>
            Death rate of fine branches in woody plants, per facet(herbs are a placeholder)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.coarseBranchDeathRate">
            <summary>
            Death rate of coarse wood in woody plants, per facet(herbs are a placeholder)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.coarseRootDeathRate">
            <summary>
            Death rate of coarse root in woody plants, per facet(herbs are a placeholder)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionCarbonGrazedReturned">
            <summary>
            Fraction of carbon in grazed material that is returned to the system(the rest is in carcasses or milk or the like) (GFCRET)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionExcretedNitrogenInFeces">
            <summary>
            Fraction of nitrogen excreted that is in feces.The remainder is in urine. (FACESFR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionGrazedByFacet">
            <summary>
            The fraction of grazing that comes from each facet.Sum to 100 %.
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionGrazed">
            <summary>
            The annual fraction of plant material that is removed.This includes both live and dead material. (FLGREM)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.frequencyOfFire">
            <summary>
            The probability of fire per year for any given cell within the landscape unit(NOTE SCALE DEPENDENCE, USE DEPENDS ON fire_maps_used), set to 0 for no fire(unitless) (GFD)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionBurned">
            <summary>
            The proportion of a landscape cell that burns, in the case of a fire event (NOTE SCALE DEPENDENCE.USE DEPENDS ON fire_maps_used.ALSO ONE FIRE PER YEAR MAX)  (unitless) (GFD)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.burnMonth">
            <summary>
            The month in which patches will be burned, in the case of a fire event (ONE FIRE PER YEAR MAX, USE DEPENDS ON fire_maps_used)  (month) (GFD)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fuelVsIntensity">
            <summary>
            The fuel load as related to low and high intensity fires(g biomass / m2) (fuello)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.greenVsIntensity">
            <summary>
            The proportion of aboveground vegetation that is green versus fire intensity(unitless) (pgrnsev)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionShootsBurned">
            <summary>
            The proportion of live leaves and shoots removed by a fire event, by facet, for low and high intensity fire  (unitless) (FLFREM)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionStandingDeadBurned">
            <summary>
            The proportion of standing dead removed by a fire event, by facet, for low and high intensity fire  (unitless) (FDMREM)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionPlantsBurnedDead">
            <summary>
            The proportion of plants that are burned that die, by facet, for low and high intensity fire(unitless) (FRDTH)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionLitterBurned">
            <summary>
            The proportion of litter removed by a fire event, by facet, for low and high intensity fire  (unitless) (FLTRCMB)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionBurnedCarbonAsAsh">
            <summary>
            The proportion of carbon in burned aboveground material that is ash, going to structural litter  (unitless) (FCMBCASH)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionBurnedNitrogenAsAsh">
            <summary>
            The proportion of nitrogen in burned aboveground material that is ash, going to soil mineral nitrogen  (unitless) (FCMBNASH)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.frequencyOfFertilization">
            <summary>
            The probability of fertlization per year in the landscape unit (USE DEPENDS ON fertilize_maps_used) (unitless)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fractionFertilized">
            <summary>
            The proportion of a landscape cell that is fertilized, in the case of a fertilization event (NOTE SCALE DEPENDENCE.USE DEPENDS ON fertilize_maps_used)  (unitless)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fertilizeMonth">
            <summary>
            The month in which fertilization occurs (one event per year per landscape unit)  (month)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fertilizeNitrogenAdded">
            <summary>
            Amount of inorganic nitrogen added during a fertilization event (g / m2) (FERAMT)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.fertilizeCarbonAdded">
            <summary>
            Amount of carbon added as part of organic matter fertilizer (g / m2) (ASTGC)
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.potPopulation">
            <summary>
            The number of plants that can be supported on 1 x 1 km of land
            </summary>
        </member>
        <member name="F:Models.G_Range.Parms.indivPlantArea">
            <summary>
            For brevity, going to store the area of plants
            </summary>
        </member>
        <member name="M:Models.G_Range.InitParms">
            <summary>
            Transcoded from Initialize_Rangelands subroutine in Initialize_Model.f95
            
            !***** Take additional steps to initialize rangelands.  For example, wilting point and field capacity must
            !***** be determined for the rangeland sites.
            !***** (Facets were confirmed being reasonably populated through echoed statements)
            
            Much of this shouldn't really be necessary once we start getting soil information from Apsim, but I'm porting it over now
            as it let's us get started, and will make it easier to cross-check ApsimX and G_Range outputs.
            </summary>
        </member>
        <member name="M:Models.G_Range.LoadGlobals">
            <summary>
            Corresponds to subroutine Initialize_Globe in Initialize_Models.f95, but is implemented quite differently.
            We read from an SQLite database, rather than a series of files, and we focus only on a single location
            rather than reading in the entire globe.
            </summary>
        </member>
        <member name="M:Models.G_Range.LoadParms">
            <summary>
            Based on subroutine Initialize_Landscape_Parms in Initialize_Model.f95,
            but reads from a resource rather than an external file, and does not 
            echo the values.
            </summary>
        </member>
        <member name="M:Models.G_Range.Line(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The function for a line, yielding a Y value for a given X and the parameters for a line.
            </summary>
            <param name="x"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Models.G_Range.PotentialProduction">
            <summary>
            Calculate potential production and the attributes that go into potential production.
            This routine also includes a calculation of surface soil temperatures.
            POTPROD uses a crop system and forest system approach.
            (In CENTURY, cancvr is passed at each call, but I am using the structured approach)
            </summary>
        </member>
        <member name="M:Models.G_Range.WoodyGrowth">
            <summary>
            Woody growth builds from potential production estimates to calculate actual woody growth, as limited by nutrients
            </summary>
        </member>
        <member name="M:Models.G_Range.RestrictProduction(System.Int32,System.Int32,System.Double,System.Double,System.Double[],System.Double[]@)">
            <summary>
            Restrict actual production for plants based on carbon to nitrogen ratios
            Note, currently(and it could be changed for clarity), cfrac stores carbon allocation in ABOVE and BELOW for herbs,
            in plant parts for woody plants.
            </summary>
            <param name="iFacet">Facet under consideration</param>
            <param name="nparts"></param>
            <param name="availableNitrogen"></param>
            <param name="rimpct"></param>
            <param name="cfrac"></param>
            <param name="uptake"></param>
        </member>
        <member name="M:Models.G_Range.NutrientLimitation(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double@,System.Double)">
            <summary>
            Compute nutrient limitation on growth  (NUTRLM.F in Century)
            </summary>
            <param name="iFacet"></param>
            <param name="nParts"></param>
            <param name="maxN"></param>
            <param name="minNCi"></param>
            <param name="maxNCi"></param>
            <param name="cFrac"></param>
            <param name="ctob"></param>
            <param name="availableNitrogen"></param>
        </member>
        <member name="M:Models.G_Range.LeafAllocation(System.Int32,System.Double,System.Double)">
            <summary>
            Compute optimum leaf area index, based on a maximum and available production
            </summary>
            <param name="iFacet"></param>
            <param name="cProdLeft"></param>
            <param name="cprodf"></param>
            <returns></returns>
        </member>
        <member name="M:Models.G_Range.Grazing">
            <summary>
            Remove forage that is grazed (GREM in Century).
            </summary>
        </member>
        <member name="M:Models.G_Range.Graze(System.Double,System.Double,System.Double)">
            <summary>
            Remove forage that is grazed.
            Made into a public function to allow the action to be invoked from
            APSIM manager scripts, with the immediate intent of providing a quick
            way to simulate consumption by locusts in the World Modelers context.
            </summary>
            <param name="fracLiveToRemove">Fraction of live aboveground biomass to consume</param>
            <param name="fracDeadToRemove">Fraction of dead aboveground biomass to consume</param>
            <param name="fracCarbonReturned">Fraction of "consumed" carbon to be returned as feces, frass, etc.</param>
        </member>
        <member name="M:Models.G_Range.PlantPartDeath">
            <summary>
            Plant material dies for various reasons.  This routine includes a call to Woody_Plant_Part_Death.
            </summary>
        </member>
        <member name="M:Models.G_Range.WoodyPlantPartDeath">
            <summary>
            Woody plant material dies for various reasons.
            </summary>
        </member>
        <member name="M:Models.G_Range.WholePlantDeath">
             <summary>
             Simulate whole plant deaths
             To represent populations, I will use an area 1 km x 1 km, and explicit tallying of space-filling plants.  There is the
             option to do this for entire cells modeled, but their areas will vary across the globe.  Moreover, none of the results
             will be reported on a per-cell basis, so the results from the 1 km^2 area will be suitable for reporting covers and
             concentrations, etc.The 1 km^2 area was selected because it is convenient and sufficiently large enough to minimize
             rounding effects.  For example, if the effective root area of a tree is 8 x 8 m, 15,625 trees could fit within the
            1 km^2 area.Many thousands of herbs could fit, etc.I speak of root area rather than volume because the soil depths
             and layers define volume (i.e., herbs have access to the first two layers, shrubs up to layer three, trees all four
             layers).  Incidentally, an herb that occupies 0.2 x 0.2 m would fill the entire 1 km^2 area with 25,000,000 individuals,
             so there is no need for specially defined storage spaces(double and the like)
             </summary>
        </member>
        <member name="M:Models.G_Range.Management">
            <summary>
            Read in the maps that are associated with fire or fertilization, or other management.
            </summary>
        </member>
        <member name="M:Models.G_Range.PlantReproduction">
            <summary>
            Simulate whole plant reproduction
            </summary>
        </member>
        <member name="P:Models.G_Range.Accumulator.nDays">
            <summary>
            Stores total number of observations
            </summary>
        </member>
        <member name="F:Models.G_Range.Accumulator.precipTotal">
            <summary>
            Stores total precipitation
            </summary>
        </member>
        <member name="F:Models.G_Range.Accumulator.maxTempTotal">
            <summary>
            Stores sum of maximum temperatures
            </summary>
        </member>
        <member name="F:Models.G_Range.Accumulator.minTempTotal">
            <summary>
            Stores sum of minimum temperatures
            </summary>
        </member>
        <member name="P:Models.G_Range.Accumulator.precip">
            <summary>
            Returns total precipitation in cm
            </summary>
        </member>
        <member name="P:Models.G_Range.Accumulator.maxTemp">
            <summary>
            Returns average maximum temperature for the period
            </summary>
        </member>
        <member name="P:Models.G_Range.Accumulator.minTemp">
            <summary>
            Returns average minimum temperature for the period
            </summary>
        </member>
        <member name="M:Models.G_Range.Accumulator.Reset">
            <summary>
            Resets counter and totals to zero
            </summary>
        </member>
        <member name="M:Models.G_Range.Accumulator.Accumulate(System.Double,System.Double,System.Double)">
            <summary>
            Adds values to the accumulator. Should generally be called once per day.
            </summary>
            <param name="precip">Precipitation (including snow) in mm</param>
            <param name="minT">Minimum temperature in degrees C</param>
            <param name="maxT">Maximum temperature in degrees C</param>
        </member>
        <member name="M:Models.G_Range.ReadWeather">
            <summary>
            Gets weather (precipitation, and maximum and minimum temperatures) data for each day, and accumulates it 
            </summary>
        </member>
        <member name="M:Models.G_Range.PEvap">
            <summary>
            Calculate Penmon-Monteith potential evapotraspiration for all the rangeland cells
            NOTE:  Using a subroutine here, rather than function call, given the structures used in GRange.
            </summary>
        </member>
        <member name="M:Models.G_Range.Shortwave">
            <summary>
            Calculates the short wave radiation outside the atmosphere using Pennman's equation (1948).
            R.Boone, almost directly from CENTURY.Last modified: September 25, 2010
            </summary>
        </member>
        <member name="M:Models.G_Range.DayLength">
            <summary>
            Calculate day length.  Rather than passing month, site latitude, and daylength (as a function), the information 
            is stored in structures.Original was in C.Modified as needed(e.g., different array base).  See DAYLEN.C
            
            NOTE: This function also resets heat accumulation at the appropriate month, based on when the day length is at a minimum.
            </summary>
        </member>
        <member name="M:Models.G_Range.SnowDynamics">
            <summary>
            Calculate for all the rangeland cells any weather-related attributes, such as snowfall, snowmelt, 
            and evapotranspiration.
            This section draws heavily on the CENTURY code, as much of this material does.  Especially SNOWCENT
            </summary>
        </member>
        <member name="M:Models.G_Range.CalcPropBurned">
            <summary>
            Decide whether fire is being modeled.   If maps are being used, then move ahead(too many possibilities to judge if fire is not occurring in the maps).
            If maps are not being used, then check to see that the frequency of fire and the fraction burned are both greater than 0.
            Otherwise, there is no fire.
            In the original, this logic appears twice: in PlantPartDeath and WholePlantDeath. However, when burns are "random", this leads to different fire events for
            assessing death of plant parts vs. whole plants, which is not logical.
            </summary>
        </member>
        <member name="F:Models.G_Range.summary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="P:Models.G_Range.PlantType">
            <summary>The plant type.</summary>
        </member>
        <member name="P:Models.G_Range.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.G_Range.IsAlive">
            <summary> Is the plant alive?</summary>
        </member>
        <member name="P:Models.G_Range.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.G_Range.AboveGround">
            <summary>Get above ground biomass</summary>
        </member>
        <member name="M:Models.G_Range.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <param name="rowConfig">The bud number.</param>
        </member>
        <member name="P:Models.G_Range.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.G_Range.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="M:Models.G_Range.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="P:Models.G_Range.WaterUptake">
            <summary>Daily soil water uptake from each soil layer (mm)</summary>
        </member>
        <member name="P:Models.G_Range.NitrogenUptake">
            <summary>Daily nitrogen uptake from each soil layer (kg/ha).</summary>
        </member>
        <member name="P:Models.G_Range.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.G_Range.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.G_Range.R50">
            <summary>Gets or sets the R50.</summary> // What is an R50?
        </member>
        <member name="P:Models.G_Range.LAI">
            <summary>Gets the LAI (Leaf Area Index)</summary>
        </member>
        <member name="P:Models.G_Range.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.G_Range.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.G_Range.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.G_Range.Height">
            <summary>Gets the canopy height (mm)</summary>
        </member>
        <member name="P:Models.G_Range.Depth">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.G_Range.Width">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.G_Range.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.G_Range.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.G_Range.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="M:Models.G_Range.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.G_Range.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.G_Range.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today.
            </summary>
        </member>
        <member name="M:Models.G_Range.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.G_Range.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:Models.G_Range.UnitParm">
            <summary>
             Stores parameters unique to each landscape unit
            </summary>
        </member>
        <member name="T:Models.G_Range.Layer">
            <summary>
            Vegetation layer constants
            </summary>
        </member>
        <member name="F:Models.G_Range.Layer.herb">
            <summary>
            Herb layer index (H_LYR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Layer.herbUnderShrub">
            <summary>
            Herbs under shrubs layer index (H_S_LYR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Layer.herbUnderTree">
            <summary>
            Herbs under tree layer index (H_T_LYR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Layer.shrub">
            <summary>
            Shrub layer index (S_LYR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Layer.shrubUnderTree">
            <summary>
            Shrub under tree layer index (S_T_LYR)
            </summary>
        </member>
        <member name="F:Models.G_Range.Layer.tree">
            <summary>
            Tree layer index (T_LYR)
            </summary>
        </member>
        <member name="F:Models.G_Range.nLayers">
            <summary>
            Total number of layers (V_LYRS)
            </summary>
        </member>
        <member name="T:Models.G_Range.Facet">
            <summary>
            Vegetation facet constants.  Facets are used for unit input, so that users provide 3 values, rather than 6
            </summary>
        </member>
        <member name="F:Models.G_Range.Facet.herb">
            <summary>
            Herb layer index (H_FACET)
            </summary>
        </member>
        <member name="F:Models.G_Range.Facet.shrub">
            <summary>
            Shrub facet index (S_FACET)
            </summary>
        </member>
        <member name="F:Models.G_Range.Facet.tree">
            <summary>
            Herbs under tree layer index (T_FACET)
            (Should be "Tree fact index (T_FACET)")
            </summary>
        </member>
        <member name="F:Models.G_Range.nFacets">
            <summary>
            Total number of facets (FACETS)
            </summary>
        </member>
        <member name="T:Models.G_Range.WoodyPart">
            <summary>
            Woody part constants
            Woody parts, leaf, fine root, fine branch, large wood, and coarse root    
            </summary>
        </member>
        <member name="F:Models.G_Range.WoodyPart.leaf">
            <summary>
            LEAF_INDEX
            </summary>
        </member>
        <member name="F:Models.G_Range.WoodyPart.fineRoot">
            <summary>
            FINE_ROOT_INDEX
            </summary>
        </member>
        <member name="F:Models.G_Range.WoodyPart.fineBranch">
            <summary>
            FINE_BRANCH_INDEX
            </summary>
        </member>
        <member name="F:Models.G_Range.WoodyPart.coarseBranch">
            <summary>
            COARSE_BRANCH_INDEX
            </summary>
        </member>
        <member name="F:Models.G_Range.WoodyPart.coarseRoot">
            <summary>
            COARSE_ROOT_INDEX
            </summary>
        </member>
        <member name="F:Models.G_Range.nWoodyParts">
            <summary>
            Total number of woody parts (WOODY_PARTS)
            </summary>
        </member>
        <member name="F:Models.G_Range.X">
            <summary>
            X dimension of rangeland cell
            In the "standard" G-Range configuration, values run from 1 to 720, corresponding with longitudes
            from 180 W (normally expressed as -180) to 180 E, using half-degree steps.
            </summary>
        </member>
        <member name="F:Models.G_Range.Y">
            <summary>
            Y dimension of rangeland cell
            In the "standard" G-Range configuration, values run from 1 to 360, correpsonding with latitudes
            from 90 S (normally expressed as -90) to 90 N, using half-degree steps.
            </summary>
        </member>
        <member name="F:Models.G_Range.month">
            <summary>
            Month of the year, expressed as a value in the range 1-12
            </summary>
        </member>
        <member name="P:Models.G_Range.rangeType">
            <summary>
            Identifier storing the type of rangeland cell, used as a key to the Parms strcuture
            A value in the range 1-15, indicating the "biome" within a cell. Values are 1: tropical evergreen forest; 2: tropical deciduous forest;
            3: temperate broadleaf evergreen forest; 4: temperate needleleaf evergreen forest; 5: temperate deciduous forest; 6: boreal evergreen forest;
            7: boreal deciduous forest; 8: evergreen/deciduous mixed forest; 9: savanna; 10: grassland; 11: dense shrubland; 12: open shrubland;
            13: tundra; 14: desert; 15: polar desert
            </summary>
        </member>
        <member name="P:Models.G_Range.dayLength">
            <summary>
            Day length, calculated based on latitude and month
            </summary>
        </member>
        <member name="P:Models.G_Range.heatAccumulation">
            <summary>
            Heat accumulation above a base temperature (e.g., 4.4 C in Boone (1999))
            </summary>
        </member>
        <member name="P:Models.G_Range.facetCover">
            <summary>
            The proportion occupied by each facet
            </summary>
        </member>
        <member name="P:Models.G_Range.totalPopulation">
            <summary>
            The total population of each vegetation layer
            This is the number of individuals in a 1 km^2 area
            </summary>
        </member>
        <member name="P:Models.G_Range.bareCover">
            <summary>
            Bare cover stored, rather than continually summing the three facets. 
            </summary>
        </member>
        <member name="P:Models.G_Range.propAnnualDecid">
            <summary>
            Proportion of facet that is annual plants (H_FACET) or deciduous (S_FACET and T_FACET)
            </summary>
        </member>
        <member name="P:Models.G_Range.precip">
            <summary>
            Precipitation total for the current month
            Exposed here for reporting purposes
            </summary>
        </member>
        <member name="P:Models.G_Range.maxTemp">
            <summary>
            Average maximum temperature for the current month 
            Exposed here for reporting purposes
            </summary>
        </member>
        <member name="P:Models.G_Range.minTemp">
            <summary>
            Average minimum temperature for the current month 
            Exposed here for reporting purposes
            </summary>
        </member>
        <member name="P:Models.G_Range.potEvap">
            <summary>
            Potential evapotranspiration for the cell(cm/month)
            </summary>
        </member>
        <member name="P:Models.G_Range.evaporation">
            <summary>
            Water evaporated from the soil and vegetation(cm/month)
            </summary>
        </member>
        <member name="P:Models.G_Range.snow">
            <summary>
            Snowpack, in cm
            </summary>
        </member>
        <member name="P:Models.G_Range.snowLiquid">
            <summary>
            Snowpack liquid water.
            </summary>
        </member>
        <member name="P:Models.G_Range.melt">
            <summary>
            Snow that melts from snowpack (cm water)
            </summary>
        </member>
        <member name="P:Models.G_Range.petRemaining">
            <summary>
            Potential evaporation decremented as steps are calculated.Appears to be a bookkeeping tool.
            </summary>
        </member>
        <member name="P:Models.G_Range.pptSoil">
            <summary>
            Precipitation adjusted for snow accumulation and melt, and available to infiltrate the soil (cm)
            </summary>
        </member>
        <member name="P:Models.G_Range.runoff">
            <summary>
            Runoff from the rangeland cell
            </summary>
        </member>
        <member name="P:Models.G_Range.ratioWaterPet">
            <summary>
            Ratio of available water to potential evapotranspiration
            </summary>
        </member>
        <member name="P:Models.G_Range.petTopSoil">
            <summary>
            Potential evaporation from top soil (cm/day)
            </summary>
        </member>
        <member name="P:Models.G_Range.nLeached">
            <summary>
            Nitrogen leached from soil(AMTLEA in Century)
            </summary>
        </member>
        <member name="P:Models.G_Range.transpiration">
            <summary>
            Transpiration water loss
            </summary>
        </member>
        <member name="P:Models.G_Range.waterAvailable">
            <summary>
            Water available to plants, available for growth =(1) [0 in C#], survival(2) [1 in C#], and in the two top layers(3) [2 in C#]
            </summary>
        </member>
        <member name="P:Models.G_Range.annualEvapotranspiration">
            <summary>
            Annual actual evapotranspiration
            </summary>
        </member>
        <member name="P:Models.G_Range.totalAgroundLiveBiomass">
            <summary>
            Total aboveground live biomass (g/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.totalBgroundLiveBiomass">
            <summary>
            Total belowground live biomass (g/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.totalLitterCarbon">
            <summary>
            Average monthly litter carbon(g/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.totalLitterNitrogen">
            <summary>
            Average monthly litter carbon(g/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.rootShootRatio">
            <summary>
            Root shoot ratio
            </summary>
        </member>
        <member name="P:Models.G_Range.treeBasalArea">
            <summary>
            Basal area for trees
            </summary>
        </member>
        <member name="P:Models.G_Range.soilSurfaceTemperature">
            <summary>
            Average soil surface temperature (C)
            </summary>
        </member>
        <member name="P:Models.G_Range.sand">
            <summary>
            The percent sand in the soil
            </summary>
        </member>
        <member name="P:Models.G_Range.silt">
            <summary>
            The percent silt in the soil
            </summary>
        </member>
        <member name="P:Models.G_Range.clay">
            <summary>
            The percent clay in the soil
            </summary>
        </member>
        <member name="P:Models.G_Range.mineralNitrogen">
            <summary>
            Mineral nitrogen content for layer (g/m2)
            </summary>
        </member>
        <member name="P:Models.G_Range.fieldCapacity">
            <summary>
            Field capacity for four soils layers shown above.
            </summary>
        </member>
        <member name="P:Models.G_Range.wiltingPoint">
            <summary>
            Wilting point for four soil layers shown above.
            </summary>
        </member>
        <member name="P:Models.G_Range.soilTotalCarbon">
            <summary>
            grams per square meter
            </summary>
        </member>
        <member name="P:Models.G_Range.treeCarbon">
            <summary>
            Tree carbon in its components.These must all be merged or otherwise crosswalked at some point.
            </summary>
        </member>
        <member name="P:Models.G_Range.treeNitrogen">
            <summary>
            Tree nitrogen in its components.   These must all be merged or otherwise crosswalked at some point.
            </summary>
        </member>
        <member name="P:Models.G_Range.shrubCarbon">
            <summary>
            Shrub carbon in its components.   These must all be merged or otherwise crosswalked at some point.
            </summary>
        </member>
        <member name="P:Models.G_Range.shrubNitrogen">
            <summary>
            Shrub nitrogen in its components.   These must all be merged or otherwise crosswalked at some point.
            </summary>
        </member>
        <member name="P:Models.G_Range.carbonNitrogenRatio">
            <summary>
            Carbon to nitrogen ratio, SURFACE, SOIL
            </summary>
        </member>
        <member name="P:Models.G_Range.fastSoilCarbon">
            <summary>
            Soil organic matter carbon, surface and soil  g/m2(SOM1C in Century)
            </summary>
        </member>
        <member name="P:Models.G_Range.intermediateSoilCarbon">
            <summary>
            Intermediate soil carbon g/m2(SOMC2 in Century)
            </summary>
        </member>
        <member name="P:Models.G_Range.passiveSoilCarbon">
            <summary>
            Passive soil carbon g/m2(SOMC3 in Century)
            </summary>
        </member>
        <member name="P:Models.G_Range.fastSoilNitrogen">
            <summary>
            Soil organic matter nitrogen, surface and soil  g/m2(SOM1E in Century and SSOM1E in Savanna)
            </summary>
        </member>
        <member name="P:Models.G_Range.intermediateSoilNitrogen">
            <summary>
            Intermediate soil nitrogen g/m2(SOM2E in Century)
            </summary>
        </member>
        <member name="P:Models.G_Range.passiveSoilNitrogen">
            <summary>
            Passive soil nitrogen g/m2(SOM3E in Century)
            </summary>
        </member>
        <member name="P:Models.G_Range.potentialProduction">
            <summary>
            Calculated potential production for the cell, an index.Based on soil temperature, so not specific to facets.
            </summary>
        </member>
        <member name="P:Models.G_Range.belowgroundPotProduction">
            <summary>
            BIOMASS, Belowground potential production in g/m2
            </summary>
        </member>
        <member name="P:Models.G_Range.abovegroundPotProduction">
            <summary>
            BIOMASS, Aboveground potential production in g/m2
            </summary>
        </member>
        <member name="P:Models.G_Range.totalPotProduction">
            <summary>
            BIOMASS, Calculate total potential production, in g/m2 with all the corrections in place. 
            </summary>
        </member>
        <member name="P:Models.G_Range.co2EffectOnProduction">
            <summary>
            Calculated effect of CO2 increasing from 350 to 700 ppm on grassland production, per facet
            </summary>
        </member>
        <member name="P:Models.G_Range.totalPotProdLimitedByN">
            <summary>
            Coefficient on total potential production reflecting limits due to nitrogen in place(EPRODL)
            </summary>
        </member>
        <member name="P:Models.G_Range.monthlyNetPrimaryProduction">
            <summary>
            Monthly net primary production in g/m2, summed from total_pot_prod_limited_by_n
            </summary>
        </member>
        <member name="P:Models.G_Range.fractionLiveRemovedGrazing">
            <summary>
            Fraction of live forage removed by grazing  (FLGREM in CENTURY)
            </summary>
        </member>
        <member name="P:Models.G_Range.fractionDeadRemovedGrazing">
            <summary>
            Fraction of dead forage removed by grazing(FDGREM in CENTURY)
            </summary>
        </member>
        <member name="P:Models.G_Range.tempEffectOnDecomp">
            <summary>
            Temperature effect on decomposition (TFUNC in CENTURY Cycle.f)  (index)
            </summary>
        </member>
        <member name="P:Models.G_Range.waterEffectOnDecomp">
            <summary>
            Water effect on decomposition (index)  (Aboveground and belowground entries in CENTURY set to equal, so distinction not made here)
            </summary>
        </member>
        <member name="P:Models.G_Range.anerobicEffectOnDecomp">
            <summary>
            Anerobic effects on decomposition(index)  (EFFANT in Savanna)
            </summary>
        </member>
        <member name="P:Models.G_Range.allEffectsOnDecomp">
            <summary>
            Combined effects on decomposition, which in Savanna includes anerobic(CYCLE.F)  (index)
            </summary>
        </member>
        <member name="P:Models.G_Range.deadFineRootCarbon">
            <summary>
            Dead fine root carbon of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadFineRootNitrogen">
            <summary>
            Dead fine root nitrogen of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadStandingCarbon">
            <summary>
            Standing dead carbon of leaf and stem, of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadStandingNitrogen">
            <summary>
            Standing dead nitrogen of leaf and stem, of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadSeedCarbon">
            <summary>
            Dead seed carbon of the four types cited above.   (gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.deadSeedNitrogen">
            <summary>
            Dead seed nitrogen of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadLeafCarbon">
            <summary>
            Dead leaf carbon of the four types cited above.   (gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.deadLeafNitrogen">
            <summary>
            Dead leaf nitrogen of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadFineBranchCarbon">
            <summary>
            Dead fine branch carbon of the four types cited above.   (gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.deadTotalFineBranchCarbon">
            <summary>
            Dead fine branch carbon, summed across facets
            </summary>
        </member>
        <member name="P:Models.G_Range.deadFineBranchNitrogen">
            <summary>
            Dead fine branch nitrogen of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadTotalFineBranchNitrogen">
            <summary>
            Dead fine branch nitrogen, summed across facets
            </summary>
        </member>
        <member name="P:Models.G_Range.deadCoarseRootCarbon">
            <summary>
            Dead coarse root carbon of the four types cited above.   (gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.deadTotalCoarseRootCarbon">
            <summary>
            Dead total coarse root carbon, summed across facets
            </summary>
        </member>
        <member name="P:Models.G_Range.deadCoarseRootNitrogen">
            <summary>
            Dead coarse root nitrogen of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadTotalCoarseRootNitrogen">
            <summary>
            Dead total coarse root nitrogen, summed across facets
            </summary>
        </member>
        <member name="P:Models.G_Range.deadCoarseBranchCarbon">
            <summary>
            Dead coarse wood carbon of the four types cited above.   (gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.deadTotalCoarseBranchCarbon">
            <summary>
            Dead total coarse wood carbon, summed across facets
            </summary>
        </member>
        <member name="P:Models.G_Range.deadCoarseBranchNitrogen">
            <summary>
            Dead coarse wood nitrogen of the four types cited above.
            </summary>
        </member>
        <member name="P:Models.G_Range.deadTotalCoarseBranchNitrogen">
            <summary>
            Dead total coarse wood nitrogen, summed across facets
            </summary>
        </member>
        <member name="P:Models.G_Range.ligninFineRoot">
            <summary>
            Fine root lignin concentration
            </summary>
        </member>
        <member name="P:Models.G_Range.ligninCoarseRoot">
            <summary>
            Coarse root lignin concentration
            </summary>
        </member>
        <member name="P:Models.G_Range.ligninFineBranch">
            <summary>
            Fine branch lignin concentration
            </summary>
        </member>
        <member name="P:Models.G_Range.ligninCoarseBranch">
            <summary>
            Coarse branch lignin concentration
            </summary>
        </member>
        <member name="P:Models.G_Range.ligninLeaf">
            <summary>
            Leaf lignin concentration
            </summary>
        </member>
        <member name="P:Models.G_Range.plantLigninFraction">
            <summary>
            Lignin in structural residue, at the surface(1)[0 in C#] and in the soil(2)[1 in C#]  (STRLIG)
            </summary>
        </member>
        <member name="P:Models.G_Range.litterStructuralCarbon">
            <summary>
            Litter structural carbon at the surface(1)[0 in C#] and in the soil(2)[1 in C#]  (STRCIS, or in Savanna, SSTRCIS, with unlabeled and labeled merged)
            </summary>
        </member>
        <member name="P:Models.G_Range.litterMetabolicCarbon">
            <summary>
            Litter metabolic carbon at the surface(1)[0 in C#] and in the soil(2)[1 in C#]  (METCIS, or in Savanna, SMETCIS)
            </summary>
        </member>
        <member name="P:Models.G_Range.litterStructuralNitrogen">
            <summary>
            Litter structural nitrogen at the surface(1) and in the soil(2)  (STRUCE, or in Savanna, SSTRUCE, with STRUCE named for "elements"  I am only including nitrogen, as in Savanna, so dropping the name)
            </summary>
        </member>
        <member name="P:Models.G_Range.litterMetabolicNitrogen">
            <summary>
            Litter structural nitrogen at the surface(1) and in the soil(2)  (METABE, or in Savanna, SSTRUCE, with STRUCE named for "elements"  I am only including nitrogen, as in Savanna, so dropping the name)
            </summary>
        </member>
        <member name="P:Models.G_Range.phenology">
            <summary>
            Phenological stage, a continuous variable from 0 to 4.
            </summary>
        </member>
        <member name="P:Models.G_Range.fineRootCarbon">
            <summary>
            Fine root carbon    (gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.fineRootNitrogen">
            <summary>
            Fine root nitrogen(gN/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.seedCarbon">
            <summary>
            Seed carbon(gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.seedNitrogen">
            <summary>
            Seed nitrogen(gN/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.leafCarbon">
            <summary>
            Leaf carbon(gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.leafNitrogen">
            <summary>
            Leaf nitrogen(gN/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.fineBranchCarbon">
            <summary>
            Fine branch carbon(gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.fineBranchNitrogen">
            <summary>
            Fine branch nitrogen(gN/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.coarseRootCarbon">
            <summary>
            Coarse root carbon(gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.coarseRootNitrogen">
            <summary>
            Coarse root nitrogen(gN/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.coarseBranchCarbon">
            <summary>
            Coarse branch carbon(gC/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.coarseBranchNitrogen">
            <summary>
            Coarse branch nitrogen(gN/m^2)
            </summary>
        </member>
        <member name="P:Models.G_Range.storedNitrogen">
            <summary>
            Stored nitrogen(CRPSTG in Century GROWTH, STORAGE in RESTRP).  I can't find where this is initialized, except for a gridded system input.  Assumed 0 for now, but here as a placeholder.
            </summary>
        </member>
        <member name="P:Models.G_Range.plantNitrogenFixed">
            <summary>
            Plant nitrogen fixed
            </summary>
        </member>
        <member name="P:Models.G_Range.nitrogenFixed">
            <summary>
            Nitrogen fixed.  Not sure what components distinguish it, just yet.  (NFIX)
            </summary>
        </member>
        <member name="P:Models.G_Range.respirationFlows">
            <summary>
            Maintenance respiration flows to storage pool(MRSPSTG)
            </summary>
        </member>
        <member name="P:Models.G_Range.respirationAnnual">
            <summary>
            Maintenance respiration flows for year(MRSPANN)
            </summary>
        </member>
        <member name="P:Models.G_Range.optimumLeafAreaIndex">
            <summary>
            Optimum leaf area index
            </summary>
        </member>
        <member name="P:Models.G_Range.leafAreaIndex">
            <summary>
            Leaf area index
            </summary>
        </member>
        <member name="P:Models.G_Range.waterFunction">
            <summary>
            Water function influencing mortality(AGWFUNC and BGWFUNC in Century, merged here since CYCLE assigns them equal and they start with the same value)
            </summary>
        </member>
        <member name="P:Models.G_Range.fireSeverity">
            <summary>
            A score from 0 to 1 reflecting fire intensity
            </summary>
        </member>
        <member name="P:Models.G_Range.burnedCarbon">
            <summary>
            The sum of carbon burned, only on the 1 m plots, not whole plant death
            </summary>
        </member>
        <member name="P:Models.G_Range.burnedNitrogen">
            <summary>
            The sum of nitrogen burned, only on the 1 m plots, not whole plant death
            </summary>
        </member>
        <member name="P:Models.G_Range.fertilizedNitrogenAdded">
            <summary>
            Total fertilized nitrogen added(g / m2)
            </summary>
        </member>
        <member name="P:Models.G_Range.fertilizedCarbonAdded">
            <summary>
            Total fertilized carbon added(g / m2)
            </summary>
        </member>
        <member name="P:Models.G_Range.aboveGroundHerbNPP">
            <summary>
            Herbaceous facet aboveground net primary production
            </summary>
        </member>
        <member name="P:Models.G_Range.aboveGroundShrubNPP">
            <summary>
            Herbaceous facet aboveground net primary production
            </summary>
        </member>
        <member name="P:Models.G_Range.aboveGroundTreeNPP">
            <summary>
            Herbaceous facet aboveground net primary production
            </summary>
        </member>
        <member name="P:Models.G_Range.fallRateOfStandingDead">
            <summary>Echos the parameter value for fall_rate_of_standing_dead
            Requested by Cecile to assist in evaluating usage with CLEM</summary>
        </member>
        <member name="T:Models.G_Range.SoilDataSourceEnum">
            <summary>
            An enumeration of possible data source mechanisms for initialising soil properties
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.APSIM">
            <summary>
            Take as much as possible from APSIM
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.APSIM_4Layer">
            <summary>
            Use APSIM values, but collapse to 4 layers
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.APSIM_2Layer">
            <summary>
            Use APSIM values, but collapse to 2 layers
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.APSIMPhysical">
            <summary>
            Take physical properties from APSIM (sand, silt, clay), but use G-Range pedotransfer functions for wilting point (LL12) and field capacity (DUL)
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.APSIMPhysical_4Layer">
            <summary>
            Take physical properties from APSIM (sand, silt, clay), but use G-Range pedotransfer functions for wilting point (LL12) and field capacity (DUL)
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.APSIMPhysical_2Layer">
            <summary>
            Take physical properties from APSIM (sand, silt, clay), but use G-Range pedotransfer functions for wilting point (LL12) and field capacity (DUL)
            </summary>
        </member>
        <member name="F:Models.G_Range.SoilDataSourceEnum.G_Range">
            <summary>
            Take everything from the G-Range database
            </summary>
        </member>
        <member name="P:Models.G_Range.SoilDataSource">
            <summary>
            Gets or sets the source to use for initialisation of soil properties
            </summary>
        </member>
        <member name="T:Models.G_Range.BiomeEnum">
            <summary>
            An enumeration of biomes, to allow the user to select their preference (or fall back to G-Range's map)
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.Unspecified">
            <summary>
            Use the biome specified in the G-Range SAGE map
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.TropicalEGreen">
            <summary>
            TROPICAL EVERGREEN FOREST / WOODLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.TropicalDeciduous">
            <summary>
            TROPICAL DECIDUOUS FOREST / WOODLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.TemperateBroadEGreen">
            <summary>
            TEMPERATE BROADLEAF EVERGREEN FOREST / WOODLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.TemperateNeedleEGreen">
            <summary>
            TEMPERATE NEEDLEAF EVERGREEN FOREST / WOODLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.TemperateDecid">
            <summary>
            TEMPERATE DECIDUOUS FOREST / WOODLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.BorealEGreen">
            <summary>
            BOREAL EVERGREEN FOREST / WOODLAND 
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.BorealDecid">
            <summary>
            BOREAL DECIDUOUS FOREST / WOODLAND 
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.TemperateMixed">
            <summary>
            EVERGREEN / DECIDUOUS MIXED FOREST / WOODLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.Savanna">
            <summary>
            SAVANNA
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.Steppe">
            <summary>
            GRASSLAND / STEPPE
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.DenseShrub">
            <summary>
            DENSE SHRUBLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.OpenShrub">
            <summary>
            OPEN SHRUBLAND
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.Tundra">
            <summary>
            TUNDRA
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.Desert">
            <summary>
            DESERT
            </summary>
        </member>
        <member name="F:Models.G_Range.BiomeEnum.PolarDesert">
            <summary>
            POLAR DESERT / ROCK / ICE 
            </summary>
        </member>
        <member name="P:Models.G_Range.BiomeType">
            <summary>
            Gets or sets the biome to use for parameter selection
            </summary>
        </member>
        <member name="P:Models.G_Range.Latitude">
            <summary>
            Gets or sets the latitude for the site being modelled. Should be in the range -90 to 90
            </summary>
        </member>
        <member name="P:Models.G_Range.Longitude">
            <summary>
            Gets or sets the longitude for the site being modelled. Should be in the range -180 to 180
            </summary>
        </member>
        <member name="P:Models.G_Range.DatabaseName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.G_Range.ParameterFileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.G_Range.spinupYears">
            <summary>
            Gets or sets the number of years to spinup the model
            </summary>
        </member>
        <member name="P:Models.G_Range.FullDatabaseName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="M:Models.G_Range.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Called when [start of simulation].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.G_Range.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>EventHandler - preparation before the main daily processes.
            For G_Range, this means we need to store and aggregate weather data
            into monthly values.
            </summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.G_Range.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>EventHandler - G_Range model logic run at the end of each month.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.G_Range.OnStartOfYear(System.Object,System.EventArgs)">
            <summary>EventHandler - Tasks done at the start of each year.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.G_Range.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for potential growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.G_Range.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for actual growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.G_Range.Linear(System.Double,System.Double[],System.Int32)">
            <summary>
            A linear interpolation routine, from Savanna ALINT.
            Rewritten March 12, 2013 to ensure that values are going in the placed needed.
            Typo fixed that had do i = l versus do i = 1 prior to the exit call.
            </summary>
            <param name="x">The value that needs a Y</param>
            <param name="dataVal">Pairs of values that define the relationship, x1, y1, x2, y2, etc.</param>
            <param name="imx">The number of pairs given, often 2</param>
            <returns></returns>
        </member>
        <member name="M:Models.G_Range.UpdateVegetation">
            <summary>
            Update metrics that summarize vegetation.  Adapted from Century or from scratch
            Transcoded from the subroutine in Misc_Material.f95
            </summary>
        </member>
        <member name="M:Models.G_Range.EachYear">
            <summary>
            Processes that are required each year, prior to any process-based simulation steps.
            
            Transcoded from Misc_Material.f95
            </summary>
        </member>
        <member name="M:Models.G_Range.ZeroAccumulators">
            <summary>
            Zero-out some accumulators each month.
            </summary>
        </member>
        <member name="M:Models.G_Range.EachMonth">
            <summary>
            Do processing steps that must be done each month.  The main steps are a long series of tests to ensure that
            values aren't exceeding a very large value, or moving negative.  Errors will cause tallying of counts of errors,
            both spatially and per entry.That said, they won't be stored spatially for each individual entry, as that
            would almost double memory.
            
            This routine includes a simple assignment of grazing fraction.That logic is placed here to allow for it to
            be made more dynamic in the future.
            </summary>
        </member>
        <member name="T:Models.IClock">
            <summary>Interface for a time server,</summary>
        </member>
        <member name="P:Models.IClock.Today">
            <summary>Simulation date.</summary>
        </member>
        <member name="P:Models.IClock.FractionComplete">
            <summary>Returns the current fraction of the overall simulation which has been completed</summary>
        </member>
        <member name="T:Models.IConceptionModel">
            <summary>
            A conception model capable of returning conception rate given an individual female.
            </summary>
        </member>
        <member name="M:Models.IConceptionModel.ConceptionRate(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Concpetion rate for given female
            </summary>
        </member>
        <member name="T:Models.Interfaces.IBubbleChart">
            <summary>
            An interface for a bubble chart.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IBubbleChart.Nodes">
            <summary>
            The nodes of the graph.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IBubbleChart.Arcs">
            <summary>
            The arcs of the graph.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IBubbleChart.InitialState">
            <summary>
            fixme - can this be refactored out?
            </summary>
        </member>
        <member name="P:Models.Interfaces.IBubbleChart.Verbose">
            <summary>
            fixme - can this be refactored out?
            </summary>
        </member>
        <member name="T:Models.Interfaces.ICanopy">
            <summary>This interface describes MicroClimate / canopy comms.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.LAI">
            <summary>Gets the LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.LAITotal">
            <summary>Gets the maximum LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.CoverGreen">
            <summary>Gets the cover green (0-1)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.CoverTotal">
            <summary>Gets the cover total (0-1)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Height">
            <summary>Gets the canopy height (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Depth">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Width">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.PotentialEP">
            <summary>Sets the potential evapotranspiration.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.LightProfile">
            <summary>Sets the light profile.</summary>
        </member>
        <member name="T:Models.Interfaces.IHaveCanopy">
            <summary>This interface describes a model that has a list of canopies.</summary>
        </member>
        <member name="P:Models.Interfaces.IHaveCanopy.Canopies">
            <summary>List of canopies that MicroClimate will use.</summary>
        </member>
        <member name="T:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType">
            <summary>A canopy energy balance type</summary>
        </member>
        <member name="F:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType.thickness">
            <summary>The thickness</summary>
        </member>
        <member name="F:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType.AmountOnGreen">
            <summary>The amount or radiation on green area</summary>
        </member>
        <member name="F:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType.AmountOnDead">
             <summary>The amount of radiation on dead area</summary>
        </member>
        <member name="T:Models.Interfaces.ILeaf">
            <summary>This interface describes interface for leaf interaction with Structure.</summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.CohortsInitialised">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.PlantAppearedLeafNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.InitialisedCohortNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.AppearedCohortNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.TipsAtEmergence">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.CohortsAtInitialisation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Interfaces.ILeaf.DoThin(System.Double)">
            <summary>
            
            </summary>
            <param name="ProportionRemoved"></param>
        </member>
        <member name="M:Models.Interfaces.ILeaf.RemoveHighestLeaf">
            <summary>
            Method to remove 
            </summary>
        </member>
        <member name="M:Models.Interfaces.ILeaf.Reset">
            <summary>
            Method to zero leaf numbembers
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.ApicalCohortNo">
            <summary>
            Then number of cohorts on the apex that are yet to expand
            </summary>
        </member>
        <member name="T:Models.Interfaces.IModelAsTable">
            <summary>This interface describes the way a grid presenter talks to a model via a data table.</summary>
        </member>
        <member name="P:Models.Interfaces.IModelAsTable.Tables">
            <summary>
            Gets or sets the tables of values.
            </summary>
        </member>
        <member name="T:Models.Interfaces.IRootShape">
            <summary>
            Interface for root shape functions
            </summary>
        </member>
        <member name="M:Models.Interfaces.IRootShape.CalcRootProportionInLayers(Models.PMF.Organs.ZoneState)">
            <summary>Calculates proportion of soil occupied by root in each layer</summary>
            <param name="zone">The ZoneState.</param>
        </member>
        <member name="T:Models.Interfaces.ISoilTemperature">
            <summary>
            This interface describes a soil temperature model.
            </summary>
        </member>
        <member name="P:Models.Interfaces.ISoilTemperature.Value">
            <summary>Returns soil temperature for each layer (oc)</summary>
        </member>
        <member name="T:Models.Interfaces.ISoilWater">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.RemoveWater(System.Double[])">
            <summary>Remove water from the profile</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Thickness">
            <summary>Gets or sets soil thickness for each layer (mm) in the parameter grid(</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SW">
            <summary>Gets or sets volumetric soil water content (mm/mm)(</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SWmm">
            <summary>Gets soil water content (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.ESW">
            <summary>Gets extractable soil water relative to LL15(mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Eos">
            <summary>Gets potential evaporation from soil surface (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Es">
            <summary>Gets the actual (realised) soil water evaporation (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Eo">
            <summary>Gets potential evapotranspiration of the whole soil-plant system (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Runoff">
            <summary>Gets the amount of water runoff (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Drainage">
            <summary>Gets the amount of water drainage from bottom of profile(mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SubsurfaceDrain">
            <summary>Subsurface drain (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Pond">
            <summary>Pond depth (mm).</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Salb">
            <summary>Fraction of incoming radiation reflected from bare soil</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LateralOutflow">
            <summary>Amount of water moving laterally out of the profile (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachNO3">
            <summary>Amount of N leaching as NO3-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachNH4">
            <summary>Amount of N leaching as NH4-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachUrea">
            <summary>Amount of N leaching as urea-N  from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachCl">
            <summary>Amount of Cl leaching from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.FlowNO3">
            <summary>Amount of N leaching as NO3 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.FlowNH4">
            <summary>Amount of N leaching as NH4 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.FlowUrea">
            <summary>Amount of N leaching as urea from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Flow">
            <summary>Amount of water moving upward from each soil layer during unsaturated flow (negative value means downward movement) (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Flux">
            <summary>Amount of water moving downward out of each soil layer due to gravity drainage (above DUL) (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.PAW">
            <summary>Plant available water SW-LL15 (mm/mm).</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.PAWmm">
            <summary>Plant available water SW-LL15 (mm).</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.PotentialInfiltration">
            <summary> This is set by Microclimate and is rainfall less that intercepted by the canopy and residue components </summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.PrecipitationInterception">
            <summary> The amount of rainfall intercepted by crop and residue canopies </summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.WaterTable">
            <summary>Water table depth (mm)</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.SetWaterTable(System.Double)">
            <summary>Sets the water table.</summary>
            <param name="InitialDepth">The initial depth.</param> 
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SoluteFluxEfficiency">
            <summary>The efficiency (0-1) that solutes move down with water.</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SoluteFlowEfficiency">
            <summary>The efficiency (0-1) that solutes move up with water.</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.Reset">
            <summary>Perform a reset</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.Tillage(Models.Soils.TillageType)">
            <summary>Perform tillage</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.Tillage(System.String)">
            <summary>Perform tillage</summary>
        </member>
        <member name="T:Models.Interfaces.IStructure">
            <summary>
            An interface for morphological plant development.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IStructure.DeltaPlantPopulation">
            <summary> The change in plant population due to plant mortality set in the plant class </summary>
        </member>
        <member name="P:Models.Interfaces.IStructure.ProportionPlantMortality">
            <summary>The proportion plant mortality.</summary>
        </member>
        <member name="M:Models.Interfaces.IStructure.DoThin(System.Double)">
            <summary>Called when crop recieves a remove biomass event from manager</summary>
        </member>
        <member name="M:Models.Interfaces.IStructure.DoNodeRemoval(System.Int32)">
            <summary> Removes nodes from main-stem in defoliation event  </summary>
        </member>
        <member name="T:Models.Interfaces.ISurfaceOrganicMatter">
            <summary>Surface organic matter interface.</summary>
        </member>
        <member name="P:Models.Interfaces.ISurfaceOrganicMatter.Cover">
            <summary>Fraction of ground covered by all surface OMs</summary>
        </member>
        <member name="M:Models.Interfaces.ISurfaceOrganicMatter.Add(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>Adds material to the surface organic matter pool.</summary>
            <param name="biomass">The amount of biomass added (kg/ha).</param>
            <param name="N">The amount of N added (ppm).</param>
            <param name="P">The amount of P added (ppm).</param>
            <param name="type">Type of the biomass.</param>
            <param name="name">Name of the biomass written to summary file</param>
        </member>
        <member name="T:Models.Interfaces.IUptake">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="T:Models.Interfaces.IVisualiseAsDirectedGraph">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IVisualiseAsDirectedGraph.DirectedGraphInfo">
            <summary>Get directed graph from model</summary>
        </member>
        <member name="T:Models.Interfaces.IWeather">
            <summary>A weather interface.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.StartDate">
            <summary>Gets the start date of the weather file.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.EndDate">
            <summary>Gets the end date of the weather file.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.MaxT">
            <summary>Gets or sets the maximum temperature (oc)</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.MinT">
            <summary>Gets or sets the minimum temperature (oc)</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.MeanT">
            <summary>Mean temperature  /// </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.VPD">
            <summary>Daily mean VPD  /// </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Rain">
            <summary>Gets or sets the rainfall (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Radn">
            <summary>Gets or sets the solar radiation. MJ/m2/day</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.VP">
            <summary>Gets or sets the vapor pressure</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Wind">
            <summary> Gets or sets the wind value found in weather file or zero if not specified.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.CO2">
            <summary> Gets or sets the CO2 level. If not specified in the weather file the default is 350.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.AirPressure">
            <summary>Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.DiffuseFraction">
            <summary> Gets or sets the diffuse radiation fraction. If not specified in the weather file the default is 1. </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Latitude">
            <summary>Gets the latitude</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Longitude">
            <summary>Gets the longitude</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Tav">
            <summary>Gets the average temperature</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Amp">
            <summary>Gets the temperature amplitude.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.FileName">
            <summary>Gets the average temperature</summary>
        </member>
        <member name="M:Models.Interfaces.IWeather.CalculateDayLength(System.Double)">
            <summary>Gets the duration of the day in hours.</summary>
        </member>
        <member name="M:Models.Interfaces.IWeather.CalculateSunRise">
            <summary> Gets the time the sun came up.</summary>
        </member>
        <member name="M:Models.Interfaces.IWeather.CalculateSunSet">
            <summary> Gets the time the sun went down. </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.TomorrowsMetData">
            <summary> MetData for tomorrow </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.YesterdaysMetData">
            <summary> MetData for tomorrow </summary>
        </member>
        <member name="T:Models.Interfaces.DailyMetDataFromFile">
            <summary>
            Structure containing daily met data variables
            </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.MaxT">
            <summary>Gets or sets the maximum temperature (oc)</summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.MinT">
            <summary>Gets or sets the minimum temperature (oc)</summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.PanEvap">
            <summary>Daily mean VPD  /// </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.Rain">
            <summary>Gets or sets the rainfall (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.Radn">
            <summary>Gets or sets the solar radiation. MJ/m2/day</summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.VP">
            <summary>Gets or sets the vapor pressure</summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.Wind">
            <summary> Gets or sets the wind value found in weather file or zero if not specified. /// </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.RainfallHours">
            <summary> Gets or sets the CO2 level. If not specified in the weather file the default is 350. </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.AirPressure">
            <summary> Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa. </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.DiffuseFraction">
            <summary> Gets or sets the diffuse radiation fraction. If not specified in the weather file the default is 1010 hPa. </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.DayLength">
            <summary> Gets or sets the diffuse radiation fraction. If not specified in the weather file the default is 1010 hPa. </summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.CO2">
            <summary>Daily co2 level.</summary>
        </member>
        <member name="P:Models.Interfaces.DailyMetDataFromFile.Raw">
            <summary>
            Raw data straight from the met file. This can be used to access
            non-standard variables which aren't auto-mapped to properties.
            </summary>
        </member>
        <member name="T:Models.Interfaces.IZone">
            <summary>
            An interface for a zone.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IZone.Area">
            <summary>
            Area of the zone (ha).
            </summary>
        </member>
        <member name="T:Models.LifeCycle.AccumulateCohortExpression">
            <summary>
            Iterates through each cohort and adds the value of the Expression: 
            </summary>
        </member>
        <member name="P:Models.LifeCycle.AccumulateCohortExpression.parent">
            <summary>The parent LifeCycle phase from which cohorts are evaluated</summary>
        </member>
        <member name="F:Models.LifeCycle.AccumulateCohortExpression.expression">
            <summary>The expression that will be calculated for each cohort</summary>
        </member>
        <member name="P:Models.LifeCycle.AccumulateCohortExpression.CurrentCohort">
            <summary>The cohort currently being evaluated</summary>
        </member>
        <member name="M:Models.LifeCycle.AccumulateCohortExpression.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.LifeCycle.AccumulateCohortExpression.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation get the parent</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.LifeCycle.AccumulateCohortExpression.OnLifeCycleProcessComplete(System.Object,System.EventArgs)">
            <summary>When core LifeCycle processes are complete, calculate additional cohort specific expression</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Models.LifeCycle.Cohort">
            <summary>
            A class that holds the status of a group of individules (cohort) of the same developmental stage
            </summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.Population">
            <summary>Number of individules in this cohort.</summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.ChronologicalAge">
            <summary>Days since this cohort was initiated</summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.PhysiologicalAge">
            <summary>The maturity of the cohort (0-1)</summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.Mortalities">
            <summary>Number of Mortalities from this cohort today.</summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.Progeny">
            <summary>Number of progeny created by this cohort</summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.Emigrants">
            <summary>Number of migrants leaving this cohort</summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.sourceInfo">
            <summary>Information about where this cohort came from</summary>
        </member>
        <member name="F:Models.LifeCycle.Cohort.BelongsToPhase">
            <summary>The LifeCyclePhase this cohort belongs to.</summary>
        </member>
        <member name="M:Models.LifeCycle.Cohort.#ctor(Models.LifeCycle.LifeCyclePhase)">
            <summary> Construct and store reference to owner.</summary>
            <param name="belongsTo"></param>
        </member>
        <member name="T:Models.LifeCycle.IInfest">
            <summary>
            Interface for Infest methods for LifeCycle
            </summary>
        </member>
        <member name="M:Models.LifeCycle.IInfest.Infest">
            Method to send infestation event to lifecycle class
        </member>
        <member name="T:Models.LifeCycle.Infestation">
            <summary>
            Sets and infestation event for Lifecycle model.  
            </summary>
        </member>
        <member name="F:Models.LifeCycle.Infestation.Clock">
            <summary> Clock </summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.TypeOfInfestation">
            <summary>Sets the type of infestation event</summary>
        </member>
        <member name="T:Models.LifeCycle.Infestation.InfestationType">
            <summary>Options for types of infestation</summary>
        </member>
        <member name="F:Models.LifeCycle.Infestation.InfestationType.OnStart">
            <summary>infestation on Simulation start</summary>
        </member>
        <member name="F:Models.LifeCycle.Infestation.InfestationType.OnDate">
            <summary>infestation on InfestationDate</summary>
        </member>
        <member name="F:Models.LifeCycle.Infestation.InfestationType.BetweenDates">
            <summary>Daily infestation between Infestation Date and InfestationEndDate</summary>
        </member>
        <member name="F:Models.LifeCycle.Infestation.InfestationType.Continious">
            <summary>Daily infestation for duration of simulation</summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.InfestingOrganisumName">
            <summary>"The name of organisum that arrives in the zone" </summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.InfestingOrganisum">
            <summary>"The organisum that arrives the zone" </summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.InfestingPhaseName">
            <summary>"The LifeCyclePhase of the organism when it arrives" </summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.InfestingPhase">
            <summary>"The arriving organisum LifeCyclePhase" </summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.InfestationDate">
            <summary>Date of infestation</summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.InfestationEndDate">
            <summary>Date of infestation</summary>
        </member>
        <member name="F:Models.LifeCycle.Infestation.NumberOfImmigrants">
            <summary>The number of immigrants arriving with infestation event</summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.ChronoAgeOfImmigrants">
            <summary>The chronoligical age of immigrants arriving with infestation event</summary>
        </member>
        <member name="P:Models.LifeCycle.Infestation.PhysAgeOfImmigrants">
            <summary>The Physiological age of immigrants arriving with infestation event</summary>
        </member>
        <member name="M:Models.LifeCycle.Infestation.Infest">
            <summary>Method to send infestation event to LifeCycle</summary>
        </member>
        <member name="M:Models.LifeCycle.Infestation.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation find the infesting lifecycle and phase</summary>
            <param name="sender"></param> 
            <param name="e"></param>
        </member>
        <member name="M:Models.LifeCycle.Infestation.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Call infest() events at specified time steps</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.LifeCycle.LifeCycle">
            <summary>
            The LifeCycle model represents a population of organisms within a zone.  It assembles 
            an arbitry number of LifeCyclePhases that cohorts of individuals (of the same developmental
            stage) pass through during their life.
            Each LifeCyclePhase assembles an arbitary number of cohorts.
            LifeCyclePhases have a set of parameters controlling the Development, Mortality 
            and Reproduction of each cohort.  LifeCyclePhases may also contain plant damage functions
            which specifiy how each phase damages its host plants.  
            Upon the DoLifecycle event the LifeCycle class loops through a list of each of its LifeCyclePhases
            The LifeCycle model is initialised with no members in any phase and the Infest() method must 
            be called to insert members into a phase.  
            </summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCycle.LifeCyclePhases">
            <summary>List of LifeCyclePhases that make up the LifeCycle model</summary>
        </member>
        <member name="E:Models.LifeCycle.LifeCycle.LifeCycleProcessComplete">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCycle.LifeCyclePhaseNames">
            <summary>List of the names of LifeCyclePhases</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCycle.TotalPopulation">
            <summary>Total population of this lifecycle (summed across all LifeCyclePhases)</summary>
        </member>
        <member name="M:Models.LifeCycle.LifeCycle.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation set up LifeCyclePhases</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeCycle.OnDoLifecycle(System.Object,System.EventArgs)">
            <summary>Handle the DoLifeCycle event and process each LifeStage</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeCycle.Infest(Models.LifeCycle.LifeCyclePhase.SourceInfo)">
            <summary>Method to bring a new cohort of individuls to the specified LifeCyclePhase</summary>
            <param name="InfestationInfo"></param>
        </member>
        <member name="T:Models.LifeCycle.LifeCyclePhase">
            <summary>
            A LifeCyclePhase represents a distinct period in the development or an organisum.
            Each LifeCyclePhase assembles an arbitary number of cohorts which represent individuals
            that entered this phase at the same time and will have the same PhysiologicalAge.
            Each day the LifeCycle phase loops through each of its cohorts determining the increase 
            PhysiologicalAge, the number of mortalities in that cohort and the number of progeny the
            cohort produces.
            LifeCyclePhases are parameterised with three essential Properties:
             1. Development.  Returns the change in Physiological Age (0-1) of each cohort each day,
             2. Mortality. Returns the number of individuals that die in each cohort each day,
             3. Reproduction. Returns the number of progeny that each cohort will produce each day.
             4. Migration. Returns the number of migrants that will each cohort each day.
            Each of these properties can be parameterised with any agregation of Ifunctions and
            the code takes the values from these IFunctions and adds or subtracts them from the
            corresponding property in each Cohort.
            The LifeCycle class calls the Process() method in each LifeCyclePhase and these then loop
            through each of their cohorts and apply the values of the Development, Mortality and Reproduction
            Functions in turn.  LifeCyclePhase has a CurrentCohort Property wihch is set at each loop 
            and may be referenced by functions to get cohort specific properties (eg Physiological age or Population)
            so Functions return different values for each cohort.
            When PhysiologicalAge of a cohort reaches 1 the members of this cohort graduate and a new
            of this many individuals in added to the next LifeCyclePhase and removed from the current 
            LifeCyclePhase.  If it is the final LifeCyclePhase the individuals of cohorts with 
            PhysiologicalAge of 1 will die and the cohort will be removed.
            Each LifeCyclePhase specifies a NameOfPhaseForProgeny and when Reproduciton returns a positive,
            a cohort of this many individuals is initiated in the corresponding LifeCyclePhaseForProgeny.
            </summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.development">
            <summary>Returns change (0-1) in PhysiologicalAge of the cohort being processed</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.mortality">
            <summary> Returns number of mortalities from  cohort being processed</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.reproduction">
            <summary> Returns number of progeny created by cohort being processed</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.migration">
            <summary> Returns number of migrants leaving the cohort being processed</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.LifeCyclePhaseForGraduates">
            <summary>the destination LifeCyclePhase that graduates from this LifeCyclePhase will be moved to</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.ProgenyDestinations">
            <summary>The list of ProgenyDestinationPhases.</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.MigrantDestinations">
            <summary>The list of MitrantDestinationPhases.</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Cohorts">
            <summary>The list of cohorts in this LifeCyclePhase.</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.CohortCount">
            <summary>Returns the count of cohorts in this LifeCyclePhase</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.TotalPopulation">
            <summary>Returns the total number of individuals in this LifeCyclePhase (Summed over all cohorts)</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Populations">
            <summary>Returns an array of populations for each cohort in this LifeCyclePhase</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.PhysiologicalAges">
            <summary>Returns an array of PhysiologicalAges for each cohort in this LifeCyclePhase</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.CurrentCohort">
            <summary>The cohort currently being processed</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Immigrants">
            <summary>The number of individules added today by Infest() method (Summed across all new cohorts)</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.DevelopmentRate">
            <summary>The rate (0-1) that cohorts progress toward maturity</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Mortalities">
            <summary>The number of individules expiring (Summed across all cohorts)</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Graduates">
            <summary>The number of individuals moved to the next LifeCyclePhase (Summed across all graduating cohorts</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Progeny">
            <summary>The number of individules deposited in LifeCyclePhaseForProgeny (Sum of progeny across all cohorts</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.Emigrants">
            <summary>The number of individules in LifeCyclePhaseForProgeny departing this population (Sum of progeny across all cohorts) </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeCyclePhase.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation construct the list of LifeCyclePhase</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeCyclePhase.Process">
            <summary>Loop through each cohort in this LifeCyclePhase to calculate development, mortality, graduation and reproduciton</summary>
        </member>
        <member name="M:Models.LifeCycle.LifeCyclePhase.NewCohort(Models.LifeCycle.LifeCyclePhase.SourceInfo)">
            <summary>Construct a new cohort and add it to Cohorts</summary>
        </member>
        <member name="M:Models.LifeCycle.LifeCyclePhase.ZeorDeltas">
            <summary>Zero all time step variables</summary>
        </member>
        <member name="T:Models.LifeCycle.LifeCyclePhase.SourceInfo">
            <summary>
            Structure containint information about new cohort
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.SourceInfo.Population">
            <summary>Construct a new cohort and add it to Cohorts</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.SourceInfo.ChronologicalAge">
            <summary>Mean age of population on creation of cohort</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.SourceInfo.PhysiologicalAge">
            <summary>Mean physiological status of cohort on creation</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.SourceInfo.LifeCycle">
            <summary>The Lifecycle that contributed cohort originated from</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.SourceInfo.LifeCyclePhase">
            <summary>The Phase that cohort origigated from</summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCyclePhase.SourceInfo.Type">
            <summary>The method of creation </summary>
        </member>
        <member name="T:Models.LifeCycle.LifeCyclePhase.SourceInfo.TypeOptions">
            <summary>The methods of creation</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.SourceInfo.TypeOptions.Imigration">
            <summary>Cohort from imigration</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.SourceInfo.TypeOptions.Graduation">
            <summary>Cohort from Graduation</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.SourceInfo.TypeOptions.Reproduction">
            <summary>Cohort from Reproduction</summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCyclePhase.SourceInfo.TypeOptions.Infestation">
            <summary>Cohort from Infestation model</summary>
        </member>
        <member name="T:Models.LifeCycle.MigrantDestinationPhase">
            <summary>
            This class specifies which life cycle and which phase the progeny of the parent 
            LifeCyclePhase will be added to.  More that one ReproductionDestinationPhase can 
            be added and the ProportionOfProgeny property determines what proportion of the
            total progeny are added to this ReproductionDestinationPhase
            </summary>
        </member>
        <member name="P:Models.LifeCycle.MigrantDestinationPhase.NameOfLifeCycleForMigrants">
            <summary> Specifies the destination LifeCycle that migrants from this LifeCyclePhaseReproduction will be created in</summary>
        </member>
        <member name="P:Models.LifeCycle.MigrantDestinationPhase.NameOfPhaseForMigrants">
            <summary> Specifies the destination LifeCyclePhase that migrants from this LifeCyclePhaseReproduction will be created in</summary>
        </member>
        <member name="F:Models.LifeCycle.MigrantDestinationPhase.proportionOfMigrants">
            <summary> specifies the proportion of the parent phases migrants that are added to the destination phase</summary>
        </member>
        <member name="P:Models.LifeCycle.MigrantDestinationPhase.ProportionOfMigrants">
            <summary> Returns the proportion of the parent phases migrants that are added to the destination phase</summary>
        </member>
        <member name="T:Models.LifeCycle.PlantAssimilateConsumption">
            <summary>
            For Pests/Diseases that take assimilate dirrect from the vessels. 
            for example aphids
            </summary>
        </member>
        <member name="F:Models.LifeCycle.PlantAssimilateConsumption.RateOfPlantAssimilateConsumptionPerIndividual">
            <summary>Returns the potential damage that an individual can cause per day</summary>
        </member>
        <member name="P:Models.LifeCycle.PlantAssimilateConsumption.HostPlant">
            <summary> Select host plant that Pest/Disease may bother </summary>
        </member>
        <member name="T:Models.LifeCycle.PlantMortality">
            <summary>
            Specifies the killing of plants by Pest/Disease.  The biomass and dimensions of organs will be reduced
            in Proportion to the number of plants killed.
            </summary>
        </member>
        <member name="F:Models.LifeCycle.PlantMortality.RateOfPlantMortalityPerIndividual">
            <summary>Returns the potential damage that an individual can cause per day</summary>
        </member>
        <member name="P:Models.LifeCycle.PlantMortality.HostPlant">
            <summary> Select host plant that Pest/Disease may bother </summary>
        </member>
        <member name="T:Models.LifeCycle.PlantOrganConsumption">
            <summary>
            Specifies the removal of organ biomass by Pest/Disease.  If organs implement ICanopy this will remove LAI in 
            proportion to the amount of biomass removed.  If organ implements IRoot RLD will be decreased in proportion
            biomass removed
            </summary>
        </member>
        <member name="F:Models.LifeCycle.PlantOrganConsumption.OrganWtConsumptionPerIndividual">
            <summary>Returns the potential damage that an individual can cause per day</summary>
        </member>
        <member name="P:Models.LifeCycle.PlantOrganConsumption.HostPlant">
            <summary>Host plant that Pest/Disease bothers</summary>
        </member>
        <member name="P:Models.LifeCycle.PlantOrganConsumption.HostOrgan">
            <summary> </summary>
        </member>
        <member name="T:Models.LifeCycle.PlantOrganFunctionalDimensionReduction">
            <summary>
            For Pests/Diseases that reduce the functional area or length of an organ without removing biomass
            for example clogging of vescles or growing spots on leaf surfaces to block radiation interception
            </summary>
        </member>
        <member name="F:Models.LifeCycle.PlantOrganFunctionalDimensionReduction.Reduction">
            <summary>Returns the potential damage that an individual can cause per day</summary>
        </member>
        <member name="P:Models.LifeCycle.PlantOrganFunctionalDimensionReduction.HostPlant">
            <summary>Host plant that Pest/Disease bothers</summary>
        </member>
        <member name="P:Models.LifeCycle.PlantOrganFunctionalDimensionReduction.HostOrgan">
            <summary> </summary>
        </member>
        <member name="T:Models.LifeCycle.ProgenyDestinationPhase">
            <summary>
            This class specifies which life cycle and which phase the progeny of the parent 
            LifeCyclePhase will be added to.  More that one ReproductionDestinationPhase can 
            be added and the ProportionOfProgeny property determines what proportion of the
            total progeny are added to this ReproductionDestinationPhase
            </summary>
        </member>
        <member name="P:Models.LifeCycle.ProgenyDestinationPhase.NameOfLifeCycleForProgeny">
            <summary> Specifies the destination LifeCycle that progeney from this LifeCyclePhaseReproduction will be created in</summary>
        </member>
        <member name="P:Models.LifeCycle.ProgenyDestinationPhase.NameOfPhaseForProgeny">
            <summary> Specifies the destination LifeCyclePhase that progeney from this LifeCyclePhaseReproduction will be created in</summary>
        </member>
        <member name="F:Models.LifeCycle.ProgenyDestinationPhase.proportionOfProgeny">
            <summary> Specifies the proportion of the parent phases progeny that are added to the destination phase</summary>
        </member>
        <member name="P:Models.LifeCycle.ProgenyDestinationPhase.ProportionOfProgeny">
            <summary> Returns the proportion of the parent phases progeny that are added to the destination phase</summary>
        </member>
        <member name="T:Models.Log">
            <summary>
            A low level log component that writes state / parameter variables to a text file.
            </summary>
        </member>
        <member name="M:Models.Log.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Initialise the model.
            </summary>
        </member>
        <member name="M:Models.Log.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation has completed.
            </summary>
        </member>
        <member name="T:Models.Logging.InitialCondition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Logging.InitialCondition.Name">
             <summary>
            
             </summary>
        </member>
        <member name="F:Models.Logging.InitialCondition.Description">
             <summary>
            
             </summary>
        </member>
        <member name="F:Models.Logging.InitialCondition.TypeName">
             <summary>
            
             </summary>
        </member>
        <member name="F:Models.Logging.InitialCondition.Units">
             <summary>
            
             </summary>
        </member>
        <member name="F:Models.Logging.InitialCondition.DisplayFormat">
             <summary>
            
             </summary>
        </member>
        <member name="F:Models.Logging.InitialCondition.Value">
             <summary>
            
            </summary>
        </member>
        <member name="T:Models.Logging.InitialConditionsTable">
            <summary>
            A class encapsulating an initial conditions table.
            </summary>
        </member>
        <member name="P:Models.Logging.InitialConditionsTable.Model">
            <summary>
            The model
            </summary>
        </member>
        <member name="P:Models.Logging.InitialConditionsTable.Conditions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Logging.InitialConditionsTable.#ctor(Models.Core.IModel,System.Collections.Generic.IEnumerable{Models.Logging.InitialCondition},System.String)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <param name="conditions"></param>
            <param name="senderPath"></param>
        </member>
        <member name="M:Models.Logging.InitialConditionsTable.ToMarkdown">
            <summary>
            Export the initial conditions table to markdown format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.Logging.Message">
            <summary>
            Encapsulates a message written to the simulation log.
            </summary>
        </member>
        <member name="P:Models.Logging.Message.Date">
            <summary>
            The date on which the message was sent.
            </summary>
        </member>
        <member name="P:Models.Logging.Message.Text">
            <summary>
            The contents of the message.
            </summary>
        </member>
        <member name="P:Models.Logging.Message.Provider">
            <summary>
            The model sending the message.
            </summary>
        </member>
        <member name="P:Models.Logging.Message.Severity">
            <summary>The severity/type of the message.</summary>
        </member>
        <member name="P:Models.Logging.Message.SimulationName">
            <summary>
            Name of the simulation in which the messsage was sent.
            </summary>
        </member>
        <member name="P:Models.Logging.Message.Zone">
            <summary>
            Name of the zone in which the message was sent.
            </summary>
        </member>
        <member name="P:Models.Logging.Message.RelativePath">
            <summary>
            Relative path - used for export functionality.
            </summary>
        </member>
        <member name="M:Models.Logging.Message.#ctor(System.DateTime,System.String,Models.Core.IModel,Models.Core.MessageType,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="date">The date on which the message was sent.</param>
            <param name="text">The contents of the message.</param>
            <param name="sender">The sender of the message.</param>
            <param name="severity">The severity of the message.</param>
            <param name="simulationName">Name of the simulation in which the message was sent.</param>
            <param name="senderPath">Relative path of the sender model.</param>
        </member>
        <member name="M:Models.Logging.Message.ToMarkdown">
            <summary>
            Export the message to a markdown format.
            </summary>
        </member>
        <member name="T:Models.Program">
            <summary>Class to hold a static main entry point.</summary>
        </member>
        <member name="M:Models.Program.Main(System.String[])">
            <summary>
            Main program entry point.
            </summary>
            <param name="args"> Command line arguments</param>
            <returns> Program exit code (0 for success)</returns>
        </member>
        <member name="M:Models.Program.HandleParseError(System.Collections.Generic.IEnumerable{CommandLine.Error})">
            <summary>
            Handles parser errors to ensure that a non-zero exit code
            is returned when parse errors are encountered.
            </summary>
            <param name="errors">Parse errors.</param>
        </member>
        <member name="M:Models.Program.Run(Models.Options)">
            <summary>
            Run Models with the given set of options.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Models.Program.WriteVersion">
            <summary>
            Write the APSIM version to the console.
            </summary>
        </member>
        <member name="M:Models.Program.UpgradeFile(System.String)">
            <summary>
            Upgrade a file to the latest APSIM version.
            </summary>
            <param name="file">The name of the file to upgrade.</param>
        </member>
        <member name="M:Models.Program.OnJobCompleted(System.Object,APSIM.Shared.JobRunning.JobCompleteArguments)">
            <summary>Job has completed</summary>
        </member>
        <member name="M:Models.Program.OnSimulationGroupCompleted(System.Object,System.EventArgs)">
            <summary>All jobs for a file have completed</summary>
        </member>
        <member name="M:Models.Program.OnAllJobsCompleted(System.Object,Models.Core.Run.Runner.AllJobsCompletedArgs)">
            <summary>All jobs have completed</summary>
        </member>
        <member name="M:Models.Program.WriteCompleteMessage(System.Object,APSIM.Shared.JobRunning.JobCompleteArguments)">
            <summary>
            Write a complete message to the console.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">The event arguments of the completed job.</param>
        </member>
        <member name="T:Models.Fertiliser">
            <summary>This model is responsible for applying fertiliser.</summary>
        </member>
        <member name="F:Models.Fertiliser.soilPhysical">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.Fertiliser.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.Fertiliser.NO3">
            <summary>NO3 solute</summary>
        </member>
        <member name="F:Models.Fertiliser.NH4">
            <summary>NO3 solute</summary>
        </member>
        <member name="F:Models.Fertiliser.Urea">
            <summary>NO3 solute</summary>
        </member>
        <member name="P:Models.Fertiliser.Definitions">
            <summary>Gets or sets the definitions.</summary>
        </member>
        <member name="E:Models.Fertiliser.Fertilised">
            <summary>Invoked whenever fertiliser is applied.</summary>
        </member>
        <member name="P:Models.Fertiliser.NitrogenApplied">
            <summary>The amount of nitrogen applied.</summary>
        </member>
        <member name="T:Models.Fertiliser.Types">
            <summary>Types of fertiliser.</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.CalciteCA">
            <summary>The calcite ca</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.CalciteFine">
            <summary>The calcite fine</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.Dolomite">
            <summary>The dolomite</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NO3N">
            <summary>The n o3 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NH4N">
            <summary>The n h4 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NH4NO3N">
            <summary>The n h4 n o3 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.DAP">
            <summary>The dap</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.MAP">
            <summary>The map</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.UreaN">
            <summary>The urea n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.UreaNO3">
            <summary>The urea n o3</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.Urea">
            <summary>The urea</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NH4SO4N">
            <summary>The n h4 s o4 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.RockP">
            <summary>The rock p</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.BandedP">
            <summary>The banded p</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.BroadcastP">
            <summary>The broadcast p</summary>
        </member>
        <member name="M:Models.Fertiliser.Apply(System.Double,Models.Fertiliser.Types,System.Double,System.Boolean)">
            <summary>Apply fertiliser.</summary>
            <param name="Amount">The amount.</param>
            <param name="Type">The type.</param>
            <param name="Depth">The depth.</param>
            <param name="doOutput">If true, output will be written to the summary.</param>
        </member>
        <member name="M:Models.Fertiliser.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Invoked by clock at start of each daily timestep.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.FertiliserApplicationType">
            <summary>Stores information about a fertiliser application.</summary>
        </member>
        <member name="P:Models.FertiliserApplicationType.Amount">
            <summary>Amount of fertiliser applied (kg/ha).</summary>
        </member>
        <member name="P:Models.FertiliserApplicationType.Depth">
            <summary>Depth to which fertiliser was applied (mm).</summary>
        </member>
        <member name="P:Models.FertiliserApplicationType.FertiliserType">
            <summary>Type of fertiliser applied.</summary>
        </member>
        <member name="T:Models.FertiliserType">
            <summary>A class for holding a fertiliser type.</summary>
        </member>
        <member name="P:Models.FertiliserType.Name">
            <summary>The name of the fertiliser type.</summary>
        </member>
        <member name="P:Models.FertiliserType.Description">
            <summary>A description of the fertiliser type.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionNO3">
            <summary>The fraction of no3.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionNH4">
            <summary>The fraction of nh4.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionUrea">
            <summary>The fraction of urea.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionRockP">
            <summary>The fraction of rock p.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionBandedP">
            <summary>The fraction of banded p.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionLabileP">
            <summary>The fraction of labile p.</summary>
        </member>
        <member name="P:Models.FertiliserType.FractionCa">
            <summary>The fraction of ca.</summary>
        </member>
        <member name="T:Models.IIrrigation">
            <summary>Interface for an irrigation class.</summary>
        </member>
        <member name="P:Models.IIrrigation.IrrigationApplied">
            <summary>The amount of irrigation actually applied (mm).</summary>
        </member>
        <member name="P:Models.IIrrigation.Depth">
            <summary>The depth at which irrigation is applied (mm).</summary>
        </member>
        <member name="P:Models.IIrrigation.Efficiency">
            <summary>The efficiency of the irrigation system (mm/mm).</summary>
        </member>
        <member name="P:Models.IIrrigation.Duration">
            <summary>The duration of the irrigation event (minutes).</summary>
        </member>
        <member name="P:Models.IIrrigation.WillRunoff">
            <summary>The flag for whether the irrigation can run off (true/false).</summary>
        </member>
        <member name="E:Models.IIrrigation.Irrigated">
            <summary>Invoked when an irrigation occurs.</summary>
        </member>
        <member name="M:Models.IIrrigation.Apply(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>Called to apply some irrigation.</summary>
            <param name="amount">The amount to apply (mm).</param>
            <param name="depth">The depth of application (mm).</param>
            <param name="duration">The duration of irrigation event (minutes).</param>
            <param name="efficiency">The irrigation efficiency (mm/mm).</param>
            <param name="willRunoff">Whether irrigation can run off (<c>true</c>/<c>false</c>).</param>
            <param name="no3">Amount of NO3 in irrigation water</param>
            <param name="nh4">Amount of NH4 in irrigation water</param>
            <param name="doOutput">If true, output will be written to the summary.</param>
        </member>
        <member name="T:Models.Irrigation">
            <summary>
            This model controls irrigation events, which can be triggered using the Apply() method.
            </summary>
        </member>
        <member name="F:Models.Irrigation.summary">
            <summary>Access the summary model.</summary>
        </member>
        <member name="F:Models.Irrigation.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.Irrigation.IrrigationApplied">
            <summary>Gets the amount of irrigation actually applied (mm).</summary>
        </member>
        <member name="P:Models.Irrigation.Depth">
            <summary>Gets or sets the depth at which irrigation is applied (mm).</summary>
        </member>
        <member name="P:Models.Irrigation.Duration">
            <summary>Gets or sets the duration of the irrigation event (minutes).</summary>
        </member>
        <member name="P:Models.Irrigation.Efficiency">
            <summary>Gets or sets the efficiency of the irrigation system (mm/mm).</summary>
        </member>
        <member name="P:Models.Irrigation.WillRunoff">
            <summary>Gets or sets the flag for whether the irrigation can run off (true/false).</summary>
        </member>
        <member name="E:Models.Irrigation.Irrigated">
            <summary>Occurs when [irrigated].</summary>
            <remarks>
            Advertises an irrigation and passes its parameters, thus allowing other models to respond accordingly.
            </remarks>
        </member>
        <member name="M:Models.Irrigation.Apply(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>Apply some irrigation.</summary>
            <param name="amount">The amount to apply (mm).</param>
            <param name="depth">The depth of application (mm).</param>
            <param name="duration">The duration of the irrigation event (minutes).</param>
            <param name="efficiency">The irrigation efficiency (mm/mm).</param>
            <param name="willRunoff">Whether irrigation can run off (<c>true</c>/<c>false</c>).</param>
            <param name="no3">Amount of NO3 in irrigation water</param>
            <param name="nh4">Amount of NH4 in irrigation water</param>
            <param name="doOutput">If true, output will be written to the summary.</param>
        </member>
        <member name="M:Models.Irrigation.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.IrrigationApplicationType">
            <summary>
            Irrigation application type
            </summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.Amount">
            <summary>The amount to apply (mm).</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.Depth">
            <summary>The depth of application (mm).</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.Duration">
            <summary>The duration of irrigation event (minutes).</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.WillRunoff">
            <summary>Whether irrigation can run off.</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.NO3">
            <summary>The n o3</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.NH4">
            <summary>The n h4</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.CL">
            <summary>The cl</summary>
        </member>
        <member name="T:Models.Soils.Arbitrator.CropUptakes">
            <summary>
            A simple class for containing a single set of uptakes for a given crop.
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.CropUptakes.Crop">
            <summary>Crop</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.CropUptakes.Zones">
            <summary>List of uptakes</summary>
        </member>
        <member name="T:Models.Soils.Arbitrator.Estimate">
            <summary>
            Contains an estimate of uptakes (either water or nitrogen)
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.Estimate.Parent">
            <summary>The parent model.</summary>
        </member>
        <member name="T:Models.Soils.Arbitrator.Estimate.CalcType">
            <summary>
            An enumeration describing whether the estimate is for water or nitrogen.
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.Estimate.CalcType.Water">
            <summary>Indicates this estimate is for water.</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.Estimate.CalcType.Nitrogen">
            <summary>Indicates this estimate is for nitrogen.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.#ctor(Models.Core.IModel)">
            <summary>Initializes a new instance of the <see cref="T:Models.Soils.Arbitrator.Estimate"/> class.</summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.#ctor(Models.Core.IModel,Models.Soils.Arbitrator.Estimate.CalcType,Models.Soils.Arbitrator.SoilState,System.Collections.Generic.IEnumerable{Models.Interfaces.IUptake})">
            <summary>Initializes a new instance of the <see cref="T:Models.Soils.Arbitrator.Estimate"/> class.</summary>
            <param name="parent">The parent model</param>
            <param name="Type">The type of estimate</param>
            <param name="soilstate">The state of the soil</param>
            <param name="uptakeModels">A list of models that do uptake.</param>
        </member>
        <member name="P:Models.Soils.Arbitrator.Estimate.Values">
            <summary>Gets the estimate values.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.UptakeZone(Models.Interfaces.IUptake,System.String)">
            <summary>Gets uptakes for the specified crop and zone. Will throw if not found.</summary>
            <param name="crop">Name of the crop.</param>
            <param name="ZoneName">Name of the zone.</param>
            <returns>The uptakes.</returns>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.op_Multiply(Models.Soils.Arbitrator.Estimate,System.Double)">
            <summary>Implements the operator *.</summary>
            <param name="E">The estimate</param>
            <param name="value">The value to multiply the estimate by.</param>
            <returns>The resulting estimate</returns>
        </member>
        <member name="T:Models.Soils.Arbitrator.SoilArbitrator">
            <summary>
            The APSIM farming systems model has a long history of use for simulating mixed or intercropped systems.  Doing this requires methods for simulating the competition of above and below ground resources.  Above ground competition for light has been calculated within APSIM assuming a mixed turbid medium using the Beer-Lambert analogue as described by [Keating1993Intercropping].  The MicroClimate [Snow2004Micromet] model now used within APSIM builds upon this by also calculating the impact of mutual shading on canopy conductance and partitions aerodynamic conductance to individual species in applying the Penman-Monteith model for calculating potential crop water use.  The arbitration of below ground resources of water and nitrogen is calculated by this model.
            
            Traditionally, below ground competition has been arbitrated using two approaches.  Firstly, the early approaches [Adiku1995Intercrop; Carberry1996Ley] used an alternating order of uptake calculation each day to ensure that different crops within a simulation did not benefit from precedence in daily orders of calculations.  Soil water simulations using the SWIM3 model [Huth2012SWIM3] arbitrate individual crop uptakes as part of the simulataneous solutions of various soil water fluxes as part of its solution of the Richards' equation [richards1931capillary].
            
            The soil arbitrator operates via a simple integration of daily fluxes into crop root systems via a [Runge-Kutta](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods) calculation. 
            
            If Y is any soil resource, such as water or N, and U is the uptake of that resource by one or more plant root systems,  
            then
            
            Y~t+1~ = Y~t~ - U
            
            Because U will change through the time period in complex manners depending on the number and nature of demands for that resource, we use Runge-Kutta to integrate through that time period using
            
            Y~t+1~= Y~t~ + 1/6 x (U~1~+ 2xU~2~ + 2xU~3~ + U~4~) 
            
            Where U~1~,U~2~,U~3~ and U~4~ are 4 estimates of the Uptake rates calculated by the crop models given a range of soil resource conditions, as follows:
            
            U~1~ = f(Y~t~),
            
            U~2~ = f(Y~t~ - 0.5xU~1~),
            
            U~3~ = f(Y~t~ - 0.5xU~2~),
            
            U~4~ = f(Y~t~ - U~3~).
            
            So U~1~ is the estimate based on the uptake rates at the beginning of the time interval, similar to a simple Euler method.
            U~2~ and U~3~ are estimates based on the rates somewhere near the midpoint of the time interval.  U~4~ is the estimate based on the rates toward the end of the time interval.
            
            The iterative procedure allows crops to influence the uptake of other crops via various feedback mechanisms.  For example,  crops rapidly extracting water from near the surface will dry the soil in those layers, which will force deeper rooted crops to potentially extract water from lower layers. Uptakes can notionally be of either sign, and so trees providing hydraulic lift of water from water tables could potentially make this water available for uptake by mutplie understory species within the timestep.  Crops are responsible for meeting resource demand by whatever means they prefer.  And so, leguminous crops may start by taking up mineral N at the start of the day but rely on fixation later in a time period if N becomes limiting.  This will reduce competition from others and change the balance dynamically throughout the integration period. 
            
            The design has been chosen to provide the following benefits:
            
            1) The approach is numerically simple and pure.
            
            2) The approach does not require the use of any particular uptake equation. The uptake equation is embodied within the crop model as designed by the crop model developer and tester.
            
            3) The approach will allow any number of plant species to interact.
            
            4) The approach will allow for arbitration between species in any zone, but also competition between species that may demand resources from multiple zones within the simulation.
            
            5) The approach will automatically arbitrate supply of N between zones, layers, and types (nitrate vs ammonium) with the preferences of all derived by the plant model code.
            </summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Called at the start of the simulation.</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Dummy event data.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.OnDoWaterArbitration(System.Object,System.EventArgs)">
            <summary>Called by clock to do water arbitration</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Dummy event data.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.DoNutrientArbitration(System.Object,System.EventArgs)">
            <summary>Called by clock to do nutrient arbitration</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Dummy event data.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.DoArbitration(Models.Soils.Arbitrator.Estimate.CalcType)">
            <summary>
            General soil arbitration method (water or nutrients) based upon Runge-Kutta method
            </summary>
            <param name="arbitrationType">Water or Nitrogen</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.ScaleWaterAndNIfNecessary(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Scale the water and n values if the total uptake exceeds the amounts available.
            </summary>
            <param name="zones">List of zones to check.</param>
            <param name="uptakes">List of all potential uptakes</param>
        </member>
        <member name="T:Models.Soils.Arbitrator.SoilState">
            <summary>
            Encapsulates the state of water and N in multiple zones.
            </summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.#ctor(System.Collections.Generic.IEnumerable{Models.Core.Zone})">
            <summary>Initializes a new instance of the <see cref="T:Models.Soils.Arbitrator.SoilState"/> class.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.#ctor(Models.Soils.Arbitrator.SoilState)">
            <summary>Constructor to copy state from another instance.</summary>
            <param name="from">The instance to copy from.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.Initialise">
            <summary>Initialises this instance.</summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.SoilState.Zones">
            <summary>Gets all zones in this soil state.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.op_Subtraction(Models.Soils.Arbitrator.SoilState,Models.Soils.Arbitrator.Estimate)">
            <summary>Implements the operator -.</summary>
            <param name="state">The soil state.</param>
            <param name="estimate">The estimate to subtract from the soil state.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Models.Soils.Arbitrator.ZoneWaterAndN">
            <summary>
            Represents a zone (point, field etc) that has water and N values.
            </summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.ZoneWaterAndN.Zone">
            <summary>
            The Zone for this water and N
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.ZoneWaterAndN.Water">
            <summary>Amount of water (mm)</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.ZoneWaterAndN.NO3N">
            <summary>Amount of NO3 (kg/ha)</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.ZoneWaterAndN.NH4N">
            <summary>Amount of NH4 (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.ZoneWaterAndN.TotalWater">
            <summary>Gets the sum of 'Water' (mm)</summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.ZoneWaterAndN.TotalNO3N">
            <summary>Gets the sum of 'NO3N' (mm)</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.#ctor(Models.Core.Zone)">
            <summary>
            Constructor
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.#ctor(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>
            Constructor. Copy state from another instance.
            </summary>
            <param name="from">The instance to copy from.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.#ctor(Models.Core.Zone,Models.Soils.Soil)">
            <summary>
            Constructor
            </summary>
            <param name="zone"></param>
            <param name="soil">The soil in the zone.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.Initialise">
            <summary>Initialises this instance.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.InitialiseToSoilState">
            <summary>Initialises this instance.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.op_Multiply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double)">
            <summary>Implements the operator *.</summary>
            <param name="zone">The zone</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.op_Addition(Models.Soils.Arbitrator.ZoneWaterAndN,Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Implements the operator +.</summary>
            <param name="ZWN1">Zone 1</param>
            <param name="ZWN2">Zone 2</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.Exception">Cannot add zones with different names</exception>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.op_Subtraction(Models.Soils.Arbitrator.ZoneWaterAndN,Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Implements the operator -.</summary>
            <param name="ZWN1">Zone 1</param>
            <param name="ZWN2">Zone 2</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.Exception">Cannot subtract zones with different names</exception>
        </member>
        <member name="T:Models.Soils.Chemical">
            <summary>This class captures chemical soil data</summary>
        </member>
        <member name="P:Models.Soils.Chemical.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.Chemical.Thickness">
            <summary>Thickness of each layer.</summary>
        </member>
        <member name="P:Models.Soils.Chemical.NO3N">
            <summary>Nitrate NO3.</summary>
        </member>
        <member name="P:Models.Soils.Chemical.NH4N">
            <summary>Ammonia NH4</summary>
        </member>
        <member name="P:Models.Soils.Chemical.PH">
            <summary>pH</summary>
        </member>
        <member name="P:Models.Soils.Chemical.CL">
            <summary>Gets or sets the cl.</summary>
        </member>
        <member name="P:Models.Soils.Chemical.EC">
            <summary>Gets or sets the ec.</summary>
        </member>
        <member name="P:Models.Soils.Chemical.ESP">
            <summary>Gets or sets the esp.</summary>
        </member>
        <member name="P:Models.Soils.Chemical.LabileP">
            <summary>
            Gets or sets Labile P (mg/kg)
            </summary>
        </member>
        <member name="P:Models.Soils.Chemical.UnavailableP">
            <summary>
            Gets or sets Labile P (mg/kg)
            </summary>
        </member>
        <member name="P:Models.Soils.Chemical.ECMetadata">
            <summary>EC metadata</summary>
        </member>
        <member name="P:Models.Soils.Chemical.CLMetadata">
            <summary>CL metadata</summary>
        </member>
        <member name="P:Models.Soils.Chemical.ESPMetadata">
            <summary>ESP metadata</summary>
        </member>
        <member name="P:Models.Soils.Chemical.PHMetadata">
            <summary>PH metadata</summary>
        </member>
        <member name="T:Models.Soils.InitialWater">
            <summary>
            Represents the simulation initial water status. There are multiple ways
            of specifying the starting water; 1) by a fraction of a full profile, 2) by depth of
            wet soil or 3) a single value of plant available water.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.Soil">
            <summary>
            Gets the parent soil model.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.SoilPhysical">
            <summary>
            Gets the parent soil model.
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.fractionFull">
            <summary>
            The fraction of a full profile.
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.depthOfWetSoil">
            <summary>
            The depth of wet soil.
            </summary>
        </member>
        <member name="T:Models.Soils.InitialWater.PercentMethodEnum">
            <summary>
            An enumeration for soil water distribution used by the percent full
            method.
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.PercentMethodEnum.FilledFromTop">
            <summary>
            Represents filled from the top of the profile
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.PercentMethodEnum.EvenlyDistributed">
            <summary>
            Represents evenly distribution down the profile.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.PercentMethod">
            <summary>
            Gets or sets the distribution method for the percent full method.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.FractionFull">
            <summary>
            Gets or sets the fraction of a full profile. If NaN is returned then
            the depth of wet soil is the specified method.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.DepthWetSoil">
            <summary>
            Gets or sets the depth of wet soil (mm). If NaN is returned then
            fraction full is the specified method.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.PAW">
            <summary>
            Gets or sets the plant available water content
            </summary>
        </member>
        <member name="M:Models.Soils.InitialWater.PAWCCrop(System.String)">
            <summary>
            Return the plant available water CAPACITY. Units: mm/mm
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.RelativeTo">
            <summary>
            Gets or sets the crop that starting plant available water is relative to.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.RelativeToCrops">
            <summary>
            Gets the crop names that are permissible in the 'RelativeTo' property.
            </summary>
        </member>
        <member name="M:Models.Soils.InitialWater.SW(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water. Units: mm/mm
            </summary>
            <param name="thickness">Thickness of each layer</param>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <param name="xf">Exploratory factor</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.SWFilledFromTop(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water using a FractionFull and filled from the top
            </summary>
            <param name="thickness">Thickness of each layer</param>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <param name="xf">Exploratory factor</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.SWEvenlyDistributed(System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water using a FractionFull and evenly distributed. Units: mm/mm
            </summary>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.SWDepthWetSoil(System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water using a depth of wet soil. Units: mm/mm
            </summary>
            <param name="thickness">Thickness of each layer</param>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.TotalSoilDepth">
            <summary>
            Returns the total depth of the soil, in mm
            </summary>
            <returns>Total soil depth</returns>
        </member>
        <member name="T:Models.Soils.IPhysical">
            <summary>An interface for soil physical properties.</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.AirDry">
            <summary>Air dry (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.BD">
            <summary>Bulk density (g/cc).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.DUL">
            <summary>Drained upper limit (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.DULmm">
            <summary>Drained upper limit (mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.KS">
            <summary>KS (mm/day).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.LL15">
            <summary>Lower limit 15 bar (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.LL15mm">
            <summary>Lower limit 15 bar (mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.ParticleSizeClay">
            <summary>Particle size clay.</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.ParticleSizeSand">
            <summary>Particle size sand.</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.ParticleSizeSilt">
            <summary>Particle size silt.</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.Rocks">
            <summary>Rocks.</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.SAT">
            <summary>Saturation (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.SATmm">
            <summary>Saturation (mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.Texture">
            <summary>Texture.</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.Thickness">
            <summary>Soil layer thickness (mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.ThicknessCumulative">
            <summary>Soil layer cumulative thicknesses (mm)</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.DepthMidPoints">
            <summary>Gets the depth mid points (mm).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.PAWC">
            <summary>Plant available water CAPACITY (DUL-LL15).</summary>
        </member>
        <member name="P:Models.Soils.IPhysical.PAWCmm">
            <summary>Plant available water CAPACITY (DUL-LL15).</summary>
        </member>
        <member name="T:Models.Soils.LayerStructure">
            <summary>
            A model for holding layer structure information
            </summary>
        </member>
        <member name="P:Models.Soils.LayerStructure.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.LayerStructure.Thickness">
            <summary>Gets or sets the thickness.</summary>
        </member>
        <member name="T:Models.Soils.Evapotranspiration">
            <summary>
            Calculates Penman Evaporation to drive potential evaporation from soil model
            </summary>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.PenmanEO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>Penman Evapotranspiration potential (mm/day)
            The amount of water that will be transpired by a short, actively growing area of crop that is
            fully covering the ground.This is the formulation given by French BK, Legg BJ. 1979. 
            Rothamsted irrigation 1964-76. Journal of Agricultural Science, U.K, 92: 15-37.
             </summary>
            <param name="Radiation"> is total incomming solar radiaion (Units MJ/M2/day) </param>
            <param name="Temperature">the mean air temperature for the day measured in a stevenson screen at 1.2m height(Units Degrees celcius)</param> 
            <param name ="Windrun"> is the distance the wind would travel in a day at is mean speed(units km/d)</param>
            <param name = "VaporPressure"> is the vapor pressure of the air at 1.2m height(units mbar) </param>
             <param name="Albedo">the proportion of radiation reflected by the surface</param>
             <param name="DayOfYear"></param>
             <param name="Lattitude"></param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.lamda(System.Double)">
            <summary>latent heat of vapourisation (MJ/kg) 
             ET calculations solve an energy balance to work out how much energy is being removed from the system
             by evaporation.This is given by the latent heat of vapourisation.
             We need to divide latent heat flux(MJ) by LAMDA to convert to mm of water evaporated
            </summary>
            <param name="Temperature"> Air temperature(units degrees C)</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.gama(System.Double)">
            <summary>The phycometric constant (kPa/oK)</summary>
            <param name = "Temperature">air temperature(units degrees C)</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.SatVaporPressureSlope(System.Double)">
            <summary> Slope of the saturated vapor pressure line at give temperature (kPa).</summary>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.VaporPressureDeficit(System.Double,System.Double)">
            <summary>This is the difference (in mbar) between the current vapour presure and the saturated vapor pressure
            at the current air temperature</summary>
            <param name="Temperature">Temperature is Air temperature(units degrees C)</param>
            <param name="VaporPressure">Vapor pressure in mbar</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.SatVaporPressure(System.Double)">
            <summary>This is the vapour pressure (in mbar) that the airs capacity to absorb water vapor is saturated.
            It increases exponentially with temperature.The equation used here is from:
            Jenson ME, Burman RD, Allen RG. 1990.Evapotranspiration and irrigation requirements: a manual. 
            New York, U.S.A: American Society of Civil Engineers.
            </summary>
            <param name = "Temperature"> temperature of the air (units degrees C)</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.AirDensity(System.Double)">
            <summary>
            "Density of air (kg/m3)
            </summary>
            <param name="Temperature">temperature of the air (units degrees C) </param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.NetRadiation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>Net solar radiation (MJ/m2) at the crop surface.
            This is total incomming radiation less that which is reflected.
            Reference: ASCE-EWRI. 2005. The ASCE Standardized Reference Evapotranspiration Equation.
            Report of the Task Committee on Standardization of Reference Evapotranspiration.
             </summary>
             <param name="Radiation">is the total incomming solar radiation measured by a pyranometer for the period (Units MJ/m2)</param>
             <param name="Tmean">is the mean temperature for the period measured in a Stevenson screen at 1.2 m height(degrees C)</param>
             <param name="VapourPressure">is the mean vapor pressure for the period measured in a Stevenson screen at 1.2 m height(Units kPa)</param>
             <param name="Lattitude">(units degrees)</param>
             <param name="DOY">is day of year 1 Jan = 1</param>
             <param name="albedo">is the proportion of radiation that the surface reflects back to the sky</param>
             <returns></returns>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.ClearSkyRadiation(System.Double,System.Double)">
            <summary>
            Radiation assuming no cloud cover
            </summary>
            <param name="Lattitude">(units degrees)</param>
            <param name="DOY"> is day of year 1 Jan = 1</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.NetLongwaveRadiation(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Solar radiation absorbed by the crop and lost again to the atmosphere and space by longwave radiation
            </summary>
            <param name="Radiation"> is the total incomming solar radiation measured by a pyranometer for the period(Units MJ/m2)</param>
            <param name="Tmean"> is the mean temperature for the period measured in a Stevenson screen at 1.2 m height(degrees C)</param>
            <param name="VapourPressure"> is the mean vapor pressure for the period measured in a Stevenson screen at 1.2 m height(Units kPa)</param>
            <param name="Lattitude">(units degrees)</param>
            <param name="DOY"> is day of year 1 Jan = 1</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.ExtraterestialRadiation(System.Double,System.Double)">
            <summary>
            Radiation at the top of the atmosphere
            </summary>
            <param name="Lattitude">(units degrees)</param>
            <param name="DOY"> is day of year 1 Jan = 1</param>
        </member>
        <member name="T:Models.Soils.HourlyData">
            <summary>
            Data structure that holds parameters and variables specific to each pore component in the soil horizion
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Irrigation">
            <summary>
            Irrigation applied
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Rainfall">
            <summary>
            Rainfall occured
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Drainage">
            <summary>
            Drainage occured
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Infiltration">
            <summary>
            Infiltration occured
            </summary>
        </member>
        <member name="M:Models.Soils.HourlyData.#ctor">
            <summary>
            Initialise arays on construction
            </summary>
        </member>
        <member name="T:Models.Soils.HydraulicProperties">
            <summary>
            Returns theta and ksat values for specified psi and theta values respectively.  Gets its parameters from the soil Water node and a couple of parameters it owns
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.DELk">
            <summary>
            The de lk
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Mk">
            <summary>
            The mk
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.M0">
            <summary>
            The m0
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.M1">
            <summary>
            The m1
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Y0">
            <summary>
            The y0
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Y1">
            <summary>
            The y1
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.MicroP">
            <summary>
            The micro p
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.MicroKs">
            <summary>
            The micro ks
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Kdula">
            <summary>
            The kdula
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.MacroP">
            <summary>
            The macro p
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psid">
            <summary>
            The psid
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psi_ll15">
            <summary>
            The psi_ll15
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psiad">
            <summary>
            The psiad
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psi0">
            <summary>
            The psi0
            </summary>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.psidul">
            <summary>
            psidul
            </summary>
            <value>
            The psidul.
            </value>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.kdul">
            <summary>
            kdul
            </summary>
            <value>
            The kdul.
            </value>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SimpleTheta(System.Int32,System.Double)">
            <summary>
            Simples the theta.
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SimpleK(System.Int32,System.Double)">
            <summary>
            Calcultates and returns hydraulic conductivity in cm/h
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns>Hydraulic Conductivity</returns>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SetHydraulicProperties">
            <summary>
            Called when soil models that require hydraulic properties information initiate their properties
            </summary>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SimpleS(System.Int32,System.Double)">
            <summary>
            Simples the s.
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SetupThetaCurve">
            <summary>
            Sets up the theta curve
            </summary>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SetupKCurve">
            <summary>
            Sets up the K curve
            </summary>
        </member>
        <member name="T:Models.Soils.MRSpline">
            <summary>
            Fits a 5 point hermite spline to moisture release data and returns theta for any specified psi.  Gets its parameters from the soil Water node and a couple of parameters it owns
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Weirdo">
            <summary>Access the WEIRDO model.</summary>
        </member>
        <member name="F:Models.Soils.MRSpline.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.Soils.MRSpline.DELk">
            <summary>
            The de lk
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Mk">
            <summary>
            The mk
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.M0">
            <summary>
            The m0
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.M1">
            <summary>
            The m1
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Y0">
            <summary>
            The y0
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Y1">
            <summary>
            The y1
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psidul">
            <summary>
            Water potential at drained upper limit
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psi_ll15">
            <summary>
            Water potential at lower limit
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psi0">
            <summary>
            Water potential at oven dry
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psis">
            <summary>
            Water potential at saturation
            </summary>
        </member>
        <member name="M:Models.Soils.MRSpline.SimpleTheta(System.Int32,System.Double)">
            <summary>
            Simples the theta.
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.MRSpline.SetHydraulicProperties">
            <summary>
            Called when soil models that require hydraulic properties information initiate their properties
            </summary>
        </member>
        <member name="M:Models.Soils.MRSpline.SetupThetaCurve">
            <summary>
            Sets up the theta curve
            </summary>
        </member>
        <member name="T:Models.Soils.Pore">
            <summary>
            Data structure that holds parameters and variables specific to each pore component in the soil horizion
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.Layer">
            <summary>The layer that this pore compartment is located in</summary>
        </member>
        <member name="P:Models.Soils.Pore.Compartment">
            <summary>The size compartment that this pore represents</summary>
        </member>
        <member name="P:Models.Soils.Pore.IncludeSorption">
            <summary>The thickness of the layer that the pore is within</summary>
            <summary>
            Allows Sorption processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.DiameterUpper">
            <summary>The diameter of the upper boundry of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.DiameterLower">
            <summary>The diameter of the lower boundry of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.Area">
            <summary>The mean horizontal area of the pores in this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Radius">
            <summary>The mean horizontal radius of pores in this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Number">
            <summary>The number of pore 'cylinders' in this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Thickness">
            <summary>
            The depth of the soil layer this pore compartment sits within
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PsiLower">
            <summary>The water potential when this pore is empty but all smaller pores are full</summary>
        </member>
        <member name="P:Models.Soils.Pore.PsiUpper">
            <summary>The water potential when this pore is full but all larger pores are empty</summary>
        </member>
        <member name="P:Models.Soils.Pore.ThetaUpper">
            <summary>The water content of the soil when this pore is full and larger pores are empty</summary>
        </member>
        <member name="P:Models.Soils.Pore.ThetaLower">
            <summary>The water content of the soil when this pore is empty and smaller pores are full</summary>
        </member>
        <member name="P:Models.Soils.Pore.Volume">
            <summary>The volume of the the pore relative to the volume of soil</summary>
        </member>
        <member name="P:Models.Soils.Pore.VolumeDepth">
            <summary>The volume of the the pore in mm</summary>
        </member>
        <member name="P:Models.Soils.Pore.WaterFilledVolume">
            <summary>The water filled volume of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.RelativeWaterContent">
            <summary>The water filled volume of the pore relative to the air space</summary>
        </member>
        <member name="P:Models.Soils.Pore.AirFilledVolume">
            <summary>The air filled volume of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.WaterDepth">
            <summary>The depth of water in the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.AirDepth">
            <summary>The depth of Air in the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.CFlow">
            <summary>
            Empirical parameter for estimating hydraulic conductivity of pore compartments
            divide values from Arya 1999 etal by 10000 to convert from cm to um
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.XFlow">
            <summary>
            Empirical parameter for estimating hydraulic conductivity of pore compartments
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PoreFlowRate">
            <summary>
            The volumetirc flow rate of a single pore
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PoiseuilleFlow">
            <summary>The hydraulic conductivity of water through this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Diffusivity">
            <summary>The potential diffusion out of this pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.DiffusionCapacity">
            <summary>The potential diffusion into this pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.Sorptivity">
            <summary>
            The rate of water movement into a pore space due to the chemical attraction from the matris
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.RepelancyFactor">
            <summary>
            Factor describing the effects of soil water content on hydrophobosity
            equals 1 if soil is hydrophyllic and decreases is soil becomes more hydrophobic
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.Sorption">
            <summary>
            The rate of water movement into a pore space due to the chemical attraction from the matrix
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.HydraulicConductivityIn">
            <summary>The maximum possible conductivity through a pore of given size</summary>
        </member>
        <member name="P:Models.Soils.Pore.GravitationalPotential">
            <summary>the gravitational potential for the layer this pore is in, calculated from height above zero potential base</summary>
        </member>
        <member name="P:Models.Soils.Pore.TensionFactor">
            <summary>
            Factor describing the effects of water surface tension holding water in pores.  Is zero where surface tension exceeds the forces of gravity and neglegable where suction is low in larger pores
            equals 1
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.HydraulicConductivityOut">
            <summary>The conductivity of water moving out of a pore, The net result of gravity Opposed by capiliary draw back</summary>
        </member>
        <member name="P:Models.Soils.Pore.ExtractionMultiplier">
            <summary>Factor to scale potential water extraction in each pore </summary>
        </member>
        <member name="P:Models.Soils.Pore.RootLengthDensity">
            <summary>
            The proportion of pores in this cohort that have absorbing roots present
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PotentialWaterExtraction">
            <summary>
            The amount of water that may be extracted from this pore class by plant roots each hour
            </summary>
        </member>
        <member name="T:Models.Soils.SubHourlyData">
            <summary>
            Data structure that holds parameters and variables specific to each pore component in the soil horizion
            </summary>
        </member>
        <member name="M:Models.Soils.SubHourlyData.#ctor">
            <summary>
            Initialise arays on construction
            </summary>
        </member>
        <member name="T:Models.Soils.WEIRDO">
             <summary>
            
             </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PrecipitationInterception">
            <summary> The amount of rainfall intercepted by crop and residue canopies </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PotentialInfiltration">
            <summary> This doesn't do anything currently</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterModelName">
            <summary> Model name</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ResidueInterception">
            <summary>The amount of rainfall intercepted by surface residues</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.catchment_area">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CN2Bare">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CNCov">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CNRed">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DiffusConst">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DiffusSlope">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.discharge_width">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.dlayer">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.dlt_sw">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.dlt_sw_dep">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Drainage">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SubsurfaceDrain">
            <summary>Subsurface drain (mm)</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DULmm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Eo">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Eos">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Es">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ESW">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Flow">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.FlowNH4">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.FlowNO3">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.FlowUrea">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Flux">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.gravity_gradient">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Infiltration">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.KLAT">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachNH4">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachNO3">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachUrea">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachCl">
            <summary>Amount of Cl leaching from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LL15mm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.max_pond">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LateralOutflow">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PAWC">
            <summary> The Plant available water content of the soil layer /// </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PAWCmm">
            <summary>Plant available water CAPACITY (DUL-LL15).</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PAW">
            <summary>Plant available water SW-LL15 (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PAWmm">
            <summary>Plant available water SW-LL15 (mm).</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Pond">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.pond_evap">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Runoff">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Salb">
            <summary>Soil Albedo</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SATmm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.slope">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.solute_flow_eff">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.solute_flux_eff">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.specific_bd">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SummerCona">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SummerDate">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SummerU">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SW">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SWCON">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SWmm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Thickness">
            <summary> this is the layer structure that parameters are entered against for this object</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ThicknessCumulative">
            <summary>Return the soil layer cumulative thickness (mm)</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DepthMidPoints">
            <summary>Gets the depth mid points (mm).</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterTable">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WinterCona">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WinterDate">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WinterU">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetWater_frac(System.Double[])">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Reset">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetWaterTable(System.Double)">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Tillage(Models.Soils.TillageType)">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Tillage(System.String)">
            <summary> Who knows</summary>
        </member>
        <member name="E:Models.Soils.WEIRDO.ReportDetails">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.Pores">
            <summary>
            This is the data structure that represents the soils layers and pore cagatories in each layer
            </summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.Hourly">
            <summary>
            Contains data extrapolated out to hourly values
            </summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.SubHourly">
            <summary>
            Contains data extrapolated out to 6 min values
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CFlow">
            <summary>Parameter describing the volumetric flow of water through conducting pores of a certian radius</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.XFlow">
            <summary>Parameter describing the volumetric flow of water through conducting pores of a certian radius</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PsiBub">
            <summary>Water potential where k curve becomes flat between -10 and -1000</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MinRepellancyFactor">
            <summary>Minimum repelancy Factor, when soil becomes dry</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LowerRepellentWC">
            <summary>Relative water content at which soil reaches maximum hydrophobicity</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.UpperRepellentWC">
            <summary>Relative Water content above which soil is hydrophillic</summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.PoreBounds">
            <summary>
            The maximum diameter of pore compartments
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SubProfileConductance">
            <summary>
            The hydraulic conductance below the bottom of the specified profile
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterTableDepth">
            <summary>
            The depth of the water table below the surface, important for gravitational water potential
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateInfiltration">
            <summary>
            Allow infiltration processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateDrainage">
            <summary>
            Allow drainage processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ReportDetail">
            <summary>
            Allow output of soil water content of all pores at each time step
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.IncludeSorption">
            <summary>
            Allows Sorption processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateEvaporation">
            <summary>
            Allows Evaporation to be switched off
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateDiffusion">
            <summary>
            Allows diffusion between layers to be switched off
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DiffusivityMultiplier">
            <summary>
            Factor to scale Diffusivity
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ExtractionMultiplier">
            <summary>
            Factor to scale Water Extraction
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ProfileWaterExtraction">
            <summary>
            The amount of water extracted from the soil by the crop
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.TotalCover">
            <summary>
            The amount of cover from crops and surface organic matter.
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ResidueWater">
            <summary>
            The amount of water stored in the surface residue
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PoreWater">
            <summary>
            Data object to put the water content of each pore into
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Process">
            <summary>
            Describes the process just completed
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Hour">
            <summary>
            the current hour in the process
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ReportLayer">
            <summary>
            The layer that is current encountering water flux
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.TimeStep">
            <summary>
            Number of times water deltas have occured
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DeltaPond">
            <summary>
            Change in pond depth for the day
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.KS">
            <summary>
            The hydraulic conductivity of a layer at saturation
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Capillarity">
            <summary>
            Hydraulic concutivitiy into each pore
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.HydraulicConductivityOut">
            <summary>
            Hydraulic concutivitiy out of each pore
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PsiUpper">
            <summary>
            The water potential when this pore space is full and larger pores are empty
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.RelativePoreVolume">
            <summary>
            The relative water water filled porosity when this pore space if full and larger pores are empty
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Theta">
            <summary>
            Layer volumetric water content when these pores are full and larger pores are empty
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Diffusion">
            <summary>
            Net diffusion Upward (+) or downwrd (-) from this layer
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterExtraction">
            <summary> Water extracted by crop roots for transpiration</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MatrixRelativeWater">
            <summary>
            Factor quantifying the hydrophobicity of the soi
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ProfileLayers">
            <summary>
            The number of layers in the soil profile
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PoreCompartments">
            <summary>
            The number of compartments the soils porosity is divided into
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.AdsorptionCapacity">
            <summary>
            How much of the current air filled volume of a layer may be water filled in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.TransmissionCapacity">
            <summary>
            How much water may pass through the current pore in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.AdsorptionCapacityBelow">
            <summary>
            How much water can the profile below this layer absorb in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PercolationCapacityBelow">
            <summary>
            The amount of water that may flow into and through the profile below this layer in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.potentialInfiltration">
            <summary>
            The amount of water that may enter the surface of the soil each hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LayerHeight">
            <summary>
            The distance down to the nearest zero potential body of water, for calculating gravitational potential
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ProfileDepth">
            <summary>
            The depth of the specificed soil profile
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SaturatedWaterDepth">
            <summary>
            The amount of water mm stored in a layer at saturation
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Called when [simulation commencing].
            Goes through and creates instances of all the properties of MultiPoreWater model
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">
            SoilWater module has detected that the Soil has no layers.
            </exception>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called at the start of each daily timestep
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>
            Called when the model is ready to work out daily soil water deltas
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>
            Adds irrigation events into daily total
            </summary>
            <param name="sender">Irrigation</param>
            <param name="IrrigationData">The irrigation data.</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnPreparingNewWeatherData(System.Object,System.EventArgs)">
            <summary>
            sets up daily met data
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doPercolationCapacity(System.Int32)">
            <summary>
            Works out how much water may infiltrat in each time step
            </summary>
            <param name="SPH">Steps Per Hour, the number of times this function is called in an hourly time step</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.doGravitionalPotential">
            <summary>
            Calculates the gravitational potential in each layer from its height to the nearest zero potential layer
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doInfiltration(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Carries out infiltration processes at each time step
            </summary>
            <param name="SPH">Steps Per Hour, the number of times this function is called in an hourly time step</param>
            <param name="h">h of the day for this time step</param>
            <param name="WaterToInfiltrate">the Amount of water that infiltrates the soil in this time step</param>
            <param name="Subh">the current sub hourly time step</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.doDrainage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gravity moves mobile water out of layers each time step
            </summary>
            <param name="SPH">Steps Per Hour, the number of times this function is called in an hourly time step</param>
            <param name="h">h of the day for this time step</param>
            <param name="Subh">the current sub hourly time step</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.doEvaporation">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doTranspiration">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.RemoveWater(System.Double[])">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doDiffusion">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Irrigation">
            <summary>
            This is the Irrigation ariving at the soil surface, less what has been intercepted by residue
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Rainfall">
            <summary>
            This is the rainfall ariving at the soil surface, less what has been intercepted by residue
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialProfileWater">
            <summary>
            Variable used for checking mass balance
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialPondDepth">
            <summary>
            Variable used for checking mass balance
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialResidueWater">
            <summary>
            Variable used for checking mass balance
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SoluteFluxEfficiency">
            <summary>The efficiency (0-1) that solutes move down with water.</summary>
            <remarks>Not imlpemented</remarks>
        </member>
        <member name="P:Models.Soils.WEIRDO.SoluteFlowEfficiency">
            <summary>The efficiency (0-1) that solutes move up with water.</summary>
            <remarks>Not imlpemented</remarks>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetSoilProperties">
            <summary>
            Goes through all profile and pore properties and updates their values using soil parameters.  
            Must be called after any soil parameters are chagned if the effect of the changes is to work correctly.
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Infiltrate(Models.Soils.Pore)">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.LayerSum(Models.Soils.Pore[],System.String)">
            <summary>
            Utility to sum the specified propertie from all pore compartments in the pore layer input 
            </summary>
            <param name="Compartments"></param>
            <param name="Property"></param>
            <returns>sum</returns>
        </member>
        <member name="M:Models.Soils.WEIRDO.DistributWaterInFlux(System.Int32,System.Double@,System.Int32)">
            <summary>
            Method takes water flowing into a layer and distributes it between the pore compartments in that layer
            </summary>
            <param name="l"></param>
            <param name="InFlux"></param>
            <param name="SPH">Number of time steps in an hour</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.UpdateProfileValues">
            <summary>
            Function to update profile summary values
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetRootLengthDensity">
            <summary>
            Call each time the plant root systems grows to update root distribution parameters in soil layers
            </summary>
        </member>
        <member name="T:Models.Soils.NutrientPatching.PartitionApproachEnum">
            <summary>Different approaches to use for N partitioning between patches.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.PartitionApproachEnum.BasedOnConcentrationAndDelta">
            <summary>Based on concentration and delta.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.PartitionApproachEnum.BasedOnLayerConcentration">
            <summary>Based on concentration only.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.PartitionApproachEnum.BasedOnSoilConcentration">
            <summary>Based on soil concentration.</summary>
        </member>
        <member name="T:Models.Soils.NutrientPatching.AutoAmalgamationApproachEnum">
            <summary>Specifies different types of auto amalgamation of patches.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.AutoAmalgamationApproachEnum.None">
            <summary>No automatic amalgamation.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.AutoAmalgamationApproachEnum.CompareAll">
            <summary>All patches are compared before they are merged.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.AutoAmalgamationApproachEnum.CompareBase">
            <summary>All patches are compared to base first, then merged, then compared again.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.AutoAmalgamationApproachEnum.CompareMerge">
            <summary>Patches are compared and merged at once if deemed equal, then compared to next.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.AutoAmalgamationApproachEnum.CompareAge">
            <summary></summary>
        </member>
        <member name="T:Models.Soils.NutrientPatching.BaseApproachEnum">
            <summary>The implemented approaches to use when defining the base patch.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.BaseApproachEnum.IDBased">
            <summary>The patch with lowest ID (=0) is used as the base.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.BaseApproachEnum.AreaBased">
            <summary>The first patch with the biggest area is used as base.</summary>
        </member>
        <member name="T:Models.Soils.NutrientPatching.INutrientPatchManager">
            <summary>
            This interface defines what a Nutrient Patch Manager does.
            </summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.INutrientPatchManager.MaximumNitrogenAvailableToPlants">
            <summary>The maximum amount of N that is made available to plants in one day (kg/ha/day).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.INutrientPatchManager.NPartitionApproach">
            <summary>The approach used for partitioning the N between patches.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.INutrientPatchManager.AutoAmalgamationApproach">
            <summary>Approach to use when comparing patches for AutoAmalagamation.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.INutrientPatchManager.basePatchApproach">
            <summary>Approach to use when defining the base patch.</summary>
            <remarks>
            This is used to define the patch considered the 'base'. It is only used when comparing patches during
            potential auto-amalgamation (comparison against base are more lax)
            </remarks>
        </member>
        <member name="P:Models.Soils.NutrientPatching.INutrientPatchManager.AllowPatchAmalgamationByAge">
            <summary>Allow force amalgamation of patches based on age?</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.INutrientPatchManager.PatchAgeForForcedMerge">
            <summary>Age of patch at which merging is enforced (years).</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.INutrientPatchManager.Add(Models.Soils.AddSoilCNPatchType)">
            <summary>
            Add a new patch.
            </summary>
            <param name="patch">Details of the patch to add.</param>
        </member>
        <member name="T:Models.Soils.NutrientPatching.NutrientPatch">
            <summary>
            Encapsulates a nutrient patch.
            </summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatch.solutes">
            <summary>Collection of all solutes in this patch.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatch.soilThickness">
            <summary>The maximum amount of N that is made available to plants in one day.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatch.patchManager">
            <summary>The nutrient patch manager.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatch.lignin">
            <summary>The lignin pool from the Nutrient model.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatch.cellulose">
            <summary>The cellulose pool from the Nutrient model.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatch.carbohydrate">
            <summary>The carbohydrate pool from the Nutrient model.</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.#ctor(System.Double[],Models.Soils.NutrientPatching.NutrientPatchManager)">
            <summary>Constructor.</summary>
            <param name="soilThicknesses">Soil thicknesses (mm).</param>
            <param name="nutrientPatchManager">The nutrient patch manager.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.#ctor(Models.Soils.NutrientPatching.NutrientPatch)">
            <summary>Copy constructor.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatch.Nutrient">
            <summary>Nutrient model.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatch.RelativeArea">
            <summary>Relative area of this patch (0-1).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatch.Name">
            <summary>Name of the patch.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatch.CreationDate">
            <summary>Date at which this patch was created.</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.GetSoluteKgHaRelativeArea(System.String)">
            <summary>Get the value of a solute (kg/ha).</summary>
            <param name="name">The name of the solute.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.GetSoluteKgHa(System.String)">
            <summary>Get the value of a solute (kg/ha).</summary>
            <param name="name">The name of the solute.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.SetSoluteKgHa(Models.Soils.Nutrients.SoluteSetterType,System.String,System.Double[])">
            <summary>Set the value of a solute (kg/ha).</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="name">The name of the solute.</param>
            <param name="value">The value to set the solute to.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.AddKgHa(Models.Soils.Nutrients.SoluteSetterType,System.String,System.Double[])">
            <summary>Set the value of a solute (kg/ha).</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="name">The name of the solute.</param>
            <param name="value">The value to set the solute to.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.CalculateActualSOMDecomp">
            <summary>Calculate actual decomposition</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.Add(Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Add a solutes and FOM.
            </summary>
            <param name="StuffToAdd">The instance desribing what to add.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.CalculateSoluteAvailableToPlants(System.Double[])">
            <summary>Calculate the amount of solute made available to plants (kgN/ha).</summary>
            <param name="solute">The solute to convert to plant available.</param>
            <returns>The amount of solute available to the plant.</returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.CalcTotalMineralNInRootZone">
            <summary>
            Computes the amount of NH4 and NO3 in the root zone
            </summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatch.GetSoluteObject(System.String)">
            <summary>Get a solute object under the nutrient model.</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Soils.NutrientPatching.NutrientPatchManager">
            <summary>
            Encapsulates a cohort of Nutrient models i.e. patching.
            </summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatchManager.epsilon">
            <summary>Value to evaluate precision against floating point variables.</summary>
        </member>
        <member name="F:Models.Soils.NutrientPatching.NutrientPatchManager.minimumPatchArea">
            <summary>Minimum allowable relative area for a CNpatch (0-1).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.MaximumNitrogenAvailableToPlants">
            <summary>The maximum amount of N that is made available to plants in one day (kg/ha/day).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NPartitionApproach">
            <summary>The approach used for partitioning the N between patches.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.AutoAmalgamationApproach">
            <summary>Approach to use when comparing patches for AutoAmalagamation.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.basePatchApproach">
            <summary>Approach to use when defining the base patch.</summary>
            <remarks>
            This is used to define the patch considered the 'base'. It is only used when comparing patches during
            potential auto-amalgamation (comparison against base are more lax)
            </remarks>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.AllowPatchAmalgamationByAge">
            <summary>Allow force amalgamation of patches based on age?</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.PatchAgeForForcedMerge">
            <summary>Age of patch at which merging is enforced (years).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.LayerForNPartition">
            <summary>Layer thickness to consider when N partition between patches is BasedOnSoilConcentration (mm).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Inert">
            <summary>The inert pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Microbial">
            <summary>The microbial pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Humic">
            <summary>The humic pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.FOMCellulose">
            <summary>The fresh organic matter cellulose pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.FOMCarbohydrate">
            <summary>The fresh organic matter carbohydrate pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.FOMLignin">
            <summary>The fresh organic matter lignin pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.FOM">
            <summary>The fresh organic matter pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.SurfaceResidue">
            <summary>The fresh organic matter surface residue pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Organic">
            <summary>Soil organic nitrogen (FOM + Microbial + Humic)</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NO3">
            <summary>The NO3 pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NH4">
            <summary>The NH4 pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Urea">
            <summary>The Urea pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NO3ForEachPatch">
            <summary>The NO3 pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NH4ForEachPatch">
            <summary>The NH4 pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.UreaForEachPatch">
            <summary>The Urea pool.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.TotalC">
            <summary>Total C in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.TotalN">
            <summary>Total N in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Catm">
            <summary>Total C lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.Natm">
            <summary>Total N lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.N2Oatm">
            <summary>Total N2O lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.MineralisedN">
            <summary>Total Net N Mineralisation in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.MineralisedNSurfaceResidue">
            <summary>Net N Mineralisation from surface residue</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.DenitrifiedN">
            <summary>Denitrified Nitrogen (N flow from NO3).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NitrifiedN">
            <summary>Nitrified Nitrogen (from NH4 to either NO3 or N2O).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.HydrolysedN">
            <summary>Urea converted to NH4 via hydrolysis.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.MineralN">
            <summary>Total Mineral N in each soil layer</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.FOMCNR(System.Int32)">
            <summary>Carbon to Nitrogen Ratio for Fresh Organic Matter in a given layer</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NumPatches">
            <summary>The number of patches.</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NO3EachPatch">
            <summary>The amount of NO3 in each patch (kg/ha).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.NH4EachPatch">
            <summary>The amount of NH4 in each patch (kg/ha).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.UreaEachPatch">
            <summary>The amount of Urea in each patch (kg/ha).</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.NutrientPatchManager.MineralNEachPatch">
            <summary>The amount of mineral N in each patch (kg/ha).</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.CalculateActualSOMDecomp">
            <summary>Calculate actual decomposition</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.GetSoluteKgha(System.String)">
            <summary>
            Called by solutes to get the value of a solute.
            </summary>
            <param name="name">The name of the solute to get.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.SetSoluteKgha(Models.Soils.Nutrients.SoluteSetterType,System.String,System.Double[])">
            <summary>
            Called by solutes to set the value of a solute.
            </summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="name">The name of the solute to get.</param>
            <param name="value">The value of the solute.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Incorporate fresh organic matter.
            </summary>
            <param name="FOMdata">Amount to incorporate.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.Reset">
            <summary>Reset all pools.</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.Add(Models.Soils.AddSoilCNPatchType)">
            <summary>
            Add a new patch.
            </summary>
            <param name="patch">Details of the patch to add.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.SumNutrientPools(System.Collections.Generic.IEnumerable{Models.Soils.Nutrients.INutrientPool})">
            <summary>
            Sum a list of pools, multiplying them by their respective areas.
            </summary>
            <param name="pools">The list of pools</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.SumSolutes(System.Collections.Generic.IEnumerable{Models.Soils.Nutrients.ISolute})">
            <summary>
            Sum a list of solutes, multiplying them by their respective areas.
            </summary>
            <param name="solutes">The list of solutes</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.SumDoubles(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Sum a list of double values, multiplying them by their respective areas.
            </summary>
            <param name="values">The list of solutes</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.TotalSoluteForEachPatch(System.Collections.Generic.IEnumerable{Models.Soils.Nutrients.ISolute})">
            <summary>
            For each patch, sum all layers of a solute. 
            </summary>
            <param name="solutes">The list of solutes</param>
            <returns>A single total solute for each patch.</returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.SumNutrientPoolsWithoutArea(Models.Soils.Nutrients.INutrientPool[])">
            <summary>Sum nutrient pools without using relative areas.</summary>
            <param name="pools">The pools to sum.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation set up LifeCyclePhases</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.PartitionDelta(System.Double[],System.String,Models.Soils.Nutrients.SoluteSetterType,Models.Soils.NutrientPatching.PartitionApproachEnum)">
            <summary>
            calculate how the dlt's (C and N) are partitioned amongst patches
            </summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="incomingDelta">The dlt to be partioned amongst patches</param>
            <param name="soluteName">The solute or pool that is changing</param>
            <param name="partitionApproach">The type of partition to be used</param>
            <returns>The values of dlt partitioned for each existing patch</returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.AddNewCNPatch(Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Handles the addition of new CNPatches
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.CheckPatchIDs(System.Int32[],System.String[])">
            <summary>
            Check the list of patch names and IDs passed by 'AddSoilCNPatch' event
            </summary>
            <remarks>
            Tasks performed by this method:
             - Verify whether there are replicates in the list given
             - Verify whether the IDs and/or names given correspond to existing patches
             - Eliminate replicates and consolidate lists of IDs and names (merge both)
            </remarks>
            <param name="IDsToCheck">List of IDs or indices of patches</param>
            <param name="NamesToCheck">List of names of patches</param>
            <returns>List of patch IDs (negative if no ID is found)</returns>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.AddStuffToPatches(System.Collections.Generic.List{System.Int32},Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Controls the addition of several variables to the especified patches
            </summary>
            <param name="PatchesToAdd">The list of patches to which the stuff will be added</param>
            <param name="StuffToAdd">The values of the variables to add (supplied as deltas)</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.ClonePatch(System.Int32)">
            <summary>
            Clone an existing patch. That is, creates a new patch (k) based on an existing one (j)
            </summary>
            <param name="j">id of patch to be cloned</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.NutrientPatchManager.DeletePatches(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete patches in the list
            </summary>
            <param name="PatchesToDelete">List of patches to delete</param>
        </member>
        <member name="T:Models.Soils.NutrientPatching.SolutePatch">
            <summary>
            This class used for this nutrient encapsulates the nitrogen within a mineral
            N pool. Child functions provide information on flows of N from it to other
            mineral N pools, or losses from the system.
            </summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.SolutePatch.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.NutrientPatching.SolutePatch.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.SolutePatch.OnCreated">
            <summary>
            Invoked when model is first created.
            </summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.SolutePatch.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.SolutePatch.Reset">
            <summary>
            Set solute to initialisation state
            </summary>
        </member>
        <member name="M:Models.Soils.NutrientPatching.SolutePatch.SetKgHa(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha.</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="value">New values.</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.SolutePatch.AddKgHaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha delta.</summary>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">New delta values</param>
        </member>
        <member name="M:Models.Soils.NutrientPatching.SolutePatch.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Soils.Nutrients.CarbonFlow">
            <summary>
            Encapsulates a carbon and nutrient flow between pools.  This flow is characterised in terms of the rate of flow (fraction of the pool per day).  Carbon loss as CO2 is expressed in terms of the efficiency of C retension within the soil.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.MineralisedN">
            <summary>
            Net N Mineralisation
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.MineralisedP">
            <summary>
            Net N Mineralisation
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.Catm">
            <summary>
            CO2 lost to the atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.destinationNames">
            <summary>
            Name of destination pool
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.destinationFraction">
            <summary>
            Fractions for each destination pool
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.CarbonFlow.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.CarbonFlow.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Get the information on potential residue decomposition - perform daily calculations as part of this.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.CarbonFlow.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Soils.Nutrients.CompositeNutrientPool">
            <summary>
            Encapsulates a collection of nutrient pools and aggregates them
            as a INutrientPool
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.CompositeNutrientPool.#ctor(System.Collections.Generic.IEnumerable{Models.Soils.Nutrients.INutrientPool})">
            <summary>Constructor.</summary>
            <param name="pools">The enumeration of pools to aggregate.</param>
        </member>
        <member name="P:Models.Soils.Nutrients.CompositeNutrientPool.C">
            <summary>Amount of carbon (kg/ha).</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CompositeNutrientPool.N">
            <summary>Amount of nitrogen (kg/ha).</summary>
        </member>
        <member name="T:Models.Soils.Nutrients.INutrient">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Inert">
            <summary>The inert pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Microbial">
            <summary>The microbial pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Humic">
            <summary>The humic pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.FOMCellulose">
            <summary>The fresh organic matter cellulose pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.FOMCarbohydrate">
            <summary>The fresh organic matter carbohydrate pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.FOMLignin">
            <summary>The fresh organic matter lignin pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.FOM">
            <summary>The fresh organic matter pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.SurfaceResidue">
            <summary>The fresh organic matter surface residue pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Organic">
            <summary>Soil organic nitrogen (FOM + Microbial + Humic)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.NO3">
            <summary>The NO3 pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.NH4">
            <summary>The NH4 pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Urea">
            <summary>The Urea pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.TotalC">
            <summary>Total C in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Catm">
            <summary>Total C lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.Natm">
            <summary>Total N lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.N2Oatm">
            <summary>Total N2O lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.MineralisedN">
            <summary>Total Net N Mineralisation in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.MineralisedNSurfaceResidue">
            <summary>Net N Mineralisation from surface residue</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.DenitrifiedN">
            <summary>Denitrified Nitrogen (N flow from NO3).</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.NitrifiedN">
            <summary>Nitrified Nitrogen (from NH4 to either NO3 or N2O).</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.HydrolysedN">
            <summary>Urea converted to NH4 via hydrolysis.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.MineralN">
            <summary>Total Mineral N in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrient.TotalN">
            <summary>Total N in each soil layer</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.INutrient.FOMCNR(System.Int32)">
            <summary>Carbon to Nitrogen Ratio for Fresh Organic Matter for a given layer</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.INutrient.CalculateActualSOMDecomp">
            <summary>
            Calculate actual decomposition
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.INutrient.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Incorporate FOM
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.INutrient.Reset">
            <summary>
            Reset all Pools
            </summary>
        </member>
        <member name="T:Models.Soils.Nutrients.INutrientPool">
            <summary>Interface for a nutrient pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrientPool.C">
            <summary>Amount of carbon (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.INutrientPool.N">
            <summary>Amount of nitrogen (kg/ha)</summary>
        </member>
        <member name="T:Models.Soils.Nutrients.SoluteSetterType">
            <summary>The known types of solute setters.</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.SoluteSetterType.Plant">
            <summary>The setting model is a plant model</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.SoluteSetterType.Soil">
            <summary>The setting model is a soil model</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.SoluteSetterType.Fertiliser">
            <summary>The setting model is a fertiliser model</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.SoluteSetterType.Other">
            <summary>Anything else</summary>
        </member>
        <member name="T:Models.Soils.Nutrients.ISolute">
            <summary>This interface defines what a solute can do.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.ISolute.Name">
            <summary>Name of solute.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.ISolute.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.ISolute.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.ISolute.SetKgHa(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha.</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="M:Models.Soils.Nutrients.ISolute.AddKgHaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha delta.</summary>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">New delta values</param>
        </member>
        <member name="T:Models.Soils.Nutrients.NFlow">
            <summary>
            Encapsulates a nitrogen flow between mineral N pools.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.Value">
            <summary>
            Value of total N flow into destination
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.Natm">
            <summary>
            Value of total loss
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.N2Oatm">
            <summary>
            Value of N2O lost
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.sourceName">
            <summary>
            Name of source pool
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.destinationName">
            <summary>
            Name of destination pool
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.NFlow.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Get the information on potential residue decomposition - perform daily calculations as part of this.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Nutrients.Nutrient">
             <summary>
             The soil nutrient model includes functionality for simulating pools of organmic matter and mineral nitrogen.  The processes for each are described below.
             </summary>
             <structure>
             Soil organic matter is modelled as a series of discrete organic matter pools which are described in terms of their masses of carbon and nutrients. These pools are initialised according to approaches specific to each pool.  Organic matter pools may have carbon flows, such as a decomposition process, associated to them.  These carbon flows are also specific to each pool, are independantly specified, and are described in each case in the documentation for each organic matter pool below.
             
             Mineral nutrient pools (e.g. Nitrate, Ammonium, Urea) are described as solutes within the model.  Each pool captures the mass of the nutrient (e.g. N,P) and they may also contain nutrient flows to describe losses or transformations for that particular compound (e.g. denitrification of nitrate, hydrolysis of urea).
             </structure>
             <pools>
             A nutrient pool class is used to encapsulate the carbon and nitrogen within each soil organic matter pool.  Child functions within these classes provide information for initialisation and flows of C and N to other pools, or losses from the system.
            
             The soil organic matter pools used within the model are described in the following sections in terms of their initialisation and the carbon flows occuring from them.
             </pools>
             <solutes>
             The soil mineral nutrient pools used within the model are described in the following sections in terms of their initialisation and the flows occuring from them.
             </solutes>
        </member>
        <member name="F:Models.Soils.Nutrients.Nutrient.Summary">
            <summary>Summary file Link</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.Nutrient.SurfaceOrganicMatter">
            <summary>The surface organic matter</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.Nutrient.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Inert">
            <summary>The inert pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Microbial">
            <summary>The microbial pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Humic">
            <summary>The humic pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOMCellulose">
            <summary>The fresh organic matter cellulose pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOMCarbohydrate">
            <summary>The fresh organic matter carbohydrate pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOMLignin">
            <summary>The fresh organic matter lignin pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOM">
            <summary>The fresh organic matter pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.SurfaceResidue">
            <summary>The fresh organic matter surface residue pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.NO3">
            <summary>The NO3 pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.NH4">
            <summary>The NH4 pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Urea">
            <summary>The Urea pool.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.DirectedGraphInfo">
            <summary>Get directed graph from model</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.Reset">
            <summary>
            Reset all pools and solutes
            </summary> 
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.TotalC">
            <summary>
            Total C in each soil layer
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Catm">
            <summary>
            Total C lost to the atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Natm">
            <summary>
            Total N lost to the atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.N2Oatm">
            <summary>
            Total N2O lost to the atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.MineralisedN">
            <summary>
            Total Net N Mineralisation in each soil layer
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.MineralisedNSurfaceResidue">
            <summary>Net N Mineralisation from surface residue</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.DenitrifiedN">
            <summary>Denitrified Nitrogen (N flow from NO3).</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.NitrifiedN">
            <summary>Nitrified Nitrogen (from NH4 to either NO3 or N2O).</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.HydrolysedN">
            <summary>Urea converted to NH4 via hydrolysis.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.MineralN">
            <summary>
            Total Mineral N in each soil layer
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.Organic">
            <summary>Soil organic nitrogen (FOM + Microbial + Humic)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.TotalOrganicN">
            <summary>
            Total organic N in each soil layer, organic and mineral
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.TotalN">
            <summary>
            Total N in each soil layer, organic, mineral and nitrogen solutes
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.FOMCNR(System.Int32)">
            <summary>
            Carbon to Nitrogen Ratio for Fresh Organic Matter for a given layer
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Invoked at start of simulation.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.IncorpFOM(Models.Soils.FOMLayerType)">
            <summary>Incorporate the given FOM C and N into each layer</summary>
            <param name="FOMdata">The in fo mdata.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>Incorporate the given FOM C and N into each layer</summary>
            <param name="FOMdata">The in fo mdata.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.OnIncorpFOMPool(Models.Soils.FOMPoolType)">
            <summary>Partition the given FOM C and N into fractions in each layer (FOM pools)</summary>
            <param name="FOMPoolData">The in fom pool data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.CalculateActualSOMDecomp">
            <summary>
            Calculate actual decomposition
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Get the information on potential residue decomposition - perform daily calculations as part of this.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.CalculateDirectedGraph">
            <summary>Calculate / create a directed graph from model</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Soils.Nutrients.NutrientPool">
            <summary>
            A nutrient pool.
            </summary>
        </member>
        <member name="F:Models.Soils.Nutrients.NutrientPool.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.C">
            <summary>Amount of carbon (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.N">
            <summary>Amount of nitrogen (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.P">
            <summary>Amount of phosphorus (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.LayerFraction">
            <summary>
            Fraction of each layer occupied by this pool.
            /// </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.NutrientPool.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.NutrientPool.Reset">
            <summary>
            Set nutrient pool to initialisation state
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.NutrientPool.Add(System.Double[],System.Double[],System.Double[])">
            <summary>
            Add C and N into nutrient pool
            </summary>
            <param name="CAdded"></param>
            <param name="NAdded"></param>
            <param name="PAdded"></param>
        </member>
        <member name="M:Models.Soils.Nutrients.NutrientPool.Document">
            <summary>
            Document the model.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.Soils.Nutrients.PFlow">
            <summary>
            Encapsulates a nitrogen flow between mineral N pools.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.PFlow.Value">
            <summary>
            Value of total P flow into destination
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.PFlow.sourceName">
            <summary>
            Name of source pool
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.PFlow.destinationName">
            <summary>
            Name of destination pool
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.PFlow.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Calculate Flows
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Nutrients.Solute">
            <summary>
            This class used for this nutrient encapsulates the nitrogen within a mineral N pool.
            Child functions provide information on flows of N from it to other mineral N pools,
            or losses from the system.
            </summary>
        </member>
        <member name="F:Models.Soils.Nutrients.Solute.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.#ctor(Models.Soils.Soil,System.String,System.Double[])">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Solute.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Solute.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.Reset">
            <summary>
            Set solute to initialisation state
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.SetKgHa(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha.</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="value">New values.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.AddKgHaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha delta.</summary>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">New delta values</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Soils.Organic">
            <summary>A model for capturing soil organic parameters</summary>
        </member>
        <member name="P:Models.Soils.Organic.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.Organic.FOMCNRatio">
            <summary>Root C:N Ratio</summary>
        </member>
        <member name="P:Models.Soils.Organic.Thickness">
            <summary>Soil layer thickness for each layer (mm)</summary>
        </member>
        <member name="P:Models.Soils.Organic.Carbon">
            <summary>Carbon concentration (Total% 0.1 - 10%)</summary>
        </member>
        <member name="P:Models.Soils.Organic.SoilCNRatio">
            <summary>Carbon:nitrogen ratio.</summary>
        </member>
        <member name="P:Models.Soils.Organic.FBiom">
            <summary>F biom.</summary>
        </member>
        <member name="P:Models.Soils.Organic.FInert">
            <summary>F inert.</summary>
        </member>
        <member name="P:Models.Soils.Organic.FOM">
            <summary>Fresh organic matter</summary>
        </member>
        <member name="P:Models.Soils.Organic.CarbonMetadata">
            <summary>Carbon metadata</summary>
        </member>
        <member name="P:Models.Soils.Organic.FOMMetadata">
            <summary>FOM metadata</summary>
        </member>
        <member name="T:Models.Soils.OutputLayers">
            <summary>
            This class takes soil variables simulated at each of the modelled soil layers and maps them onto a new specified layering.
            The outputs can be used for producing summaries and rearrange outputs to facilitate comparison with observed data.
            </summary>
        </member>
        <member name="F:Models.Soils.OutputLayers.soilPhysicalProperties">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.Soils.OutputLayers.waterBalanceModel">
            <summary>Access the soil water model.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.Thickness">
            <summary>Gets or sets the thickness of each layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.BD">
            <summary>Gets the soil bulk density of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SW">
            <summary>Gets the current soil water content of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SWmm">
            <summary>Gets the current soil water amount of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.PAW">
            <summary>Gets the plant available water amount of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.PAWmm">
            <summary>Gets the plant available water amount of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.LL15">
            <summary>Gets the soil water content at the lower limit of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.LL15mm">
            <summary>Gets the soil water amount at the lower limit of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.DUL">
            <summary>Gets the soil water content at the upper limit of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.DULmm">
            <summary>Gets the soil water amount at the upper limit of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SAT">
            <summary>Gets the soil water content at saturation of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SATmm">
            <summary>Gets the soil water amount at saturation of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.Urea">
            <summary>Gets the soil urea N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.Ureappm">
            <summary>Gets the soil urea N concentration of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.NH4">
            <summary>Gets the soil ammonium N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.NH4ppm">
            <summary>Gets the soil ammonium N concentration of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.NO3">
            <summary>Gets the soil nitrate N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.NO3ppm">
            <summary>Gets the soil nitrate N concentration of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.MineralN">
            <summary>Gets the soil mineral N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.OrganicN">
            <summary>Gets the soil organic N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.FOMN">
            <summary>Gets the soil fresh organic matter N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.MicrobialN">
            <summary>Gets the soil microbial N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.HumicN">
            <summary>Gets the soil total humic N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.InertN">
            <summary>Gets the soil inert humic N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.FOMC">
            <summary>Gets the soil fresh organic matter C content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.MicrobialC">
            <summary>Gets the soil microbial C content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.HumicC">
            <summary>Gets the soil total humic C content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.InertC">
            <summary>Gets the soil inert humic C content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.OrganicC">
            <summary>Gets the soil organic carbon content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.OC">
            <summary>Gets the soil organic carbon concentration of each mapped layer.</summary>
        </member>
        <member name="T:Models.Soils.Phosphorus">
            <summary>
            Model for holding information about the phosphorus model
            </summary>
        </member>
        <member name="P:Models.Soils.Phosphorus.RootCP">
            <summary>Gets or sets the root cp.</summary>
            <value>The root cp.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.RateDissolRock">
            <summary>Gets or sets the rate dissol rock.</summary>
            <value>The rate dissol rock.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.RateLossAvail">
            <summary>Gets or sets the rate loss avail.</summary>
            <value>The rate loss avail.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.SorptionCoeff">
            <summary>Gets or sets the sorption coeff.</summary>
            <value>The sorption coeff.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.LabileP">
            <summary>Gets or sets the labile p.</summary>
            <value>The labile p.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.Sorption">
            <summary>Gets or sets the sorption.</summary>
            <value>The sorption.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.BandedP">
            <summary>Gets or sets the banded p.</summary>
            <value>The banded p.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.RockP">
            <summary>Gets or sets the rock p.</summary>
            <value>The rock p.</value>
        </member>
        <member name="T:Models.Soils.Physical">
            <summary>A model for capturing physical soil parameters</summary>
        </member>
        <member name="P:Models.Soils.Physical.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.Physical.DepthMidPoints">
            <summary>Gets the depth mid points (mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.ThicknessCumulative">
            <summary>Return the soil layer cumulative thicknesses (mm)</summary>
        </member>
        <member name="P:Models.Soils.Physical.Thickness">
            <summary>The soil thickness (mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.ParticleSizeClay">
            <summary>Particle size clay.</summary>
        </member>
        <member name="P:Models.Soils.Physical.ParticleSizeSand">
            <summary>Particle size sand.</summary>
        </member>
        <member name="P:Models.Soils.Physical.ParticleSizeSilt">
            <summary>Particle size silt.</summary>
        </member>
        <member name="P:Models.Soils.Physical.Rocks">
            <summary>Rocks.</summary>
        </member>
        <member name="P:Models.Soils.Physical.Texture">
            <summary>Texture.</summary>
        </member>
        <member name="P:Models.Soils.Physical.BD">
            <summary>Bulk density (g/cc).</summary>
        </member>
        <member name="P:Models.Soils.Physical.AirDry">
            <summary>Air dry - volumetric (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.LL15">
            <summary>Lower limit 15 bar (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.LL15mm">
            <summary>Return lower limit limit at standard thickness. Units: mm</summary>
        </member>
        <member name="P:Models.Soils.Physical.DUL">
            <summary>Drained upper limit (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.DULmm">
            <summary>Drained upper limit (mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.SAT">
            <summary>Saturation (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.SATmm">
            <summary>Saturation (mm).</summary>
        </member>
        <member name="P:Models.Soils.Physical.KS">
            <summary>KS (mm/day).</summary>
        </member>
        <member name="P:Models.Soils.Physical.PAWC">
            <summary>Plant available water CAPACITY (DUL-LL15).</summary>
        </member>
        <member name="P:Models.Soils.Physical.PAWCmm">
            <summary>Plant available water CAPACITY (DUL-LL15).</summary>
        </member>
        <member name="P:Models.Soils.Physical.BDMetadata">
            <summary>Gets or sets the bd metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.AirDryMetadata">
            <summary>Gets or sets the air dry metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.LL15Metadata">
            <summary>Gets or sets the l L15 metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.DULMetadata">
            <summary>Gets or sets the dul metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.SATMetadata">
            <summary>Gets or sets the sat metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.KSMetadata">
            <summary>Gets or sets the ks metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.RocksMetadata">
            <summary>Gets or sets the rocks metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.TextureMetadata">
            <summary>Gets or sets the texture metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.ParticleSizeSandMetadata">
            <summary>Particle size sand metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.ParticleSizeSiltMetadata">
            <summary>Particle size silt metadata.</summary>
        </member>
        <member name="P:Models.Soils.Physical.ParticleSizeClayMetadata">
            <summary>Particle size clay metadata.</summary>
        </member>
        <member name="T:Models.Soils.Sample">
            <summary>The class represents a soil sample.</summary>
        </member>
        <member name="M:Models.Soils.Sample.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:Models.Soils.Sample.SWUnitsEnum">
            <summary>
            An enumeration for specifying soil water units
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.SWUnitsEnum.Volumetric">
            <summary>
            Volumetric mm/mm
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.SWUnitsEnum.Gravimetric">
            <summary>
            Gravimetric soil water
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.SWUnitsEnum.mm">
            <summary>
            mm of water
            </summary>
        </member>
        <member name="T:Models.Soils.Sample.OCSampleUnitsEnum">
            <summary>
            An enumeration for specifying organic carbon units
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.OCSampleUnitsEnum.Total">
            <summary>
            Organic carbon as total percent
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.OCSampleUnitsEnum.WalkleyBlack">
            <summary>
            Organic carbon as walkley black percent
            </summary>
        </member>
        <member name="T:Models.Soils.Sample.PHSampleUnitsEnum">
            <summary>
            An enumeration for specifying PH units
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.PHSampleUnitsEnum.Water">
            <summary>
            PH as water method
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.PHSampleUnitsEnum.CaCl2">
            <summary>
            PH as Calcium chloride method
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.Sample.Thickness">
            <summary>Thickness</summary>
        </member>
        <member name="P:Models.Soils.Sample.NO3">
            <summary>Nitrate NO3.</summary>
        </member>
        <member name="P:Models.Soils.Sample.NH4">
            <summary>Ammonia NH4</summary>
        </member>
        <member name="P:Models.Soils.Sample.LabileP">
            <summary>
            Gets or sets Labile P (mg/kg)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.UnavailableP">
            <summary>
            Gets or sets Unavailable P (mg/kg)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SW">
            <summary>
            Gets or sets soil water. Units will be as specified by SWUnits
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OC">
            <summary>
            Gets or sets organic carbon. Units will be as specified by OCUnits
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.EC">
            <summary>
            Gets or sets electrical conductivity (1:5 dS/m)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.CL">
            <summary>
            Gets or sets chloride (mg/kg)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.ESP">
            <summary>
            Gets or sets ESP (%)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PH">
            <summary>
            Gets or sets PH. Units will be as specified by PHUnits
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWUnits">
            <summary>
            Gets or sets the units of SW
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OCUnits">
            <summary>
            Gets or sets the units of organic carbon
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PHUnits">
            <summary>
            Gets or sets the units of P
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWmm">
            <summary>
            Gets SW. Units: mm/mm.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWGravimetric">
            <summary>
            Gets SW. Units: kg/kg.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWVolumetric">
            <summary>
            Gets SW. Units: mm/mm.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OCTotal">
            <summary>
            Gets organic carbon. Units: Total %
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OCWalkleyBlack">
            <summary>
            Gets organic carbon. Units: WalkleyBlack %
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PHWater">
            <summary>
            Gets PH. Units: (1:5 water)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PHCaCl2">
            <summary>
            Gets PH. Units: (1:5 water)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.ON">
            <summary>Organic nitrogen. Units: %</summary>
        </member>
        <member name="P:Models.Soils.Sample.OCNR">
            <summary>Organic carbon:nitrogen ratio</summary>
        </member>
        <member name="P:Models.Soils.Sample.Soil">
            <summary>
            Gets the soil associated with this sample
            </summary>
        </member>
        <member name="T:Models.Soils.Soil">
            <summary>
            The soil class encapsulates a soil characterisation and 0 or more soil samples.
            the methods in this class that return double[] always return using the
            "Standard layer structure" i.e. the layer structure as defined by the Water child object.
            method. Mapping will occur to achieve this if necessary.
            To obtain the "raw", unmapped, values use the child classes e.g. SoilWater, Analysis and Sample.
            </summary>
        </member>
        <member name="P:Models.Soils.Soil.RecordNumber">
            <summary>Gets or sets the record number.</summary>
        </member>
        <member name="P:Models.Soils.Soil.ASCOrder">
            <summary>Gets or sets the asc order.</summary>
        </member>
        <member name="P:Models.Soils.Soil.ASCSubOrder">
            <summary>Gets or sets the asc sub order.</summary>
        </member>
        <member name="P:Models.Soils.Soil.SoilType">
            <summary>Gets or sets the type of the soil.</summary>
        </member>
        <member name="P:Models.Soils.Soil.LocalName">
            <summary>Gets or sets the name of the local.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Site">
            <summary>Gets or sets the site.</summary>
        </member>
        <member name="P:Models.Soils.Soil.NearestTown">
            <summary>Gets or sets the nearest town.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Region">
            <summary>Gets or sets the region.</summary>
        </member>
        <member name="P:Models.Soils.Soil.State">
            <summary>Gets or sets the state.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Country">
            <summary>Gets or sets the country.</summary>
        </member>
        <member name="P:Models.Soils.Soil.NaturalVegetation">
            <summary>Gets or sets the natural vegetation.</summary>
        </member>
        <member name="P:Models.Soils.Soil.ApsoilNumber">
            <summary>Gets or sets the apsoil number.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Latitude">
            <summary>Gets or sets the latitude.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Longitude">
            <summary>Gets or sets the longitude.</summary>
        </member>
        <member name="P:Models.Soils.Soil.LocationAccuracy">
            <summary>Gets or sets the location accuracy.</summary>
        </member>
        <member name="P:Models.Soils.Soil.YearOfSampling">
            <summary>Gets or sets the year of sampling.</summary>
        </member>
        <member name="P:Models.Soils.Soil.DataSource">
            <summary>Gets or sets the data source.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Comments">
            <summary>Gets or sets the comments.</summary>
        </member>
        <member name="M:Models.Soils.Soil.OnDoInitialSummary(System.Object,System.EventArgs)">
            <summary>Event handler to perform error checks at start of simulation.</summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:Models.Soils.SoilCrop">
            <summary>A soil crop parameterization class.</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.LL">
            <summary>Crop lower limit</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.KL">
            <summary>The KL value.</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.XF">
            <summary>The exploration factor</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.LLMetadata">
            <summary>The metadata for crop lower limit</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.KLMetadata">
            <summary>The metadata for KL</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.XFMetadata">
            <summary>The meta data for the exploration factor</summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.PAWC">
            <summary>Return the plant available water CAPACITY at standard thickness.</summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen">
            <remarks>
            This partial class contains part of the SoilCN patch, with variables and general processes
            </remarks>
            <remarks>
            This partial class contains part of the SoilCN patch, with most of the processes of SoilNitrogen
            </remarks>
            <remarks>
            This partial class contains the various methods to handle patches
            </remarks>
             <summary>
             Computes the soil C and N processes
             </summary>
             <remarks>
             Implements internal 'patches', which are replicates of state variables and processes used for simulating soil variability
            
             Based on a more-or-less direct port of the Fortran SoilN model  -  Ported by Eric Zurcher Sept/Oct 2010
             Code tidied up by RCichota initially in Aug/Sep-2012 (updates in Feb-Apr/2014, Apr/2015, and Mar-Apr/2016)
             Full patch capability ported into ApsimX by Russel McAuliffe in June/2017, tidied up by RCichota (July/2017)
             </remarks>
            <remarks>
            This partial class contains most of the variables and input properties of SoilNitrogen
            </remarks>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.soilCNPatch">
            <summary>
            Class containing all the state variables and specific soil C and N processes
            </summary>
            <remarks>
            This can instanciated many times, used for describing soil variability
            </remarks>
            <remarks>
            This partial class contains most of the soil processes of SoilNitrogen
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.#ctor(Models.Soils.SoilNitrogen)">
            <summary>The soilCNPatch constructor</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.PatchName">
            <summary>
            Name of this patch
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.RelativeArea">
            <summary>
            Relative area of this patch (0-1)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.CreationDate">
            <summary>
            Date at which this patch was created
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.g">
            <summary>
            Reference to main SoilNitrogen Class - for accessing the parameters and input variables
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea">
            <summary>Amount of soil urea nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4">
            <summary>Amount of soil ammonium nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3">
            <summary>Amount of soil nitrate nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh3">
            <summary>Amount of soil ammonia nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no2">
            <summary>Amount of soil nitrite nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.totalMineralNInRootZone">
            <summary>
            Amount of NH4 plus NO3 in the root zone (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.fom_c">
            <summary>
            Amount of C for each soil layer in each FOM pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.fom_n">
            <summary>
            Nitrogen amount in FOM (per pool)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.biom_c">
            <summary>
            Amount of C for each soil layer in soil m. biomass pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.waterSoluble_c">
            <summary>
            Amount of water soluble C for each soil layer (for denitrification)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.biom_n">
            <summary>
            Nitrogen amount in soil m. biomass
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.hum_c">
            <summary>
            Amount of C for each soil layer in soil a. humus pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.hum_n">
            <summary>
            Nitrogen amount in soil humus
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.inert_c">
            <summary>
            Amount of C for each soil layer in soil inert humus pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.inert_n">
            <summary>
            Nitrogen amount in soil inert humus
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.pH">
            <summary>Soil pH value</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_urea">
            <summary>
            Variations in urea as given by another component
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero (no changes)
             - If values are supplied in excess, these will ignored
             - The actual amounts are also checked for negative values
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_nh4">
            <summary>
            Variations in nh4 as given by another component
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero (no changes)
             - If values are supplied in excess, these will ignored
             - The actual amounts are also checked for negative values
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_no3">
            <summary>
            Variations in no3 as given by another component
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero (no changes)
             - If values are supplied in excess, these will ignored
             - The actual amounts are also checked for negative values
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_fom_c">
            <summary>
            Variation in soil FOM C as sent by another component
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_fom_n">
            <summary>
            Variation in soil FOM N as sent by another component
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.nit_tot">
            <summary>
            Total N in soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.nh4AvailableToPlants">
            <summary>
            Amount of soil ammonium nitrogen made available to plants (kgN/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.no3AvailableToPlants">
            <summary>
            Amount of soil nitrate nitrogen made available to plants (kgN/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_loss_in_sed">
            <summary>
            N carried out in sediment via runoff/erosion
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_res_nh4_min">
            <summary>
            Net NH4 mineralisation from residue decomposition
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_res_no3_min">
            <summary>
            Net NO3 mineralisation from residue decomposition
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_fom">
            <summary>
            Amount of N converted from each FOM pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_fom_to_min">
            <summary>
            Net FOM N mineralised (negative for immobilisation)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_hum_to_min">
            <summary>
            Net N mineralised for humic pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_biom_to_min">
            <summary>
            Net N mineralised from m. biomass pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_urea_hydrolysis">
            <summary>
            Nitrogen coverted by hydrolisys (urea into NH4)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_nitrification">
            <summary>
            Nitrogen coverted by nitrification (NH4 into NO3)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n2o_nitrif">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_no3_dnit">
            <summary>
            NO3 N denitrified
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n2o_dnit">
            <summary>
            N2O N produced during denitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_codenitrification">
            <summary>
            Nitrogen coverted by codenitrification (N2+N2O)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n2o_codenit">
            <summary>
            N2O N produced during codenitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_deficit_immob">
            <summary>
            Excess N required above NH4 supply (for immobilisation)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_flow">
            <summary>
            Amount of urea changed by the soil water module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_flow">
            <summary>
            Amount of NH4 changed by the soil water module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_flow">
            <summary>
            Amount of NO3 changed by the soil water module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_uptake">
            <summary>
            Amount of urea taken by any plant module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_uptake">
            <summary>
            Amount of NH4 taken by any plant module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_uptake">
            <summary>
            Amount of NO3 taken by any plant module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_fertiliser">
            <summary>
            Amount of urea added by the fertiliser module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_fertiliser">
            <summary>
            Amount of NH4 added by the fertiliser module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_fertiliser">
            <summary>
            Amount of NO3 added by the fertiliser module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_ChangedOther">
            <summary>
            Amount of urea changed by any other module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_ChangedOther">
            <summary>
            Amount of NH4 changed by any other module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_ChangedOther">
            <summary>
            Amount of NO3 changed by any other module
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.carbon_tot">
            <summary>
            Total carbon amount in the soil
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_loss_in_sed">
            <summary>
            Carbon loss in sediment, via runoff/erosion
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_fom_to_hum">
            <summary>
            Amount of C from each FOM pool converted into humus
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_fom_to_biom">
            <summary>
            Amount of C from each FOM pool converted into m. biomass
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_fom_to_atm">
            <summary>
            Amount of C from each FOM pool lost to the atmosphere
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_hum_to_biom">
            <summary>
            Humic C converted to biomass
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_hum_to_atm">
            <summary>
            Humic C lost to atmosphere
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_biom_to_hum">
            <summary>
            Biomass C converted to humic
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_biom_to_atm">
            <summary>
            Biomass C lost to atmosphere
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_res_to_biom">
            <summary>
            Carbon from residues converted to biomass (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_res_to_hum">
            <summary>
            Carbon from residues converted to humus (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_res_to_atm">
            <summary>
            Carbon from residues lost to atmosphere during decomposition (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.co2_atm">
            <summary>
            Total CO2 amount produced today
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.soilp_dlt_org_p">
            <summary>
            amount of P coverted by residue mineralisation
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_decomp">
            <summary>
            Actual residue C decomposition (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_decomp">
            <summary>
            Actual residue N decomposition (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.SurfOMActualDecomposition">
            <summary>
            The info with actual residue decomposition
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialC">
            <summary>
            Total C content at the beginning of the day
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialN">
            <summary>
            Total N content at the beginning of the day
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialNH4">
            <summary>
            Amount of  N as NH4 at the beginning of the day (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialNO3">
            <summary>
            Amount of  N as NO3 at the beginning of the day (kg/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CalcTotalMineralNInRootZone">
            <summary>
            Computes the amount of NH4 and NO3 in the root zone
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ResizeLayeredVariables(System.Int32)">
            <summary>
            Sets the size of arrays (with nLayers)
            </summary>
            <remarks>
            This is used during initialisation and whenever the soil profile changes (thus not often at all)
            </remarks>
            <param name="nLayers">The number of layers</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ClearDeltaVariables">
            <summary>
            Clear (zero out) the values of variables storing deltas
            </summary>
            <remarks>
            This is used to zero out the variables that need reseting every day, those that are not necessarily computed everyday
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.StoreStatus">
            <summary>
            Store today's initial N amounts
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.PackActualResidueDecomposition">
            <summary>
            Gather the information about actual residue decomposition, to be sent back to surface OM
            </summary>
            <remarks>
            Currently P is not being computed by SoilNitrogen, so the corresponding variables are set to zero here 
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CheckVariables">
            <summary>
            Check that the values of variables are ok
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.DecomposeResidues">
            <summary>
            Calculate rate of nitrogen mineralisation/immobilisation of surface residues
            </summary>
            <remarks>
            This will test to see whether adequate mineral nitrogen is available to sustain potential rate of decomposition of
            surface residues, which was somputed by SurfaceOM. It aslo calculates net rate of nitrogen mineralisation/immobilisation
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertSoilOM">
            <summary>
            Check and compute the mineralisation/immobilisation processes for each soil OM
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.MineraliseHumus(System.Int32)">
            <summary>
            Calculate the transformations of the the soil humic pool, mineralisation (+ve) or immobilisation (-ve)
            </summary>
            <remarks>
            It is assumed that the inert_C component of the humic pool is not subject to mineralisation
            some constants have different values when there's a pond, as anaerobic conditions dominate
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.MineraliseMBiomass(System.Int32)">
            <summary>
            Calculate the transformations of the soil biomass pool, mineralisation (+ve) or immobilisation (-ve)
            </summary>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.DecomposeFOM(System.Int32)">
            <summary>
            Calculate the decomposition of the soil Fresh OM, mineralisation (+ve) or immobilisation (-ve)
            </summary>
            <remarks>
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertUrea">
            <summary>
            Check and compute the amount of urea converted to NH4 via hydrolysis
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertAmmonium">
            <summary>
            Check and compute the amount of NH4 converted to NO3 via nitrification
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertNitrate">
            <summary>
            Check and compute the amount of NO3 converted to gas via dinitrification
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.UreaHydrolysis(System.Int32)">
            <summary>
            Calculate the amount of urea converted to NH4 via hydrolysis (kgN/ha)
            </summary>
            <remarks>
            - very small amounts of urea are hydrolysed promptly, regardless the hydrolysis settings
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from urea into NH4</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Nitrification(System.Int32)">
            <summary>
            Calculate the amount of NH4 converted to NO3 via nitrification
            </summary>
            <remarks>
            - This routine is much simplified from original CERES code
            - pH effect on nitrification is not used as pH is not simulated
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NH4 into NO3</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.N2OProducedDuringNitrification(System.Int32)">
            <summary>
            Calculate the amount of N2O produced during nitrification
            </summary>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>delta N coverted into N2O during nitrification</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Denitrification(System.Int32)">
            <summary>
            Calculate amount of NO3 transformed via denitrification
            </summary>
            <remarks>
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>delta N coverted from NO3 into gaseous forms</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Denitrification_Nratio(System.Int32)">
            <summary>
            Calculate the N2 to N2O ratio during denitrification
            </summary>
            <remarks>
            parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>The ratio between N2 and N2O (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Nitritation(System.Int32)">
            <summary>
            Calculate the amount of NH4 converted to NO2 via nitritation
            </summary>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NH4 into NO2</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Nitratation(System.Int32)">
            <summary>
            Calculate the amount of NO2 converted to NO3 via nitratation
            </summary>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NO2 into NO3</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.N2OProducedDuringNitritation(System.Double,System.Int32)">
            <summary>
            Calculate the amount of N2O produced during nitritation
            </summary>
            <param name="deltaNH3Oxidation">the deltaNH3Oxidation</param>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NH2OH into N2O</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Codenitrification(System.Int32)">
            <summary>
            Calculate amount of gaseous N produced via co-denitrification
            </summary>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>delta N coverted into gaseous forms</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CodenitrificationN2Fraction(System.Int32)">
            <summary>
            Calculate the N2 fraction during codenitrification
            </summary>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>The fraction of N2 (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.SoilTempFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BentStickData)">
            <summary>
            Calculate a temperature factor (0-1) for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>Temperature limiting factor (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.SoilMoistFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BrokenStickData)">
            <summary>
            Calculate a soil moist factor (0-1) for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>Soil moisture limiting factor (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.WaterFilledPoreSpaceFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BrokenStickData)">
            <summary>
            Calculate a water filled pore space factor for denitrification processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>limiting factor due to water filled pore space (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.SoilpHFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BrokenStickData)">
            <summary>
            Calculate a pH factor for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>Soil pH limiting factor (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CNratioFactor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculate a C:N ratio factor for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="OptCN">The optimum CN ration, below which there is no limitations</param>
            <param name="rateCN">A rate factor to increase limitation as function of increasing CN ratio</param>
            <returns>The CN ratio limiting factor</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AddNewCNPatch(Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Handles the addition of new CNPatches
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.ClonePatch(System.Int32)">
            <summary>
            Clone an existing patch. That is, creates a new patch (k) based on an existing one (j)
            </summary>
            <param name="j">id of patch to be cloned</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckPatchAutoAmalgamation">
            <summary>
            Check patch state, get the diffs between them, and merge them if possible
            </summary>
            <remarks>
            We're testing three different ways to compare/merge patches:
             - CompareAll: All patches are compared to each other before they are merged
             - CompareBase: All patches are compare to base first, then merged, then compared again
             - CompareMerge: Patches are compare and merged at once if deemed equal, then compare to next
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckPatchAgeAmalgamation">
            <summary>
            Check patch age and merge them if patches are old
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AmalgamatePatches(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Controls the merging of a list of patches into a single one
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.DeletePatches(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete patches in the list
            </summary>
            <param name="PatchesToDelete">List of patches to delete</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CopyCNValuesToPatch(System.Int32,System.Int32,System.Double)">
            <summary>
            Copy the state variables from one patch (j) to another one (k), using a multiplying factor
            </summary>
            <param name="k">The id of patch where values are copied to</param>
            <param name="j">The id of patch where values are copied from</param>
            <param name="MultiplyingFactor">A multiplying factor (optional)</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.MergeCNValues(System.Int32,System.Int32)">
            <summary>
            Merge the state variables from one patch (j) to another one (k), include area
            </summary>
            <param name="k">The id of patch where values are copied to</param>
            <param name="j">The id of patch where values are copied from</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AddStuffToPatches(System.Collections.Generic.List{System.Int32},Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Controls the addition of several variables to the especified patches
            </summary>
            <param name="PatchesToAdd">The list of patches to which the stuff will be added</param>
            <param name="StuffToAdd">The values of the variables to add (supplied as deltas)</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.PatchesAreEqual(System.Int32,System.Int32)">
            <summary>
            Checks whether two patches can be considered equal
            </summary>
            <param name="k">Patch used as reference</param>
            <param name="j">Patch being compared to reference</param>
            <returns>TRUE if patches are similar enough, FALSE otherwise</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.TestDelta(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Check whether a delta value can be considered 'non-significant'
            </summary>
            <param name="deltaValue">the value to be tested</param>
            <param name="TotalValueBase">the magnitude of the value being tested</param>
            <param name="relativeDiffFactor">the value of the maximum relative delta</param>
            <param name="absoluteDiffFactor">the value of the maximum absolute delta</param>
            <param name="AdjustFactor">a factor to adjust the DiffFactors</param>
            <returns>an integer, 1 if the the deltaValue is non-significant or 0 otherwise</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckPatchIDs(System.Int32[],System.String[])">
            <summary>
            Check the list of patch names and IDs passed by 'AddSoilCNPatch' event
            </summary>
            <remarks>
            Tasks performed by this method:
             - Verify whether there are replicates in the list given
             - Verify whether the IDs and/or names given correspond to existing patches
             - Eliminate replicates and consolidate lists of IDs and names (merge both)
            </remarks>
            <param name="IDsToCheck">List of IDs or indices of patches</param>
            <param name="NamesToCheck">List of names of patches</param>
            <returns>List of patch IDs (negative if no ID is found)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.partitionDelta(System.Double[],System.String,Models.Soils.NutrientPatching.PartitionApproachEnum)">
            <summary>
            calculate how the dlt's (C and N) are partitioned amongst patches
            </summary>
            <param name="incomingDelta">The dlt to be partioned amongst patches</param>
            <param name="SoluteName">The solute or pool that is changing</param>
            <param name="PartitionType">The type of partition to be used</param>
            <returns>The values of dlt partitioned for each existing patch</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.#ctor">
            <summary>Initialises a new instance of the <see cref="T:Models.Soils.SoilNitrogen"/> class.</summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.ExternalMassFlowDelegate">
            <summary>
            Event to communicate other modules of C and/or N changes to/from outside the simulation
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="E:Models.Soils.SoilNitrogen.ExternalMassFlow">
            <summary>Occurs when [external mass flow].</summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.SurfaceOrganicMatterDecompDelegate">
            <summary>
            Event to comunicate other modules (SurfaceOM) that residues have been decomposed
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.Reset">
            <summary>Reset the state values to those set during the initialisation</summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckParameters">
            <summary>
            Checks general initialisation parameters, and let user know of some settings
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckInitialVariables">
            <summary>
            Checks whether initial values for OM and mineral N were given and make sure all layers have valid values
            </summary>
            <remarks>
            Initial OC values are mandatory, but not for all layers. Zero is assumed for layers not set.
            Initial values for mineral N are optional, assume zero if not given
            The inital FOM values are given as a total amount which is distributed using an exponential function.
            In this procedure the fraction of total FOM that goes in each layer is also computed
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetInitialValues">
            <summary>
            Performs the initial setup and calculations
            </summary>
            <remarks>
            This procedure is also used onReset
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.ResizeLayeredVariables(System.Int32)">
            <summary>
            Sets the size of arrays (with nLayers)
            </summary>
            <remarks>
            This is used during initialisation and whenever the soil profile changes (thus not often at all)
            </remarks>
            <param name="nLayers">The number of layers</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.ClearDeltaVariables">
            <summary>
            Clear (zero out) the values of variables storing deltas
            </summary>
            <remarks>
            This is used to zero out the variables that need resetting every day, those that are not necessarily computed everyday
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.StoreStatus">
            <summary>
            Store today's initial N amounts
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SendDeltaState">
            <summary>
            Calculates variations in C an N, and publishes MassFlows to APSIM
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Sets the procedures for the beginning of each time-step
            </summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Sets the procedures for the main phase of each time-step
            </summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnDoUpdate(System.Object,System.EventArgs)">
            <summary>Stes the procedures for the end of each time-step</summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>Check whether patch amalgamation by age is allowed (done on a monthly basis)</summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.EvaluateProcesses">
            <summary>
            Performs the soil C and N balance processes, at APSIM timestep.
            </summary>
            <remarks>
            The processes considered, in order, are:
             - Decomposition of surface residues
             - Urea hydrolysis
             - Denitrification + N2O production
             - SOM mineralisation (humus then m. biomass) + decomposition of FOM
             - Nitrification + N2O production
            Note: potential surface organic matter decomposition is given by SurfaceOM module, only N balance is considered here
             If there is a pond then surfaceOM is inactive, the decomposition of OM is done wholly by the pond module
             Also, different parameters are used for some processes when pond is active
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnPotentialResidueDecompositionCalculated(Models.Soils.SurfaceOrganicMatterDecompType)">
            <summary>
            Passes the information about the potential decomposition of surface residues
            </summary>
            <remarks>
            This information is passed by a residue/SurfaceOM module
            </remarks>
            <param name="SurfaceOrganicMatterDecomp">Data about the potential decomposition of each residue type on soil surface</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculateActualSOMDecomp">
            <summary>
            Sends back to SurfaceOM the information about residue decomposition
            </summary>
            <remarks>
            Potential decomposition was gathered early on from the surfaceOM module. SoilNitrogen evaluated whether the 
            conditions (C-N balance) allowed the decomposition to happen, and made the changes in the soil accordingly.
            Now the actual decomposition rate for each of the residues is sent back to SurfaceOM.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Passes the instructions to incorporate FOM to the soil - simple FOM
            </summary>
            <remarks>
            The use of this events is to be avoided, one should use the method IncorporateFOM
            </remarks>
            <param name="inFOMdata">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnIncorpFOMPool(Models.Soils.FOMPoolType)">
            <summary>
            Passes the instructions to incorporate FOM to the soil - FOM pools
            </summary>
            <remarks>
            In this event, the FOM amount is given already partitioned by pool
            </remarks>
            <param name="inFOMPoolData">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Gets the data and forward instructions to incorporate FOM to the soil - simple FOM
            </summary>
            <remarks>
            The data given here contains FOM as a single amount, not split into pools.
            This will be partitioned here based on the given fom_type (or default if not given).
            The values for C as well as N (or CN ratio) must be supplied or the action is not performed.
            Both C an N are partitioned equally, thus the CN ratios of all pools are assumed equal.
            If both N and CN ratio are given, the valu of CN ratio is used.
            </remarks>
            <param name="inFOMdata">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.DoIncorpFOM(Models.Soils.FOMPoolType)">
            <summary>
            Gets the data and forward instructions to incorporate FOM to the soil - FOM pools
            </summary>
            <remarks>
            In this event, the FOM amount is given already partitioned into pools
            The values for C as well as N must be supplied or the action is not performed.
            </remarks>
            <param name="inFOMData">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.IncorporateFOM(Models.Soils.FOMPoolType)">
            <summary>
            Gets the data about incoming FOM, add to the patch's FOM pools
            </summary>
            <remarks>
            The FOM amount is given already partitioned by pool
            </remarks>
            <param name="FOMPoolData"></param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNitrogenChanged(Models.Soils.NitrogenChangedType)">
            <summary>Gets the changes in mineral N made by other modules</summary>
            <param name="NitrogenChanges">The nitrogen changes.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnNitrogenChanged(Models.Soils.NitrogenChangedType)">
             <summary>
             Passes the information about changes in mineral N made by other modules
             </summary>
             <remarks>
             These values will be passed to each existing patch. Generally the values are passed as they come,
              however, if the deltas come from a soil (i.e. leaching) or plant (i.e. uptake) then the values should
              be handled (partioned).  This will be done based on soil N concentration
             </remarks>
             <param name="NitrogenChanges">The variation (delta) for each mineral N form</param>
            
        </member>
        <member name="M:Models.Soils.SoilNitrogen.Add(Models.Soils.AddSoilCNPatchType)">
            <summary>
            Passes and handles the information about new patch and add it to patch list
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnAddSoilCNPatchwithFOM(Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Passes and handles the information about new patch and add it to patch list
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnMergeSoilCNPatch(Models.Soils.MergeSoilCNPatchType)">
            <summary>
            Passes the list of patches that will be merged into one, as defined by user
            </summary>
            <param name="MergeCNPatch">The list of CNPatches to merge</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SendExternalMassFlowC(System.Double)">
            <summary>
            Comunicate other components that C amount in the soil has changed
            </summary>
            <param name="dltC">C changes</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SendExternalMassFlowN(System.Double)">
            <summary>
            Comunicate other components that N amount in the soil has changed
            </summary>
            <param name="dltN">N changes</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckNegativeValues(System.Double@,System.Int32,System.String,System.String)">
            <summary>
            Checks whether the variable is significantly negative, considering thresholds
            </summary>
            <remarks>
            Three levels are considered when analying a negative value, these are defined by the warning and the fatal threshold value:
             (1) If the variable is negative, but the value is really small (in absolute terms) than the deviation is considered irrelevant;
             (2) If the value of the variable is negative and greater than the warning threshold, then a warning message is given;
             (3) If the variable value is negative and greater than the fatal threshold, then a fatal error is raised and the calculation stops.
            In any case the value any negative value is reset to zero;
            </remarks>
            <param name="TheValue">Reference to the variable being tested</param>
            <param name="layer">The layer to which the variable belongs to</param>
            <param name="VariableName">The name of the variable</param>
            <param name="MethodName">The name of the method calling the test</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.FractionLayer(System.Double)">
            <summary>
            Computes the fraction of each layer that is between the surface and a given depth
            </summary>
            <param name="maxDepth">The depth down to which the fractions are computed</param>
            <returns>An array with the fraction (0-1) of each layer that is between the surface and maxDepth</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.getCumulativeIndex(System.Double,System.Double[])">
            <summary>
            Find the index at which the cumulative amount is equal or greater than a given value
            </summary>
            <param name="sumTarget">The target value being sought</param>
            <param name="anArray">The array to analyse</param>
            <returns>The index of the array item at which the sum is equal or greater than the target</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.hasSignificantValues(System.Double[],System.Double)">
            <summary>
            Check whether there is at least one considerable/significant value in the array
            </summary>
            <param name="anArray">The array to analyse</param>
            <param name="MinValue">The minimum considerable value</param>
            <returns>True if there is any value greater than the minimum, false otherwise</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SumDoubleArray(System.Double[])">
            <summary>
            Calculate the sum of all values of an array of doubles
            </summary>
            <param name="anArray">The array of values</param>
            <returns>The sum</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.hasValues(System.Double[],System.Double)">
            <summary>Check whether there is any considerable values in the array</summary>
            <param name="anArray">The array to analyse</param>
            <param name="Lowerue">The minimum considerable value</param>
            <returns>True if there is any value greater than the minimum, false otherwise</returns>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Clock">
            <summary>Link to APSIM's Clock (time information).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.MetFile">
            <summary>Link to APSIM's WeatherFile (weather data).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.mySummary">
            <summary>Link to APSIM Summary (logs the messages raised during model run).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SurfaceOrganicMatter">
            <summary>Link to the surface organic matter.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.organic">
            <summary>Link to the soil organic matter.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.initial">
            <summary>Link to the initial sample.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Soil">
            <summary>Link to the soil.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.waterBalance">
            <summary>The water balance model</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SoilNParameterSet">
            <summary>
            Soil parameterisation set to use.
            </summary>
            <remarks>
            Used to determine which node of xml file will be used to overwrite some [Param]'s
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.usingNewNitrification">
            <summary>
            Flag for whether routines for nitrification and codenitrification are to be used (ignore old nitrification).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UseCodenitrification">
            <summary>
            Gets or sets flag for whether routines for codenitrification are to be used (yes/no).
            </summary>
            <remarks>
            When 'yes', nitrification is computed using nitritation + nitratation, and codenitrification is also computed
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AllowProfileReduction">
            <summary>
            Gets or sets flag for whether soil profile reduction is allowed (yes/no).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.allowOrganicSolutes">
            <summary>
            Gests or sets flag for whether organic solutes are to be simulated (yes/no).
            </summary>
            <remarks>
            It should always be false, as organic solutes are not implemented yet
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.DefaultCarbonInSoilOM">
            <summary>
            Factor to convert organic carbon to organic matter (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.DefaultCarbonInFOM">
            <summary>
            Default carbon weight fraction in FOM (g/g).
            </summary>
            <remarks>
            Used to convert FOM amount into fom_c
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.DefaultInitialpH">
            <summary>
            Default initial pH, used case no pH is initialised in model.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.WarningNegativeThreshold">
            <summary>
            Threshold for raising a warning due to small negative values.
            </summary>
            <remarks>
            Any value between this and the FatalNegativeThreshold will be zeroed, but a warning message
            is raised, values smaller than this threshold will be zeroed without any message
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FatalNegativeThreshold">
            <summary>
            Threshold for a fatal error due to negative values (loss of mass balance).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.HumusCNr">
            <summary>
            The C:N ratio of the soil humus (active + inert).
            </summary>
            <remarks>
            Remains fixed throughout the simulation
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MBiomassCNr">
            <summary>
            The C:N ratio of soil microbial biomass.
            </summary>
            <remarks>
            Remains fixed throughout the simulation
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FBiom">
            <summary>
            Proportion of biomass-C in the initial mineralisable humic-C (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FInert">
            <summary>
            Proportion of the initial total soil C that is inert, cannot be mineralised (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InitialFOMWt">
            <summary>
            Initial amount of FOM in the soil (kgDM/ha).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InitialFOMDepth">
            <summary>
            Initial depth over which FOM is distributed within the soil profile (mm).
            </summary>
            <remarks>
            If not given (-ve), FOM will be distributed over the whole soil profile
            Distribution follows an exponential function
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InitialFOMDistCoefficient">
            <summary>
            Exponent of function used to compute initial distribution of FOM in the soil.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InitialFOMCNr">
            <summary>Initial C:N ratio of soil FOM (g/g).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMtypeID_reset">
            <summary>
            FOM type used on initialisation and reset.
            </summary>
            <remarks>
            The default value (0) is always assumed
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InitialFOMType">
            <summary>
            FOM type to be used on initialisation.
            </summary>
            <remarks>
            This sets the partition of FOM C between the different pools (carbohydrate, cellulose, lignin)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fom_types">
            <summary>
            List of available FOM types names.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fract_carb">
            <summary>
            Pool 1 fraction in FOM [carbohydrate], for each FOM type (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fract_cell">
            <summary>
            Pool 2 fraction in FOM [cellulose], for each FOM type (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fract_lign">
            <summary>
            Pool 3 fraction in FOM [lignin], for each FOM type (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.ResiduesRespirationFactor">
            <summary>
            Fraction of residue C mineralised lost to atmopshere due to respiration (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.ResiduesFractionIntoBiomass">
            <summary>
            Fraction of retained residue C transferred to microbial biomass (g/g).
            </summary>
            <remarks>
            The remaining will go into humus
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.ResiduesDecompDepth">
            <summary>
            Depth from which mineral N can be immobilised when decomposing surface residues (mm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Pool1FOMTurnOverRate">
            <summary>
            Optimum rate for decomposition of FOM pool 1 [carbohydrate], aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Pool2FOMTurnOverRate">
            <summary>
            Optimum rate for decomposition of FOM pool 2 [cellulose], aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Pool3FOMTurnOverRate">
            <summary>
            Optimum rate for decomposition of FOM pool 3 [lignin], aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMRespirationFactor">
            <summary>
            Fraction of the FOM C decomposed lost to atmopshere due to respiration (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMFractionIntoBiomass">
            <summary>
            Fraction of the retained FOM C transferred to biomass (g/g).
            </summary>
            <remarks>
            The remaining will go into humus
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_CNCoefficient">
            <summary>
            Coefficient for the exponential phase of C:N effects on decomposition of FOM.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_CNThreshold">
            <summary>
            Value of C:N ratio above which decomposition rate of FOM declines.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMDecomp_TemperatureFactorData">
            <summary>
            Data for calculating the temperature effect on FOM decomposition.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_TOptimum">
            <summary>
            Optimum temperature for FOM decomposition, aerobic and anaerobic conditions (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_TFactorAtZero">
            <summary>
            Temperature factor for FOM decomposition at zero degrees, aerobic and anaerobic conditions.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_TCurveCoeff">
            <summary>
            Curve coefficient for temperature factor of FOM decomposition, aerobic and anaerobic conditions.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMDecomp_MoistureFactorData">
            <summary>
            Parameters for calculating the soil moisture factor for FOM decomposition.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=sat
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_MoistureFactors">
            <summary>
            Moisture factor values for the given values of normalised soil water content.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MBiomassTurnOverRate">
            <summary>
            Potential rate of soil biomass mineralisation, aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MBiomassRespirationFactor">
            <summary>
            Fraction of microbial biomass C mineralised that is lost to the atmosphere due to respiration (g/g).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MBiomassFractionIntoBiomass">
            <summary>
            Fraction of retained microbial biomass C that goes back to microbial biomass (g/g).
            </summary>
            <remarks>
            The remaining will go in to humus
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AHumusTurnOverRate">
            <summary>
            Potential rate of active humus mineralisation, aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AHumusRespirationFactor">
            <summary>
            Fraction of active humic C mineralised that is lost to the atmosphere due to respiration (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SOMMiner_TemperatureFactorData">
            <summary>
            Data to calculate the temperature effect on soil OM mineralisation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_TOptimum">
            <summary>
            Optimum temperature for soil OM mineralisation (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_TFactorAtZero">
            <summary>
            Temperature factor for soil OM mineralisation at zero degree.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_TCurveCoeff">
            <summary>
            Curve coefficient to calculate temperature factor for soil OM mineralisation.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SOMMiner_MoistureFactorData">
            <summary>
            Parameters to calculate soil moisture factor for soil OM mineralisation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_MoistureFactors">
            <summary>
            Values of the moisture factor at given values of the normalised water content.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_MinRate">
            <summary>
            Minimum potential hydrolysis rate for urea (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmA">
            <summary>
            Parameter A for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmB">
            <summary>
            Parameter B for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmC">
            <summary>
            Parameter C for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmD">
            <summary>
            Parameter D for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrolysis_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on urea hydrolysis.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_TOptimum">
            <summary>
            Optimum temperature for urea hydrolysis (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_TFactorAtZero">
            <summary>
            Temperature factor for urea hydrolysis at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_TCurveCoeff">
            <summary>
            Curve coefficient to calculate the temperature factor for urea hydrolysis.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrolysis_MoistureFactorData">
            <summary>
            Parameters to calculate the moisture effect on urea hydrolysis
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_MoistureFactors">
            <summary>
            Values of the moisture factor at given values of the normalised water content.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NitrificationMaxPotential">
            <summary>
            Maximum soil nitrification potential, Michaelis-Menten dynamics (ug NH4/g soil/day).
            </summary>
            <remarks>
            This is the parameter M on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NitrificationNH4ForHalfRate">
            <summary>
            NH4 concentration at half potential nitrification, Michaelis-Menten dynamics (ppm).
            </summary>
            <remarks>
            This is the parameter k on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_DenitLossFactor">
            <summary>
            Fraction of nitrification lost as denitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on nitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_TOptimum">
            <summary>
            Optimum temperature for nitrification (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_FactorAtZero">
            <summary>
            Temperature factor for nitrification at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_CurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for nitrification.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for nitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_MoistureFactors">
            <summary>
            Values of the moisture factor at given values of the normalised water content.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for nitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_pHValues">
            <summary>
            Values of pH at which the pH factor is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_pHFactors">
            <summary>
            Values of pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitritationMaxPotential">
            <summary>
            Maximum soil potential nitritation rate (ug NH4/g soil/day).
            </summary>
            <remarks>
            This is the parameter M on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitritationNH4ForHalfRate">
            <summary>
            NH4 concentration when nitritation is half of potential (ppm).
            </summary>
            <remarks>
            This is the parameter k on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitratationMaxPotential">
            <summary>
            Maximum soil potential nitratation rate (ug NO2/g soil/day).
            </summary>
            <remarks>
            This is the parameter M on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitratationNH4ForHalfRate">
            <summary>
            NO2 concentration when nitratation is half of potential (ppm).
            </summary>
            <remarks>
            This is the parameter k on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.AmmoxLossParam1">
            <summary>
            Parameter to determine the base fraction of ammonia oxidate lost as N2O.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.AmmoxLossParam2">
            <summary>
            Parameter to determine the changes in fraction of ammonia oxidate lost as N2O.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification2_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_TOptimum">
            <summary>
            Optimum temperature for nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_TFactorAtZero">
            <summary>
            Temperature factor for nitrification (Nitrition + Nitration) at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_TCurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification2_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_NormWaterContents">
            <summary>
            Values of the modified soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_MoistureFactors">
            <summary>
            Values of the moisture factor at given normalised water content values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitritation_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for nitritation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitritation_pHValues">
            <summary>
            Values of pH at which factors is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitritation_pHFactors">
            <summary>
            Values of pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitratation_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for nitratation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitratation_pHValues">
            <summary>
            Values of pH at which factors is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitratation_pHFactors">
            <summary>
            Values of pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.CodenitrificationRateCoefficient">
            <summary>
            Denitrification rate coefficient (kg soil/mg C/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_TOptmimun">
            <summary>
            Optimum temperature for codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_TFactorAtZero">
            <summary>
            Temperature factor for codenitrification at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_TCurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for codenitrification.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_NormWaterContents">
            <summary>
            Values of modified soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_MoistureFactors">
            <summary>
            Values of the moisture factor at given water content values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_pHValues">
            <summary>
            Values of soil pH at which the pH factor is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_pHFactors">
            <summary>
            Values of the pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_NH3NO2FactorData">
            <summary>
            Parameters to calculate the N2:N2O ratio during denitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_NHNOValues">
            <summary>
            Values of soil NH3+NO2 at which the N2 fraction is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_NHNOFactors">
            <summary>
            Values of the N2 fraction at given NH3+NO2 values.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.DenitrificationRateCoefficient">
            <summary>
            Denitrification rate coefficient (kg/mg).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actC_parmA">
            <summary>
            Parameter A of linear function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actC_parmB">
            <summary>
            Parameter B of linear function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actCExp_parmA">
            <summary>
            Parameter A of exponential function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actCExp_parmB">
            <summary>
            Parameter B of exponential function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denitrification_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on denitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_TOptimum">
            <summary>
            Optimum temperature for denitrification (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_TFactorAtZero">
            <summary>
            Temperature factor for denitrification at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_TCurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for denitrification.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denitrification_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_NormWaterContents">
            <summary>
            Values of modified normalised soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_MoistureFactors">
            <summary>
            Values of the moisture factor at given normalised water content values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denit_k1">
            <summary>
            Parameter k1 from Thorburn et al (2010) for N2O model.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.N2N2O_parmA">
            <summary>
            Parameter A in the function computing the N2:N2O ratio.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.N2N2O_parmB">
            <summary>
            Parameter B in the function computing the N2:N2O ratio.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denitrification_WFPSFactorData">
            <summary>
            Parameters to calculate the effect of water filled pore space on N2:N2O ratio during denitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denit_WPFSValues">
            <summary>
            Values of soil water filled pore sapce at which the WFPS factor is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denit_WFPSFactors">
            <summary>
            Values of the WFPS factor at given water fille pore space values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.LayerForNPartition">
            <summary>
            Layer thickness to consider when N partition between patches is BasedOnSoilConcentration (mm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MininumRelativeAreaCNPatch">
            <summary>
            Minimum relative area (fraction of paddock) for any patch.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MaximumUptakeRateNH4">
            <summary>
            Maximum NH4 uptake rate for plants (ppm/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MaximumUptakeRateNO3">
            <summary>
            Maximum NO3 uptake rate for plants (ppm/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MaximumNitrogenAvailableToPlants">
            <summary>
            The maximum amount of N that is made available to plants in one day (kg/ha/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AutoAmalgamationApproach">
            <summary>
            Approach to use when comparing patches for AutoAmalagamation.
            </summary>
            <remarks>
            Options:
             - CompareAll: All patches are compared before they are merged
             - CompareBase: All patches are compare to base first, then merged, then compared again
             - CompareMerge: Patches are compare and merged at once if deemed equal, then compare to next
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.basePatchApproach">
            <summary>
            Approach to use when defining the base patch.
            </summary>
            <remarks>
            This is used to define the patch considered the 'base'. It is only used when comparing patches during
            potential auto-amalgamation (comparison against base are more lax)
            Options:
             - IDBased: the patch with lowest ID (=0) is used as the base
             - AreaBased: The [first] patch with the biggest area is used as base
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AllowPatchAmalgamationByAge">
            <summary>
            Flag for whether an age check is used to force amalgamation of patches (yes/no).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchAgeForForcedMerge">
            <summary>
            Age of patch at which merging is enforced (years).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalOrgC">
            <summary>
            Relative difference in total organic carbon (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalOrgN">
            <summary>
            Relative difference in total organic nitrogen (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalBiomC">
            <summary>
            Relative difference in total organic nitrogen (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalUrea">
            <summary>
            Relative difference in total urea N amount (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalNH4">
            <summary>
            Relative difference in total NH4 N amount (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalNO3">
            <summary>
            Relative difference in total NO3 N amount (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerBiomC">
            <summary>
            Relative difference in urea N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerUrea">
            <summary>
            Relative difference in urea N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerNH4">
            <summary>
            Relative difference in NH4 N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerNO3">
            <summary>
            Relative difference in NO3 N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalOrgC">
            <summary>
            Absolute difference in total organic carbon (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalOrgN">
            <summary>
            Absolute difference in total organic nitrogen (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalBiomC">
            <summary>
            Absolute difference in total organic nitrogen (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalUrea">
            <summary>
            Absolute difference in total urea N amount (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalNH4">
            <summary>
            Absolute difference in total NH4 N amount (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalNO3">
            <summary>
            Absolute difference in total NO3 N amount (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerBiomC">
            <summary>
            Absolute difference in urea N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerUrea">
            <summary>
            Absolute difference in urea N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerNH4">
            <summary>
            Absolute difference in NH4 N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerNO3">
            <summary>
            Absolute difference in NO3 N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DepthToTestByLayer">
            <summary>
            Depth to consider when testing diffs by layer, if -ve soil depth is used (mm).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DiffAdjustFactor">
            <summary>
            Factor to adjust the tests between patches other than base (0-1).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.ph">
            <summary>
            pH of soil (assumed equivalent to a 1:1 soil-water slurry).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.oc">
            <summary>
            Total soil organic carbon content (%).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.ureappm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NH4ppm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NO3ppm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n_reduction">
            <summary>
            Define whether soil profile reduction is on.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soil_loss">
            <summary>
            Soil loss due to erosion (t/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.isPondActive">
            <summary>
            Flag for whether pond is active or not (yes/no).
            </summary>
            <remarks>
            If there is a pond, the decomposition of surface OM will be done by that model
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pond_biom_C">
            <summary>
            Amount of C decomposed in pond that is added to soil m. biomass.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pond_hum_C">
            <summary>
            Amount of C decomposed in pond that is added to soil humus.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nitrification_inhibition">
            <summary>
            Factor reducing nitrification due to the presence of a inhibitor.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.rootDepth">
            <summary>
            Current depth of root zone (mm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.RootingDepth">
            <summary>
            Depth of root zone (mm).
            </summary>
            <remarks>
            This is used to compute plant available N when using patches
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n_loss_in_sed">
            <summary>
            N carried out in sediment via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_nh4_net">
            <summary>
            Net nh4 change today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nh4_transform_net">
            <summary>
            Net NH4 transformation today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_no3_net">
            <summary>
            Net no3 change today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.no3_transform_net">
            <summary>
            Net NO3 transformation today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MineralisedN">
            <summary>
            Net mineralisation today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n_min_res">
            <summary>
            Net N mineralisation from residue decomposition
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_nh4_min">
            <summary>
            Net NH4 mineralisation from residue decomposition
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_no3_min">
            <summary>
            Net NO3 mineralisation from residue decomposition
            </summary>
            <remarks>
            Net convertion of NO3 for residue mineralisation/immobilisation
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_n_min">
            <summary>
            Net FOM N mineralised (negative for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_hum_n_min">
            <summary>
            Net N mineralised for humic pool
            </summary>
            <remarks>
            Net humic N mineralised, negative for immobilisation
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_biom_n_min">
            <summary>
            Net N mineralised from m. biomass pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n_min_tot">
            <summary>
            Total net N mineralised (residues plus soil OM)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_urea_hydrol">
            <summary>
            Nitrogen coverted by hydrolysis (from urea to NH4)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_rntrf">
            <summary>
            Nitrogen coverted by nitrification (from NH4 to either NO3 or N2O)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification">
            <summary>
            Nitrogen coverted by nitrification (from NH4 to either NO3 or N2O)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.effective_nitrification">
            <summary>
            Effective, or net, nitrogen coverted by nitrification (from NH4 to NO3)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n2o_nitrif">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_nh4_dnit">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2o_atm_nitrification">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_no3_dnit">
            <summary>
            NO3 N denitrified
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n2o_dnit">
            <summary>
            N2O N produced during denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2o_atm_denitrification">
            <summary>
            N2O N produced during denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2o_atm">
            <summary>
            Total N2O amount produced today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2_atm">
            <summary>
            Amount of N2 produced
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification">
            <summary>
            N converted by denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nh4_deficit_immob">
            <summary>
            Excess N required above NH4 supply (for immobilisation)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculateUrea">
            <summary>
            Soil urea nitrogen amount (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetUrea(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for urea</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetUreaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for urea delta</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="deltaN">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculateNH4">
            <summary>
            Soil ammonium nitrogen amount (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNH4(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for NH4</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNH4Delta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for NH4 delta.</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="deltaN">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculateNO3">
            <summary>
            Soil nitrate nitrogen amount (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNO3(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for NO3</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNO3Delta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for delta NO3</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="deltaN">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculatePlantAvailableNH4">
            <summary>
            Soil ammonium nitrogen amount available to plants, limited per patch (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetPlantAvailableNH4(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for Plant Available NH4</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculatePlantAvailableNO3">
            <summary>
            Soil nitrate nitrogen amount available to plants, limited per patch (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetPlantAvailableNO3(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for Plant Available NO3</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMN">
            <summary>
            Total nitrogen in FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_n_pool1">
            <summary>
            Nitrogen in FOM pool 1
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_n_pool2">
            <summary>
            Nitrogen in FOM pool 2
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_n_pool3">
            <summary>
            Nitrogen in FOM pool 3
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.HumicN">
            <summary>
            Soil humic N
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.IntertN">
            <summary>
            Inactive soil humic N
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MicrobialN">
            <summary>
            Soil biomass nitrogen
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.mineral_n">
            <summary>
            Soil mineral nitrogen
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.organic_n">
            <summary>
            Soil organic nitrogen, old style
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.organic_c">
            <summary>
            Soil organic carbon, old style
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.TotalN">
            <summary>
            Total N in soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nitrogenbalance">
            <summary>
            SoilN balance for nitrogen: deltaN - losses
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fr_carb">
            <summary>
            Carbohydrate fraction of FOM (0-1)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fr_cell">
            <summary>
            Cellulose fraction of FOM (0-1)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fr_lign">
            <summary>
            Lignin fraction of FOM (0-1)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_c_loss_in_sed">
            <summary>
            Carbon loss in sediment, via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_hum">
            <summary>
            Amount of C converted from FOM to humic (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_biom">
            <summary>
            Amount of C converted from FOM to m. biomass (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_atm">
            <summary>
            Amount of C lost to atmosphere from FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_hum_c_biom">
            <summary>
            Humic C converted to biomass
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_hum_c_atm">
            <summary>
            Humic C lost to atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_biom_c_hum">
            <summary>
            Biomass C converted to humic
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_biom_c_atm">
            <summary>
            Biomass C lost to atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_c_biom">
            <summary>
            Carbon from residues converted to biomass C
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_c_hum">
            <summary>
            Carbon from residues converted to humic C
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_c_atm">
            <summary>
            Carbon from residues lost to atmosphere during decomposition
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_pool1">
            <summary>
            Delta C in pool 1 of FOM - needed by SoilP
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_pool2">
            <summary>
            Delta C in pool 2 of FOM - needed by SoilP
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_pool3">
            <summary>
            Delta C in pool 3 of FOM - needed by SoilP
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_res_c_biom">
            <summary>
            Carbon from all residues to m. biomass
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_res_c_hum">
            <summary>
            Carbon from all residues to humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_res_c_atm">
            <summary>
            Carbon lost from all residues to atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.co2_atm">
            <summary>
            Total CO2 amount produced today in the soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMC">
            <summary>
            Fresh organic C - FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_c_pool1">
            <summary>
            Amount of C in pool 1 of FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_c_pool2">
            <summary>
            Amount of C in pool 2 of FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_c_pool3">
            <summary>
            Amount of C in pool 3 of FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.HumicC">
            <summary>
            Amount of C in humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InertC">
            <summary>
            Amount of C in inert humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InertN">
            <summary>
            Amount of N in inert humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MicrobialC">
            <summary>
            Amount of C in m. biomass pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.waterSoluble_c">
            <summary>
            Amount of water soluble C
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.TotalC">
            <summary>
            Total carbon amount in the soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.carbonbalance">
            <summary>
            Balance of C in soil: deltaC - losses
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_org_p">
            <summary>
            amount of P coverted by residue mineralisation (needed by SoilP)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCount">
            <summary>
            Number of internal patches
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchArea">
            <summary>
            Relative area of each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchName">
            <summary>
            Name of each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchAge">
            <summary>
            Age of each existing internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNLostInSediment">
            <summary>
            N carried out for each patch in sediment via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromResidues">
            <summary>
            Total net N mineralisation from residue decomposition, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromFOM">
            <summary>
            Total net FOM N mineralised, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromHumus">
            <summary>
            Total net humic N mineralised, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromMBiomass">
            <summary>
            Total net biomass N mineralised, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralised">
            <summary>
            Total net N mineralised, for each patch (residues plus soil OM)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaHydrolysis">
            <summary>
            Total nitrogen coverted by hydrolysis, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNitrification">
            <summary>
            Total nitrogen coverted by nitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalEffectiveNitrification">
            <summary>
            Total effective amount of NH4-N coverted into NO3 by nitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2O_Nitrification">
            <summary>
            Total N2O N produced during nitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3_Denitrification">
            <summary>
            Total NO3 N denitrified, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2O_Denitrification">
            <summary>
            Total N2O N produced during denitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2OLostToAtmosphere">
            <summary>
            Total amount of N2O N produced, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2LostToAtmosphere">
            <summary>
            Total amount of N2 produced, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDenitrification">
            <summary>
            Total N converted by denitrification (all forms), for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaLeached">
            <summary>
            Total amount of urea changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4Leached">
            <summary>
            Total amount of NH4 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3Leached">
            <summary>
            Total amount of NO3 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaUptake">
            <summary>
            Total amount of urea taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4Uptake">
            <summary>
            Total amount of NH4 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3Uptake">
            <summary>
            Total amount of NO3 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaFertiliser">
            <summary>
            Total amount of urea added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4Fertiliser">
            <summary>
            Total amount of NH4 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3Fertiliser">
            <summary>
            Total amount of NO3 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaChangedOther">
            <summary>
            Total amount of urea changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4ChangedOther">
            <summary>
            Total amount of NH4 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3ChangedOther">
            <summary>
            Total amount of NO3 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromResidues">
            <summary>
            Net N mineralisation from residue decomposition for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromFOM">
            <summary>
            Net FOM N mineralised for each patch (negative for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromHumus">
            <summary>
            Net N mineralised for humic pool for each patch (negative for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromMBiomass">
            <summary>
            Net N mineralised from m. biomass pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedTotal">
            <summary>
            Net total N mineralised for each patch (residues plus soil OM)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltUreaHydrolysis">
            <summary>
            Nitrogen coverted by hydrolysis (from urea to NH4) for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltNitrification">
            <summary>
            Nitrogen coverted by nitrification (from NH4 to either NO3 or N2O) for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchEffectiveDltNitrification">
            <summary>
            Effective, or net, nitrogen coverted by nitrification for each patch (from NH4 to NO3)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltN2O_Nitrification">
            <summary>
            N2O N produced during nitrification for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltNO3_Denitrification">
            <summary>
            NO3 N denitrified for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltN2O_Denitrification">
            <summary>
            N2O N produced during denitrification for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchN2OLostToAtmosphere">
            <summary>
            Total N2O amount produced for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchN2LostToAtmosphere">
            <summary>
            Amount of N2 produced for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_dnit">
            <summary>
            N converted by all forms of denitrification for each patch (to be deleted?)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltDenitrification">
            <summary>
            N converted by all forms of denitrification for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaFlow">
            <summary>
            Amount of urea changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4Flow">
            <summary>
            Amount of NH4 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3Flow">
            <summary>
            Amount of NO3 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaUptake">
            <summary>
            Amount of urea taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4Uptake">
            <summary>
            Amount of NH4 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3Uptake">
            <summary>
            Amount of NO3 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaFertiliser">
            <summary>
            Amount of urea added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4Fertiliser">
            <summary>
            Amount of NH4 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3Fertiliser">
            <summary>
            Amount of NO3 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaChangedOther">
            <summary>
            Amount of urea changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4ChangedOther">
            <summary>
            Amount of NH4 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3ChangedOther">
            <summary>
            Amount of NO3 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchUrea">
            <summary>
            Amount of urea N in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNH4">
            <summary>
            Amount of NH4 N in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNO3">
            <summary>
            Amount of NO3 N in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchPlantAvailableNH4">
            <summary>
            Amount of N as NH4 available to plants, in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchPlantAvailableNO3">
            <summary>
            Amount of N as NO3 available to plants, in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUrea">
            <summary>
            Total urea N in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4">
            <summary>
            Total NH4 N in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3">
            <summary>
            Total NO3 N in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4_PlantAvailable">
            <summary>
            Total NH4 N available to plants in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3_PlantAvailable">
            <summary>
            Total NO3 N available to plants in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchFOM_N">
            <summary>
            Total nitrogen in FOM for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchHum_N">
            <summary>
            Soil humic N for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchInert_N">
            <summary>
            Inactive soil humic N for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchBiom_N">
            <summary>
            Soil biomass nitrogen for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchSoilMineralN">
            <summary>
            Total mineral N in soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchSoilOrganicN">
            <summary>
            Total organic N in soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN">
            <summary>
            Total N in soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalFOM_N">
            <summary>
            Total FOM N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalHum_N">
            <summary>
            Total Humic N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalInert_N">
            <summary>
            Total inert N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalBiom_N">
            <summary>
            Total biomass N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilMineralN">
            <summary>
            Total mineral N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilOrganicN">
            <summary>
            Total organic N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilN">
            <summary>
            Total N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNitrogenBalance">
            <summary>
            SoilN balance for nitrogen, for each patch: deltaN - losses
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCLostInSediment">
            <summary>
            Carbon loss in sediment for each patch, via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromFOMToHumus">
            <summary>
            Amount of C converted from FOM to humic for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromFOMToMBiomass">
            <summary>
            Amount of C converted from FOM to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromFOMToAtmosphere">
            <summary>
            Amount of C lost to atmosphere from FOM for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromHumusToMBiomass">
            <summary>
            Humic C converted to biomass for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromHumusToAtmosphere">
            <summary>
            Humic C lost to atmosphere for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromMBiomassToHumus">
            <summary>
            Biomass C converted to humic for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromMBiomassToAtmosphere">
            <summary>
            Biomass C lost to atmosphere for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromResiduesToMBiomass">
            <summary>
            Carbon from residues converted to biomass C for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromResiduesToHumus">
            <summary>
            Carbon from residues converted to humic C for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromResiduesToAtmosphere">
            <summary>
            Carbon from residues lost to atmosphere for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCO2Produced">
            <summary>
            Total CO2 amount produced in the soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromFOMToHumus">
            <summary>
            Total amount of C converted from FOM to humic for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromFOMToMBiomass">
            <summary>
            Total amount of C converted from FOM to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromFOMToAtmosphere">
            <summary>
            Total amount of FOM C lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromHumusToMBiomass">
            <summary>
            Total amount of humic C converted to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromHumusToAtmosphere">
            <summary>
            Total amount of humic C lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromMBiomassToHumus">
            <summary>
            Total amount of biomass C converted to humus for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromMBiomassToAtmosphere">
            <summary>
            Total amount of biomass C lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromResiduesToMBiomass">
            <summary>
            Total amount of C from residues converted to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromResiduesToHumus">
            <summary>
            Total amount of C from residues converted to humus for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromResiduesToAtmosphere">
            <summary>
            Total amount of C from residues lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalCO2Produced">
            <summary>
            Total CO2 amount produced in the soil for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchFOM_C">
            <summary>
            Fresh organic C - FOM for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchHum_C">
            <summary>
            Amount of C in humic pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchInert_C">
            <summary>
            Amount of C in inert humic pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchBiom_C">
            <summary>
            Amount of C in m. biomass pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchWaterSolubleC">
            <summary>
            Amount of water soluble C for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalC">
            <summary>
            Total carbon amount in the soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalFOM_C">
            <summary>
            Total FOM C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalHum_C">
            <summary>
            Total Humic C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalInert_C">
            <summary>
            Total inert C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalBiom_C">
            <summary>
            Total biomass C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalWaterSolubleC">
            <summary>
            Total water soluble C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilC">
            <summary>
            Total C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCarbonBalance">
            <summary>
            Balance of C in soil,  for each patch: deltaC - losses
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.epsilon">
            <summary>
            Value to evaluate precision against floating point variables.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Patch">
            <summary>
            List of all existing patches (internal instances of C and N processes).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.dlayer">
            <summary>
            Soil layers' thichness (mm).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.nLayers">
            <summary>
            Number layers in the soil.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_oc">
            <summary>
            The initial OC content for each layer of the soil (%). Also used onReset.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_ureappm">
            <summary>
            Initial content of urea in each soil layer (ppm). Also used onReset.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_nh4ppm">
            <summary>
            Initial content of NH4 in each soil layer (ppm). Also used onReset.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_no3ppm">
            <summary>
            Initial content of NO3 in each soil layer (ppm). Also used onReset.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_urea">
            <summary>
            Variations in urea as given by another component.
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero
             - If values are supplied in excess, these will ignored
             - Each value is tested whether it is within bounds, then it is added to the actual amount, this amount is then tested for its bounds
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_nh4">
            <summary>
            Variations in nh4 as given by another component.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_no3">
            <summary>
            Variations in no3 as given by another component.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.initDone">
            <summary>
            Marker for whether initialisation has been finished or not.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.profileReductionAllowed">
            <summary>
            Indicates whether soil profile reduction is allowed (from erosion).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.organicSolutesAllowed">
            <summary>
            Indicates whether organic solutes are to be simulated.
            </summary>
            <remarks>
            It should always be false, as organic solutes are not implemented yet
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.residueName">
            <summary>
            Name of residues decomposing.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.residueType">
            <summary>
            Type of decomposing residue.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pot_c_decomp">
            <summary>
            Potential residue C decomposition (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pot_n_decomp">
            <summary>
            Potential residue N decomposition (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pot_p_decomp">
            <summary>
            Potential residue P decomposition (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.TodaysInitialC">
            <summary>
            Total C content at the beginning of the day.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.TodaysInitialN">
            <summary>
            Total N content at the beginning of the day.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMiniFraction">
            <summary>
            The initial FOM distribution, a 0-1 fraction for each layer.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fom_type">
            <summary>
            Type of FOM being used
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.nResidues">
            <summary>
            Number of surface residues whose decomposition is being calculated.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fomPoolsCNratio">
            <summary>
            The C:N ratio of each fom pool.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.convFactor">
            <summary>
            Factor for converting kg/ha into ppm.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.inhibitionFactor_Nitrification">
            <summary>
            Factor reducing nitrification due to the presence of a inhibitor.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.minimumPatchArea">
            <summary>
            Minimum allowable relative area for a CNpatch (0-1).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NPartitionApproach">
            <summary>
            Approach to use when partitioning dltN amongst patches.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchAmalgamationApproach">
            <summary>
            Approach to use for AutoAmalagamation (CompareAll, CompareBase, CompareMerge).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchAmalgamationByAgeAllowed">
            <summary>
            indicates whether an age check is used to force amalgamation of patches.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.forcedMergePatchAge">
            <summary>
            Age after which patches will be merged if AllowPatchAmalgamationByAge.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchbasePatchApproach">
            <summary>
            Approach to use for defining the base patch (IDBased, AreaBased).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.layerDepthToTestDiffs">
            <summary>
            Layer down to which test for diffs are made (upon auto amalgamation).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.senderModule">
            <summary>
            A description of the module sending a change in soil nitrogen (used for partitioning).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_MaximumNH4Uptake">
            <summary>
            Maximum NH4 uptake rate for plants (ppm/day) (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_MaximumNO3Uptake">
            <summary>
            Maximum NO3 uptake rate for plants (ppm/day) (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.maximumNH4UptakeRate">
            <summary>
            Maximum NH4 uptake rate for plants (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.maximumNO3UptakeRate">
            <summary>
            Maximum NO3 uptake rate for plants (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.maxTotalNAvailableToPlants">
            <summary>
            The maximum amount of N that is made available to plants in one day.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.BentStickData">
            <summary>
            The parameters to compute a exponential type function (used for example for temperature factor)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BentStickData.xValueForOptimum">
            <summary>
            Optimum temperature, when factor is equal to one
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BentStickData.yValueAtZero">
            <summary>
            Value of factor when temperature is equal to zero celsius
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BentStickData.CurveExponent">
            <summary>
            Exponent defining the curvature of the factor
            </summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.BrokenStickData">
            <summary>
            Lists of x and y values used to describe certain a 'broken stick' function (e.g. moisture factor)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BrokenStickData.xVals">
            <summary>
            The values in the x-axis
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BrokenStickData.yVals">
            <summary>
            The values in the y-axis
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Inert">
            <summary>The inert pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Microbial">
            <summary>The microbial pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Humic">
            <summary>The humic pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMCellulose">
            <summary>The fresh organic matter cellulose pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMCarbohydrate">
            <summary>The fresh organic matter carbohydrate pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMLignin">
            <summary>The fresh organic matter lignin pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOM">
            <summary>The fresh organic matter pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Organic">
            <summary>Soil organic nitrogen (FOM + Microbial + Humic)</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SurfaceResidue">
            <summary>The fresh organic matter surface residue pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NO3">
            <summary>The NO3 pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NH4">
            <summary>The NH4 pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Urea">
            <summary>The Urea pool.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Catm">
            <summary>Total C lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Natm">
            <summary>Total N lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.N2Oatm">
            <summary>Total N2O lost to the atmosphere</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.DenitrifiedN">
            <summary>Denitrified Nitrogen (N flow from NO3).</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NitrifiedN">
            <summary>Nitrified Nitrogen (from NH4 to either NO3 or N2O).</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.HydrolysedN">
            <summary>Urea converted to NH4 via hydrolysis.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MineralN">
            <summary>Total Mineral N in each soil layer</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MineralisedNSurfaceResidue">
            <summary>Net N Mineralisation from surface residue</summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.FOMCNR(System.Int32)">
            <summary>Carbon to Nitrogen Ratio for Fresh Organic Matter in a given layer</summary>
        </member>
        <member name="T:Models.Soils.NewProfileType">
            <summary>
            strucuture for data associated with the NewProfile event
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.dlayer">
            <summary>
            Array of layer depths
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.air_dry_dep">
            <summary>
            Array of air-dry values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.ll15_dep">
            <summary>
            Array of -15 bar values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.dul_dep">
            <summary>
            Array of drained upper limit values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.sat_dep">
            <summary>
            Array of saturated values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.sw_dep">
            <summary>
            Array of soil water values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.bd">
            <summary>
            Array of bulk density values
            </summary>
        </member>
        <member name="T:Models.Soils.NewProfileDelegate">
            <summary>
            Delegate for issuing a NewProfile event
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.CNPatchPoolVariablePatchPoolType">
            <summary>
            CNPatchPoolVariablePatchPool
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchPoolVariablePatchPoolType.Value">
            <summary>The Value</summary>
        </member>
        <member name="T:Models.Soils.CNPatchPoolVariablePatchType">
            <summary>
            CNPatchPoolVariablePatch
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchPoolVariablePatchType.Pool">
            <summary>The Pool</summary>
        </member>
        <member name="T:Models.Soils.CNPatchPoolVariableType">
            <summary>
            CNPatchPoolVariableType
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchPoolVariableType.Patch">
            <summary>The Patch</summary>
        </member>
        <member name="T:Models.Soils.CNPatchVariablePatchType">
            <summary>
            CNPatchVariablePatchType
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchVariablePatchType.Value">
            <summary>The Value</summary>
        </member>
        <member name="T:Models.Soils.CNPatchVariablePatchDelegate">
            <summary>
            CNPatchVariablePatchDelegate
            </summary>
        </member>
        <member name="T:Models.Soils.CNPatchVariableType">
            <summary>
            CNPatchVariableType
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchVariableType.Patch">
            <summary>The Patch</summary>
        </member>
        <member name="T:Models.Soils.MergeSoilCNPatchType">
            <summary>
            MergeSoilCNPatchType
            </summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.Sender">
            <summary>The sender</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.AffectedPatches_nm">
            <summary>The affected patches_nm</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.AffectedPatches_id">
            <summary>The affected patches_id</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.MergeAll">
            <summary>The merge all</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.SuppressMessages">
            <summary>Supress messages</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMFOMType">
            <summary>
            AddSoilCNPatchwithFOMFOM
            </summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMFOMType.Name">
            <summary>The Name</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMFOMType.Type">
            <summary>The Type</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMFOMType.Pool">
            <summary>The SoilOrganicMaterialType</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMFOMDelegate">
            <summary>
            AddSoilCNPatchwithFOMFOMDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.DepositionTypeEnum">
            <summary>Specifies the different types of deposition in calls to add a patch.</summary>
        </member>
        <member name="F:Models.Soils.DepositionTypeEnum.ToNewPatch">
            <summary></summary>
        </member>
        <member name="F:Models.Soils.DepositionTypeEnum.NewOverlappingPatches">
            <summary></summary>
        </member>
        <member name="F:Models.Soils.DepositionTypeEnum.ToSpecificPatch">
            <summary></summary>
        </member>
        <member name="F:Models.Soils.DepositionTypeEnum.ToAllPaddock">
            <summary></summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMType">
            <summary>
            AddSoilCNPatchwithFOM
            </summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.Sender">
            <summary>The Sender</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.SuppressMessages">
            <summary>The SuppressMessages</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.DepositionType">
            <summary>The DepositionType</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AffectedPatches_nm">
            <summary>The AffectedPatches_nm</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AffectedPatches_id">
            <summary>The AffectedPatches_id</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AreaNewPatch">
            <summary>The AreaNewPatch</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.PatchName">
            <summary>The PatchName</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.Water">
            <summary>The Water</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.Urea">
            <summary>The Urea</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.NH4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.NO3">
            <summary>The NO3</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.POX">
            <summary>The POX</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.SO4">
            <summary>The SO4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AshAlk">
            <summary>The AshAlk</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.FOM">
            <summary>The AddSoilCNPatchwithFOMFOMType</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMDelegate">
            <summary>
            AddSoilCNPatchwithFOMDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchType">
            <summary>
            AddSoilCNPatch
            </summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.Sender">
            <summary>The Sender</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.SuppressMessages">
            <summary>The SuppressMessages</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.DepositionType">
            <summary>The DepositionType</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AffectedPatches_nm">
            <summary>The AffectedPatches_nm</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AffectedPatches_id">
            <summary>The AffectedPatches_id</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AreaFraction">
            <summary>The AreaFraction</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.PatchName">
            <summary>The PatchName</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.Water">
            <summary>The Water</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.Urea">
            <summary>The Urea</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.NH4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.NO3">
            <summary>The NO3</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.POX">
            <summary>The POX</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.SO4">
            <summary>The SO4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AshAlk">
            <summary>The AshAlk</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C">
            <summary>The FOM_C</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C_pool1">
            <summary>The FOM_C_pool1</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C_pool2">
            <summary>The FOM_C_pool2</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C_pool3">
            <summary>The FOM_C_pool3</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_N">
            <summary>The FOM_N</summary>
        </member>
        <member name="T:Models.Soils.FOMType">
            <summary>
            FOMType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMType.amount">
            <summary>The amount</summary>
        </member>
        <member name="F:Models.Soils.FOMType.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Soils.FOMType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.Soils.FOMType.P">
            <summary>The p</summary>
        </member>
        <member name="F:Models.Soils.FOMType.AshAlk">
            <summary>The ash alk</summary>
        </member>
        <member name="T:Models.Soils.FOMPoolType">
            <summary>
            FOMPoolType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMPoolType.Layer">
            <summary>The layer</summary>
        </member>
        <member name="T:Models.Soils.FOMLayerType">
            <summary>
            FOMLayerType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMLayerType.Type">
            <summary>The type</summary>
        </member>
        <member name="F:Models.Soils.FOMLayerType.Layer">
            <summary>The layer</summary>
        </member>
        <member name="T:Models.Soils.FOMPoolLayerType">
            <summary>
            FOMPoolLayerType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.thickness">
            <summary>The thickness</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.no3">
            <summary>The no3</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.nh4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.po4">
            <summary>The po4</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.Pool">
            <summary>The pool</summary>
        </member>
        <member name="T:Models.Soils.FOMLayerLayerType">
            <summary>
            FOMLayerLayerType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMLayerLayerType.FOM">
            <summary>The fom</summary>
        </member>
        <member name="F:Models.Soils.FOMLayerLayerType.CNR">
            <summary>The CNR</summary>
        </member>
        <member name="F:Models.Soils.FOMLayerLayerType.LabileP">
            <summary>The labile p</summary>
        </member>
        <member name="T:Models.Soils.SurfaceOrganicMatterDecompPoolType">
            <summary>
            SurfaceOrganicMatterDecompPoolType
            </summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompPoolType.Name">
            <summary>The name</summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompPoolType.OrganicMatterType">
            <summary>The organic matter type</summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompPoolType.FOM">
            <summary>The fom</summary>
        </member>
        <member name="T:Models.Soils.SurfaceOrganicMatterDecompType">
            <summary>
            SurfaceOrganicMatterDecompType
            </summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompType.Pool">
            <summary>The pool</summary>
        </member>
        <member name="M:Models.Soils.SurfaceOrganicMatterDecompType.Add(Models.Soils.SurfaceOrganicMatterDecompType)">
            <summary>Add two pools together.</summary>
            <param name="from">The pool to add into this instance.</param>
        </member>
        <member name="M:Models.Soils.SurfaceOrganicMatterDecompType.Multiply(System.Double)">
            <summary>Multiply the FOM C and N by a value.</summary>
            <param name="value">The value to multiply the C and N by.</param>
        </member>
        <member name="T:Models.Soils.FOMdecompData">
            <summary>
            FOMdecompData
            </summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_c_hum">
            <summary>The dlt_c_hum</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_c_biom">
            <summary>The dlt_c_biom</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_c_atm">
            <summary>The dlt_c_atm</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_fom_n">
            <summary>The dlt_fom_n</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_n_min">
            <summary>The dlt_n_min</summary>
        </member>
        <member name="T:Models.Soils.SoilOrganicMaterialType">
            <summary>
            SoilOrganicMaterial
            </summary>
            <remarks>
            This was a trial and was meant to replace FOM type (RCichota)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.Name">
            <summary>The Name</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.Type">
            <summary>The Type</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.C">
            <summary>The C</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.N">
            <summary>The N</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.P">
            <summary>The P</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.S">
            <summary>The S</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.AshAlk">
            <summary>The AshAlk</summary>
        </member>
        <member name="T:Models.Soils.SoilOrganicMaterialDelegate">
            <summary>
            SoilOrganicMaterialDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.NitrogenChangedType">
            <summary>
            NitrogenChangedType
            </summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.Sender">
            <summary>The sender</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.SenderType">
            <summary>The sender type</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.DeltaNO3">
            <summary>The delta n o3</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.DeltaNH4">
            <summary>The delta n h4</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.DeltaUrea">
            <summary>The delta urea</summary>
        </member>
        <member name="T:Models.Soils.NitrogenChangedDelegate">
            <summary>
            NitrogenChangedDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.AddUrineType">
            <summary>
            AddUrineType
            </summary>
            <remarks>
            This was used in an early attempt to add excreta to SoilNitrogen in classic Apsim.
            It was never really implemented and was superseeded (partially anyways) by CNPatches
            It probably can be eliminated, or fully developed
            </remarks>
        </member>
        <member name="F:Models.Soils.AddUrineType.Urinations">
            <summary>The number of urinations in the time step</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.VolumePerUrination">
            <summary>The volume per urination in m^3</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.AreaPerUrination">
            <summary>The area per urination in m^2</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.Eccentricity">
            <summary>The eccentricity</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.Urea">
            <summary>The urea in kg N/ha</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.POX">
            <summary>The pox in kg P/ha</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.SO4">
            <summary>The s o4 in kg S/ha</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.AshAlk">
            <summary>The ash alkin mol/ha</summary>
        </member>
        <member name="T:Models.Soils.ExternalMassFlowType">
            <summary>
            ExternalMassFlowType
            </summary>
            <remarks>
            This was used in classic Apsim to send mass balance info to SysBal.
            It is not used currently, and perhaps should be deleted
            </remarks>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.PoolClass">
            <summary>The pool class</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.FlowType">
            <summary>The flow type</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.P">
            <summary>The p</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.DM">
            <summary>The dm</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.SW">
            <summary>The sw</summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogenNH4">
            <summary>This class encapsulates a SoilNitrogen model NH4 solute.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogenNH4.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogenNH4.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogenNH4.SetKgHa(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha.</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="value">New values.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogenNH4.AddKgHaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha delta.</summary>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">New delta values</param>
        </member>
        <member name="T:Models.Soils.SoilNitrogenNO3">
            <summary>This class encapsulates a SoilNitrogen model NO3 solute.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogenNO3.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogenNO3.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogenNO3.SetKgHa(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha.</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="value">New values.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogenNO3.AddKgHaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha delta.</summary>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">New delta values</param>
        </member>
        <member name="T:Models.Soils.SoilNitrogenUrea">
            <summary>This class encapsulates a SoilNitrogen model urea solute.</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogenUrea.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogenUrea.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogenUrea.SetKgHa(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha.</summary>
            <param name="callingModelType">Type of calling model.</param>
            <param name="value">New values.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogenUrea.AddKgHaDelta(Models.Soils.Nutrients.SoluteSetterType,System.Double[])">
            <summary>Setter for kgha delta.</summary>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">New delta values</param>
        </member>
        <member name="T:Models.Soils.SoilsDataTable">
            <summary>
            A generic class for turning a DataTable of soil information into
            a list of sois.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.ToSoils(System.Data.DataTable)">
            <summary>Convert a table of soils data into a list of soils.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.FromSoils(System.Collections.Generic.List{Models.Soils.Soil})">
            <summary>Convert a collection of soils to a DataTable.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.GetStringValue(System.Data.DataTable,System.Int32,System.String)">
            <summary>Return a single string value from the specified table and row</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.GetDoubleValue(System.Data.DataTable,System.Int32,System.String)">
            <summary>Return a single double value from the specified table and row.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.GetIntegerValue(System.Data.DataTable,System.Int32,System.String)">
            <summary>Return a single integer value from the specified table and row.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.GetDoubleValues(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>Return an array of values for the specified column.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.SetDoubleValues(System.Data.DataTable,System.String,System.Double[],System.Int32)">
            <summary>Set a column of double values in the specified table.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.SetStringValues(System.Data.DataTable,System.String,System.String[],System.Int32)">
            <summary>Set a column of string values in the specified table.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.SetDoubleValue(System.Data.DataTable,System.String,System.Double,System.Int32,System.Int32)">
            <summary>Set a column to the specified Value a specificed numebr of times.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.SetStringValue(System.Data.DataTable,System.String,System.String,System.Int32,System.Int32)">
            <summary>Set a column to the specified Value a specificed numebr of times.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.GetStringValues(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>
            Return an array of values for the specified column.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.SetCropValues(System.Data.DataTable,Models.Soils.SoilCrop,System.Int32)">
            <summary>Set the crop values in the table for the specified crop name.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.GetCodeValues(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>Return a list of code values for the specified variable.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.SetCodeValues(System.Data.DataTable,System.String,System.String[],System.Int32)">
            <summary>Set a column of metadata values for the specified column.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.CodeToMetaData(System.String[])">
            <summary>Convert an APSoil code into metadata string.</summary>
        </member>
        <member name="M:Models.Soils.SoilsDataTable.MetaDataToCode(System.String[])">
            <summary>Convert a metadata into an abreviated code.</summary>
        </member>
        <member name="T:Models.Soils.CERESSoilTemperature">
            <summary>
            Calculates the average soil temperature at the centre of each layer, based on the soil temperature model of EPIC (Williams et al 1984)
            This code was separated from old SoilN - tidied up but not updated (RCichota, sep/2012)
            </summary>
        </member>
        <member name="F:Models.Soils.CERESSoilTemperature.waterBalance">
            <summary>The water balance model</summary>
        </member>
        <member name="F:Models.Soils.CERESSoilTemperature.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="M:Models.Soils.CERESSoilTemperature.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="P:Models.Soils.CERESSoilTemperature.Value">
            <summary>Returns soil temperature for each layer (oc)</summary>
        </member>
        <member name="M:Models.Soils.CERESSoilTemperature.OnDoSoilTemperature(System.Object,System.EventArgs)">
            <summary>Called to perform soil temperature calculations</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.SoilTemp.SoilTemperature">
            <summary>
            Since temperature changes rapidly near the soil surface and very little at depth, the best simulation will
            be obtained with short elements (shallow layers) near the soil surface and longer ones deeper in the soil.
            The element lengths should go in a geometric progression. Ten to twelve nodes are probably sufficient for
            short term simulations (daily or weekly). Fifteen nodes would probably be sufficient for annual cycle simulation
            where a deeper grid is needed.
            p36, Campbell, G.S. (1985) "Soil physics with BASIC: Transport models for soil-plant systems" (Amsterdam, Elsevier)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.FinalSoilTemp">
            <summary>
            Temperature at end of last time-step within a day - midnight
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.FinalSoilSurfaceTemp">
            <summary>
            Temperature at end of last time-step within a day - midnight
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.Value">
            <summary>
            Mandatory for ISoilTemperature interface. For now, just return average daily values
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.AverageSoilTemp">
            <summary>
            Temperature averaged over all time-steps within a day
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.AverageSoilSurfaceTemp">
            <summary>
            Temperature averaged over all time-steps within a day
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.MinSoilTemp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.minSoilSurfaceTemp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.MaxSoilTemp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.MaxSoilSurfaceTemp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.BoundaryLayerConductance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.ThermalConductivity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.HeatCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.HeatStore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemp.SoilTemperature.Thr_profile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Initialise soiltemp module
            </summary>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.getIniVariables">
            <summary>
            initialise global variables to initial values
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.OnNewProfile(Models.Soils.NewProfileType)">
            <summary>
            This will never be called.
            </summary>
            <param name="newProfile"></param>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.getProfileVariables">
            <summary>
            Set global variables to new soil profile state
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.readParam">
            <summary>
            Set global variables with module parameter values and check validity
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doThermalConductivityCoeffs">
            <summary>
            Calculate the coefficients for thermal conductivity equation (Campbell 4.20) for a typical low-quartz, mineral soil.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.GetOtherVariables">
            <summary>
            Update global variables with external states and check validity of values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doProcess">
            <summary>
            Perform actions for current day
            </summary>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doVolumetricSpecificHeat">
            <summary>
            Calculate the volumetric specific heat (volumetric heat capicity Cv) of the soil layer
            to Campbell, G.S. (1985) "Soil physics with BASIC: Transport
            models for soil-plant systems" (Amsterdam, Elsevier)
            RETURNS volSpecHeatSoil()  [Joules*m-3*K-1]
            </summary>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doThermConductivity">
            <summary>
            Calculate the thermal conductivity of the soil layer following,
            to Campbell, G.S. (1985) "Soil physics with BASIC: Transport
            models for soil-plant systems" (Amsterdam, Elsevier)
            Equation 4.20 where Lambda = A + B*Theta - (A-D)*exp[-(C*theta)^E]
            Lambda is the thermal conductivity, theta is volumetric water content and A, B, C, D, E are coefficients.
            When theta = 0, lambda = D. At saturation, the last term becomes zero and Lambda = A + B*theta.
            The constant E can be assigned a value of 4. The constant C determines the water content where thermal
            conductivity begins to increase rapidly and is highly correlated with clay content.
            Here C1=A, C2=B, SW=theta, C3=C, C4=D, 4=E.
            RETURNS gThermConductivity_zb() (W/m2/K)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doThomas(System.Double[]@)">
            <summary>
            Numerical solution of the differential equations. Solves the
            tri_diagonal matrix using the Thomas algorithm, Thomas, L.H. (1946)
            "Elliptic problems in linear difference equations over a network"
            Watson Sci Comput. Lab. Report., (Columbia University, New York)"
            RETURNS newTemps()
            </summary>
            <remarks>John Hargreaves' version from Campbell Program 4.1</remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doThomas_VS(System.Double[]@)">
            <summary>
            Numerical solution of the differential equations. Solves the
            tri_diagonal matrix using the Thomas algorithm, Thomas, L.H. (1946)
            "Elliptic problems in linear difference equations over a network"
            Watson Sci Comput. Lab. Report., (Columbia University, New York)"
            RETURNS newTemps()
            </summary>
            <remarks>Val Snow's original version</remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.InterpTemp(System.Double)">
            <summary>
             Interpolate air temperature
            </summary>
            <param name="timeHours">time of day that air temperature is required</param>
            <returns>Interpolated air temperature for specified time of day (oC)</returns>
            <remarks>
            Notes:
             Between midinight and MinT_time just a linear interpolation between
             yesterday's midnight temperature and today's MinTg. For the rest of
             the day use a sin function. 
            Note: This can result in the Midnight temperature being lower than the following minimum.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.doUpdate(System.Int32)">
            <summary>
            Determine min, max, and average soil temperature from the
            half-hourly iterations.
            RETURNS gAveTsoil(); gMaxTsoil(); gMinTsoil()
            </summary>
            <param name="IterationsPerDay">number of times in a day the function is called</param>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.RhoA(System.Double,System.Double)">
            <summary>
                calculate the density of air (kg/m3) at a given temperature and pressure
            </summary>
            <param name="temperature">temperature (oC)</param>
            <param name="AirPressure">air pressure (hPa)</param>
            <returns>density of air</returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.boundaryLayerConductanceF(System.Double[]@)">
            <summary>
                Calculate atmospheric boundary layer conductance.
                From Program 12.2, p140, Campbell, Soil Physics with Basic.
            </summary>
            <returns>thermal conductivity of surface layer (W/m2/K)</returns>
            <remarks> During first stage drying, evaporation prevents the surface from becoming hot,
            so stability corrections are small. Once the surface dries and becomes hot, boundary layer
            resistance is relatively unimportant in determining evaporation rate.
            A dry soil surface reaches temperatures well above air temperatures during the day, and can be well
            below air temperature on a clear night. Thermal stratification on a clear night can be strong enough
            to reduce sensible heat exchange between the soil surface and the air to almost nothing. If stability
            corrections are not made, soil temperature profiles can have large errors.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.boundaryLayerConductanceConst">
            <summary>
                Calculate boundary layer conductance.
                From Program 12.2, p140, Campbell, Soil Physics with Basic.
            </summary>
            <returns>thermal conductivity  (W/m2/K)</returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.kelvinT(System.Double)">
            <summary>
            Convert deg Celcius to deg Kelvin
            </summary>
            <param name="celciusT">(INPUT) Temperature in deg Celcius</param>
            <returns>Temperature in deg Kelvin</returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.CalcSoilTemp(System.Double[]@)">
            <summary>
             Purpose
                      Calculates average soil temperature at the centre of each layer
                      based on the soil temperature model of EPIC (Williams et al 1984)
            </summary>
            <param name="soilTempIO">(OUTPUT) temperature of each layer in profile</param>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.LayerTemp(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="depthLag">(INPUT) lag factor for depth (radians)</param>
            <param name="alx">(INPUT) time in radians of a g_year from hottest instance</param>
            <param name="deltaTemp">(INPUT) change in surface soil temperature since hottest day (deg c)</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.TempDelta(System.Double)">
            <summary>
             Purpose
                      Calculates  the rate of change in soil surface temperature
                      with time.
            </summary>
            <param name="alx">(INPUT) time of year in radians from warmest instance</param>
            <returns>Change in temperature</returns>
            <remarks>
                      jngh 24-12-91.  I think this is actually a correction to adjust
                      today's normal sinusoidal soil surface temperature to the
                      current temperature conditions.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.SurfaceTemperatureInit">
            <summary>
            Calculate initial soil surface temperature
            </summary>
            <returns> initial soil surface temperature</returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.DampingDepth">
            <summary>
            Purpose
                      Now get the temperature damping depth. This is a function of the
                        average bulk density of the soil and the amount of water above
                        the lower limit. I think the damping depth units are
                        mm depth/radian of a year
            </summary>
            <returns>soil temperature damping depth (mm)</returns>
            <remarks>
                 Notes
                  241091 consulted Brian Wall.  For soil temperature an estimate of
                  the water content of the total profile is required, not the plant
                  extractable soil water.  Hence the method used here - difference
                  total lower limit and total soil water instead of sum of differences
                  constrained to and above.  Here the use of lower limit is of no
                  significance - it is merely a reference point, just as 0.0 could
                  have been used.  jngh
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.DoNetRadiation(System.Double[]@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Calculate initial variables for net radiation per timestep
            </summary>
            <param name="solarRadn">(OUTPUT)</param>
            <param name="cloudFr">(OUTPUT)</param>
            <param name="cva">(OUTPUT)</param>
            <param name="ITERATIONSperDAY"> (INPUT)</param>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.RadnNetInterpolate(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the net radiation at the soil surface.
            </summary>
            <param name="solarRadn"></param>
            <param name="cloudFr"></param>
            <param name="cva"></param>
            <returns>Net radiation (SW and LW) for timestep (MJ)</returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.Divide(System.Double,System.Double,System.Double)">
            <summary>
                  Divides one number by another.  If the divisor is zero or overflow
                  would occur a specified default is returned.  If underflow would
                  occur, nought is returned.
            </summary>
            <param name="dividend">dividend - quantity to be divided</param>
            <param name="divisor">divisor</param>
            <param name="defaultValue">default value if overflow, underflow or divide by zero</param>
            <returns></returns>
            <remarks>
             Definition
                Returns (dividend / divisor) if the division can be done
                without overflow or underflow.  If divisor is zero or
                overflow would have occurred, default is returned.  If
                underflow would have occurred, zero is returned.
                '''
            Assumptions
                  largest/smallest real number is 1.0e+/-30
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.SumOfRange(System.Double[],System.Int32,System.Int32)">
            <summary>
            Get the sum of all elements in an array between 'start' and 'end'
            </summary>
            <param name="array"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.BoundCheck(System.Double,System.Double,System.Double,System.String)">
            <summary>
                checks if a variable lies outside lower and upper bounds.
                Reports an err if it does.
            </summary>
            <param name="VariableValue">value to be validated</param>
            <param name="Lower">lower limit of value</param>
            <param name="Upper">upper limit of value</param>
            <param name="VariableName">variable name to be validated</param>
            <remarks>
             Definition
                This subroutine will issue a warning message using the
                name of "value", "vname", if "value" is greater than
                ("upper" + 2 * error_margin("upper")) or if "value" is less than
                ("lower" - 2 *error_margin("lower")).  If  "lower" is greater
                than ("upper" + 2 * error_margin("upper")) , then a warning
                message will be flagged to that effect.
                '''
            Notes
                reports err if value GT upper or value LT lower or lower GT upper
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.BoundCheckArray(System.Double[],System.Double,System.Double,System.String)">
            <summary>
            Check bounds of values in an array
            </summary>
            <param name="array">array to be checked</param>
            <param name="LowerBound">lower bound of values</param>
            <param name="UpperBound">upper bound of values</param>
            <param name="ArrayName">key string of array</param>
            <remarks>
             Definition
                Each of the "size" elements of "array" should be greater than or equal to
                ("lower" - 2 *error_margin("lower")) and less than or equal to
                ("upper" + 2 * error_margin("upper")).  A warning error using
                the name of "array", "name", will be flagged for each element
                of "array" that fails the above test.  If  "lower" is greater
                than ("upper" + 2 * error_margin("upper")) , then a warning
                message will be flagged to that effect "size" times.
                '''
             Assumptions
                each element has same bounds.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.RealsAreEqual(System.Double,System.Double)">
            <summary>
            Tests if two real values are practically equal
            </summary>
            <param name="double1"></param>
            <param name="double2"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.bound(System.Double,System.Double,System.Double)">
            <summary>
            constrains a variable within bounds of lower and upper
            </summary>
            <param name="var">(INPUT) variable to be constrained</param>
            <param name="lower">(INPUT) lower limit of variable</param>
            <param name="upper">(INPUT) upper limit of variable</param>
            <returns>Constrained value</returns>
            <remarks>
            Returns "lower", if "var" is less than "lower".  Returns "upper" if "var" is greater than "upper".  Otherwise returns "var".  
            A warning error is flagged if "lower" is greater than "upper".
            If the lower bound is > the upper bound, the variable remains unconstrained.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.sum_products_real_array(System.Double[],System.Double[])">
            <summary>
            returns sum_of of products of arrays var1 and var2, up to level limit. 
            each level of one array is multiplied by the corresponding level of the other.
            </summary>
            <param name="var1">(INPUT) first array for multiply</param>
            <param name="var2">(INPUT) 2nd array for multiply</param>
            <returns>Returns sum of  ("var1"(j) * "var2"(j))   for all j in  1 .. upperBound.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.multiplyArray(System.Double[],System.Double)">
            <summary>
            Multiplies array by specified multiplier
            </summary>
            <param name="array">(INPUT/OUTPUT)</param>
            <param name="multiplier"></param>
            <remarks></remarks>
        </member>
        <member name="M:Models.Soils.SoilTemp.SoilTemperature.offsetDayOfYear(System.Int32,System.Int32,System.Int32)">
            <summary>
             adds or subtracts specified days to/from day of year number
            </summary>
            <param name="iyr">(INPUT) year</param>
            <param name="doy">(INPUT) day of year number</param>
            <param name="ndays">(INPUT) number of days to adjust by</param>
            <returns>New day of year</returns>
            <remarks> Returns the day of year for the day "ndays" after the day specified by the day of year, "doy", in the year, "iyr".
             "ndays" may well be negative.
            </remarks>
        </member>
        <member name="T:Models.Soils.Standardiser.Layers">
            <summary>Methods to standardise a soil ready for running in APSIM.</summary>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.Standardise(Models.Soils.Soil)">
            <summary>Standardise the specified soil with a uniform thickness.</summary>
            <param name="soil">The soil.</param>
            <returns>A standardised soil.</returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetPhysicalPropertiesThickness(Models.Soils.IPhysical,System.Double[],Models.Soils.Soil)">
            <summary>Sets the water thickness.</summary>
            <param name="physical">The water.</param>
            <param name="toThickness">To thickness.</param>
            <param name="soil">Soil</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetSoilWaterThickness(Models.WaterModel.WaterBalance,System.Double[])">
            <summary>Sets the soil water thickness.</summary>
            <param name="soilWater">The soil water.</param>
            <param name="thickness">Thickness to change soil water to.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetSoilOrganicMatterThickness(Models.Soils.Organic,System.Double[])">
            <summary>Sets the soil organic matter thickness.</summary>
            <param name="soilOrganicMatter">The soil organic matter.</param>
            <param name="thickness">Thickness to change soil water to.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetAnalysisThickness(Models.Soils.Chemical,System.Double[])">
            <summary>Sets the analysis thickness.</summary>
            <param name="analysis">The analysis.</param>
            <param name="thickness">The thickness to change the analysis to.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetSampleThickness(Models.Soils.Sample,System.Double[],Models.Soils.Soil)">
            <summary>Sets the sample thickness.</summary>
            <param name="sample">The sample.</param>
            <param name="thickness">The thickness to change the sample to.</param>
            <param name="soil">The soil</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetSWIMThickness(Models.Soils.Swim3,System.Double[],Models.Soils.Soil)">
            <summary>Sets the sample thickness.</summary>
            <param name="swim">The swim model.</param>
            <param name="thickness">The thickness to change the sample to.</param>
            <param name="soil">The soil</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.SetCropThickness(Models.Soils.SoilCrop,System.Double[],Models.Soils.IPhysical)">
            <summary>Convert the crop to the specified thickness. Ensures LL is between AirDry and DUL.</summary>
            <param name="crop">The crop to convert</param>
            <param name="thickness">The thicknesses to convert the crop to.</param>
            <param name="physical">The soil the crop belongs to.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.MapConcentration(System.Double[],System.Double[],System.Double[],System.Double,System.Boolean)">
            <summary>Map soil variables (using concentration) from one layer structure to another.</summary>
            <param name="fromValues">The from values.</param>
            <param name="fromThickness">The from thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="defaultValueForBelowProfile">The default value for below profile.</param>
            <param name="allowMissingValues">Tolerate missing values (double.NaN)?</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.MapUsingBD(System.Double[],System.Double[],System.Double[],Models.Soils.Soil,System.Double)">
            <summary>Map soil variables (using BD) from one layer structure to another.</summary>
            <param name="fromValues">The from values.</param>
            <param name="fromThickness">The from thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="soil">The soil.</param>
            <param name="defaultValueForBelowProfile">The default value for below profile.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.MapSW(System.Double[],System.Double[],System.Double[],Models.Soils.Soil)">
            <summary>Map soil water from one layer structure to another.</summary>
            <param name="fromValues">The from values.</param>
            <param name="fromThickness">The from thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="soil">The soil.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.MapMass(System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>Map soil variables from one layer structure to another.</summary>
            <param name="fromValues">The f values.</param>
            <param name="fromThickness">The f thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="allowMissingValues">Tolerate missing values (double.NaN)?</param>
            <returns>The from values mapped to the specified thickness</returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.AirDryMapped(Models.Soils.IPhysical,System.Double[])">
            <summary>AirDry - mapped to the specified layer structure. Units: mm/mm        /// </summary>
            <param name="physical">The soil physical properties.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.LLMapped(Models.Soils.SoilCrop,System.Double[])">
            <summary>Crop lower limit - mapped to the specified layer structure. Units: mm/mm        /// </summary>
            <param name="crop">The crop.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.BDMapped(Models.Soils.IPhysical,System.Double[])">
            <summary>Bulk density - mapped to the specified layer structure. Units: mm/mm</summary>
            <param name="physical">The soil physical properties.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.LL15Mapped(Models.Soils.IPhysical,System.Double[])">
            <summary>Lower limit 15 bar - mapped to the specified layer structure. Units: mm/mm        /// </summary>
            <param name="physical">The soil physical properties.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.Layers.DULMapped(Models.Soils.IPhysical,System.Double[])">
            <summary>Drained upper limit - mapped to the specified layer structure. Units: mm/mm        /// </summary>
            <param name="physical">The soil physical properties.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Soils.Standardiser.SoilChecker">
            <summary>
            A class for checking a soil for errors.
            </summary>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilChecker.CheckWithStandardisation(Models.Soils.Soil,Models.Core.ISummary)">
            <summary>
            Checks validity of soil parameters. Throws if soil is invalid.
            Standardises the soil before performing tests.
            </summary>
            <param name="soilToCheck">The soil to check.</param>
            <param name="summary">A summary instance to write warning messages to.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilChecker.Check(Models.Soils.Soil,Models.Core.ISummary)">
            <summary>
            Checks validity of soil parameters. Throws if soil is invalid.
            Does not standardise the soil before performing tests.
            </summary>
            <param name="soil">The soil to check.</param>
            <param name="summary">A summary instance to write warning messages to.</param>
        </member>
        <member name="T:Models.Soils.Standardiser.SoilDefaults">
            <summary>Implements the defaults as listed in the soil protocol.</summary>
            <remarks>
            A PROTOCOL FOR THE DEVELOPMENT OF SOIL PARAMETER VALUES FOR USE IN APSIM
                Neal Dalgliesh, Zvi Hochman, Neil Huth and Dean Holzworth
            </remarks>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.FillInMissingValues(Models.Soils.Soil)">
            <summary>Fills in missing values where possible.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.FillInKLForCrop(Models.Soils.SoilCrop)">
            <summary>Fills in KL for crop.</summary>
            <param name="crop">The crop.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.GetRowOfArray(System.Double[0:,0:],System.Int32)">
            <summary>Gets the row of a 2 dimensional array.</summary>
            <param name="array">The array.</param>
            <param name="row">The row index</param>
            <returns>The values in the specified row.</returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.CheckAnalysisForMissingValues(Models.Soils.Soil)">
            <summary>Checks the analysis for missing values.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.FillMissingValues(System.Double[],System.Int32,System.Double)">
            <summary>Changes all missing values in an array to a valid value.</summary>
            <param name="values">The values to in fill.</param>
            <param name="numValues">The number of values that should exist.</param>
            <param name="defaultValue">The value to use if can't find any other value.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.FindFirstValueInArray(System.Double[])">
            <summary>
            Find the first non NaN value in the array.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.CheckCropForMissingValues(Models.Soils.SoilCrop,Models.Soils.Soil)">
            <summary>Checks the crop for missing values.</summary>
            <param name="crop">The crop.</param>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.CheckSampleForMissingValues(Models.Soils.Sample,Models.Soils.Soil)">
            <summary>Checks the sample for missing values.</summary>
            <param name="sample">The sample.</param>
            <param name="soil">The soil.</param>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosolCropList">
            <summary>
            The black vertosol crop list
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosolCropList">
            <summary>
            The grey vertosol crop list
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.PredictedThickness">
            <summary>
            The predicted thickness
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.PredictedXF">
            <summary>
            The predicted xf
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.WheatKL">
            <summary>
            The wheat kl
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.SorghumKL">
            <summary>
            The sorghum kl
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BarleyKL">
            <summary>
            The barley kl
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.ChickpeaKL">
            <summary>
            The chickpea kl
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.MungbeanKL">
            <summary>
            The mungbean kl
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.CottonKL">
            <summary>
            The cotton kl
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.FababeanKL">
            <summary>
            The canola kl
            </summary>
            private static double[] CanolaKL = new double[] { 0.06, 0.06, 0.06, 0.04, 0.04, 0.02, 0.01 };
            <summary>
            The pigeon pea kl
            </summary>
            private static double[] PigeonPeaKL = new double[] { 0.06, 0.06, 0.06, 0.05, 0.04, 0.02, 0.01 };
            <summary>
            The maize kl
            </summary>
            private static double[] MaizeKL = new double[] { 0.06, 0.06, 0.06, 0.04, 0.04, 0.02, 0.01 };
            <summary>
            The cowpea kl
            </summary>
            private static double[] CowpeaKL = new double[] { 0.06, 0.06, 0.06, 0.04, 0.04, 0.02, 0.01 };
            <summary>
            The sunflower kl
            </summary>
            private static double[] SunflowerKL = new double[] { 0.01, 0.01, 0.08, 0.06, 0.04, 0.02, 0.01 };
            <summary>
            The fababean kl
            </summary>
        </member>
        <member name="T:Models.Soils.Standardiser.SoilDefaults.BlackVertosol">
            <summary>
            The lucerne kl
            </summary>
            private static double[] LucerneKL = new double[] { 0.01, 0.01, 0.01, 0.01, 0.09, 0.09, 0.09 };
            <summary>
            The perennial kl
            </summary>
            private static double[] PerennialKL = new double[] { 0.01, 0.01, 0.01, 0.01, 0.09, 0.07, 0.05 };
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosol.CottonA">
            <summary>
            The cotton a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosol.SorghumA">
            <summary>
            The sorghum a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosol.WheatA">
            <summary>
            The wheat a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosol.CottonB">
            <summary>
            The cotton b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosol.SorghumB">
            <summary>
            The sorghum b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.BlackVertosol.WheatB">
            <summary>
            The wheat b
            </summary>
        </member>
        <member name="T:Models.Soils.Standardiser.SoilDefaults.GreyVertosol">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.CottonA">
            <summary>
            The cotton a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.SorghumA">
            <summary>
            The sorghum a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.WheatA">
            <summary>
            The wheat a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.BarleyA">
            <summary>
            The barley a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.ChickpeaA">
            <summary>
            The chickpea a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.FababeanA">
            <summary>
            The fababean a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.MungbeanA">
            <summary>
            The mungbean a
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.CottonB">
            <summary>
            The cotton b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.SorghumB">
            <summary>
            The sorghum b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.WheatB">
            <summary>
            The wheat b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.BarleyB">
            <summary>
            The barley b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.ChickpeaB">
            <summary>
            The chickpea b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.FababeanB">
            <summary>
            The fababean b
            </summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.GreyVertosol.MungbeanB">
            <summary>
            The mungbean b
            </summary>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.AddPredictedCrops(Models.Soils.Soil)">
            <summary>
            Return a list of predicted crop names or an empty string[] if none found.
            </summary>
            <param name="soil">The soil.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.PredictedCrop(Models.Soils.Soil,System.String)">
            <summary>
            Return a predicted SoilCrop for the specified crop name or null if not found.
            </summary>
            <param name="soil">The soil.</param>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.PredictedLL(Models.Soils.IPhysical,System.Double[],System.Double)">
            <summary>
            Calculate and return a predicted LL from the specified A and B values.
            </summary>
            <param name="physical">The soil physical properties.</param>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns></returns>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.StandardThickness">
            <summary>Standard thicknesses</summary>
        </member>
        <member name="F:Models.Soils.Standardiser.SoilDefaults.StandardKL">
            <summary>Standard Kls</summary>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilDefaults.ModifyKLForSubSoilConstraints(Models.Soils.SoilCrop,Models.Soils.Soil)">
            <summary>
            Modify the KL values for subsoil constraints.
            </summary>
            <remarks>
            From:
            Hochman, Z., Dang, Y.P., Schwenke, G.D., Dalgliesh, N.P., Routley, R., McDonald, M., 
                Daniells, I.G., Manning, W., Poulton, P.L., 2007. 
                Simulating the effects of saline and sodic subsoils on wheat crops 
                growing on Vertosols. Australian Journal of Agricultural Research 58, 802–810. doi:10.1071/ar06365
            </remarks>
            <param name="crop"></param>
            <param name="soil">The soil the crop belongs to.</param>
        </member>
        <member name="T:Models.Soils.Standardiser.SoilStandardiser">
            <summary>Methods for standardising an APSIM soil ready for running.</summary>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilStandardiser.Standardise(Models.Soils.Soil)">
            <summary>Creates an apsim ready soil.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilStandardiser.MergeSamplesIntoOne(Models.Soils.Soil)">
            <summary>Removes all but one sample from the specified soil.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilStandardiser.CreateInitialSample(Models.Soils.Soil)">
            <summary>Creates an initial sample.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilStandardiser.MergeArrays(System.Double[],System.Double[])">
            <summary>Merge a secondary array into a primary arrays.</summary>
            <param name="primaryArray">The primary array.</param>
            <param name="secondaryArray">The secondary array.</param>
            <returns>The primary array with missing values copied from the secondary array.</returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilStandardiser.RemoveInitialWater(Models.Soils.Soil)">
            <summary>Removes the initial water.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="T:Models.Soils.Standardiser.SoilUnits">
            <summary>Convert soil units to APSIM standard.</summary>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilUnits.Convert(Models.Soils.Soil)">
            <summary>Convert soil units to APSIM standard.</summary>
            <param name="soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilUnits.SWVolumetric(Models.Soils.Sample,Models.Soils.Soil)">
            <summary>Calculates volumetric soil water for the given sample.</summary>
            <param name="sample">The sample.</param>
            <param name="soil">The soil.</param>
            <returns>Volumetric water (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilUnits.OCTotalPercent(System.Double[],Models.Soils.Sample.OCSampleUnitsEnum)">
            <summary>Converts OC to total %</summary>
            <param name="oc">The oc.</param>
            <param name="units">The current units.</param>
            <returns>The converted values</returns>
        </member>
        <member name="M:Models.Soils.Standardiser.SoilUnits.PHWater(System.Double[],Models.Soils.Sample.PHSampleUnitsEnum)">
            <summary>Converst PH to water units.</summary>
            <param name="ph">The ph.</param>
            <param name="units">The current units.</param>
            <returns>The converted values</returns>
        </member>
        <member name="T:Models.Soils.Swim3">
            <summary>
             .NET port of the Fortran SWIM3 model
             Ported by Eric Zurcher July 2014
            </summary> 
        </member>
        <member name="F:Models.Soils.Swim3.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.Soils.Swim3.solutes">
            <summary>Link to NO3.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.PrecipitationInterception">
            <summary> The amount of rainfall intercepted by crop and residue canopies </summary>
        </member>
        <member name="F:Models.Soils.Swim3.initial_conductance">
            <summary>
            (/h)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.a_to_evap_fact">
            <summary>
            converts residue specfic area 'A' to"
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_eos_coef">
            <summary>
            coef. in exp effect of canopy on soil water evaporation. In previous version initialised to 1.7.
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.cover_effects">
            <summary>
            The effect of residue and canopy cover is implemented as in the soilwat model.
            These can be turn off for compatibility with SWIM standalone.
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_fact">
            <summary>
            reducing pot. soil evap. = 1.7 Adams, Arkin and Ritchie 1976
            Set the default rainfall and evaporation daily time courses
            these are used if the user does not specify them in the met file.
            Canopy factors for cover runoff effect
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_fact_height">
            <summary>
            heights for canopy factors (mm)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_fact_default">
            <summary>
            default canopy factor in absence of height
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.negative_conc_warn">
            <summary>
            Negative solute concentration below which a warning error is thrown
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.negative_conc_fatal">
            <summary>
            Negative solute concentration below which a fatal error is thrown
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.max_iterations">
            <summary>
            number of iterations before timestep is halved
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.ersoil">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.ernode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.errex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.dppl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.dpnl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.slcerr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.min_xylem_potential">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.root_radius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.root_conductance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_rain_time">
            <summary>
            default time of rainfall (hh:mm)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_rain_duration">
            <summary>
            default duration of rainfall (min)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_evap_time">
            <summary>
            default time of evaporation (hh:mm)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_evap_duration">
            <summary>
            default duration of evaporation (min)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.hydrol_effective_depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.theta">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SW">
            <summary>Get volumetric water content (mm/mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.SWmm">
            <summary>Get water content (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.PAW">
            <summary>Plant available water SW-LL15 (mm/mm).</summary>
        </member>
        <member name="P:Models.Soils.Swim3.PAWmm">
            <summary>Plant available water SW-LL15 (mm).</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ESW">
            <summary>Gets extractable soil water relative to LL15(mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.psi">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.Runoff">
            <summary>Gets the amount of water runoff (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Es">
            <summary>Gets the actual (realised) soil water evaporation (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Eos">
            <summary>Gets potential evaporation from soil surface (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Drainage">
            <summary>Gets the amount of water drainage from bottom of profile(mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Eo">
            <summary>Gets potential evapotranspiration of the whole soil-plant system (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Flow">
            <summary>Amount of water moving upward from each soil layer during unsaturated flow (negative value means downward movement) (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Salb">
            <summary>
            Base soil albedo
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.CN2Bare">
            <summary>
            Gets the bare soil runoff curve number
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.CNRed">
            <summary>
            Gets the max. reduction in curve number due to cover
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.CNCov">
            <summary>
            Gets the cover for max curve number reduction
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.KDul">
            <summary>
            Gets the hydraulic conductivity at DUL (mm/d)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.PSIDul">
            <summary>
            Gets the matric Potential at DUL (cm)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.VC">
            <summary>
            Gets the Vapour Conductivity Calculations
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTMin">
            <summary>
            Gets the Minimum Timestep (min)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTMax">
            <summary>
            Gets the Maximum Timestep (min)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.MaxWaterIncrement">
            <summary>
            Gets or sets the maximum water increment.
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SpaceWeightingFactor">
            <summary>
            Gets or sets the space weighting factor.
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SoluteSpaceWeightingFactor">
            <summary>
            Gets or sets the solute space weighting factor.
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.Dis">
            <summary>Gets or sets the dis.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Disp">
            <summary>Gets or sets the disp.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.A">
            <summary>Gets or sets a.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTHC">
            <summary>Gets or sets the DTHC.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTHP">
            <summary>Gets or sets the DTHP.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Diagnostics">
            <summary>
            Gets or sets a value indicating whether Diagnostic Information? is shown
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.Pond">
            <summary>Pond depth (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.SubsurfaceDrain">
            <summary>Subsurface drain (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.WaterTable">
            <summary>Water table depth (mm)</summary>
        </member>
        <member name="M:Models.Soils.Swim3.SetSurfaceBCForCurveNumber">
            <summary>
            Runoff calculated by curve number - no ponding allowed.
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.SetSurfaceBCForPowerFunction(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Runoff calculated by a power function.
            </summary>
            <param name="minimumSurfaceStorage">Minimum surface storage (mm).</param>
            <param name="maximumSurfaceStorage">Maximum surface storage (mm).</param>
            <param name="initialSurfaceStorage">Initial surface storage (mm).</param>
            <param name="precipitationConstant">Precipitation constant (mm).</param>
            <param name="runoffRateFactor">Runoff rate factor (mm/mm^p).</param>
            <param name="runoffRatePower">Runoff rate power ().</param>
        </member>
        <member name="M:Models.Soils.Swim3.SetLowerBCForGradient(System.Double)">
            <summary>
            Set the lower boundary condition for gradient.
            </summary>
            <param name="bbcGradient">Bottom boundary condition (cm).</param>
        </member>
        <member name="M:Models.Soils.Swim3.SetLowerBCForGivenPotential(System.Double)">
            <summary>
            Set the constant potential bottom boundary.
            </summary>
            <param name="bbcPotential">Constant potential bottom boundary (cm).</param>
        </member>
        <member name="M:Models.Soils.Swim3.SetLowerBCForSeepage(System.Double)">
            <summary>
            Set the constant potential bottom boundary.
            </summary>
            <param name="bbcPotentialSeepage">Constant potential bottom boundary (cm).</param>
        </member>
        <member name="M:Models.Soils.Swim3.SetTopBCForInfiniteSurfaceConductance">
            <summary>
            Set the top boundary condition for infinite surface conductance.
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.SetTopBCForConstantPotential">
            <summary>
            Set the top boundary condition for constant potential.
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.SetTopBCForConductanceFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the top boundary condition for conductance function.
            </summary>
            <param name="minimumConductance">Minimum conductance (/h).</param>
            <param name="maximumConductance">Maximum conductance (/h).</param>
            <param name="initialConductance">Initial conductance (/h).</param>
            <param name="precipitationConstant">Precipitation constant (cm).</param>
        </member>
        <member name="T:Models.Soils.Swim3.NullTypeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.OnInitialised(System.Object,System.EventArgs)">
            <summary>
            Start of simulation event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.Swim3.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Start of simulation event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.Swim3.OnReset">
            <summary>
            Reset the model
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.Tillage(Models.Soils.TillageType)">
            <summary>
            Perform tillage
            </summary>
            <param name="Tillage"></param>
        </member>
        <member name="M:Models.Soils.Swim3.Sum_Report">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>Called when an irrigation occurs.</summary>
            <param name="sender">The sender.</param>
            <param name="Irrigated">The event data.</param>
        </member>
        <member name="M:Models.Soils.Swim3.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>
            Start of simulation event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.Swim3.GetSWUptake(System.Int32,System.Double[]@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="vegnum"></param>
            <param name="uarray"></param>
            <param name="uflag"></param>
        </member>
        <member name="M:Models.Soils.Swim3.GetSupply(System.Int32,System.Int32,System.Double[]@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="vegnum"></param>
            <param name="sol"></param>
            <param name="uarray"></param>
            <param name="uflag"></param>
        </member>
        <member name="P:Models.Soils.Swim3.PotentialInfiltration">
            <summary> This is set by Microclimate and is rainfall less that intercepted by the canopy and residue components </summary>
        </member>
        <member name="M:Models.Soils.Swim3.GetCropVariables">
            <summary>
            Get the values of solute variables from other modules
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.IssueWarning(System.String)">
            <summary>
            Issues the warning.
            </summary>
            <param name="warningText">The warning text.</param>
        </member>
        <member name="M:Models.Soils.Swim3.RemoveWater(System.Double[])">
            <summary>Remove water from the profile</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Thickness">
            <summary>Gets or sets soil thickness for each layer (mm)(</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LateralOutflow">
            <summary>Amount of water moving laterally out of the profile (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.FlowNO3">
            <summary>NO3 movement out of a layer. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.FlowNH4">
            <summary>NH4 movement out of a layer. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.FlowUrea">
            <summary>NH4 movement out of a layer. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.FlowCl">
            <summary>CL movement out of a layer. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SubsurfaceDrainNO3">
            <summary>NO3 movement out of a sub surface drain. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SubsurfaceDrainNH4">
            <summary>NH4 movement out of a sub surface drain. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SubsurfaceDrainUrea">
            <summary>NH4 movement out of a sub surface drain. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SubsurfaceDrainCL">
            <summary>CL movement out of a sub surface drain. </summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachNO3">
            <summary>NO3 leached from the bottom of the profile.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachNH4">
            <summary>NH4 leached from the bottom of the profile.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachUrea">
            <summary>Urea leached from the bottom of the profile.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachCl">
            <summary>CL leached from the bottom of the profile.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ConcWaterNO3">
            <summary>Amount of NO3 not adsorbed (ppm).</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ConcWaterNH4">
            <summary>Amount of NH4 not adsorbed (ppm).</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ConcWaterUrea">
            <summary>Amount of Urea not adsorbed (ppm).</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ConcWaterCl">
            <summary>Amount of CL not adsorbed (ppm).</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Flux">
            <summary>Amount of water moving downward out of each soil layer due to gravity drainage (above DUL) (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ResidueInterception">
            <summary>Loss of precipitation due in interception of surface residues (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.SoluteFluxEfficiency">
            <summary>The efficiency (0-1) that solutes move down with water.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.SoluteFlowEfficiency">
            <summary>The efficiency (0-1) that solutes move up with water.</summary>
        </member>
        <member name="M:Models.Soils.Swim3.SetWaterTable(System.Double)">
            <summary>Sets the water table.</summary>
            <param name="InitialDepth">The initial depth.</param>
        </member>
        <member name="M:Models.Soils.Swim3.Reset">
            <summary>Perform a reset</summary>
        </member>
        <member name="M:Models.Soils.Swim3.Tillage(System.String)">
            <summary>Perform tillage</summary>
        </member>
        <member name="T:Models.Soils.SwimSoluteParameters">
            <summary>
            A model for capturing swim solute parameters
            </summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.WaterTableConcentration">
            <summary>Concentration of solute in water table (ppm).</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.D0">
            <summary>Gets or sets the diffusion coefficient (D0).</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.Thickness">
            <summary>Layerwise thickness.</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.Exco">
            <summary>Gets or sets the exco.</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.FIP">
            <summary>Gets or sets the fip.</summary>
        </member>
        <member name="T:Models.Soils.SwimSubsurfaceDrain">
            <summary>
            SWIM sub surface drain model
            </summary>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.DrainDepth">
            <summary>Gets or sets the drain depth.</summary>
            <value>The drain depth.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.DrainSpacing">
            <summary>Gets or sets the drain spacing.</summary>
            <value>The drain spacing.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.DrainRadius">
            <summary>Gets or sets the drain radius.</summary>
            <value>The drain radius.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.Klat">
            <summary>Gets or sets the klat.</summary>
            <value>The klat.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.ImpermDepth">
            <summary>Gets or sets the imperm depth.</summary>
            <value>The imperm depth.</value>
        </member>
        <member name="T:Models.Soils.SwimWaterTable">
            <summary>
            SWIM water table
            </summary>
        </member>
        <member name="P:Models.Soils.SwimWaterTable.WaterTableDepth">
            <summary>Gets or sets the water table depth.</summary>
            <value>The water table depth.</value>
        </member>
        <member name="T:Models.Soils.TillageType">
            <summary>
            Tillage type structure
            </summary>
        </member>
        <member name="P:Models.Soils.TillageType.f_incorp">
            <summary>Gets or sets the f_incorp.</summary>
            <value>The f_incorp.</value>
        </member>
        <member name="P:Models.Soils.TillageType.tillage_depth">
            <summary>Gets or sets the tillage_depth.</summary>
            <value>The tillage_depth.</value>
        </member>
        <member name="P:Models.Soils.TillageType.cn_red">
            <summary>Gets or sets the cn_red.</summary>
            <value>The cn_red.</value>
        </member>
        <member name="P:Models.Soils.TillageType.cn_rain">
            <summary>Gets or sets the cn_rain.</summary>
            <value>The cn_rain.</value>
        </member>
        <member name="T:Models.Soils.TillageTypeDelegate">
            <summary>A deletegate for publishing a tillage event.</summary>
            <param name="sender"></param>
            <param name="tillageType"></param>
        </member>
        <member name="T:Models.Manager">
            <summary>
            The manager model
            </summary>
        </member>
        <member name="F:Models.Manager.cSharpCode">
            <summary>The code to compile.</summary>
        </member>
        <member name="F:Models.Manager.afterCreation">
            <summary>Is the model after creation.</summary>
        </member>
        <member name="M:Models.Manager.Compiler">
            <summary>
            At design time the [Link] above will be null. In that case search for a 
            Simulations object and get its compiler.
            
            </summary>
        </member>
        <member name="M:Models.Manager.TryGetCompiler">
            <summary>
            At design time the [Link] above will be null. In that case search for a 
            Simulations object and get its compiler.
            </summary>
            <returns>True if compiler was found.</returns>
        </member>
        <member name="P:Models.Manager.Code">
            <summary>Gets or sets the code to compile.</summary>
        </member>
        <member name="P:Models.Manager.Parameters">
            <summary>The script Model that has been compiled</summary>
        </member>
        <member name="P:Models.Manager.DoSerialiseChildren">
            <summary>Allow children to be serialised?</summary>
        </member>
        <member name="P:Models.Manager.Location">
            <summary>
            Stores column and line of caret, and scrolling position when editing in GUI
            This isn't really a Rectangle, but the Rectangle class gives us a convenient
            way to store both the caret position and scrolling information.
            </summary>
        </member>
        <member name="P:Models.Manager.ActiveTabIndex">
            <summary>
            Stores whether we are currently on the tab displaying the script.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="M:Models.Manager.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="M:Models.Manager.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Invoked at start of simulation.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Manager.RebuildScriptModel">
            <summary>Rebuild the script model and return error message if script cannot be compiled.</summary>
        </member>
        <member name="M:Models.Manager.SetParametersInScriptModel">
            <summary>Set the scripts parameters from the 'xmlElement' passed in.</summary>
        </member>
        <member name="M:Models.Manager.GetParametersFromScriptModel">
            <summary>Get all parameters from the script model and store in our parameters list.</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Manager.Document">
            <summary>
            Document the script iff it overrides its Document() method.
            Otherwise, return nothing.
            </summary>
        </member>
        <member name="T:Models.Operation">
            <summary>
            Operations model
            </summary>
        </member>
        <member name="M:Models.Operation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Models.Operation.Date">
            <summary>Gets or sets the date.</summary>
        </member>
        <member name="P:Models.Operation.Action">
            <summary>Gets or sets the action.</summary>
            <value>The action.</value>
        </member>
        <member name="M:Models.Operation.GetActionModel">
            <summary>Gets the action model.</summary>
            <returns></returns>
        </member>
        <member name="P:Models.Operation.Enabled">
            <summary>
            Used to determine whether the operation is enabled or not.
            </summary>
        </member>
        <member name="T:Models.Operations">
            <summary>This class encapsulates an operations schedule.</summary>
        </member>
        <member name="F:Models.Operations.Clock">
            <summary>The clock</summary>
        </member>
        <member name="P:Models.Operations.Operation">
            <summary>Gets or sets the schedule.</summary>
            <value>The schedule.</value>
        </member>
        <member name="M:Models.Operations.OnDoManagement(System.Object,System.EventArgs)">
            <summary>Simulation is commencing.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">
            Bad operations action found:  + operation.Action
            or
            Cannot find model:  + modelName
            or
            Cannot find method:  + methodName +  in model:  + modelName
            or
            Cannot find argument:  + argumentName +  in operation call:  + operation.Action
            </exception>
        </member>
        <member name="M:Models.Operations.GetArgumentsForMethod(System.String[],System.Reflection.MethodInfo)">
            <summary>
            Try and get the arguments for the specified method. Will return null if arguments don't match the method.
            </summary>
            <param name="arguments">The arguments specified by user.</param>
            <param name="method">The method to try and match to.</param>
            <returns>The arguments or null if not matched.</returns>
        </member>
        <member name="T:Models.Management.RotationManager">
             <summary>
             The rotation manager model
             </summary>
             <remarks>
             The rotation manager visualizes and helps to implement the logic
             in a crop rotation. By itself, the rotation manager understands
             very little of the components with which it is interacting.
             Instead, it relies on other components (usually manager scripts)
             for their specific knowledge. An example crop rotation is provided
             in the RotationManager.apsimx example file.
             
             todo:
            
             - Implement node/arc ID separate from name?
             - dynamic / auto layout of new nodes/arcs
             - ?intellisense isn't picking up member functions? events are OK.
             - Syntax checking of rules / actions.
             - "fixme" where noted in code
             </remarks>
        </member>
        <member name="F:Models.Management.RotationManager.summary">
            <summary>For logging</summary>
        </member>
        <member name="F:Models.Management.RotationManager.eventService">
            <summary>
            Events service. Used to publish events when transitioning
            between stages/nodes.
            </summary>
        </member>
        <member name="P:Models.Management.RotationManager.Nodes">
            <summary>
            The nodes of the graph. These represent states of the rotation.
            </summary>
        </member>
        <member name="P:Models.Management.RotationManager.Arcs">
            <summary>
            The arcs on the bubble chart which define transition
            between stages (nodes).
            </summary>
        </member>
        <member name="P:Models.Management.RotationManager.InitialState">
            <summary>
            Initial state of the rotation.
            </summary>
        </member>
        <member name="P:Models.Management.RotationManager.Verbose">
            <summary>
            Iff true, the rotation manager will print debugging diagnostics
            to the summary file during execution.
            </summary>
        </member>
        <member name="P:Models.Management.RotationManager.CurrentState">
            <summary>
            Current State of the rotation.
            </summary>
        </member>
        <member name="P:Models.Management.RotationManager.Events">
            <summary>
            All dynamic events published by the rotation manager.
            </summary>
            <remarks>
            fixme:
            If any nodes are disconnected from the rest of the graph,
            their names will still be included in this list.
            </remarks>
        </member>
        <member name="E:Models.Management.RotationManager.Transition">
            <summary>
            Called when transitioning between states.
            </summary>
        </member>
        <member name="M:Models.Management.RotationManager.OnCommence(System.Object,System.EventArgs)">
            <summary>
            Called when a simulation commences. Performs one-time initialisation.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Models.Management.RotationManager.OnDoManagement(System.Object,System.EventArgs)">
            <summary>
            Called once per day during the simulation.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Models.Management.RotationManager.TransitionTo(Models.Management.RuleAction)">
            <summary>
            Transition along an arc to another stage/node.
            </summary>
            <param name="transition">The arc to be followed.</param>
        </member>
        <member name="M:Models.Management.RotationManager.CallMethod(System.String)">
            <summary>
            Call a method specified by the user. Method must be public.
            </summary>
            <param name="invocation">
            Method specification from user. e.g.
            [Wheat].Harvest()
            [Manager].SomeMethod("Blargle", -1)
            </param>
            <remarks>
            May need work, was largely copied from operations code.
            It's pretty crude and will probably fail for nested anything
            even remotely complicated (e.g. nested method calls).
            </remarks>
        </member>
        <member name="M:Models.Management.RotationManager.GetArgumentsForMethod(System.String[],System.Reflection.MethodInfo)">
            <summary>
            Parse user-inputted arguments to be provided to a method call.
            </summary>
            <param name="arguments">Arguments inputted by the user.</param>
            <param name="method">Method which is to be called.</param>
        </member>
        <member name="T:Models.Management.RuleAction">
            <summary>Rules and actions required for a transition</summary>
        </member>
        <member name="M:Models.Management.RuleAction.#ctor(APSIM.Shared.Graphing.Arc)">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="P:Models.Management.RuleAction.Conditions">
            <summary>Test conditions that need to be satisfied for this transition</summary>
        </member>
        <member name="P:Models.Management.RuleAction.Actions">
            <summary>Actions undertaken when making this transition</summary>
        </member>
        <member name="M:Models.Management.RuleAction.CopyFrom(Models.Management.RuleAction)">
            <param name="other"></param>
        </member>
        <member name="T:Models.Management.StateNode">
            <summary>A state in the directed graph.</summary>
        </member>
        <member name="M:Models.Management.StateNode.#ctor(APSIM.Shared.Graphing.Node,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="n">Node from which properties will be copied.</param>
            <param name="description">Description of the node.</param>
        </member>
        <member name="P:Models.Management.StateNode.Description">
            <summary>
            Description of the node.
            </summary>
        </member>
        <member name="M:Models.Management.StateNode.CopyFrom(Models.Management.StateNode)">
            <summary>
            Copy all properties of another node into this one.
            </summary>
            <param name="other">A node whose properties will be copied.</param>
        </member>
        <member name="T:Models.Map">
            <summary>
            This component shows a map in the UI.
            </summary>
        </member>
        <member name="M:Models.Map.GetCoordinates(System.Collections.Generic.List{System.String})">
            <summary>List of coordinates to show on map</summary>
        </member>
        <member name="P:Models.Map.Zoom">
            <summary>
            Zoom factor for the map
            </summary>
        </member>
        <member name="F:Models.Map._Center">
            <summary>
            Coordinate of map center
            </summary>
        </member>
        <member name="P:Models.Map.Center">
            <summary>
            Coordinate of the center of the map
            </summary>
        </member>
        <member name="F:Models.Map._Zoom">
            <summary>
            Zoom level
            </summary>
        </member>
        <member name="M:Models.Map.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.Mapping.Coordinate">
            <summary>
            Class for representing a latitude and longitude.
            </summary>
        </member>
        <member name="P:Models.Mapping.Coordinate.Latitude">
            <summary>The latitude</summary>
        </member>
        <member name="P:Models.Mapping.Coordinate.Longitude">
            <summary>The longitude</summary>
        </member>
        <member name="M:Models.Mapping.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Convenience constructor.
            </summary>
            <param name="latitude">Latitude.</param>
            <param name="longitude">Longitude.</param>
        </member>
        <member name="T:Models.Mapping.MapTag">
            <summary>
            A map which can be displayed in autodocs.
            </summary>
        </member>
        <member name="P:Models.Mapping.MapTag.Center">
            <summary>
            Coordinate of the center of the map.
            </summary>
        </member>
        <member name="P:Models.Mapping.MapTag.Zoom">
            <summary>
            Zoom level of the map.
            </summary>
            <remarks>
            todo: check units.
            </remarks>
        </member>
        <member name="P:Models.Mapping.MapTag.Markers">
            <summary>
            Coordinates for markers to be displayed on the map.
            </summary>
        </member>
        <member name="M:Models.Mapping.MapTag.#ctor(Models.Mapping.Coordinate,System.Double,System.Collections.Generic.IEnumerable{Models.Mapping.Coordinate})">
            <summary>
            Create a new <see cref="T:Models.Mapping.MapTag"/> instance.
            </summary>
            <param name="center">Coordinate of the center of the map.</param>
            <param name="zoom">Zoom level of the map.</param>
            <param name="markers">Coordinates for markers to be displayed on the map.</param>
        </member>
        <member name="T:Models.Memo">
            <summary>This is a memo/text component that stores user entered text information.</summary>
        </member>
        <member name="P:Models.Memo.Text">
            <summary>Gets or sets the memo text.</summary>
        </member>
        <member name="M:Models.Memo.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.MicroClimate">
            <summary>
            The module MICROMET, described here, has been developed to allow the calculation of 
            potential transpiration for multiple competing canopies that can be either layered or intermingled.
            </summary>
        </member>
        <member name="F:Models.MicroClimate.clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.MicroClimate.weather">
            <summary>The weather</summary>
        </member>
        <member name="F:Models.MicroClimate.soilWater">
            <summary>The soil water model</summary>
        </member>
        <member name="F:Models.MicroClimate.sunSetAngle">
            <summary>The sun set angle (degrees)</summary>
        </member>
        <member name="F:Models.MicroClimate.sunAngleNetPositiveRadiation">
            <summary>The sun angle for net positive radiation (degrees)</summary>
        </member>
        <member name="F:Models.MicroClimate.microClimatesZones">
            <summary>List of uptakes</summary>
        </member>
        <member name="F:Models.MicroClimate.dayLengthEvap">
            <summary>This is the length of time within the day during which evaporation will take place</summary>
        </member>
        <member name="F:Models.MicroClimate.dayLengthLight">
            <summary>This is the length of time within the day during which the sun is above the horizon</summary>
        </member>
        <member name="P:Models.MicroClimate.a_interception">
            <summary>Gets or sets the a_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.b_interception">
            <summary>Gets or sets the b_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.c_interception">
            <summary>Gets or sets the c_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.d_interception">
            <summary>Gets or sets the d_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.SoilHeatFluxFraction">
            <summary>Fraction of solar radiation reaching the soil surface that results in soil heating</summary>
        </member>
        <member name="P:Models.MicroClimate.MinimumHeightDiffForNewLayer">
            <summary>The minimum height difference between canopies for a new layer to be created (m).</summary>
        </member>
        <member name="P:Models.MicroClimate.CanopyHeight">
            <summary>Height of the tallest canopy.</summary>
        </member>
        <member name="P:Models.MicroClimate.NightInterceptionFraction">
            <summary>The fraction of intercepted rainfall that evaporates at night</summary>
        </member>
        <member name="P:Models.MicroClimate.ReferenceHeight">
            <summary>Height of the weather instruments</summary>
        </member>
        <member name="P:Models.MicroClimate.SurfaceRS">
            <summary>Shortwave radiation reaching the surface (ie above the residue layer) (MJ/m2)</summary>
        </member>
        <member name="P:Models.MicroClimate.PrecipitationInterception">
            <summary>Gets the amount of precipitation intercepted by the canopy (mm).</summary>
        </member>
        <member name="P:Models.MicroClimate.RadiationInterception">
            <summary>Gets the amount of radiation intercepted by the canopy (MJ/m2).</summary>
        </member>
        <member name="P:Models.MicroClimate.PetTotal">
            <summary>Gets the total Penman-Monteith potential evapotranspiration (MJ/m2).</summary>
        </member>
        <member name="P:Models.MicroClimate.PetRadiationTerm">
            <summary>Gets the radiation term of for the Penman-Monteith PET (mm).</summary>
        </member>
        <member name="P:Models.MicroClimate.PetAerodynamicTerm">
            <summary>Gets the aerodynamic term of for the Penman-Monteith PET (mm).</summary>
        </member>
        <member name="P:Models.MicroClimate.DryLeafTimeFraction">
            <summary>Gets the fraction of the daytime in which the leaves are dry (0-1).</summary>
        </member>
        <member name="P:Models.MicroClimate.NetRadiation">
            <summary>Gets the total net radiation, long and short waves (MJ/m2).</summary>
        </member>
        <member name="P:Models.MicroClimate.NetShortWaveRadiation">
            <summary>Gets the net short wave radiation (MJ/m2).</summary>
        </member>
        <member name="P:Models.MicroClimate.NetLongWaveRadiation">
            <summary>Gets the net long wave radiation (MJ/m2).</summary>
        </member>
        <member name="P:Models.MicroClimate.SoilHeatFlux">
            <summary>Gets the flux of heat into the soil (MJ/m2).</summary>
        </member>
        <member name="P:Models.MicroClimate.CanopyCover">
            <summary>Gets the total plant cover (0-1).</summary>
        </member>
        <member name="P:Models.MicroClimate.NumLayers">
            <summary>The number of canopy layers.</summary>
        </member>
        <member name="M:Models.MicroClimate.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Called when simulation starts.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.MicroClimate.DoEnergyArbitration(System.Object,System.EventArgs)">
            <summary>Called when the canopy energy balance needs to be calculated.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.MicroClimate.CalculateStripZoneShortWaveRadiation">
            <summary> Calculate the short wave radiation balance for strip crop system</summary>
        </member>
        <member name="M:Models.MicroClimate.DoTreeRowCropShortWaveRadiation(Models.MicroClimateZone@,Models.MicroClimateZone@)">
            <summary>
            This model is for tree crops where there is no vertical overlap of the shortest and tallest canopy but the tallest canopy can overlap the shortest horzontally
            </summary>
            <param name="treeZone"></param>
            <param name="alleyZone"></param>
        </member>
        <member name="M:Models.MicroClimate.DoStripCropShortWaveRadiation(Models.MicroClimateZone@,Models.MicroClimateZone@)">
            <summary>
            This model is for strip crops where there is verticle overlap of the shortest and tallest crops canopy but no horizontal overlap
            </summary>
            <param name="tallest"></param>
            <param name="shortest"></param>
        </member>
        <member name="M:Models.MicroClimate.DoVineStripShortWaveRadiation(Models.MicroClimateZone@,Models.MicroClimateZone@)">
            <summary>
            This model is for strip crops where there is no verticle overlap of the shortest and tallest crops canopy but no horizontal overlap
            </summary>
            <param name="vine"></param>
            <param name="alley"></param>
        </member>
        <member name="M:Models.MicroClimate.CalculateLayeredShortWaveRadiation(Models.MicroClimateZone,System.Double)">
            <summary>
            Calculates interception of short wave by canopy compartments
            </summary>
        </member>
        <member name="T:Models.MicroClimateCanopy">
            <summary>A micro climate wrapper around a ICanopy instance.</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Canopy">
            <summary>The canopy.</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Ktot">
            <summary>The ktot</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.K">
            <summary>The k</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.LAI">
            <summary>The layer lai</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.LAItot">
            <summary>The layer la itot</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Ftot">
            <summary>The ftot</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Fgreen">
            <summary>The fgreen</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Rs">
            <summary>The rs</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Rl">
            <summary>The rl</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Rsoil">
            <summary>The rsoil</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Gc">
            <summary>The gc</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Ga">
            <summary>The ga</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.PET">
            <summary>The pet</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.PETr">
            <summary>The pe tr</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.PETa">
            <summary>The pe ta</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.Omega">
            <summary>The omega</summary>
        </member>
        <member name="F:Models.MicroClimateCanopy.interception">
            <summary>The interception</summary>
        </member>
        <member name="M:Models.MicroClimateCanopy.#ctor(Models.Interfaces.ICanopy)">
            <summary>Constructor</summary>
            <param name="canopy">The canopy to wrap.</param>
        </member>
        <member name="T:Models.MicroClimateZone">
            <summary>
            A micro climate wrapper around a Zone instance.
            </summary>
            <remarks>
            We need to store Radn, MaxT and MinT in here rather than weather because
            of timestep issues. e.g. A manager module (in DoManagement) asks for 
            CanopyCover from this zone. It is:
               RadiationIntercepted (yesterdays value) / weather.Radn (todays value)
            RadiationIntercepted isn't updated until after DoManagement.
            </remarks>
        </member>
        <member name="F:Models.MicroClimateZone.clock">
            <summary>The clock model.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Radn">
            <summary>Solar radiation.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.MaxT">
            <summary>Maximum temperature.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.MinT">
            <summary>Maximum temperature.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Rain">
            <summary>Rainfall.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.VP">
            <summary>Vapour pressure.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.AirPressure">
            <summary>Air pressure.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Wind">
            <summary>Wind.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Latitude">
            <summary>Latitude.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.surfaceOM">
            <summary>The surface organic matter model.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.soilWater">
            <summary>The soil water model.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.canopyModels">
            <summary>Models in the simulation that implement ICanopy.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.modelsThatHaveCanopies">
            <summary>Models in the simulation that implement IHaveCanopy.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.canopyEmissivity">
            <summary>Canopy emissivity</summary>
        </member>
        <member name="F:Models.MicroClimateZone.soilEmissivity">
            <summary>The soil_emissivity</summary>
        </member>
        <member name="F:Models.MicroClimateZone.hr2s">
            <summary>Convert hours to seconds</summary>
        </member>
        <member name="F:Models.MicroClimateZone.deg2Rad">
            <summary>convert degrees to radians</summary>
        </member>
        <member name="F:Models.MicroClimateZone.abs_temp">
            <summary>0 C in Kelvin (k)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.c_cloud">
            <summary>constant for cloud effect on longwave radiation</summary>
        </member>
        <member name="F:Models.MicroClimateZone.stef_boltz">
            <summary>Stefan-Boltzman constant</summary>
        </member>
        <member name="F:Models.MicroClimateZone.vonKarman">
            <summary>von Karman constant</summary>
        </member>
        <member name="F:Models.MicroClimateZone.svp_A">
            <summary>The SVP_ a Teten coefficient</summary>
        </member>
        <member name="F:Models.MicroClimateZone.svp_B">
            <summary>The SVP_ b Teten coefficient</summary>
        </member>
        <member name="F:Models.MicroClimateZone.svp_C">
            <summary>The SVP_ c Teten coefficient</summary> 
        </member>
        <member name="F:Models.MicroClimateZone.mwh2o">
            <summary>molecular weight water (kg/mol)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.mwair">
            <summary>molecular weight air (kg/mol)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.molef">
            <summary>molecular fraction of water to air ()</summary>
        </member>
        <member name="F:Models.MicroClimateZone.cp">
            <summary>Specific heat of air at constant pressure (J/kg/K)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.RhoW">
            <summary>Density of water (kg/m3)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.r_gas">
            <summary>universal gas constant (J/mol/K)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.svp_fract">
            <summary>weights vpd towards vpd at maximum temperature</summary>
        </member>
        <member name="F:Models.MicroClimateZone.min_crit_temp">
            <summary>Temperature below which eeq decreases (oC).</summary>
        </member>
        <member name="F:Models.MicroClimateZone.max_crit_temp">
            <summary>Temperature above which eeq increases (oC).</summary>
        </member>
        <member name="F:Models.MicroClimateZone.max_albedo">
            <summary>Albedo at 100% green crop cover (0-1).</summary>
        </member>
        <member name="F:Models.MicroClimateZone.residue_albedo">
            <summary>Albedo at 100% residue cover (0-1).</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Albedo">
            <summary>The Albedo of the combined soil-plant system for this zone</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Emissivity">
            <summary>Emissivity of the combined soil-plant system for this zone.</summary>
        </member>
        <member name="F:Models.MicroClimateZone.NetLongWaveRadiation">
            <summary>Net long-wave radiation of the whole system (MJ/m2/day)</summary>
        </member>
        <member name="F:Models.MicroClimateZone.sumRs">
            <summary>The sum rs</summary>
        </member>
        <member name="F:Models.MicroClimateZone.IncomingRs">
            <summary>The incoming rs</summary>
        </member>
        <member name="F:Models.MicroClimateZone.SurfaceRs">
            <summary>The shortwave radiation reaching the surface</summary>
        </member>
        <member name="F:Models.MicroClimateZone.DeltaZ">
            <summary>The delta z</summary>
        </member>
        <member name="F:Models.MicroClimateZone.layerKtot">
            <summary>The layer ktot</summary>
        </member>
        <member name="F:Models.MicroClimateZone.LAItotsum">
            <summary>The layer la isum</summary>
        </member>
        <member name="F:Models.MicroClimateZone.numLayers">
            <summary>The number layers</summary>
        </member>
        <member name="F:Models.MicroClimateZone.SoilHeatFlux">
            <summary>The soil heat flux</summary>
        </member>
        <member name="F:Models.MicroClimateZone.DryLeafFraction">
            <summary>The dry leaf time fraction</summary>
        </member>
        <member name="P:Models.MicroClimateZone.MinimumHeightDiffForNewLayer">
            <summary>The height difference between canopies required for a new layer to be created (m).</summary>
        </member>
        <member name="F:Models.MicroClimateZone.Canopies">
            <summary>Gets or sets the component data.</summary>
        </member>
        <member name="M:Models.MicroClimateZone.#ctor(Models.Clock,Models.Core.Zone,System.Double)">
            <summary>Constructor.</summary>
            <param name="clockModel">The clock model.</param>
            <param name="zoneModel">The zone model.</param>
            <param name="minHeightDiffForNewLayer">Minimum canopy height diff for new layer.</param>
        </member>
        <member name="P:Models.MicroClimateZone.Zone">
            <summary>The zone model.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.PrecipitationInterception">
            <summary>Gets the intercepted precipitation.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.RadiationInterception">
            <summary>Gets the intercepted radiation.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.CanopyCover">
            <summary>Gets the total canopy cover.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.petr">
            <summary>Gets the radiation term of PET.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.peta">
            <summary>Gets the aerodynamic term of PET.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.NetRadiation">
            <summary>Gets the total net radiation.</summary>
        </member>
        <member name="P:Models.MicroClimateZone.NetShortWaveRadiation">
            <summary>Gets the net short wave radiation.</summary>
        </member>
        <member name="M:Models.MicroClimateZone.DailyInitialise(Models.Interfaces.IWeather)">
            <summary>Called at the start of day to initialise the zone for the day.</summary>
            <param name="weatherModel">The weather model.</param>
        </member>
        <member name="M:Models.MicroClimateZone.DoCanopyCompartments">
            <summary>Canopies the compartments.</summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateEnergyTerms(System.Double)">
            <summary>Calculate the overall system energy terms.</summary>
            <param name="soilAlbedo">Soil albedo.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateLongWaveRadiation(System.Double,System.Double)">
            <summary>
            Calculate Net Long Wave Radiation Balance
            </summary>
            <param name="dayLengthLight">This is the length of time within the day during which evaporation will take place.</param>
            <param name="dayLengthEvap">This is the length of time within the day during which the sun is above the horizon.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateSoilHeatRadiation(System.Double)">
            <summary>
            Calculate Radiation loss to soil heating
            </summary>
            <param name="SoilHeatFluxFraction">Fraction of solar radiation reaching the soil surface that results in soil heating.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateGc(System.Double)">
            <summary>Calculate the canopy conductance for system compartments</summary>
            <param name="dayLengthEvap">This is the length of time within the day during which the sun is above the horizon.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateGa(System.Double)">
            <summary>Calculate the aerodynamic conductance for system compartments</summary>
            <param name="ReferenceHeight">Height of the weather instruments.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateInterception(System.Double,System.Double,System.Double,System.Double)">
            <summary>Calculate the interception loss of water from the canopy</summary>
            <param name="a_interception">Multiplier on rainfall to calculate interception losses.</param>
            <param name="b_interception">Power on rainfall to calculate interception losses.</param>
            <param name="c_interception">Multiplier on LAI to calculate interception losses.</param>
            <param name="d_interception">Constant value to add to calculate interception losses.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculatePM(System.Double,System.Double)">
            <summary>Calculate the Penman-Monteith water demand</summary>
            <param name="dayLengthEvap">This is the length of time within the day during which the sun is above the horizon.</param>
            <param name="nightInterceptionFraction">The fraction of intercepted rainfall that evaporates at night.</param>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateOmega">
            <summary>Calculate the aerodynamic decoupling for system compartments</summary>
        </member>
        <member name="M:Models.MicroClimateZone.SetCanopyEnergyTerms">
            <summary>Send an energy balance event</summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateEo">
            <summary>Calculate the amtospheric potential evaporation rate for each zone</summary>
        </member>
        <member name="M:Models.MicroClimateZone.DefineLayers">
            <summary>Break the combined Canopy into layers</summary>
        </member>
        <member name="M:Models.MicroClimateZone.IsNewLayer(System.Double[],System.Double,System.Int32)">
            <summary>
            Create a new layer for the specified height?
            </summary>
            <param name="nodes">The existing layer nodes.</param>
            <param name="height">The height (m).</param>
            <param name="numNodes">Number of nodes in nodes array.</param>
        </member>
        <member name="M:Models.MicroClimateZone.DivideComponents">
            <summary>Break the components into layers</summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateLightExtinctionVariables">
            <summary>Calculate light extinction parameters</summary>
        </member>
        <member name="M:Models.MicroClimateZone.RadnGreenFraction(System.Int32)">
            <summary>Calculate the proportion of light intercepted by a given component that corresponds to green leaf.</summary>
        </member>
        <member name="M:Models.MicroClimateZone.LongWave(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the net longwave radiation 'in' (W/m2)
            <param name="temperature">temperature  (oC)</param>
            <param name="fracClearSkyRad">R/Ro, SunshineHrs/DayLength (0-1)</param>
            <param name="emmisCanopy">canopy emmissivity</param>
            <returns>net longwave radiation 'in' (W/m2)</returns>
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalculateSoilHeatFlux(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the daytime soil heat flux
            <param name="radn">(INPUT) Incoming Radiation</param>
            <param name="radnint">(INPUT) Intercepted incoming radiation</param>
            <param name="soilHeatFluxFraction">(INPUT) Fraction of surface radiation absorbed</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CropCanopyConductance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the crop canopy conductance
            <param name="cropGsMax">crop-specific maximum stomatal conductance (m/s)</param>
            <param name="cropR50">crop-specific SolRad at which stomatal conductance decreases to 50% (W/m2)</param>
            <param name="cropLAIfac">crop-specific LAI fraction of total LAI in current layer (0-1)</param>
            <param name="layerK">layer-averaged light extinction coeficient (-)</param>
            <param name="layerLAI">LAI within the current layer (m2/m2)</param>
            <param name="layerSolRad">solar radiation arriving at the top of the current layer(W/m2)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.AerodynamicConductanceFAO(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the aerodynamic conductance using FAO approach
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcPenmanMonteith(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Penman-Monteith water demand
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcNondQsdT(System.Double,System.Double)">
            <summary>
            Calculate Non_dQs_dT - the dimensionless valu for 
            d(sat spec humidity)/dT ((kg/kg)/K) FROM TETEN FORMULA
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcRhoA(System.Double,System.Double)">
            <summary>
            Calculate the density of air (kg/m3) at a given temperature
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcLambda(System.Double)">
            <summary>
            Calculate the lambda (latent heat of vapourisation for water) (J/kg)
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcSpecificVPD(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the vapour pressure deficit
            <param name="vp">(INPUT) vapour pressure (hPa = mbar)</param>
            <param name="mint">(INPUT) minimum temperature (oC)</param>
            <param name="maxt">(INPUT) maximum temperature (oC)</param>
            <param name="airPressure">(INPUT) Air pressure (hPa)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcSVP(System.Double)">
            <summary>
            Calculate the saturated vapour pressure for a given temperature
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcVPD(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the vapour pressure deficit
            <param name="vp">(INPUT) vapour pressure (hPa = mbar)</param>
            <param name="mint">(INPUT) minimum temperature (oC)</param>
            <param name="maxt">(INPUT) maximum temperature (oC)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcPETr(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the radiation-driven term for the Penman-Monteith water demand
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcPETa(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the aerodynamically-driven term for the Penman-Monteith water demand
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcSpecificHumidity(System.Double,System.Double)">
            <summary>
            Calculate specific humidity from vapour pressure
            <param name="vp">vapour pressure (hPa = mbar)</param>
            <param name="airPressure">air pressure (hPa)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimateZone.CalcOmega(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Jarvis and McNaughton decoupling coefficient, omega
            </summary>
        </member>
        <member name="T:Models.Optimisation.Criteria">
            <summary>
            Criteria used to estimate parameters by minimizing the difference
            between the observed and simulated values of model output variables.
            
            Used when optimizing with one of CroptimizR's frequentist algorithms.
            
            https://sticsrpacks.github.io/CroptimizR/reference/ls_criteria.html
            </summary>
            <remarks>
            - Should this be an interface?
            - This will need to be updated as more options are added to CroptimizR.
            </remarks>
        </member>
        <member name="F:Models.Optimisation.Criteria.CritLogCwss">
            <summary>
            Log transformation of concentrated version of weighted sum of squares.
            </summary>
        </member>
        <member name="F:Models.Optimisation.Criteria.CritLogCwssCorr">
            <summary>
            Log transformation of concentrated version of weighted sum of
            squares with hypothesis of high correlation between errors for
            different measurements over time.
            </summary>
        </member>
        <member name="T:Models.Optimisation.OptimizationTypeEnum">
            <summary>
            Enumeration of all suported optimization types.
            https://sticsrpacks.github.io/CroptimizR/articles/Available_parameter_estimation_algorithms.html
            </summary>
        </member>
        <member name="F:Models.Optimisation.OptimizationTypeEnum.Simplex">
            <summary>
            Nelder-Meade simplex method implemented in the nloptr package.
            https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_simple_case.html
            </summary>
        </member>
        <member name="F:Models.Optimisation.OptimizationTypeEnum.Bayesian">
            <summary>
            DREAM-zs/Bayesian method implemented in the BayesianTools package.
            https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_DREAM.html
            </summary>
        </member>
        <member name="T:Models.Optimisation.CroptimizR">
            <summary>
            Encapsulates CroptimizR: An R package for parameter estimation, uncertainty analysis and sensitivity analysis for Crop Models
            </summary>
            <remarks>
            https://github.com/SticsRPacks/CroptimizR
            https://github.com/hol430/ApsimOnR
            </remarks>
        </member>
        <member name="F:Models.Optimisation.CroptimizR.outputCsvFileName">
            <summary>
            File name of the generated csv file containing croptimizR
            outputs.
            </summary>
        </member>
        <member name="F:Models.Optimisation.CroptimizR.id">
            <summary>
            This ID is used to identify temp files used by this tool.
            </summary>
            <remarks>
            Without this, Morri run in paralel could overwrite each other's
            temp files, as the temp files would have the same name.
            </remarks>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.Parameters">
            <summary>
            List of parameters
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.PredictedTableName">
            <summary>
            Name of the predicted data table.
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.ObservedTableName">
            <summary>
            Name of the observed data table.
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.VariableNames">
            <summary>
            Variable to optimise.
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.RandomSeed">
            <summary>
            Random seed to be used. Set to null for random results.
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.OptimizationType">
            <summary>
            Optimization algorithm to be used. Changing this will change <see cref="P:Models.Optimisation.CroptimizR.OptimizationMethod"/>.
            </summary>
            <remarks>
            The reason we need both this enum and the IOptimizationMethod property are because
            we want to provide a drop-down in the gui of available optimization methods.
            </remarks>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.OptimizationMethod">
            <summary>
            Optimization method to be used.
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.Status">
            <summary>
            Returns the job's status.
            </summary>
        </member>
        <member name="P:Models.Optimisation.CroptimizR.Tables">
            <summary>
            Gets or sets the table of values.
            </summary>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.OnOutputReceivedFromR(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Invoked whenever the R process writes to stdout.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GenerateRScript(System.String,System.String,System.String)">
            <summary>
            Generates the R script which performs the optimization.
            </summary>
            <param name="fileName">File path to which the R code will be saved.</param>
            <param name="outputPath">Directory/path to which output results will be saved. This is passed as a parameter to croptimizR.</param>
            <param name="apsimxFileName">Name of the .apsimx file to be run by the optimisation.</param>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GenerateApsimXFile">
            <summary>
            Generates an .apsimx file containing replacements model (if it
            exists), a datastore, and all children of this model. Saves the
            file to disk and returns the absolute path to the file.
            </summary>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.WriteMessage(System.String)">
            <summary>
            Write a message to the summary table.
            This is currently used to record console output generated by R.
            </summary>
            <param name="message">Message to be written.</param>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GetParamInfo">
            <summary>
            Generate an R named list containing the parameter bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GetSimulationNames">
            <summary>
            Return all simulation names generated by all descendant models as a
            comma-separated string.
            </summary>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GetTempFileName(System.String)">
            <summary>
            Returns a unique temporary filename.
            </summary>
            <param name="name">Base name of the file, with file extension included.</param>
            <returns>Unique temporary filename.</returns>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GetWorkingDirectory">
            <summary>
            Get the working directory, into which all files used by croptimizr should be saved.
            </summary>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.Run(System.Threading.CancellationTokenSource)">
            <summary>
            Run the optimization (and wait for it to finish).
            </summary>
            <param name="cancelToken">Cancellation token.</param>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.RunSimsWithOptimalValues(System.String,System.String,System.Collections.Generic.IEnumerable{Models.Factorial.CompositeFactor})">
            <summary>
            Run all child simulations with the given optimal values,
            and store the results in the given checkpoint name.
            </summary>
            <param name="checkpointName">Name of the checkpoint.</param>
            <param name="optimalValues">Changes to be applied to the models.</param>
            <param name="fileName">Name of the apsimx file run by the optimiser.</param>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.GetOptimalValues(System.Data.DataTable)">
            <summary>
            Get the a set of changes (represented by composite factors)
            which could be applied to a file, which will apply the optimal
            parameter values returned by the optimiser.
            </summary>
            <param name="data">Datatable.</param>
        </member>
        <member name="M:Models.Optimisation.CroptimizR.ReadRData(System.String)">
            <summary>
            Read output data from the .Rdata file generated by CroptimizR.
            </summary>
            <param name="path">Path to the .Rdata file on disk.</param>
        </member>
        <member name="T:Models.Optimisation.DreamZs">
            <summary>
            Encapsulates the DREAM-zs algorithm used by <see cref="T:Models.Optimisation.CroptimizR"/>. From the CroptimizR doucmentation:
            
            # Bayesian algorithms
            
            In a Bayesian approach estimated parameters are treated as random variables and one seeks to determine their joint probability distribution, called the posterior distribution.The uncertainty in the estimated parameters are thus central in this approach.An advantage of the Bayesian approach is that it uses prior information about the parameters values.
            
            The DREAM-zs algorithm is a multi-chain MCMC method which is recognized has an efficient method for complex, high-dimensional and multi-modal target distributions.It is extensively described in (Vrugt 2016). In CroptimizR, it is interfaced from the BayesianTools package(Hartig, Minunno, and Paul 2019).
            
            It provides different types of plots and results including plots of prior and posterior densities, correlation plots, Gelman diagnostic plot, sample of posterior distribution and associated statistics.
            
            https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_DREAM.html
            </summary>
            <remarks>
            Need to add gamma, but no idea what type it is. It's not well documented.
            </remarks>
        </member>
        <member name="P:Models.Optimisation.DreamZs.CriticalFunction">
            <summary>
            Likelihood function to be used for optimization.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Iterations">
            <summary>
            Number of iterations/model evaluations.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Ncr">
            <summary>
            Number of cross-over proposals.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Eps">
            <summary>
            Ergodicity term.
            </summary>
            <remarks>
            The CRAN documentation for this parameter is also flaky.
            </remarks>
        </member>
        <member name="P:Models.Optimisation.DreamZs.E">
            <summary>
            Ergodicity term.
            </summary>
            <remarks>
            The CRAN documentation for this parameter is also flaky.
            </remarks>
        </member>
        <member name="P:Models.Optimisation.DreamZs.PcrUpdate">
            <summary>
            Update of crossover probabilities.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.UpdateInterval">
            <summary>
            Determines the interval for the pCR (crossover probabilities) update.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.BurnIn">
            <summary>
            Number of intervals treated as burn-in.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Thin">
            <summary>
            Thinning parameter. Determines the interval in which values are recorded.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Adaptation">
            <summary>
            Number of percentage of samples that are used for the adaptation in DREAM.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Parallel">
            <summary>
            Determines whether parallel computing should be attempted.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.ZUpdateFrequency">
            <summary>
            Frequency with which to update Z matrix.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.PSnooker">
            <summary>
            Probability of snooker update.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.DEPairs">
            <summary>
            Number of pairs used to generate proposal.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.ConsoleUpdates">
            <summary>
            Interval in which the sampling progress is printed to the console.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.StartValue">
            <summary>
            Number of markov chains.
            </summary>
            <remarks>
            This can be passed to R as either a matrix containing the start
            values, an integer to define the number of chains that are run, a
            function to sample the start values or NUll, in which case the
            values are sampled from the prior.
            
            The only type supported in apsim for now is an int, as the number
            of chains.
            </remarks>
        </member>
        <member name="P:Models.Optimisation.DreamZs.Type">
            <summary>
            Optimization algorithm to be used.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.ROptimizerName">
            <summary>
            Get the string value for the optim_param variable passed
            into the CroptimizR estim_param method.
            </summary>
        </member>
        <member name="P:Models.Optimisation.DreamZs.CritFunction">
            <summary>
            Name of the Critical function used for optimization.
            </summary>
        </member>
        <member name="M:Models.Optimisation.DreamZs.GenerateOptimizationOptions(System.String)">
            <summary>
            A method which generates R code defining a variable with
            optimization parameters specific to this optimization method.
            </summary>
            <param name="variableName">Name of the variable to be generated.</param>
        </member>
        <member name="T:Models.Optimisation.IOptimizationMethod">
            <summary>
            Encapsulates an optimization method which can be used by <see cref="T:Models.Optimisation.CroptimizR"/>.
            </summary>
        </member>
        <member name="P:Models.Optimisation.IOptimizationMethod.Type">
            <summary>
            Optimization type.
            </summary>
        </member>
        <member name="P:Models.Optimisation.IOptimizationMethod.ROptimizerName">
            <summary>
            Get the string value for the optim_param variable passed
            into the CroptimizR estim_param method.
            </summary>
        </member>
        <member name="P:Models.Optimisation.IOptimizationMethod.CritFunction">
            <summary>
            Name of the Critical function used for optimization.
            </summary>
        </member>
        <member name="M:Models.Optimisation.IOptimizationMethod.GenerateOptimizationOptions(System.String)">
            <summary>
            A method which generates R code defining a variable with
            optimization parameters specific to this optimization method.
            </summary>
            <param name="variableName">Name of the variable to be generated.</param>
        </member>
        <member name="T:Models.Optimisation.Likelihood">
            <summary>
            Likelihood functions used as the crit function to estimate parameters
            using bayesian methods via CroptimizR.
            
            https://sticsrpacks.github.io/CroptimizR/reference/Likelihoods.html
            </summary>
        </member>
        <member name="F:Models.Optimisation.Likelihood.LogCiidn">
            <summary>
            Log transformation of concentrated version of iid normal likelihood.
            </summary>
        </member>
        <member name="F:Models.Optimisation.Likelihood.LogCiidnCorr">
            <summary>
            Log transformation of concentrated version of iid normal likelihood
            but with hypothesis of high correlation between errors for different
            measurements over time
            </summary>
        </member>
        <member name="T:Models.Optimisation.Simplex">
             <summary>
             Encapsulates the simplex algorithm used by <see cref="T:Models.Optimisation.CroptimizR"/>.
             
             From the CroptimizR documentation:
             
             # Frequentist algorithms
            
             Frequentist methods involve minimizing a goodness-of-fit criterion.Crop models often have discontinuities that make it difficult to use gradient-based minimization methods such as Gauss–Newton or Levenberg–Marquardt.A common approach, adopted in CroptimizR, is thus to use the Nelder–Mead simplex algorithm, which is adapted to non-smooth functions because the search of the optimum is not based on the computation of the function’s gradient. Although few theoretical results are available (Lagarias et al. 1998), this algorithm is very popular because it can be used for multidimensional minimization for essentially any function.
             
             The simplex algorithm used in CroptimizR is interfaced from the nloptr package(Johnson, n.d.) but a multi-start feature has been implemented in addition.Indeed, as it is a local optimization method, CroptimizR proposes to repeat automatically the minimization from different starting parameter values to minimize the risk of converging to a local minimum.The user specifies the number of repetitions and possibly the starting parameter values(if not provided, they are sampled within the parameters’ bounds.To help analyze the behavior of the algorithm, CroptimizR generates plots of final estimated parameter values versus initial values.
             
             A simple example of application of the method is provided in this vignette.
             </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.CriticalFunction">
            <summary>
            Critical function to be used for optimization.
            </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.NoRepetitions">
            <summary>
            Number of times we run the minimisation with different parameters.
            </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.Tolerance">
            <summary>
            Tolerance criterion between two iterations.
            </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.MaxEval">
            <summary>
            Maximum number of iterations executed by the optimisation algorithm.
            </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.Type">
            <summary>
            Nelder-Meade simplex method implemented in the nloptr package.
            https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_simple_case.html
            </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.ROptimizerName">
            <summary>
            Get the string value for the optim_param variable passed
            into the CroptimizR estim_param method.
            </summary>
        </member>
        <member name="P:Models.Optimisation.Simplex.CritFunction">
            <summary>
            Name of the Critical function used for optimization.
            </summary>
        </member>
        <member name="M:Models.Optimisation.Simplex.GenerateOptimizationOptions(System.String)">
            <summary>
            A method which generates R code defining a variable with
            optimization parameters specific to this optimization method.
            </summary>
            <param name="variableName">Name of the variable to be generated.</param>
        </member>
        <member name="T:Models.Options">
            <summary>
            Command-line options for Models.exe.
            </summary>
        </member>
        <member name="P:Models.Options.Files">
            <summary>Files to be run.</summary>
        </member>
        <member name="P:Models.Options.Recursive">
            <summary>
            Recursively search through subdirectories for files matching the file specification.
            </summary>
        </member>
        <member name="P:Models.Options.Upgrade">
            <summary>
            Upgrade a file to the latest version of the .apsimx file format without running the file.
            </summary>
        </member>
        <member name="P:Models.Options.RunTests">
            <summary>
            After running the file, run all tests inside the file.
            </summary>
        </member>
        <member name="P:Models.Options.Verbose">
            <summary>
            Write detailed messages to stdout when a simulation starts/finishes.
            </summary>
        </member>
        <member name="P:Models.Options.ExportToCsv">
            <summary>
            Export all reports to .csv files.
            </summary>
        </member>
        <member name="P:Models.Options.MergeDBFiles">
            <summary>
            Merge multiple .db files into a single .db file.
            </summary>
        </member>
        <member name="P:Models.Options.EditFilePath">
            <summary>
            Edit the .apsimx file(s) before running them. Path to a config file must be specified which contains lines of parameters to change, in the form 'path = value'.
            </summary>
            <remarks>
            This property holds the path to the config file.
            </remarks>
        </member>
        <member name="P:Models.Options.ListSimulationNames">
            <summary>
            List simulation names without running them.
            </summary>
        </member>
        <member name="P:Models.Options.ListReferencedFileNames">
            <summary>
            List all files that are referenced by an .apsimx file(s)
            </summary>
        </member>
        <member name="P:Models.Options.SingleThreaded">
            <summary>
            Run all simulations sequentially on a single thread.
            </summary>
            <remarks>
            SetName specified to make it incompatible with multi-process switch.
            </remarks>
        </member>
        <member name="P:Models.Options.NumProcessors">
            <summary>
            Maximum number of threads/processes to spawn for running simulations.
            </summary>
        </member>
        <member name="P:Models.Options.SimulationNameRegex">
            <summary>
            Only run simulations if their names match this regular expression.
            </summary>
            <value></value>
        </member>
        <member name="P:Models.Options.RunType">
            <summary>
            Type of runner used to run the simulations.
            </summary>
        </member>
        <member name="P:Models.Options.Examples">
            <summary>
            Concrete examples shown in help text.
            </summary>
        </member>
        <member name="T:Models.PMF.BiomassArbitrationType">
            <summary>Contains the variables need for arbitration</summary>
        </member>
        <member name="F:Models.PMF.BiomassArbitrationType.organs">
            <summary>Names of all organs</summary>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StructuralDemand">
            <summary>Gets or sets the structural demand.</summary>
            <value>Demand for structural biomass from each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStructuralDemand">
            <summary>Gets or sets the total structural demand.</summary>
            <value>Demand for structural biomass from the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.MetabolicDemand">
            <summary>Gets or sets the metabolic demand.</summary>
            <value>Demand for metabolic biomass from each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalMetabolicDemand">
            <summary>Gets or sets the total metabolic demand.</summary>
            <value>Demand for metabolic biomass from the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StorageDemand">
            <summary>Gets or sets the non structural demand.</summary>
            <value>Demand for non-structural biomass from each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStorageDemand">
            <summary>Gets or sets the total non structural demand.</summary>
            <value>Demand for non-structural biomass from the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalPlantDemand">
            <summary>Gets or sets the total crop demand.</summary>
            <value>crop demand for biomass, structural, non-sturctural and metabolic</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.ReallocationSupply">
            <summary>Gets or sets the reallocation supply.</summary>
            <value>Biomass available for reallocation for each organ as it dies</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalReallocationSupply">
            <summary>Gets or sets the total reallocation supply.</summary>
            <value>Biomass available for reallocation from the entire crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.UptakeSupply">
            <summary>Gets or sets the uptake supply.</summary>
            <value>Biomass available for uptake from each absorbing organ, generally limited to ntrient uptake in roots</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalUptakeSupply">
            <summary>Gets or sets the total uptake supply.</summary>
            <value>Biomass available for uptake by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.FixationSupply">
            <summary>Gets or sets the fixation supply.</summary>
            <value>Biomass that may be fixed by the crop, eg DM fixed by photosynhesis in the leaves of N fixed by nodules</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalFixationSupply">
            <summary>Gets or sets the total fixation supply.</summary>
            <value>Total fixation by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.RetranslocationSupply">
            <summary>Gets or sets the retranslocation supply.</summary>
            <value>Supply of labile biomass that can be retranslocated from each oragn</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalRetranslocationSupply">
            <summary>Gets or sets the total retranslocation supply.</summary>
            <value>The total supply of labile biomass in the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalPlantSupply">
            <summary>Gets or sets the total crop supply.</summary>
            <value>crop supply from uptake, fixation, reallocation and remobilisation</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.SupplyDemandRatioN">
            <value>SupplyDemandRatioN</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Reallocation">
            <summary>Gets or sets the reallocation.</summary>
            <value>The amount of biomass reallocated from each organ as it dies</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalReallocation">
            <summary>Gets or sets the total reallocation.</summary>
            <value>The total amount of biomass reallocated by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Uptake">
            <summary>Gets or sets the uptake.</summary>
            <value>The actual uptake of biomass by each organ, generally limited to nutrients in the roots</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Fixation">
            <summary>Gets or sets the fixation.</summary>
            <value>The actual uptake of biomass by the whole crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Retranslocation">
            <summary>Gets or sets the retranslocation.</summary>
            <value>The actual retranslocation or biomass from each oragan</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalRetranslocation">
            <summary>Gets or sets the total retranslocation.</summary>
            <value>The total amount of biomass retranslocated by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Respiration">
            <summary>Gets or sets the respiration.</summary>
            <value>The amount of biomass respired by each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalRespiration">
            <summary>Gets or sets the total respiration.</summary>
            <value>Total respiration by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.ConstrainedGrowth">
            <summary>Gets or sets the constrained growth.</summary>
            <value>Biomass growth that is possible given nutrient availability and minimum N concentratins of organs</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StructuralAllocation">
            <summary>Gets or sets the structural allocation.</summary>
            <value>The actual amount of structural biomass allocated to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStructuralAllocation">
            <summary>Gets or sets the total structural allocation.</summary>
            <value>The total structural biomass allocation to the whole crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.MetabolicAllocation">
            <summary>Gets or sets the metabolic allocation.</summary>
            <value>The actual meatabilic biomass allocation to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalMetabolicAllocation">
            <summary>Gets or sets the total metabolic allocation.</summary>
            <value>The metabolic biomass allocation to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StorageAllocation">
            <summary>Gets or sets the non structural allocation.</summary>
            <value>The actual non-structural biomass allocation to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStorageAllocation">
            <summary>Gets or sets the total non structural allocation.</summary>
            <value>The total non-structural allocationed to the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalAllocation">
            <summary>Gets or sets the total allocation.</summary>
            <value>The actual biomass allocation to each organ, structural, non-structural and metabolic</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalPlantAllocation">
            <summary>Gets or sets the total biomass already allocated within the plant.</summary>
            <value>crop biomass already allocated</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Allocated">
            <summary>Gets or sets the total allocated.</summary>
            <value>The amount of biomass allocated to the whole crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.NotAllocated">
            <summary>Gets or sets the not allocated.</summary>
            <value>The biomass available that was not allocated.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.SinkLimitation">
            <summary>Gets or sets the sink limitation.</summary>
            <value>The amount of biomass that could have been assimilated but was not because the demand from organs was insufficient.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.NutrientLimitation">
            <summary>Gets or sets the limitation due to nutrient shortage</summary>
            <value>The amount of biomass that could have been assimilated but was not becasue nutrient supply was insufficient to meet organs minimunn N concentrations</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Start">
            <summary>Gets or sets the start.</summary>
            <value>The start.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.End">
            <summary>Gets or sets the end.</summary>
            <value>The end.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.BalanceError">
            <summary>Gets or sets the balance error.</summary>
            <value>The balance error.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.BiomassType">
            <summary>the type of biomass being arbitrated</summary>
            <value>The balance error.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.QStructural">
            <summary>Priority coefficients for structural biomass for each organ.  Only relevent it QPriorityThenRelativeAllocation method used</summary>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.QMetabolic">
            <summary>Priority coefficients for Metabolic biomass for each organ.  Only relevent it QPriorityThenRelativeAllocation method used</summary>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.QStorage">
            <summary>Priority coefficients for storage biomass for each organ.  Only relevent it QPriorityThenRelativeAllocation method used</summary>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.#ctor(System.String,System.Collections.Generic.List{Models.PMF.Interfaces.IArbitration})">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.BiomassArbitrationType"/> class.</summary>
            <param name="type">Type of biomass arbitration</param>
            <param name="allOrgans">Names of organs</param>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.GetSupplies(Models.PMF.Interfaces.BiomassSupplyType[],System.Double)">
            <summary>Setup all supplies</summary>
            <param name="suppliesForEachOrgan">The organs supplies.</param>
            <param name="totalOfAllOrgans">The total wt or N for all organs</param>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.GetDemands(Models.PMF.Interfaces.BiomassPoolType[])">
            <summary>Setup all demands</summary>
            <param name="demandsForEachOrgan">The organs demands</param>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.Clear">
            <summary>Clear the arbitration type</summary>
        </member>
        <member name="T:Models.PMF.BiomassTypeArbitrator">
            <summary>
            This class holds the functions for arbitrating Biomass - either DM or N
            </summary>
        </member>
        <member name="F:Models.PMF.BiomassTypeArbitrator.ArbitrationMethod">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="F:Models.PMF.BiomassTypeArbitrator.AllocateUptakesMethod">
            <summary>The method used to Allocate Uptakes
            DM doesn't need this Method, so it has been made optional
            It needs access to the ArbitrationMethod, so it is easiest to be in here
            </summary>
        </member>
        <member name="M:Models.PMF.BiomassTypeArbitrator.DoPotentialPartitioning(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Functions called at DoPotentialPartitioning.</summary>
        </member>
        <member name="M:Models.PMF.BiomassTypeArbitrator.DoActualPartitioning(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Functions called at DoActualPartitioning.</summary>
        </member>
        <member name="M:Models.PMF.BiomassTypeArbitrator.DoAllocations(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Functions called at DoAllocations.</summary>
        </member>
        <member name="M:Models.PMF.BiomassTypeArbitrator.DoUptakes(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Functions called at DoUptakes.</summary>
        </member>
        <member name="M:Models.PMF.BiomassTypeArbitrator.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.IArbitrationMethod">
            <summary>
            Interface for arbitration methods
            </summary>
        </member>
        <member name="M:Models.PMF.IArbitrationMethod.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.IUptakeMethod">
            <summary>
            Interface class for Uptake Methods.
            </summary>
        </member>
        <member name="M:Models.PMF.IUptakeMethod.SetActualUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},Models.PMF.Interfaces.IArbitration[])">
            <summary>
            Calculate the actual uptakes.
            </summary>
        </member>
        <member name="M:Models.PMF.IUptakeMethod.GetUptakeEstimates(Models.Soils.Arbitrator.SoilState,Models.PMF.Interfaces.IArbitration[])">
            <summary>
            Calculate the uptake estimates.
            </summary>
        </member>
        <member name="T:Models.PMF.Arbitrator.AllocateFixationMethod">
            <summary>The method used to Allocate Fixation</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.AllocateFixationMethod.Arbitrator">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.AllocateFixationMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the fixation.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrationMethod">The option.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.AllocateUptakesMethod">
            <summary>Allocates the N Uptakes.</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.AllocateUptakesMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Allocates the N Supply to the different organs.</summary>
        </member>
        <member name="T:Models.PMF.Arbitrator.C4NitrogenUptakeMethod">
            <summary>The method used to do WaterUptake</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.plant">
            <summary>Reference to Plant to find WaterDemands</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.zone">
            <summary>The zone.</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.Arbitrator">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.DltTT">
            <summary>Accumulated ThermalTime from Simulation start</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.TTFMFromFlowering">
            <summary>Accumulated ThermalTime from Flowering - uses TTFM during Grainfill</summary>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.NUptakeCease">
            <summary>ThermalTime after Flowering to stop N Uptake</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.MaxNUptakeRate">
            <summary>Maximum Nitrogen Uptake Rate</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.NSupplyFraction">
            <summary>Maximum Nitrogen Uptake Rate</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.MaxDiffusion">
            <summary>Used to calc maximim diffusion rate</summary>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.MassFlow">
            <summary>Gets or sets MassFlow during NitrogenUptake Calcs</summary>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.Diffusion">
            <summary>Gets or sets Diffusion during NitrogenUptake Calcs</summary>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.NMassFlowSupply">
            <summary>Gets the water demand.</summary>
            <value>The water demand.</value>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.NDiffusionSupply">
            <summary>Gets the water demand.</summary>
            <value>The water demand.</value>
        </member>
        <member name="M:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.GetUptakeEstimates(Models.Soils.Arbitrator.SoilState,Models.PMF.Interfaces.IArbitration[])">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.C4NitrogenUptakeMethod.SetActualUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},Models.PMF.Interfaces.IArbitration[])">
            Calculating the actual water uptake across all zones.
        </member>
        <member name="T:Models.PMF.Arbitrator.C4RetranslocationMethod">
            <summary>The method used to Retranslocate Biomass Type</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4RetranslocationMethod.Arbitrator">
            <summary>Determines Nutrient limitations to DM allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.C4RetranslocationMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the fixation.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrationMethod">The option.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.C4WaterUptakeMethod">
            <summary>The method used to do WaterUptake</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4WaterUptakeMethod.plant">
            <summary>Reference to Plant to find WaterDemands</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4WaterUptakeMethod.zone">
            <summary>The zone.</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.C4WaterUptakeMethod.Soil">
            <summary>The soil</summary> needed to get KL values
        </member>
        <member name="F:Models.PMF.Arbitrator.C4WaterUptakeMethod.WaterDemands">
            <summary>A list of organs or suborgans that have watardemands</summary>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4WaterUptakeMethod.WDemand">
            <summary>Gets the water demand.</summary>
            <value>The water demand.</value>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4WaterUptakeMethod.WatSupply">
            <summary>Gets the water Supply.</summary>
            <value>The water supply.</value>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4WaterUptakeMethod.WAllocated">
            <summary>Gets the water allocated in the plant (taken up).</summary>
            <value>The water uptake.</value>
        </member>
        <member name="P:Models.PMF.Arbitrator.C4WaterUptakeMethod.SDRatio">
            TotalSupply divided by WaterDemand - used to lookup ExpansionStress table - when calculating Actual LeafArea and calcStressedLeafArea
        </member>
        <member name="M:Models.PMF.Arbitrator.C4WaterUptakeMethod.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Arbitrator.C4WaterUptakeMethod.GetUptakeEstimates(Models.Soils.Arbitrator.SoilState,Models.PMF.Interfaces.IArbitration[])">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.C4WaterUptakeMethod.SetActualUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},Models.PMF.Interfaces.IArbitration[])">
            Calculating the actual water uptake across all zones.
        </member>
        <member name="T:Models.PMF.Arbitrator.DryMatterAllocationsMethod">
            <summary>Allocates the DM to the different organs.</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.DryMatterAllocationsMethod.Allocate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Sends the dm allocations.</summary>
        </member>
        <member name="T:Models.PMF.Arbitrator.IPartitionMethod">
            <summary>
            Interface for the arbitrator partitioning methods
            </summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.IPartitionMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Calculates the parititions\ining between the different Organs.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="ArbitrationMethod">The bat.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.IAllocationMethod">
            <summary>
            Interface for the arbitrator allocation methods
            </summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.IAllocationMethod.Allocate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Allocates the BiomassType to the different Organs.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.NitrogenAllocationsMethod">
            <summary>Allocates the Nitrogen parittioning to the different organs.</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.NitrogenAllocationsMethod.Arbitrator">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.NitrogenAllocationsMethod.Allocate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Allocate the nutrient allocations.</summary>
            <param name="Organs">The organs.</param>
            <param name="N">The organs.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.NitrogenUptakeMethod">
            <summary>The method used to do NitrogenUptake</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.NitrogenUptakeMethod.plant">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.NitrogenUptakeMethod.zone">
            <summary>The zone.</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.NitrogenUptakeMethod.Arbitrator">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.NitrogenUptakeMethod.GetUptakeEstimates(Models.Soils.Arbitrator.SoilState,Models.PMF.Interfaces.IArbitration[])">
            <summary>Calculate Nitrogen UptakeEstimates</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.NitrogenUptakeMethod.SetActualUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},Models.PMF.Interfaces.IArbitration[])">
            <summary>Calculate the Actual Nitrogen Uptakes</summary>
        </member>
        <member name="T:Models.PMF.Arbitrator.NutrientConstrainedAllocationMethod">
            <summary>Determines Nutrient limitations to DM allocations</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.NutrientConstrainedAllocationMethod.Arbitrator">
            <summary>Determines Nutrient limitations to DM allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.NutrientConstrainedAllocationMethod.Allocate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType)">
            <summary>Determines Nutrient limitations to DM allocations</summary>
        </member>
        <member name="T:Models.PMF.Arbitrator.ReallocationMethod">
            <summary>Function called at OnDoPotentialPlantPartioning.</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.ReallocationMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Reallocate the Biomass Type.</summary>
        </member>
        <member name="T:Models.PMF.Arbitrator.RetranslocationMethod">
            <summary>The method used to Retranslocate Biomass Type</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.RetranslocationMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the fixation.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrationMethod">The option.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.SendPotentialDMAllocationsMethod">
            <summary>Sends the potential dm allocations.</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.SendPotentialDMAllocationsMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the fixation.</summary>
            <param name="Organs">The organs.</param>
            <param name="DM">The bat.</param>
            <param name="arbitrationMethod">The option.</param> not used 
        </member>
        <member name="T:Models.PMF.Arbitrator.UpdateLeafAreaMethod">
            <summary>Updates the Leaf Area after Potential DM ha sbeen allocated.</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.UpdateLeafAreaMethod.Leaf">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.UpdateLeafAreaMethod.Calculate(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Allocate the nutrient allocations.</summary>
            <param name="Organs">The organs.</param>
            <param name="N">The biomass arbitration type.</param>
            <param name="method">The arbitration method.</param>
        </member>
        <member name="T:Models.PMF.Arbitrator.WaterUptakeMethod">
            <summary>The method used to do WaterUptake</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.WaterUptakeMethod.plant">
            <summary>Reference to Plant to find WaterDemands</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.WaterUptakeMethod.zone">
            <summary>The zone.</summary>
        </member>
        <member name="F:Models.PMF.Arbitrator.WaterUptakeMethod.WaterDemands">
            <summary>A list of organs or suborgans that have watardemands</summary>
        </member>
        <member name="P:Models.PMF.Arbitrator.WaterUptakeMethod.WDemand">
            <summary>Gets the water demand.</summary>
            <value>The water demand.</value>
        </member>
        <member name="P:Models.PMF.Arbitrator.WaterUptakeMethod.WSupply">
            <summary>Gets the water Supply.</summary>
            <value>The water supply.</value>
        </member>
        <member name="P:Models.PMF.Arbitrator.WaterUptakeMethod.WAllocated">
            <summary>Gets the water allocated in the plant (taken up).</summary>
            <value>The water uptake.</value>
        </member>
        <member name="M:Models.PMF.Arbitrator.WaterUptakeMethod.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Arbitrator.WaterUptakeMethod.GetUptakeEstimates(Models.Soils.Arbitrator.SoilState,Models.PMF.Interfaces.IArbitration[])">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="M:Models.PMF.Arbitrator.WaterUptakeMethod.SetActualUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},Models.PMF.Interfaces.IArbitration[])">
            Calculating the actual water uptake across all zones.
        </member>
        <member name="T:Models.PMF.OrganArbitrator">
            <summary>
             The Arbitrator class determines the allocation of dry matter (DM) and Nitrogen between each of the organs in the crop model. Each organ can have up to three different pools of biomass:
             
             * **Structural biomass** which is essential for growth and remains within the organ once it is allocated there.
             * **Metabolic biomass** which generally remains within an organ but is able to be re-allocated when the organ senesces and may be retranslocated when demand is high relative to supply.
             * **Storage biomass** which is partitioned to organs when supply is high relative to demand and is available for retranslocation to other organs whenever supply from uptake, fixation, or re-allocation is lower than demand.
             
             The process followed for biomass arbitration is shown in the figure below. Arbitration calculations are triggered by a series of events (shown below) that are raised every day.  For these calculations, at each step the Arbitrator exchange information with each organ, so the basic computations of demand and supply are done at the organ level, using their specific parameters. 
             
             1. **doPotentialPlantGrowth**.  When this event occurs, each organ class executes code to determine their potential growth, biomass supplies and demands.  In addition to demands for structural, non-structural and metabolic biomass (DM and N) each organ may have the following biomass supplies: 
             	* **Fixation supply**.  From photosynthesis (DM) or symbiotic fixation (N)
             	* **Uptake supply**.  Typically uptake of N from the soil by the roots but could also be uptake by other organs (eg foliage application of N).
             	* **Retranslocation supply**.  Storage biomass that may be moved from organs to meet demands of other organs.
             	* **Reallocation supply**. Biomass that can be moved from senescing organs to meet the demands of other organs.
             2. **doPotentialPlantPartitioning.** On this event the Arbitrator first executes the DoDMSetup() method to gather the DM supplies and demands from each organ, these values are computed at the organ level.  It then executes the DoPotentialDMAllocation() method which works out how much biomass each organ would be allocated assuming N supply is not limiting and sends these allocations to the organs.  Each organ then uses their potential DM allocation to determine their N demand (how much N is needed to produce that much DM) and the arbitrator calls DoNSetup() to gather the N supplies and demands from each organ and begin N arbitration.  Firstly DoNReallocation() is called to redistribute N that the plant has available from senescing organs.  After this step any unmet N demand is considered as plant demand for N uptake from the soil (N Uptake Demand).
             3. **doNutrientArbitration.** When this event occurs, the soil arbitrator gets the N uptake demands from each plant (where multiple plants are growing in competition) and their potential uptake from the soil and determines how much of their demand that the soil is able to provide.  This value is then passed back to each plant instance as their Nuptake and doNUptakeAllocation() is called to distribute this N between organs.  
             4. **doActualPlantPartitioning.**  On this event the arbitrator call DoNRetranslocation() and DoNFixation() to satisfy any unmet N demands from these sources.  Finally, DoActualDMAllocation is called where DM allocations to each organ are reduced if the N allocation is insufficient to achieve the organs minimum N concentration and final allocations are sent to organs. 
             
             ![Schematic showing the procedure for arbitration of biomass partitioning.  Pink boxes represent events that occur every day and their numbering shows the order of calculations. Blue boxes represent the methods that are called when these events occur.  Orange boxes contain properties that make up the organ/arbitrator interface.  Green boxes are organ specific properties.](ArbitratorSequenceDiagram.png)
             </summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.plant">
            1. Links
            ------------------------------------------------------------------------------------------------
            <summary>The top level plant object in the Plant Modelling Framework</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.nArbitration">
            <summary>The method used to call N arbitrations methods</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.dmArbitration">
            <summary>The method used to call DM arbitrations methods</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.waterUptakeMethod">
            <summary>The method used to call water uptakes</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.nitrogenUptakeMethod">
            <summary>The method used to call water uptakes</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.kgha2gsm">
            2. Private And Protected Fields
             -------------------------------------------------------------------------------------------------
            <summary>The kgha2gsm</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.Organs">
            <summary>The list of organs</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetDMSupply">
            4. Public Events And Enums
             -------------------------------------------------------------------------------------------------
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetNSupply">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetDMDemand">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetNDemand">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.DM">
            5. Public Properties
             --------------------------------------------------------------------------------------------------
            <summary>The variables for DM</summary>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.N">
            <summary>The variables for N</summary>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.FDM">
            <value>The dry mass supply.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.StructuralCarbonSupplyDemand">
            <summary>Gets the dry mass supply relative to dry structural demand plus metabolic demand.</summary>
            <value>The dry mass supply.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.DeltaWt">
            <summary>Gets the delta wt.</summary>
            <value>The delta wt.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.FN">
            <summary>Gets the n supply relative to N demand.</summary>
            <value>The n supply.</value>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnSimulationCommencing(System.Object,System.EventArgs)">
            6. Public methods
             -----------------------------------------------------------------------------------------------------------
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnDoPotentialPlantPartioning(System.Object,System.EventArgs)">
            First get all demands and supplies, send potential DM allocations and do N reallocation so N uptake demand can be calculated
            <summary>Does the water limited dm allocations.  Water constaints to growth are accounted for in the calculation of DM supply
            and does initial N calculations to work out how much N uptake is required to pass to SoilArbitrator</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential N uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnDoActualPlantPartioning(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.DMSupplies">
            Local methods for setting up supplies and demands
            <summary>Accumulate all of the Organ DM Supplies </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.DMDemands">
            <summary>Calculate all of the Organ DM Demands </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.NSupplies">
            <summary>Calculate all of the Organ N Supplies </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.NDemands">
            <summary>Calculate all of the Organ N Demands </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="T:Models.PMF.PriorityAllocation">
            <summary>
            Priority allocation rules used to determine partitioning.
            
            Arbitration is performed in two passes for each of the biomass supply sources.
            On the first pass, structural and metabolic biomass is allocated to each organ
            based on their order of priority with higher priority organs recieving their
            full demand first.  On the second pass any remaining biomass is allocated to
            non-structural demands based on the same order of priority.
            </summary>
        </member>
        <member name="M:Models.PMF.PriorityAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.PrioritythenRelativeAllocation">
            <summary>
            Priority then Relative allocation rules used to determine partitioning.
            
            Arbitration is performed in two passes for each of the biomass supply sources.
            On the first pass, structural and metabolic biomass is allocated to each organ
            based on their order of priority with higher priority organs recieving their
            full demand first. On the second pass any remaining biomass is allocated to
            non-structural demands based on the relative demand from all organs.
            </summary>
        </member>
        <member name="M:Models.PMF.PrioritythenRelativeAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.QPrioritythenRelativeAllocation">
            <summary>
            Priority then Relative allocation rules used to determine partitioning.
            
            Arbitration is performed in two passes for each of the biomass supply sources.
            On the first pass, structural and metabolic biomass is allocated to each organ
            based on their order of priority with higher priority organs recieving their
            full demand first. On the second pass any remaining biomass is allocated to
            non-structural demands based on the relative demand from all organs.
            </summary>
        </member>
        <member name="M:Models.PMF.QPrioritythenRelativeAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TypeSupply">The biomass supply for the current supply type.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.RelativeAllocation">
            <summary>
            Relative allocation rules used to determine partitioning.
            
            Arbitration is performed in two passes for each of the supply sources.
            On the first pass, biomass or nutrient supply is allocated to structural
            and metabolic pools of each organ based on their demand relative to the
            demand from all organs.  On the second pass any remaining supply is
            allocated to non-structural pool based on the organ's relative demand.
            </summary>
        </member>
        <member name="M:Models.PMF.RelativeAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.RelativeAllocationSinglePass">
            <summary>
            Single Pass Relative allocation rules used to determine partitioning.
            
            Arbitration is performed in a single pass for each of the biomass supply
            sources. Biomass is partitioned between organs based on their relative
            demand in a single pass so non-structural demands compete dirrectly with
            structural demands.
            </summary>
        </member>
        <member name="M:Models.PMF.RelativeAllocationSinglePass.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.RetranslocateAvailableN">
            <summary>
            Process Retranslocation of BiomassType using Storage First and then Metabolic.
            
            Arbitration is performed in two passes for each of the supply sources. On the
            first pass, biomass or nutrient supply is allocated to structural and metabolic
            pools of each organ based on their demand relative to the demand from all organs.
            On the second pass any remaining supply is allocated to non-structural pool based
            on the organ's relative demand.
            </summary>
        </member>
        <member name="F:Models.PMF.RetranslocateAvailableN.RetranslocateFunction">
            <summary>The calculation for N retranslocation function</summary>
        </member>
        <member name="F:Models.PMF.RetranslocateAvailableN.RetranslocateDMFunction">
            <summary>The calculation for DM retranslocation function</summary>
        </member>
        <member name="M:Models.PMF.RetranslocateAvailableN.Calculate(Models.PMF.Interfaces.IOrgan)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
        </member>
        <member name="M:Models.PMF.RetranslocateAvailableN.CalculateBiomass(Models.PMF.Interfaces.IOrgan)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
        </member>
        <member name="M:Models.PMF.RetranslocateAvailableN.AllocateBiomass(Models.PMF.Interfaces.IOrgan,Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
            <param name="biomass"></param>
        </member>
        <member name="M:Models.PMF.RetranslocateAvailableN.Allocate(Models.PMF.Interfaces.IOrgan,Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
            <param name="nitrogen"></param>
        </member>
        <member name="T:Models.PMF.RetranslocateNonStructural">
            <summary>
            Process Retranslocation of BiomassType using Storage First and then Metabolic.
            
            Arbitration is performed in two passes for each of the supply sources. On the
            first pass, biomass or nutrient supply is allocated to structural and metabolic
            pools of each organ based on their demand relative to the demand from all
            organs.  On the second pass any remaining supply is allocated to non-structural
            pool based on the organ's relative demand.
            </summary>
        </member>
        <member name="M:Models.PMF.RetranslocateNonStructural.Calculate(Models.PMF.Interfaces.IOrgan)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
        </member>
        <member name="M:Models.PMF.RetranslocateNonStructural.CalculateBiomass(Models.PMF.Interfaces.IOrgan)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
        </member>
        <member name="M:Models.PMF.RetranslocateNonStructural.Allocate(Models.PMF.Interfaces.IOrgan,Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
            <param name="nitrogen"></param>
        </member>
        <member name="M:Models.PMF.RetranslocateNonStructural.AllocateBiomass(Models.PMF.Interfaces.IOrgan,Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
            <param name="biomass"></param>
        </member>
        <member name="T:Models.PMF.SorghumArbitratorN">
            <summary>
            Relative allocation rules used to determine partitioning.
            
            Arbitration is performed in two passes for each of the supply sources.
            On the first pass, biomass or nutrient supply is allocated to
            structural and metabolic pools of each organ based on their demand
            relative to the demand from all organs.  On the second pass any
            remaining supply is allocated to non-structural pool based on the
            organ's relative demand.
            </summary>
        </member>
        <member name="P:Models.PMF.SorghumArbitratorN.NSupply">
            <summary>
            Daily NSupply.
            </summary>
        </member>
        <member name="M:Models.PMF.SorghumArbitratorN.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="M:Models.PMF.SorghumArbitratorN.DoRetranslocation(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="N">The N bat.</param>
            <param name="dm">The DM BAT.</param>
        </member>
        <member name="M:Models.PMF.SorghumArbitratorN.AllocateStructuralFromRachis(System.Int32,System.Int32,Models.PMF.BiomassArbitrationType,Models.PMF.BiomassArbitrationType,Models.PMF.Organs.GenericOrgan)">
            <summary>Relatives the allocation.</summary>
            <param name="iSupply">The organs.</param>
            <param name="iSink">The organs.</param>
            <param name="n">The organs.</param>
            <param name="dm">The dm BAT.</param>
            <param name="source">The organ which N will be taken from.</param>
        </member>
        <member name="M:Models.PMF.SorghumArbitratorN.AllocateStructuralFromStem(System.Int32,System.Int32,Models.PMF.BiomassArbitrationType,Models.PMF.BiomassArbitrationType,Models.PMF.Organs.GenericOrgan)">
            <summary>Relatives the allocation.</summary>
            <param name="iSupply">The organs.</param>
            <param name="iSink">The organs.</param>
            <param name="n">The organs.</param>
            <param name="dm">The dm BAT.</param>
            <param name="source">The organ which N will be taken from.</param>
        </member>
        <member name="M:Models.PMF.SorghumArbitratorN.AllocateStructuralFromLeaf(Models.PMF.Organs.SorghumLeaf,System.Int32,System.Int32,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="leaf">The organs.</param>
            <param name="iSupply">The organs.</param>
            <param name="iSink">The organs.</param>
            <param name="BAT">The organs.</param>
        </member>
        <member name="T:Models.PMF.ArrayBiomass">
            <summary>
            This class encapsulates an array of biomass objects
            </summary>
        </member>
        <member name="F:Models.PMF.ArrayBiomass.Propertys">
            <summary>The propertys</summary>
        </member>
        <member name="F:Models.PMF.ArrayBiomass.ArraySize">
            <summary>The array size</summary>
        </member>
        <member name="F:Models.PMF.ArrayBiomass.ArraySizeNumber">
            <summary>The array size number</summary>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StorageN">
            <summary>Gets or sets the non structural n.</summary>
            <value>The non structural n.</value>
            <exception cref="T:System.Exception">Cannot set StorageN in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StructuralN">
            <summary>Gets or sets the structural n.</summary>
            <value>The structural n.</value>
            <exception cref="T:System.Exception">Cannot set StructuralN in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.MetabolicN">
            <summary>Gets or sets the metabolic n.</summary>
            <value>The metabolic n.</value>
            <exception cref="T:System.Exception">Cannot set MetabolicN in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StorageWt">
            <summary>Gets or sets the non structural wt.</summary>
            <value>The non structural wt.</value>
            <exception cref="T:System.Exception">Cannot set StorageWt in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StructuralWt">
            <summary>Gets or sets the structural wt.</summary>
            <value>The structural wt.</value>
            <exception cref="T:System.Exception">Cannot set StructuralWt in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.MetabolicWt">
            <summary>Gets or sets the metabolic wt.</summary>
            <value>The metabolic wt.</value>
            <exception cref="T:System.Exception">Cannot set MetabolicWt in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.NConc">
            <summary>Gets the n conc.</summary>
            <value>The n conc.</value>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StructuralNConc">
            <summary>Gets the structural n conc.</summary>
            <value>The structural n conc.</value>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StorageNConc">
            <summary>Gets the non structural n conc.</summary>
            <value>The non structural n conc.</value>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.MetabolicNConc">
            <summary>Gets the metabolic n conc.</summary>
            <value>The metabolic n conc.</value>
        </member>
        <member name="M:Models.PMF.ArrayBiomass.AddValuesToList(System.String)">
            <summary>Adds the values to list.</summary>
            <param name="SubPropertyName">Name of the sub property.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot find:  + PropertyName +  in ArrayBiomass:  + this.Name</exception>
        </member>
        <member name="T:Models.PMF.Biomass">
            <summary>
            Biomass of plant organs
            </summary>
        </member>
        <member name="F:Models.PMF.Biomass._StructuralWt">
            <summary>The structural wt</summary>
        </member>
        <member name="F:Models.PMF.Biomass._StorageWt">
            <summary>The non structural wt</summary>
        </member>
        <member name="F:Models.PMF.Biomass._StructuralN">
            <summary>The structural n</summary>
        </member>
        <member name="F:Models.PMF.Biomass._StorageN">
            <summary>The non structural n</summary>
        </member>
        <member name="F:Models.PMF.Biomass._MetabolicWt">
            <summary>The metabolic wt</summary>
        </member>
        <member name="F:Models.PMF.Biomass._MetabolicN">
            <summary>The metabolic n</summary>
        </member>
        <member name="P:Models.PMF.Biomass.StorageN">
            <summary>Gets or sets the non structural n.</summary>
            <value>The non structural n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StructuralN">
            <summary>Gets or sets the structural n.</summary>
            <value>The structural n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StorageWt">
            <summary>Gets or sets the non structural wt.</summary>
            <value>The non structural wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StructuralWt">
            <summary>Gets or sets the structural wt.</summary>
            <value>The structural wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.MetabolicWt">
            <summary>Gets or sets the metabolic wt.</summary>
            <value>The metabolic wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.MetabolicN">
            <summary>Gets or sets the metabolic n.</summary>
            <value>The metabolic n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.Wt">
            <summary>Gets the wt.</summary>
            <value>The wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.N">
            <summary>Gets the N amount.</summary>
            <value>The n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.NConc">
            <summary>Gets the N concentration.</summary>
            <value>The n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StructuralNConc">
            <summary>Gets the structural N concentration.</summary>
            <value>The structural n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StorageNConc">
            <summary>Gets the non structural N concentration.</summary>
            <value>The non structural n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.MetabolicNConc">
            <summary>Gets the metabolic N concentration.</summary>
            <value>The metabolic n conc.</value>
        </member>
        <member name="M:Models.PMF.Biomass.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Biomass"/> class.</summary>
        </member>
        <member name="M:Models.PMF.Biomass.#ctor(Models.PMF.Biomass)">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Biomass"/> class.</summary>
            <param name="from">From.</param>
        </member>
        <member name="M:Models.PMF.Biomass.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Biomass.Add(Models.PMF.Biomass)">
            <summary>Adds the specified a.</summary>
            <param name="a">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.Subtract(Models.PMF.Biomass)">
            <summary>Subtracts the specified a.</summary>
            <param name="a">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.Multiply(System.Double)">
            <summary>Multiplies a biomass object by a given scalar</summary>
            <param name="scalar">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.SetTo(Models.PMF.Biomass)">
            <summary>Sets to.</summary>
            <param name="a">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.op_Addition(Models.PMF.Biomass,Models.PMF.Biomass)">
            <summary>Implements the operator +.</summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Models.PMF.Biomass.op_Subtraction(Models.PMF.Biomass,Models.PMF.Biomass)">
            <summary>Implements the operator -.</summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Models.PMF.Biomass.op_Multiply(Models.PMF.Biomass,System.Double)">
            <summary>Implements the operator *.</summary>
            <param name="a">a.</param>
            <param name="Fraction">The fraction.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Models.PMF.BiomassDemand">
            <summary>
            This class holds the functions for calculating the absolute demands for each biomass fraction. 
            </summary>
        </member>
        <member name="F:Models.PMF.BiomassDemand.Structural">
            <summary>The demand for the structural fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemand.Metabolic">
            <summary>The demand for the metabolic fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemand.Storage">
            <summary>The demand for the storage fraction.</summary>
        </member>
        <member name="M:Models.PMF.BiomassDemand.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.PMF.BiomassDemandAndPriority">
            <summary>
            This class holds the functions for calculating the absolute demands and priorities for each biomass fraction. 
            </summary>
        </member>
        <member name="F:Models.PMF.BiomassDemandAndPriority.Structural">
            <summary>The demand for the structural fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemandAndPriority.Metabolic">
            <summary>The demand for the metabolic fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemandAndPriority.Storage">
            <summary>The demand for the storage fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemandAndPriority.QStructuralPriority">
            <summary>Factor for Structural biomass priority</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemandAndPriority.QMetabolicPriority">
            <summary>Factor for Metabolic biomass priority</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemandAndPriority.QStoragePriority">
            <summary>Factor for Storage biomass priority</summary>
        </member>
        <member name="M:Models.PMF.BiomassDemandAndPriority.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="M:Models.PMF.BiomassDemandAndPriority.GetTags">
            <summary>
            Get the tags used in this model's description.
            </summary>
        </member>
        <member name="T:Models.PMF.CompositeBiomass">
            <summary>This is a composite biomass class, representing the sum of 1 or more biomass objects from one or more organs.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.OrganNames">
            <summary>List of organs to agregate.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.IncludeLive">
            <summary>Include live material?</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.IncludeDead">
            <summary>Include dead material?</summary>
        </member>
        <member name="M:Models.PMF.CompositeBiomass.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Clear ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.Wt">
            <summary>Gets the mass.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.N">
            <summary>Gets the nitrogen content.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.NConc">
            <summary>Gets the nitrogen concentration.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StructuralWt">
            <summary>Gets the structural mass.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StructuralN">
            <summary>Gets the structural nitrogen content.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StorageWt">
            <summary>Gets the storage mass.</summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StorageN">
            <summary>Gets the storage nitrogen content.</summary>
        </member>
        <member name="M:Models.PMF.CompositeBiomass.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.IBiomass">
            <summary>Interface for all biomass objects.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.N">
            <summary>Gets the nitrogen amount.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.NConc">
            <summary>Gets the nitrogen concentration.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.Wt">
            <summary>Gets the mass.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.StructuralWt">
            <summary>Gets the structural mass.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.StructuralN">
            <summary>Gets the structural nitrogen.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.StorageWt">
            <summary>Gets the storage mass.</summary>
        </member>
        <member name="P:Models.PMF.IBiomass.StorageN">
            <summary>Gets the storage nitrogen.</summary>
        </member>
        <member name="T:Models.PMF.Cultivar">
            <summary>
            A cultivar model - used to override properties of another model
            (typically a plant) at runtime.
            </summary>
            <remarks>
            A cultivar includes aliases to indicate other common names
            and Commands to specify genotypic parameters.
            The format of Commands is "name=value". The "name" of parameter
            should include the full path under Plant function,
            e.g. [Phenology].Vernalisation.PhotopSens = 3.5.
            </remarks>
        </member>
        <member name="F:Models.PMF.Cultivar.properties">
            <summary>
            The properties for each command
            </summary>
        </member>
        <member name="F:Models.PMF.Cultivar.oldPropertyValues">
            <summary>
            The original property values before the command was applied. Allows undo.
            </summary>
        </member>
        <member name="P:Models.PMF.Cultivar.Command">
            <summary>
            Gets or sets a collection of commands that must be executed when applying this cultivar.
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.IsKnownAs(System.String)">
            <summary>
            Return true iff this cultivar has the same name as, or is an
            alias for, the givem name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Models.PMF.Cultivar.GetNames">
            <summary>
            Return all names by which this cultivar is known.
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.Apply(Models.Core.Model)">
            <summary>
            Apply commands.
            </summary>
            <param name="model">The underlying model to apply the commands to</param>
        </member>
        <member name="M:Models.PMF.Cultivar.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation is now completed. Make sure that we undo any commands. i.e. reset
            back to default state.
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.Unapply">
            <summary>
            Undo the cultivar commands. i.e. put the model back into its original state
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.CultivarFolder">
            <summary>
            A folder of cultivars
            </summary>
        </member>
        <member name="M:Models.PMF.CultivarFolder.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.DamageableBiomass">
            <summary>A class to hold a mass of biomass and its digestibility.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.DamageableBiomass.#ctor(System.String,Models.PMF.Biomass,System.Boolean,System.Nullable{System.Double})">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of biomass.</param>
            <param name="total">Total Biomass (kg/ha).</param>
            <param name="isLive">Is biomass live.</param>
            <param name="digestibility">Optional digestibility (0-1).</param>
        </member>
        <member name="M:Models.PMF.Interfaces.DamageableBiomass.#ctor(System.String,Models.PMF.Biomass,System.Double,System.Boolean,System.Nullable{System.Double})">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of biomass.</param>
            <param name="total">Total Biomass (kg/ha).</param>
            <param name="fractionConsumable">Fraction of biomass that is consumable.</param>
            <param name="isLive">Is biomass live.</param>
            <param name="digestibility">Optional digestibility (0-1).</param>
        </member>
        <member name="P:Models.PMF.Interfaces.DamageableBiomass.Name">
            <summary>Name of material.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.DamageableBiomass.Total">
            <summary>Total Biomass (kg/ha)</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.DamageableBiomass.Consumable">
            <summary>Consumable Biomass (kg/ha)</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.DamageableBiomass.IsLive">
            <summary>Is biomass live.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.DamageableBiomass.Digestibility">
            <summary>Optional digestibility (0-1). Can be null missing digestibility.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IApex">
            <summary>
            An interface for an apex model.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IApex.Number">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IApex.GroupSize">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IApex.GroupAge">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IApex.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            Calculate apex data during leaf tip appearance
            </summary>
            <param name="population">Current plant population</param>
            <param name="totalStemPopn">Current total stem populatin</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IApex.Appearance(System.Double,System.Double)">
            <summary>
            Calculate apex data during leaf appearance
            </summary>
            <param name="population">Current plant population</param>
            <param name="totalStemPopn">Current total stem populatin</param>
            <returns>Cohort population.</returns>
        </member>
        <member name="M:Models.PMF.Interfaces.IApex.Reset">
            <summary>
            Reset the apex instance
            </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IArbitrator">
            <summary> Inerface for arbitrators </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitrator.DM">
            <summary>The DM data class  </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitrator.N">
            <summary>The N data class  </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IArbitration">
            <summary>
            An interface that defines what needs to be implemented by an organ
            that communicates to the OrganArbitrator.
            </summary>
            <remarks>
             PFM considers four types of biomass supply, i.e.
             - fixation
             - reallocation
             - uptake
             - retranslocation
            PFM considers eight types of biomass allocation, i.e.
             - structural
             - non-structural
             - metabolic
             - retranslocation
             - reallocation
             - respired
             - uptake
             - fixation
            </remarks>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.DMDemand">
            <summary>Returns the organs dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.DMSupply">
            <summary>Returns the organs dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.NDemand">
            <summary>Returns the organs N demand</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.NSupply">
            <summary>Returns the organs N supply</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.potentialDMAllocation">
            <summary>Returns the DM that can be paritioned to the organ of N is not limited </summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.Live">
            <summary>Gets the live biomass</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.BiomassPoolType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Structural">
            <summary>Gets or sets the structural.</summary>
            <value>The structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Storage">
            <summary>Gets or sets the storage.</summary>
            <value>The non structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Metabolic">
            <summary>Gets or sets the metabolic.</summary>
            <value>The metabolic.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.QStructuralPriority">
            <summary>Gets or sets the structural Priority.</summary>
            <value>The structural Priority.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.QStoragePriority">
            <summary>Gets or sets Storage Priority.</summary>
            <value>The Storage Priority.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.QMetabolicPriority">
            <summary>Gets or sets the metabolic biomass priority.</summary>
            <value>The metabolic.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Total">
            <summary>Gets the total amount of biomass.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.BiomassSupplyType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Fixation">
            <summary>Gets or sets the fixation.</summary>
            <value>The fixation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Reallocation">
            <summary>Gets or sets the reallocation.</summary>
            <value>The reallocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Uptake">
            <summary>Gets or sets the uptake.</summary>
            <value>The uptake.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Retranslocation">
            <summary>Gets or sets the retranslocation.</summary>
            <value>The retranslocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Total">
            <summary>Gets the total supply.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.BiomassAllocationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Structural">
            <summary>Gets or sets the structural.</summary>
            <value>The structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Storage">
            <summary>Gets or sets the non structural.</summary>
            <value>The non structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Metabolic">
            <summary>Gets or sets the metabolic.</summary>
            <value>The metabolic.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Retranslocation">
            <summary>Gets or sets the retranslocation.</summary>
            <value>The retranslocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Reallocation">
            <summary>Gets or sets the reallocation.</summary>
            <value>The reallocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Respired">
            <summary>Gets or sets the respired.</summary>
            <value>The respired.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Uptake">
            <summary>Gets or sets the uptake.</summary>
            <value>The uptake.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Fixation">
            <summary>Gets or sets the fixation.</summary>
            <value>The fixation.</value>
        </member>
        <member name="T:Models.PMF.Interfaces.IHasDamageableBiomass">
            <summary>Interface used by models (e.g. STOCK, pests and diseases) to damage a biomass (e.g. plant or surface residues).</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IHasDamageableBiomass.Name">
            <summary>Name of plant that can be damaged.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IHasDamageableBiomass.Material">
            <summary>A list of material (biomass) that can be damaged.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IHasDamageableBiomass.RemoveBiomass(System.String,System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Remove biomass from an organ.
            </summary>
            <param name="materialName">Name of organ.</param>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove.</param>
        </member>
        <member name="T:Models.PMF.Interfaces.IHasPopulationReducer">
            <summary>Interface used by models that can reduce their population.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IHasPopulationReducer.Population">
            <summary>Plant population.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IHasPopulationReducer.ReducePopulation(System.Double)">
            <summary>Reduce the plant population.</summary>
            <param name="newPlantPopulation">The new plant population.</param>
        </member>
        <member name="T:Models.PMF.Interfaces.IHasWaterDemand">
            <summary>An interface that defines what needs to be implemented by an organthat has a water demand.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IHasWaterDemand.CalculateWaterDemand">
            <summary>Gets or sets the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IHasWaterDemand.WaterAllocation">
            <summary>Sets the organs water allocation.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IOrgan">
            <summary>
            Organ interface
            </summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Biomass removal logic for this organ.
            </summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove</param>
        </member>
        <member name="P:Models.PMF.Interfaces.IOrgan.MaintenanceRespiration">
            <summary>
            Maintenance respiration.
            </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IOrganDamage">
            <summary>
            Interface used by models (e.g. STOCK, pests and diseases) to access an organ's properties to calculate damage.
            The actual damage is done through the plant damage interface.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IOrganDamage.Name">
            <summary>Name of the organ.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IOrganDamage.Live">
            <summary>Gets the live biomass of the organ.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IOrganDamage.Dead">
            <summary>Gets the dead biomass of the organ.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IOrganDamage.IsAboveGround">
            <summary>Gets a value indicating whether the organ is above ground or not.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IPhenology">
            <summary>
            An interface for a phenology model.
            </summary>
            <remarks>
            fixme - there's a lot of baggage here which should be removed.
            </remarks>
        </member>
        <member name="P:Models.PMF.Interfaces.IPhenology.CurrentPhase">
            <summary>
            The current phenological phase.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPhenology.Stage">
            <summary>
            A one based stage number.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPhenology.Zadok">
            <summary>
            Gets the current zadok stage number. Used in manager scripts.
            </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IPlantDamage">
            <summary>
            Interface used by models (e.g. STOCK, pests and diseases) to damage a plant.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.Name">
            <summary>Name of plant that can be damaged.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.IsAlive">
            <summary>Return true if plant is alive and in the ground.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.Organs">
            <summary>A list of organs that can be damaged.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.AboveGround">
            <summary>Total amount of above ground biomass.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.AboveGroundHarvestable">
            <summary>Total amount of harvestable above ground biomass.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.Population">
            <summary>Plant population.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.LAI">
            <summary>Leaf area index.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IPlantDamage.AssimilateAvailable">
            <summary>Amount of assimilate available to be damaged.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IPlantDamage.RemoveBiomass(System.String,System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Remove biomass from an organ.
            </summary>
            <param name="organName">Name of organ.</param>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove.</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IPlantDamage.ReduceCanopy(System.Double)">
            <summary>
            Set the plant leaf area index.
            </summary>
            <param name="deltaLAI">Delta LAI.</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IPlantDamage.ReduceRootLengthDensity(System.Double)">
            <summary>
            Set the plant root length density.
            </summary>
            <param name="deltaRLD">New root length density.</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IPlantDamage.RemoveAssimilate(System.Double)">
            <summary>
            Remove an amount of assimilate from the plant.
            </summary>
            <param name="deltaAssimilate">The amount of assimilate to remove (g/m2).</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IPlantDamage.ReducePopulation(System.Double)">
            <summary>
            Reduce the plant population.
            </summary>
            <param name="newPlantPopulation">The new plant population.</param>
        </member>
        <member name="T:Models.PMF.Interfaces.IRetranslocateMethod">
            <summary>
            Interface for implementing how BiomassType is Retranslocated
            </summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IRetranslocateMethod.Allocate(Models.PMF.Interfaces.IOrgan,Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
            <param name="allocationType"></param>
        </member>
        <member name="M:Models.PMF.Interfaces.IRetranslocateMethod.AllocateBiomass(Models.PMF.Interfaces.IOrgan,Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
            <param name="allocationType"></param>
        </member>
        <member name="M:Models.PMF.Interfaces.IRetranslocateMethod.Calculate(Models.PMF.Interfaces.IOrgan)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
        </member>
        <member name="M:Models.PMF.Interfaces.IRetranslocateMethod.CalculateBiomass(Models.PMF.Interfaces.IOrgan)">
            <summary>Allocate the retranslocated material</summary>
            <param name="organ"></param>
        </member>
        <member name="T:Models.PMF.Interfaces.IRoot">
            <summary>
            Root interface
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRoot.LengthDensity">
            <summary>Root length density.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRoot.SWUptakeLayered">
            <summary>Daily soil water uptake from each soil layer.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRoot.NUptakeLayered">
            <summary>Daily nitrogen uptake from each soil layer.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRoot.RootLengthDensityModifierDueToDamage">
            <summary>Root length density modifier due to damage.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.ITilleringMethod">
            <summary>
            Interface for managing tillering.
            Tillers are stored in Culms in the Leaf organ where the first Culm is the main stem and the remaining culms are the tillers.
            </summary>
        </member>
        <member name="M:Models.PMF.Interfaces.ITilleringMethod.CalcLeafNumber">
            <summary> Update number of leaves for all culms </summary>
        </member>
        <member name="M:Models.PMF.Interfaces.ITilleringMethod.CalcPotentialLeafArea">
            <summary> Calculate the potential leaf area for the tillers</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.ITilleringMethod.CalcActualLeafArea(System.Double)">
            <summary> Calculate the actual Area for the Culms</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IWaterNitrogenUptake">
            <summary>An interface that defines what needs to be implemented by an organthat has a water demand.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.CalculateWaterSupply(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Calculate the water supply for the specified zone.</summary>
            <param name="zone">The zone.</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.CalculateNitrogenSupply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[]@,System.Double[]@)">
            <summary>Calculate the nitrogen supply from the specified zone.</summary>
            <param name="zone">The zone.</param>
            <param name="NO3Supply">The returned NO3 supply</param>
            <param name="NH4Supply">The returned NH4 supply</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.DoWaterUptake(System.Double[],System.String)">
            <summary>Does the water uptake.</summary>
            <param name="amount">The amount - layered mm.</param>
            <param name="zoneName">Zone name to do water uptake in</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.DoNitrogenUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Does the Nitrogen uptake.</summary>
            <param name="zonesFromSoilArbitrator">List of zones from soil arbitrator</param>
        </member>
        <member name="T:Models.PMF.ICulmLeafArea">
            <summary>
            Calculate Individual leaf size within a Culm
            </summary>
        </member>
        <member name="M:Models.PMF.ICulmLeafArea.CalculateIndividualLeafArea(System.Double,System.Double,System.Double)">
            <summary>Calclate the individual leaf area given the leaf number and Final number of leaves </summary>
        </member>
        <member name="T:Models.PMF.Library.BiomassRemoval">
            <summary>
            This organ will respond to certain management actions by either removing some
            of its biomass from the system or transferring some of its biomass to the soil
            surface residues. The following table describes the default proportions of live
            and dead biomass that are transferred out of the simulation using "Removed" or
            to soil surface residue using "To Residue" for a range of management actions.
            The total percentage removed for live or dead must not exceed 100%. The
            difference between the total and 100% gives the biomass remaining on the plant.
            These can be changed during a simulation using a manager script.
            </summary>
        </member>
        <member name="F:Models.PMF.Library.BiomassRemoval.defaults">
            <summary>Biomass removal defaults for different event types e.g. prune, cut etc.</summary>
        </member>
        <member name="E:Models.PMF.Library.BiomassRemoval.IncorpFOM">
            <summary>Invoked when fresh organic matter needs to be incorporated into soil</summary>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType,Models.PMF.Biomass,Models.PMF.Biomass,Models.PMF.Biomass,Models.PMF.Biomass,System.Boolean)">
            <summary>Removes biomass from live and dead biomass pools, may send to surface organic matter</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass removal call.</param>
            <param name="amount">The fractions of biomass to remove</param>
            <param name="Live">Live biomass pool</param>
            <param name="Dead">Dead biomass pool</param>
            <param name="Removed">The removed pool to add to.</param>
            <param name="Detached">The detached pool to add to.</param>
            <param name="writeToSummary">Write the biomass removal to summary file?</param>
            <returns>The remaining live fraction.</returns>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.RemoveBiomassToSoil(System.String,Models.PMF.OrganBiomassRemovalType,Models.PMF.Biomass[],Models.PMF.Biomass[],Models.PMF.Biomass,Models.PMF.Biomass)">
            <summary>Removes biomass from live and dead biomass pools and send to soil</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="removal">The fractions of biomass to remove</param>
            <param name="Live">Live biomass pool</param>
            <param name="Dead">Dead biomass pool</param>
            <param name="Removed">The removed pool to add to.</param>
            <param name="Detached">The detached pool to add to.</param>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.FindDefault(System.String)">
            <summary>Finds a specific biomass removal default for the specified name</summary>
            <param name="name">Name of the removal type e.g. cut, prune etc.</param>
            <returns>Returns the default or null if not found.</returns>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.CheckRemoveFractions(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Checks whether specified biomass removal fractions are within limits</summary>
            <param name="name">Name of the removal type e.g. cut, prune etc.</param>
            <param name="amount">The removal amount fractions</param>
            <returns>Returns true if fractions are ok, false otherwise.</returns>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.RemoveBiomassFromLiveAndDead(Models.PMF.OrganBiomassRemovalType,Models.PMF.Biomass,Models.PMF.Biomass,Models.PMF.Biomass@,Models.PMF.Biomass@)">
            <summary>Removes biomass from live and dead biomass pools</summary>
            <param name="amount">The fractions of biomass to remove</param>
            <param name="Live">Live biomass pool</param>
            <param name="Dead">Dead biomass pool</param>
            <param name="removing">The removed pool to add to.</param>
            <param name="detaching">The amount of detaching material</param>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm">
            <summary>
            An oil palm model
            </summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CanopyType">
            <summary>Canopy type</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.LAI">
            <summary>Gets the lai.</summary>
            <value>The lai.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.LAITotal">
            <summary>Gets the maximum LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CoverGreen">
            <summary>Gets the cover green (0-1)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CoverTotal">
            <summary>Gets the cover total (0-1)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Height">
            <summary>Gets the canopy height (mm)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Depth">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Width">
            <summary>Gets the width of the canopy (mm).</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FRGR">
            <summary>Gets the LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PotentialEP">
            <summary>Potential evapotranspiration</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.LightProfile">
            <summary>MicroClimate supplies LightProfile</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsAlive">
            <summary>
            Is the plant alive?
            </summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PlantType">
            <summary>The plant type.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.plant_status">
            <summary>The plant_status</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Soil">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.waterBalance">
            <summary>Link to the soil water balance.</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.NO3">
            <summary>NO3 solute.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.AboveGround">
            <summary>Aboveground mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.soilCrop">
            <summary>The soil crop</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.cultivarDefinition">
            <summary>The cultivar definition</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Cultivars">
            <summary>Gets a list of all cultivar definitions.</summary>
            <value>The cultivars.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.height">
            <summary>Height to top of plant canopy</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.cover_tot">
            <summary>Total cover provided by plant canopies</summary>
            <value>The cover_tot.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryCoverMax">
            <summary>Gets or sets the understory cover maximum.</summary>
            <value>The understory cover maximum.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryLegumeFraction">
            <summary>Gets or sets the understory legume fraction.</summary>
            <value>The understory legume fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.MaximumRootDepth">
            <summary>Gets or sets the maximum root depth.</summary>
            <value>The maximum root depth.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Ndemand">
            <summary>The ndemand</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootDepth">
            <summary>Palm Rooting Depth</summary>
            <value>The root depth.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.PotSWUptake">
            <summary>The pot sw uptake</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.WaterUptake">
            <summary>The sw uptake</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PEP">
            <summary>Potential daily evapotranspiration for the palm canopy</summary>
            <value>The pep.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.EP">
            <summary>Daily evapotranspiration from the palm canopy</summary>
            <value>The ep.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DltDM">
            <summary>Daily total plant dry matter growth</summary>
            <value>The DLT dm.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Excess">
            <summary>The excess</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FW">
            <summary>Factor for daily water stress effect on photosynthesis</summary>
            <value>The fw.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FWexpan">
            <summary>Factor for daily water stress effect on canopy expansion</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Fvpd">
            <summary>Factor for daily VPD effect on photosynthesis</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Fn">
            <summary>Factor for daily nitrogen stress effect on photosynthesis</summary>
            <value>The function.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CumulativeFrondNumber">
            <summary>Cumulative frond production since planting</summary>
            <value>The cumulative frond number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CumulativeBunchNumber">
            <summary>Cumulative bunch production since planting</summary>
            <value>The cumulative bunch number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.ReproductiveGrowthFraction">
            <summary>Proportion of daily growth partitioned into reproductive parts</summary>
            <value>The reproductive growth fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CarbonStress">
            <summary>Amount of carbon limitation for todays potential growth (ie supply/demand)</summary>
            <value>The carbon stress.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestBunches">
            <summary>Number of bunches harvested on a harvesting event</summary>
            <value>The harvest bunches.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestFFB">
            <summary>Mass of harvested FFB on a harvesting event</summary>
            <value>The harvest FFB.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestNRemoved">
            <summary>Nitrogen removed at a harvesting event</summary>
            <value>The harvest n removed.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestBunchSize">
            <summary>Mean size of bunches at a harvesting event</summary>
            <value>The size of the harvest bunch.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Age">
            <summary>Time since planting</summary>
            <value>The age.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Population">
            <summary>Gets or sets the population.</summary>
            <value>The population.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SowingData">
            <summary>The sowing data</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.PotNUptake">
            <summary>Potential daily nitrogen uptake from each soil layer by palms</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.NitrogenUptake">
            <summary>Daily nitrogen uptake from each soil layer by palms</summary>
            <value>The n uptake.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemGrowth">
            <summary>Daily stem dry matter growth</summary>
            <value>The stem growth.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondGrowth">
            <summary>Daily frond dry matter growth</summary>
            <value>The frond growth.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootGrowth">
            <summary>Daily root dry matter growth</summary>
            <value>The root growth.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchGrowth">
            <summary>Daily bunch dry matter growth</summary>
            <value>The bunch growth.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Fronds">
            <summary>The fronds</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Bunches">
            <summary>The bunches</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Roots">
            <summary>The roots</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondAppearanceRate">
            <summary>The frond appearance rate</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RelativeDevelopmentalRate">
            <summary>The relative developmental rate</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondMaxArea">
            <summary>The frond maximum area</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.DirectExtinctionCoeff">
            <summary>The direct extinction coeff</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.DiffuseExtinctionCoeff">
            <summary>The diffuse extinction coeff</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.ExpandingFronds">
            <summary>The expanding fronds</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.InitialFrondNumber">
            <summary>The initial frond number</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RUE">
            <summary>The rue</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootFrontVelocity">
            <summary>The root front velocity</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootSenescenceRate">
            <summary>The root senescence rate</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SpecificLeafArea">
            <summary>The specific leaf area</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SpecificLeafAreaMax">
            <summary>The specific leaf area maximum</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootFraction">
            <summary>The root fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchSizeMax">
            <summary>The bunch size maximum</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FemaleFlowerFraction">
            <summary>The female flower fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FFFStressImpact">
            <summary>The FFF stress impact</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.StemToFrondFraction">
            <summary>The stem to frond fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FlowerAbortionFraction">
            <summary>The flower abortion fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchFailureFraction">
            <summary>The bunch failure fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.InitialRootDepth">
            <summary>The initial root depth</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.KNO3">
            <summary>The kn o3</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.StemNConcentration">
            <summary>The stem n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchNConcentration">
            <summary>The bunch n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootNConcentration">
            <summary>The root n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchOilConversionFactor">
            <summary>The bunch oil conversion factor</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RipeBunchWaterContent">
            <summary>The ripe bunch water content</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.HarvestFrondNumber">
            <summary>The harvest frond number</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondMaximumNConcentration">
            <summary>The frond maximum n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondCriticalNConcentration">
            <summary>The frond critical n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondMinimumNConcentration">
            <summary>The frond minimum n concentration</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryCoverGreen">
            <summary>Proportion of green cover provided by the understory canopy</summary>
            <value>The understory cover green.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstoryKLmax">
            <summary>The understory k lmax</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstoryPotSWUptake">
            <summary>Potential soil water uptake from each soil layer by understory</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstorySWUptake">
            <summary>Actual Soil water uptake from each soil layer by understory</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryPotNUptake">
            <summary>Potential nitrogen water uptake from each soil layer by understory</summary>
            <value>The understory pot n uptake.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryNUptake">
            <summary>Actual soil nitrogen uptake from each soil layer by understory</summary>
            <value>The understory n uptake.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstoryRootDepth">
            <summary>Understory rooting depth</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryPEP">
            <summary>Potential daily evapotranspiration for the understory</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryEP">
            <summary>Daily evapotranspiration for the understory</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryFW">
            <summary>Understory plant water stress factor</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryDltDM">
            <summary>Daily understory dry matter growth</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryNFixation">
            <summary>Daily understory nitrogen fixation</summary>
            <value>The understory n fixation.</value>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm.RootType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootType.Mass">
            <summary>The mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootType.Length">
            <summary>The length</summary>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm.FrondType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.Mass">
            <summary>The mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.Area">
            <summary>The area</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.Age">
            <summary>The age</summary>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm.BunchType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.Mass">
            <summary>The mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.Age">
            <summary>The age</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.FemaleFraction">
            <summary>The female fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.FillDuration">
            <summary>Duration of Bunch Filling</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemMass">
            <summary>Gets or sets the stem mass.</summary>
            <value>The stem mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemN">
            <summary>Gets or sets the stem n.</summary>
            <value>The stem n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemNConc">
            <summary>Gets the stem n conc.</summary>
            <value>The stem n conc.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.CropInGround">
            <summary>The crop in ground</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsCropInGround">
            <summary>Gets or sets a value indicating whether this instance is crop in ground.</summary>
            <value>
            <c>true</c> if this instance is crop in ground; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the specified cultivar.</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <param name="rowConfig">The row configuration.</param>
            <exception cref="T:System.Exception">Cultivar not specified on sow line.</exception>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Harvest">
            <summary>Harvest the crop.</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.Sowing">
            <summary>Occurs when [sowing].</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.Harvesting">
            <summary>Occurs when [harvesting].</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.IncorpFOM">
            <summary>Occurs when [incorp fom].</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.BiomassRemoved">
            <summary>Occurs when [biomass removed].</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Called when [do plant growth].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Placeholder for SoilArbitrator</summary>
            <param name="soilstate">soil state</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Placeholder for SoilArbitrator</summary>
            <param name="soilstate">soil state</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the n uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoFlowerAbortion">
            <summary>Does the flower abortion.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoGenderDetermination">
            <summary>Does the gender determination.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoRootGrowth(System.Double)">
            <summary>Does the root growth.</summary>
            <param name="Allocation">The allocation.</param>
            <exception cref="T:System.Exception">Error trying to partition root biomass</exception>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoGrowth">
            <summary>Does the growth.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoDevelopment">
            <summary>Does the development.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.VPD">
            <summary>VPDs this instance.</summary>
            <returns></returns>
            The following helper functions [VDP and svp] are for calculating Fvdp
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoWaterBalance">
            <summary>Does the water balance.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoNBalance">
            <summary>Does the n balance.</summary>
            <exception cref="T:System.Exception">Error in N Allocation</exception>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondArea">
            <summary>Gets the frond area.</summary>
            <value>The frond area.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Frond17Area">
            <summary>Gets the frond17 area.</summary>
            <value>The frond17 area.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondMass">
            <summary>Gets the frond mass.</summary>
            <value>The frond mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondN">
            <summary>Gets the frond n.</summary>
            <value>The frond n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondNConc">
            <summary>Gets the frond n conc.</summary>
            <value>The frond n conc.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchMass">
            <summary>Gets the bunch mass.</summary>
            <value>The bunch mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchN">
            <summary>Gets the bunch n.</summary>
            <value>The bunch n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchNConc">
            <summary>Gets the bunch n conc.</summary>
            <value>The bunch n conc.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootMass">
            <summary>Gets the root mass.</summary>
            <value>The root mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootN">
            <summary>Gets the root n.</summary>
            <value>The root n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootNConc">
            <summary>Gets the root n conc.</summary>
            <value>The root n conc.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PlantN">
            <summary>Gets the plant n.</summary>
            <value>The plant n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.TotalFrondNumber">
            <summary>Gets the total frond number.</summary>
            <value>The total frond number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondNumber">
            <summary>Gets the frond number.</summary>
            <value>The frond number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.cover_green">
            <summary>Gets the cover_green.</summary>
            <value>The cover_green.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.SLA">
            <summary>Gets the sla.</summary>
            <value>The sla.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FFF">
            <summary>Gets the FFF.</summary>
            <value>The FFF.</value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.SizeFunction(System.Double,System.Double,System.Double)">
            <summary>Sizes the function.</summary>
            <param name="Age">The age.</param>
            <param name="FMA">FMA</param>
            <param name="GrowthDuration">Groth duration</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.RootProportion(System.Int32,System.Double)">
            <summary>Roots the proportion.</summary>
            <param name="layer">The layer.</param>
            <param name="root_depth">The root_depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.LayerIndex(System.Double)">
            <summary>Layers the index.</summary>
            <param name="depth">The depth.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Depth deeper than bottom of soil profile</exception>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DeltaT">
            <summary>Gets the delta t.</summary>
            <value>The delta t.</value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstory">
            <summary>Does the understory.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstoryGrowth">
            <summary>Does the understory growth.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstoryWaterBalance">
            <summary>Does the understory water balance.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstoryNBalance">
            <summary>Does the understory n balance.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DefoliationFraction">
            <summary>Gets or sets the defoliation fraction.</summary>
            <value>The defoliation fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DiffuseLightFraction">
            <summary>Gets the diffuse light fraction.</summary>
            <value>The diffuse light fraction.</value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Q0(System.Double,System.Int32)">
            <summary>Q0s the specified lat.</summary>
            <param name="lat">The lat.</param>
            <param name="day">The day.</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.BiomassRemovalComplete(System.Double)">
            <summary>
            Biomass has been removed from the plant.
            </summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.GetTags">
            <summary>
            Get tags for child models.
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.BasialBuds">
            <summary>
            Keep tracking LAI and nodes after plant reaches buds visible stage
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.BasialBuds.ResetStageName">
            <summary>The reset stage name</summary>
        </member>
        <member name="P:Models.PMF.Organs.BasialBuds.NodeNumber">
            <summary>
            NodeNumber for basial buds
            </summary> 
        </member>
        <member name="P:Models.PMF.Organs.BasialBuds.LAI">
            <summary>
            Leaf Area for basial buds
            </summary> 
        </member>
        <member name="F:Models.PMF.Organs.BasialBuds.Deltanodenumber">
            <summary>
            Nodenumber Function
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.BasialBuds.Deltalai">
            <summary>
            Leaf Area Index Function
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.OnCut(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.OnHarvest(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.OnGraze(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.OnPrune(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.BasialBuds.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Organs.PerennialLeafCohort">
            <summary>
            Represents a perennial leaf cohort.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.Age">
            <summary>
            Age of the leaf.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.Area">
            <summary>
            Leaf area.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.AreaDead">
            <summary>
            Area of dead leaf.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.IsSenesced">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.Live">
            <summary>
            Live biomass of the leaf.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.Dead">
            <summary>
            Dead biomass of the leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeafCohort.Senesced">
            <summary>
            Senesced biomass.
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.Cohorts">
            <summary>
            Encapsulates a collection of perennial leaf cohorts.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Cohorts.leaves">
            <summary>
            The leaves in the cohort.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Cohorts.live">
            <summary>
            Running total of the live biomass of all leaves.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Cohorts.dead">
            <summary>
            Running total of the dead biomass of all leaves.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Cohorts.LaiDead">
            <summary>
            Total dead Lai.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Cohorts.Lai">
            <summary>
            Total live Lai.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.SetLai(System.Double)">
            <summary>
            Change total leaf area.
            </summary>
            <param name="value">New Lai value.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.GetLive">
            <summary>
            Get the total live biomass of the cohort.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.GetDead">
            <summary>
            Get the total dead biomass of the cohort.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.AddNewLeafMaterial(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add new leaf material to the last leaf in the list.
            </summary>
            <param name="structuralMass">Structural biomass to add to the leaf.</param>
            <param name="storageMass">Storage biomass to add to the leaf.</param>
            <param name="structuralN">Sturctural N to add to the leaf.</param>
            <param name="storageN">Storage N to add to the leaf..</param>
            <param name="sla">Specific leaf area.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.ReduceLeavesUniformly(System.Double,System.Double)">
            <summary>
            Reduce all live leaves' size by a given fraction.
            </summary>
            <param name="liveFraction">The fraction by which to reduce the size of live leaves.</param>
            <param name="deadFraction">The fraction by whith to reduce the size of dead leaves.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.ReduceNonStructuralWt(System.Double)">
            <summary>
            Reduce non-structural biomass in all leaves by the given fraction.
            </summary>
            <param name="fraction">Fraction of non-structural biomass to remove from each leaf.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.SelectWhere(System.Func{Models.PMF.Organs.PerennialLeafCohort,System.Boolean},System.Func{Models.PMF.Organs.PerennialLeafCohort,System.Double})">
            <summary>
            Get the total value of all the leaves which match
            a given condition.
            </summary>
            <param name="predicate">The condition - value will be taken for all leaves matching this predicate.</param>
            <param name="selector">The property value of each leaf to be summed.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.SenesceWhere(System.Func{Models.PMF.Organs.PerennialLeafCohort,System.Boolean})">
            <summary>
            Senesce any leaves matching the given condition.
            </summary>
            <param name="predicate">Any leaves matching this predicate will be senesced.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.DetachWhere(System.Func{Models.PMF.Organs.PerennialLeafCohort,System.Boolean})">
            <summary>
            Detach any leaves older than the specified age.
            </summary>
            <param name="predicate">Any leaves matching this predicate will be deatched..</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.KillLeavesUniformly(System.Double)">
            <summary>
            Kill all leaves by a given fraction.
            </summary>
            <param name="fraction">The fraction to be removed from the leaves.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.AddLeaf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a leaf to the cohort.
            </summary>
            <param name="initialMass">Initial mass of the leaf.</param>
            <param name="minNConc">Minimum N concentration of the new leaf.</param>
            <param name="maxNConc">Maximum N concentration in the new leaf.</param>
            <param name="sla">Specific leaf area of the new leaf.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.Clear">
            <summary>
            Clear the leaf cohorts.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.IncreaseAge(System.Double)">
            <summary>
            Increase age of all leaves by the given amount.
            </summary>
            <param name="delta">Amount by which to increase leaf age.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.DoBiomassRetranslocation(System.Double)">
            <summary>
            Retranslocate biomass from leaves.
            </summary>
            <param name="removal">Amount which needs to be retranslocated.</param>
        </member>
        <member name="M:Models.PMF.Organs.Cohorts.DoNitrogenRetranslocation(System.Double)">
            <summary>
            Retranslocate nitrogen from leaves.
            </summary>
            <param name="removal">Amount of nitrogen to be retranslocated.</param>
        </member>
        <member name="T:Models.PMF.Organs.EnergyBalance">
            <summary>
            This organ is simulated using a  organ type.  It provides the core functions of intercepting radiation
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.parentPlant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.parentOrgan">
            <summary>The parent organ</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.FRGRer">
            <summary>The FRGR function</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.StomatalConductanceCO2Modifier">
            <summary>The effect of CO2 on stomatal conductance</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.GreenAreaIndex">
            <summary>The green area index</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.GreenExtinctionCoefficient">
            <summary>The extinction coefficient of green material</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.DeadExtinctionCoefficient">
            <summary>The extinction coefficient of dead material function</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.Tallness">
            <summary>The height of the top of the canopy</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.Deepness">
            <summary>TThe depth of canopy which organ resides in</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.Wideness">
            <summary>The width of canopy which organ resides in</summary>
        </member>
        <member name="F:Models.PMF.Organs.EnergyBalance.DeadAreaIndex">
            <summary>The area index of dead material</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Gsmax350">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Height">
            <summary>Gets or sets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Width">
            <summary>Gets the width of the canopy (mm).</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.FRGR">
            <summary>Gets or sets the FRGR.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.KDead">
            <summary>Gets or sets the k dead.</summary>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.CalculateWaterDemand">
            <summary>Calculates the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.LAIDead">
            <summary>Gets or sets the lai dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.RadiationIntercepted">
            <summary>Gets the total radiation intercepted.</summary>
        </member>
        <member name="P:Models.PMF.Organs.EnergyBalance.RadiationInterceptedByDead">
            <summary>
            Radiation intercepted by the dead components of the canopy.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sowed</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.EnergyBalance.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Organs.GenericOrgan">
            <summary>
            This organ is simulated using a GenericOrgan type.  It is parameterised to calculate the growth, senescence, and detachment of any organ that does not have specific functions.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.parentPlant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.surfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.SenescenceRate">
            <summary>The senescence rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.detachmentRateFunction">
            <summary>The detachment rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.NRetranslocationFactor">
            <summary>The N retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.DMRetranslocationFactor">
            <summary>The DM retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.InitialWt">
            <summary>Wt in each pool when plant is initialised</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.initialNConcFunction">
            <summary>The initial N Concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.DMConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.CarbonConcentration">
            <summary>Carbon concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.RetranslocateNitrogen">
            <summary>The RetranslocationMethod</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.StartLive">
            <summary>The live biomass state at start of the computation round</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Detached">
            <summary>Gets the biomass detached (sent to soil/surface organic matter)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Removed">
            <summary>Gets the biomass removed from the system (harvested, grazed, etc.)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.MaxNconc">
            <summary>Gets the maximum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.MinNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.CritNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Wt">
            <summary>Gets the total (live + dead) dry matter weight (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.N">
            <summary>Gets the total (live + dead) N amount (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.RetranslocationWt">
            <summary>Gets the biomass retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
            <param name="dryMatter">The actual amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
            <param name="nitrogen">The nitrogen allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.ClearBiomassFlows">
            <summary>Clears the transferring biomass amounts.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.HIReproductiveOrgan">
            <summary>
            A harvest index reproductive organ
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.parentPlant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.AboveGroundWt">
            <summary>Gets or sets the above ground.</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.WaterContent">
            <summary>The water content</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.HIIncrement">
            <summary>The hi increment</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.NConc">
            <summary>The n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.DailyGrowth">
            <summary>The daily growth</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dm potential allocation.</summary>
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.MinNconc">
            <summary>Minimum N concentration</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.LiveFWt">
            <summary>Gets the live f wt.</summary>
            <value>The live f wt.</value>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Organs.HIReproductiveOrgan"/> class.</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.HI">
            <summary>Gets the hi.</summary>
            <value>The hi.</value>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.ClearBiomassFlows">
            <summary>Clears the transferring biomass amounts.</summary>
        </member>
        <member name="T:Models.PMF.Organs.Leaf">
            <summary>
            The leaves are modelled as a set of leaf cohorts and the properties of each of these cohorts are summed to give overall values for the leaf organ.  
            A cohort represents all the leaves of a given main- stem node position including all of the branch leaves appearing at the same time as the given main-stem leaf ([lawless2005wheat]).  
            The number of leaves in each cohort is the product of the number of plants per m^2^ and the number of branches per plant.  
            The *Structure* class models the appearance of main-stem leaves and branches.  Once cohorts are initiated the *Leaf* class models the area and biomass dynamics of each.  
            It is assumed all the leaves in each cohort have the same size and biomass properties.  The modelling of the status and function of individual cohorts is delegated to *LeafCohort* classes.  
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.parentPlant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.MetData">
            <summary>The met data</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="F:Models.PMF.Organs.Leaf.dmDemandPriorityFactors">
            <summary>Factors for assigning priority to DM demands</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DMSupplyPhotosynthesis">
            <summary>Gets the dm supply photosynthesis.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Gsmax350">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Height">
            <summary>Gets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Width">
            <summary>Gets the width of the canopy (mm).</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.FRGR">
            <summary>Gets  FRGR.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.CalculateWaterDemand">
            <summary>Calculates the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Structure">
            <summary>The structure</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAIMainStem">
            <summary>Gets the LAI of the main stem </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAIBranch">
            <summary>Gets the LAI of the branches </summary>
        </member>
        <member name="T:Models.PMF.Organs.Leaf.LeafCohortParameters">
            <summary>
            Leaf cohort parameters.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MaxArea">
            <summary>The maximum area</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.GrowthDuration">
            <summary>The growth duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LagDuration">
            <summary>The lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenescenceDuration">
            <summary>The senescence duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DetachmentLagDuration">
            <summary>The detachment lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DetachmentDuration">
            <summary>The detachment duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SpecificLeafAreaMax">
            <summary>The specific leaf area maximum</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SpecificLeafAreaMin">
            <summary>The specific leaf area minimum</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.StructuralFraction">
            <summary>The structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.InitialNConc">
            <summary>The initial n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.NReallocationFactor">
            <summary>The n reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DMReallocationFactor">
            <summary>The dm reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.NRetranslocationFactor">
            <summary>The n retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.ExpansionStress">
            <summary>The expansion stress</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.ExpansionStressValue">
            <summary>The expansion stress</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.CellDivisionStressValue">
            <summary>The CellDivisionStressValue</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.LagAccelerationValue">
            <summary>The LagAccelerationValue</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.SenescenceAccelerationValue">
            <summary>The SenescenceAccelerationValue</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.ShadeInducedSenescenceRateValue">
            <summary>The ShadeInducedSenescenceRateValue</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.SenessingLeafRelativeSizeValue">
            <summary>The SenessingLeafRelativeSizeValue</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.CriticalNConc">
            <summary>The critical n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DMRetranslocationFactor">
            <summary>The dm retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.ShadeInducedSenescenceRate">
            <summary>The shade induced senescence rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LagAcceleration">
            <summary>The stress induced reduction of lag phase through acceleration of tt accumulation by the cohort during this phase</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenescenceAcceleration">
            <summary>The stress induced reduction of senescence phase through acceleration of tt accumulation by the cohort during this phase</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.StorageFraction">
            <summary>The non structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.CellDivisionStress">
            <summary>The cell division stress</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LeafSizeShapeParameter">
            <summary>The Shape of the sigmoidal function of leaf area increase</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenessingLeafRelativeSize">
            <summary>The size of leaves on senessing tillers relative to the dominant tillers in that cohort</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MaintenanceRespirationFunction">
            <summary>The proportion of mass that is respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LeafSizeAgeMultiplier">
            <summary>Modify leaf size by age</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LagDurationAgeMultiplier">
            <summary>Modify lag duration by age</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenescenceDurationAgeMultiplier">
            <summary>Modify senescence duration by age</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.RemobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.LeafCohortParameters.Document">
            <summary>Document this model.</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.InitialLeaves">
            <summary>The initial leaves</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.CohortParameters">
            <summary>The leaf cohort parameters</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.FRGRFunction">
            <summary>The Fractional Growth Rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.StomatalConductanceCO2Modifier">
            <summary>The effect of CO2 on stomatal conductance</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.ThermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.ExtinctionCoeff">
            <summary>The extinction coeff</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.FrostFraction">
            <summary>The frost fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.WidthFunction">
            <summary>The width of the canopy</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DepthFunction">
            <summary>The depth of the canopy</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.StructuralFraction">
            <summary>The structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DMDemandFunction">
            <summary>The dm demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DMConversionEfficiency">
            <summary>The dm demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="F:Models.PMF.Organs.Leaf.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.KDead">
            <summary>Gets or sets the k dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MaximumMainStemLeafNumber">
            <summary>Gets or sets the maximum number of leaves on the main stem</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.needToRecalculateLiveDead">
            <summary>Do we need to recalculate (expensive operation) live and dead</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Leaves">
            <summary>The leaves</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.CurrentExpandingLeaf">
            <summary>Initialise all state variables.</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.StartFractionExpanded">
            <summary>The start fraction expanded</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.FractionNextleafExpanded">
            <summary>The fraction nextleaf expanded</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DeadNodesYesterday">
            <summary>The dead nodes yesterday</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortCurrentRankCoverAbove">
            <summary>Return the</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.TipsAtEmergence">
            <summary>
            The number of leaves that have visiable tips on the day of emergence
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortsAtInitialisation">
            <summary>
            The number of leaf cohorts to initialised
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.SpecificNitrogen">
            <Summary>Spcific leaf nitrogen</Summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.FractionDied">
            <summary>Gets or sets the fraction died.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortsInitialised">
            <summary>
            Gets a value indicating whether [cohorts initialised].
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.MaxCover">
            <summary>The maximum cover</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApicalCohortNo">
            <summary>The number of cohorts initiated that have not yet emerged</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.InitialisedCohortNo">
            <summary>Gets the initialised cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.AppearedCohortNo">
            <summary>Gets the appeared cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ExpandingCohortNo">
            <summary>Gets the expanding cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ExpandedCohortNo">
            <summary>Gets the expanded cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.GreenCohortNo">
            <summary>Gets the green cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.GreenCohortNoHalfSenescence">
            <summary>Gets the green cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.SenescingCohortNo">
            <summary>Gets the senescing cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeadCohortNo">
            <summary>Gets the dead cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantAppearedGreenLeafNo">
            <summary>Gets the plant appeared green leaf no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantAppearedGreenLeafNoHalfSenescence">
            <summary>Gets the plant appeared green leaf no. (matching with observation)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantAppearedLeafNo">
            <summary>Gets the plant appeared leaf no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantsenescedLeafNo">
            <summary>Gets the plant senesced leaf no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAIDead">
            <summary>Gets the lai dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Live">
            <summary>Gets the cohort live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Dead">
            <summary>Gets the cohort dead.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RecalculateLiveDead">
            <summary>Recalculate live and dead biomass if necessary</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.RadiationIntercepted">
            <summary>Gets the RAD int tot.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.SpecificArea">
            <summary>Gets the specific area.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NextExpandingLeafProportion">
            <summary>
            Returns the relative expansion of the next leaf to produce its ligule
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeltaPotentialArea">
            <summary>Gets the DeltaPotentialArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeltaStressConstrainedArea">
            <summary>Gets the DeltaStressConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeltaCarbonConstrainedArea">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortStructuralDMDemand">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortMetabolicDMDemand">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortStorageDMDemand">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortPopulation">
            <summary>Gets the cohort population.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortSize">
            <summary>Gets the size of the cohort.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortArea">
            <summary>Gets the cohort area.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortMaxSize">
            <summary>Gets the maximum size of the cohort.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortLagDuration">
            <summary>Gets lag duration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortSenescedFrac">
            <summary>Gets fraction of leaf senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortSLA">
            <summary>Gets the cohort sla.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortMaxArea">
            <summary>Gets the cohort MaxArea.</summary> 
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortLiveWt">
            <summary>Gets the cohort Wt.</summary> 
        </member>
        <member name="P:Models.PMF.Organs.Leaf.AreaLargestLeaf">
            <summary>Returns the area of the largest leaf.</summary>
            <value>The area of the largest leaf</value>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LiveStemNumber">
            <summary>Gets the live stem  number to represent the observed stem numbers in an experiment.</summary>
            <value>Stem number.</value>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LiveNConc">
            <summary>Gets the live n conc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PotentialGrowth">
            <summary>Gets the potential growth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MaintenanceRespiration">
            <summary>Gets or sets the amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Fw">
            <summary>Gets the fw.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Fn">
            <summary>Gets the function.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApexNum">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApexGroupSize">
            <summary>Apex group size in plant</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApexGroupAge">
            <summary>Apex group age in plant</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CurrentRank">
            <summary>1 based rank of the current leaf.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Called at start of simulation to initialise the model.</summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.Reset">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnInitialiseLeafCohorts(System.Object,System.EventArgs)">
            <summary>Initialises the cohorts.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnAddLeafCohort(System.Object,Models.PMF.CohortInitParams)">
            <summary>Method to initialise new cohorts</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnLeafTipAppearance(System.Object,Models.PMF.ApparingLeafParams)">
            <summary>Method to make leaf cohort appear and start expansion</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.ZeroLeaves">
            <summary>Zeroes the leaves.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.CoverAboveCohort(System.Double,System.Double)">
            <summary>Fractional interception "above" a given node position</summary>
            <param name="cohortno">cohort position</param>
            <param name="extinctionoeff">extinction coefficient</param>
            <returns>fractional interception (0-1)</returns>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            remove biomass from the leaf.
            </summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The frations of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.DoThin(System.Double)">
            <summary>
            remove population elements from the leaf.
            </summary>
            <param name="ProportionRemoved">The proportion of stems removed by thinning</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RemoveHighestLeaf">
            <summary>
            Called when defoliation calls for removal of main-stem nodes
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="E:Models.PMF.Organs.Leaf.NewLeaf">
            <summary>Occurs when [new leaf].</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnRemoveLowestLeaf">
            <summary>Called when [remove lowest leaf].</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnKillLeaf(Models.PMF.KillLeafType)">
            <summary>Called when [kill leaf].</summary>
            <param name="KillLeaf">The kill leaf.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnPruning(System.Object,System.EventArgs)">
            <summary>Called when crop is being prunned.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnHarvesting(System.Object,System.EventArgs)">
            <summary>Called when crop is being cut.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.ClearBiomassFlows">
            <summary>Clears the transferring biomass amounts.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.Document">
            <summary>Document this model.</summary>
        </member>
        <member name="T:Models.PMF.Organs.LeafCohort">
            <summary>
             A leaf cohort model
             </summary>
             <remarks>
             
             @startuml
             Initialized -> Appeared: Appearance 
             Appeared -> Expanded: GrowthDuration
             Expanded -> Senescing: LagDuration
             Senescing -> Senesced: SenescenceDuration
             Senesced -> Detaching: DetachmentLagDuration
             Detaching -> Detached: DetachmentDuration
             Initialized ->Expanded: IsGrowing
             Initialized -> Senesced: IsAlive
             Initialized -> Senesced: IsGreen
             Initialized -> Senescing: IsNotSenescing
             Senescing -> Senesced: IsSenescing
             Expanded -> Detached: IsFullyExpanded
             Senesced -> Detached: ShouldBeDead
             Senesced -> Detached: Finished
             Appeared -> Detached: IsAppeared
             Initialized -> Detached: IsInitialised
             @enduml
             
             Leaf death
             ------------------------
             The leaf area, structural biomass and structural nitrogen of 
             green (live) parts is subtracted by a fraction.
             
             </remarks>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Leaf">
            <summary>The leaf</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Apex">
            <summary>The leaf apex model</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.ApexCohort">
            <summary>The leaf apex model</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Live">
            <summary>The live</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Dead">
            <summary>The dead</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LiveStart">
            <summary>The live start</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Rank">
            <summary>The rank</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Area">
            <summary>The area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Age">
            <summary>The age</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.NReallocationFactor">
            <summary>The n reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DMReallocationFactor">
            <summary>The dm reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.NRetranslocationFactor">
            <summary>The n retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DMRetranslocationFactor">
            <summary>The dm retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.FunctionalNConc">
            <summary>The functional n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LuxaryNConc">
            <summary>The luxary n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StructuralFraction">
            <summary>The structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageFraction">
            <summary>The non structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaxLiveArea">
            <summary>The maximum live area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaxCohortPopulation">
            <summary>The maximum live area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.GrowthDuration">
            <summary>The growth duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LagDuration">
            <summary>The lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SenescenceDuration">
            <summary>The senescence duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DetachmentLagDuration">
            <summary>The detachment lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DetachmentDuration">
            <summary>The detachment duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SpecificLeafAreaMax">
            <summary>The specific leaf area maximum</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SpecificLeafAreaMin">
            <summary>The specific leaf area minimum</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.InitialNConc">
            <summary>The initial n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LiveArea">
            <summary>The live area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeadArea">
            <summary>The dead area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaxArea">
            <summary>The maximum area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafSizeShape">
            <summary>The maximum area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SenessingLeafRelativeSize">
            <summary>The size of senessing leaves relative to the other leaves in teh cohort</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.CoverAbove">
            <summary>Gets or sets the cover above.</summary>
            <value>The cover above.</value>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.ShadeInducedSenRate">
            <summary>The shade induced sen rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SenescedFrac">
            <summary>The senesced frac</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DetachedFrac">
            <summary>The detached frac</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CohortPopulation">
            <summary>The cohort population</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CellDivisionStressFactor">
            <summary>The cell division stress factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CellDivisionStressAccumulation">
            <summary>The cell division stress accumulation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CellDivisionStressDays">
            <summary>The cell division stress days</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartNRetranslocationSupply">
            <summary>The leaf start n retranslocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartNReallocationSupply">
            <summary>The leaf start n reallocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartDMRetranslocationSupply">
            <summary>The leaf start dm retranslocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartDMReallocationSupply">
            <summary>The leaf start dm reallocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartArea">
            <summary>The leaf start area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartMetabolicNReallocationSupply">
            <summary>
            The leaf start metabolic n reallocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartStorageNReallocationSupply">
            <summary>
            The leaf start non structural n reallocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartMetabolicNRetranslocationSupply">
            <summary>
            The leaf start metabolic n retranslocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartStorageNRetranslocationSupply">
            <summary>
            The leaf start non structural n retranslocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartMetabolicDMReallocationSupply">
            <summary>
            The leaf start metabolic dm reallocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartStorageDMReallocationSupply">
            <summary>
            The leaf start non structural dm reallocation supply
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Detached">
            <summary>Gets the DM amount detached (send to surface OM) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeltaPotentialArea">
            <summary>The delta potential area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeltaStressConstrainedArea">
            <summary>The delta water constrained area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeltaCarbonConstrainedArea">
            <summary>The delta carbon constrained area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.PotentialStructuralDMAllocation">
            <summary>The potential structural dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.PotentialMetabolicDMAllocation">
            <summary>The potential metabolic dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicNReallocated">
            <summary>The metabolic n reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicWtReallocated">
            <summary>The metabolic wt reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageNReallocated">
            <summary>The non structural n reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageWtReallocated">
            <summary>The non structural wt reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicNRetranslocated">
            <summary>The metabolic n retranslocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageNRetrasnlocated">
            <summary>The non structural n retrasnlocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DMRetranslocated">
            <summary>The dm retranslocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicNAllocation">
            <summary>The metabolic n allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StructuralDMAllocation">
            <summary>The structural dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicDMAllocation">
            <summary>The metabolic dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.IsInitialised">
            <summary>Has the leaf chort been initialised?</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsNotAppeared">
            <summary>Gets a value indicating whether this instance has not appeared.</summary>
            <value>
            <c>true</c> if this instance is not appeared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsGrowing">
            <summary>Gets a value indicating whether this instance is growing.</summary>
            <value>
            <c>true</c> if this instance is growing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsAppeared">
            <summary>Gets or sets a value indicating whether this instance is appeared.</summary>
            <value>
            <c>true</c> if this instance is appeared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsFullyExpanded">
            <summary>Gets a value indicating whether this instance is fully expanded.</summary>
            <value>
            <c>true</c> if this instance is fully expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsGreen">
            <summary>Gets a value indicating whether this instance is green.</summary>
            <value><c>true</c> if this instance is green; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsSenescing">
            <summary>Gets a value indicating whether this instance is senescing.</summary>
            <value>
            <c>true</c> if this instance is senescing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsNotSenescing">
            <summary>Gets a value indicating whether this instance is not senescing.</summary>
            <value>
            <c>true</c> if this instance is not senescing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Finished">
            <summary>Gets a value indicating whether this <see cref="T:Models.PMF.Organs.LeafCohort"/> is finished.</summary>
            <value><c>true</c> if finished; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsDead">
            <summary>Gets a value indicating whether this instance is dead.</summary>
            <value><c>true</c> if this instance is dead; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.FractionExpanded">
            <summary>Gets the maximum size.</summary>
            <summary>Gets the fraction expanded.</summary>
            <value>The fraction expanded.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.SpecificArea">
            <summary>Gets the specific area.</summary>
            <value>The specific area.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.MaintenanceRespiration">
            <summary>MaintenanceRespiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StructuralDMDemand">
            <summary>Gets the structural dm demand.</summary>
            <value>The structural dm demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.MetabolicDMDemand">
            <summary>Gets the metabolic dm demand.</summary>
            <value>The metabolic dm demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StorageDMDemand">
            <summary>Gets the non structural dm demand.</summary>
            <value>The non structural dm demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StructuralNDemand">
            <summary>Gets the structural n demand.</summary>
            <value>The structural n demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StorageNDemand">
            <summary>Gets the non structural n demand.</summary>
            <value>The non structural n demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.MetabolicNDemand">
            <summary>Gets the metabolic n demand.</summary>
            <value>The metabolic n demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.DMAllocation">
            <summary>Sets the dm allocation.</summary>
            <value>The dm allocation.</value>
            <exception cref="T:System.Exception">
            -ve DM Allocation to Leaf Cohort
            or
            DM Allocated to Leaf Cohort is in excess of its Demand
            or
            A leaf cohort cannot supply that amount for DM Reallocation
            or
            Leaf cohort given negative DM Reallocation
            or
            Negative DM retranslocation from a Leaf Cohort
            or
            A leaf cohort cannot supply that amount for DM retranslocation
            </exception>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.NAllocation">
            <summary>Sets the n allocation.</summary>
            <value>The n allocation.</value>
            <exception cref="T:System.Exception">
            A leaf cohort cannot supply that amount for N Reallocation
            or
            Leaf cohort given negative N Reallocation
            or
            A leaf cohort cannot supply that amount for N Retranslocation
            or
            Leaf cohort given negative N Retranslocation
            </exception>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.DMPotentialAllocation">
            <summary>Sets the dm potential allocation.</summary>
            <value>The dm potential allocation.</value>
            <exception cref="T:System.Exception">
            -ve Potential DM Allocation to Leaf Cohort
            or
            Potential DM Allocation to Leaf Cohortis in excess of its Demand
            or
            -ve Potential DM Allocation to Leaf Cohort
            or
            Potential DM Allocation to Leaf Cohortis in excess of its Demand
            </exception>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.Clone">
            <summary>Returns a clone of this object</summary>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoInitialisation">
            <summary>Does the initialisation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoAppearance(Models.PMF.ApparingLeafParams,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Does the appearance.</summary>
            <param name="cohortParams">The leaf fraction.</param>
            <param name="leafCohortParameters">The leaf cohort parameters.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoPotentialGrowth(System.Double,System.Double,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Does the potential growth.</summary>
            <param name="tt">The tt.</param>
            <param name="extinctionCoefficient">The extinctionCoefficient.</param>
            <param name="leafCohortParameters">The leaf cohort parameters.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoActualGrowth(System.Double,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Does the actual growth.</summary>
            <param name="tt">The tt.</param>
            <param name="leafCohortParameters">The leaf cohort parameters.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoKill(System.Double)">
            <summary>Does the kill.</summary>
            <param name="fraction">The fraction.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoFrost(System.Double)">
            <summary>Does the frost.</summary>
            <param name="fraction">The fraction.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoDailyCleanup">
            <summary>Does the zeroing of some varibles.</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.PotentialAreaGrowthFunction(System.Double)">
            <summary>Potential delta LAI</summary>
            <param name="tt">thermal-time</param>
            <returns>(mm2 leaf/cohort position/m2 soil/day)</returns>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.SizeFunction(System.Double)">
            <summary>Potential average leaf size for today per cohort (no stress)</summary>
            <param name="tt">Thermal-time accumulation since cohort initiation</param>
            <returns>Average leaf size (mm2/leaf)</returns>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.LiveStemNumber(Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Live leaf number</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.FractionSenescing(System.Double,System.Double,System.Double,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Fractions the senescing.</summary>
            <param name="tt">The tt.</param>
            <param name="stemMortality">The stem mortality.</param>
            <param name="senessingLeafRelativeSize">The relative size of senessing tillers leaves relative to the other leaves in the cohort</param>
            <param name="leafCohortParameters">The associated leaf cohort parameters</param>
            <returns></returns>
            <exception cref="T:System.Exception">Bad Fraction Senescing</exception>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.FractionDetaching(System.Double)">
            <summary>Fractions the detaching.</summary>
            <param name="tt">The thermal time.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Bad Fraction Detaching</exception>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.Nodule">
            <summary>
            This organ simulates the root structure associate with symbiotic N-fixing bacteria.  It provides the core functions of determining 
             N fixation supply and related costs.  It also calculates the growth, senescence and detachment of nodules.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.FixationMetabolicCost">
            <summary>The fixation metabolic cost</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.FixationRate">
            <summary>The specific nitrogenase activity</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.RespiredWt">
            <summary>The respired wt</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NFixed">
            <summary>Gets the n fixed.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.RespiredWtFixation">
            <summary>Gets the respired wt fixation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do phenology events.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.parentPlant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.surfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.senescenceRate">
            <summary>The senescence rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.detachmentRateFunction">
            <summary>The detachment rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.nRetranslocationFactor">
            <summary>The N retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmRetranslocationFactor">
            <summary>The DM retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.initialWtFunction">
            <summary>The initial biomass dry matter weight</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("g/g")]
        </member>
        <member name="F:Models.PMF.Organs.Nodule.startLive">
            <summary>The live biomass state at start of the computation round</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Detached">
            <summary>Gets the biomass detached (sent to soil/surface organic matter)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Removed">
            <summary>Gets the biomass removed from the system (harvested, grazed, etc.)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.MaintenanceRespiration">
            <summary>Gets or sets the amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.MaxNconc">
            <summary>Gets the maximum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.MinNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.CritNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Wt">
            <summary>Gets the total (live + dead) dry matter weight (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.N">
            <summary>Gets the total (live + dead) N amount (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.ClearBiomassFlows">
            <summary>Clears the transferring biomass amounts.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.PerennialLeaf">
            <summary>
            This organ is parameterised using a simple leaf organ type which provides the core functions of intercepting radiation, providing a photosynthesis supply and a transpiration demand.  It also calculates the growth, senescence and detachment of leaves.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Live">
            <summary>Gets the cohort live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Dead">
            <summary>Gets the cohort live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Gsmax350">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.SpecificLeafArea">
            <summary>Gets the SLA</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Height">
            <summary>Gets or sets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Width">
            <summary>Gets the width of the canopy (mm).</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.FRGR">
            <summary>Gets or sets the FRGR.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.FRGRFunction">
            <summary>The FRGR function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StomatalConductanceCO2Modifier">
            <summary>The effect of CO2 on stomatal conductance</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.ExtinctionCoefficient">
            <summary>The extinction coefficient function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.ExtinctionCoefficientDead">
            <summary>The extinction coefficient function for dead leaves</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.HeightFunction">
            <summary>The height function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafResidenceTime">
            <summary>Leaf Residence Time</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafDevelopmentRate">
            <summary>Leaf Development Rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafKillFraction">
            <summary>Leaf Death</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MinimumLAI">
            <summary>Minimum LAI</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafDetachmentTime">
            <summary>Leaf Detachment Time</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.SpecificLeafAreaFunction">
            <summary>SpecificLeafArea</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.cohort">
            <summary>
            This encapsulates the leaves.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.CalculateWaterDemand">
            <summary>Calculate the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.WaterSupply(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Gets or sets the water supply.</summary>
            <param name="zone">The zone.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.DoWaterUptake(System.Double[],System.String)">
            <summary>Does the water uptake.</summary>
            <param name="Amount">The amount.</param>
            <param name="zoneName">Zone name to do water uptake in</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.CalcNSupply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[]@,System.Double[]@)">
            <summary>Gets the nitrogen supply from the specified zone.</summary>
            <param name="zone">The zone.</param>
            <param name="NO3Supply">The returned NO3 supply</param>
            <param name="NH4Supply">The returned NH4 supply</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.DoNitrogenUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Does the Nitrogen uptake.</summary>
            <param name="zonesFromSoilArbitrator">List of zones from soil arbitrator</param>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Fw">
            <summary>Gets the fw.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Fn">
            <summary>Gets the function.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LAIDead">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.RadiationIntercepted">
            <summary>Gets the total radiation intercepted.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.ApexNumByAge(System.Double)">
            <summary>Apex number by age</summary>
            <param name="age">Threshold age</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StartLive">
            <summary>The start live</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.NReallocationFactor">
            <summary>The n reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.NRetranslocationFactor">
            <summary>The n retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.DMRetranslocationFactor">
            <summary>The dm retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.InitialWtFunction">
            <summary>The initial wt function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.DryMatterContent">
            <summary>The dry matter content</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MaintenanceRespirationFunction">
            <summary>The proportion of biomass repired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.DMConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StartNRetranslocationSupply">
            <summary>The start n retranslocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StartNReallocationSupply">
            <summary>The start n reallocation supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LiveFWt">
            <summary>Gets or sets the live f wt.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MaxNconc">
            <summary>Gets or sets the maximum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sown</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.Kill(System.Double)">
            <summary>Kill a fraction of the green leaf</summary>
            <param name="fraction">The fraction of leaf to kill</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Organs.ReproductiveOrgan">
            <summary>
            This organ uses a generic model for plant reproductive components.  Yield is calculated from its components in terms of organ number and size (for example, grain number and grain size).  
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.parentPlant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.WaterContent">
            <summary>The water content</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.NumberFunction">
            <summary>The number function</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.NFillingRate">
            <summary>The n filling rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.CarbonConcentration">
            <summary>Carbon concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.DMDemandFunction">
            <summary>The dm demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.DMConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MaintenanceRespirationFunction">
            <summary>The proportion of biomass repired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.RemobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.dmDemandPriorityFactors">
            <summary>Factors for assigning priority to DM demands</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.RipeStage">
            <summary>The ripe stage</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan._ReadyForHarvest">
            <summary>The _ ready for harvest</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Number">
            <summary>The number</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.LiveFWt">
            <summary>Gets the live fresh weight of grains.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Size">
            <summary>Gets the individual grain size.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.FSize">
            <summary>Gets the size of grain using the fresh weight (including water content).</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.ReadyForHarvest">
            <summary>Gets the ready for harvest.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Organs.ReproductiveOrgan"/> class.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnCutting(System.Object,System.EventArgs)">
            <summary>Called when crop is being cut.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MaxNconc">
            <summary>Gets or sets the maximum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.ClearBiomassFlows">
            <summary>Clears the transferring biomass amounts.</summary>
        </member>
        <member name="T:Models.PMF.Organs.Root">
            <summary>
             The root model calculates root growth in terms of rooting depth, biomass accumulation and subsequent root length density in each soil layer. 
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.parentPlant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.RootShape">
            <summary>The RootShape model</summary> 
        </member>
        <member name="F:Models.PMF.Organs.Root.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.kno3">
            <summary>Link to the KNO3 link</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.knh4">
            <summary>Link to the KNH4 link</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nUptakeSWFactor">
            <summary>Soil water factor for N Uptake</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.InitialWt">
            <summary>Initial wt</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.specificRootLength">
            <summary>Gets or sets the specific root length</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.senescenceRate">
            <summary>The biomass senescence rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.rootFrontVelocity">
            <summary>The root front velocity</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.RootDepthStressFactor">
            <summary>Link to the KNO3 link</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maxDailyNUptake">
            <summary>The maximum daily N uptake</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.klModifier">
            <summary>The kl modifier</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maximumRootDepth">
            <summary>The Maximum Root Depth</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmConversionEfficiency">
            <summary>Dry matter efficiency function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.carbonConcentration">
            <summary>Carbon concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary> 
        </member>
        <member name="F:Models.PMF.Organs.Root.needToRecalculateLiveDead">
            <summary>Do we need to recalculate (expensive operation) live and dead</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.liveBiomass">
            <summary>Live biomass</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.deadBiomass">
            <summary>Dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmRetranslocationSupply">
            <summary>The DM supply for retranslocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmMReallocationSupply">
            <summary>The DM supply for reallocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nRetranslocationSupply">
            <summary>The N supply for retranslocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nReallocationSupply">
            <summary>The N supply for reallocation</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.ZoneNamesToGrowRootsIn">
            <summary>A list of other zone names to grow roots in</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.ZoneRootDepths">
            <summary>The root depths for each addition zone.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.ZoneInitialDM">
            <summary>The live weights for each addition zone.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Zones">
            <summary>A list of all zones to grow roots in</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.PlantZone">
            <summary>The zone where the plant is growing</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Live">
            <summary>Gets the live biomass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Dead">
            <summary>Gets the dead biomass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LengthDensity">
            <summary>Gets the root length density.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.TotalDMDemand">
            <Summary>Total DM demanded by roots</Summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NTakenUp">
            <Summary>The amount of N taken up after arbitration</Summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Depth">
            <summary>Root depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Length">
            <summary>Root length.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Area">
            <summary>Root Area</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LayerLive">
            <summary>Live Biomass in each soil layer</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LayerDead">
            <summary>Dead Biomass in each soil layer</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.WaterUptake">
            <summary>Gets the water uptake.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.SWUptakeLayered">
            <summary>Gets the water uptake.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NUptake">
            <summary>Gets or sets the N uptake.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NUptakeLayered">
            <summary>Gets the nitrogen uptake.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LayerMidPointDepth">
            <summary>Gets or sets the mid points of each layer</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.RWC">
            <summary>Gets or sets relative water content for a soil layer (ie fraction between LL15 and DUL)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.FASW">
            <summary>Returns the Fraction of Available Soil Water for the root system (across zones and depths in zones)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.WaterTensionFactor">
            <summary>Gets a factor to account for root zone Water tension weighted for root mass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.PlantWaterPotentialFactor">
            <summary>Gets a factor to account for root zone Water tension weighted for root mass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.CritNconc">
            <summary>Gets the critical nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.Root.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.RootLengthDensityModifierDueToDamage">
            <summary>Gets or sets the root length modifier due to root damage (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.IsKLModiferDueToDamageActive">
            <summary>Returns true if the KL modifier due to root damage is active or not.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.KLModiferDueToDamage(System.Int32)">
            <summary>Gets the KL modifier due to root damage (0-1).</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoWaterUptake(System.Double[],System.String)">
            <summary>Does the water uptake.</summary>
            <param name="Amount">The amount.</param>
            <param name="zoneName">Zone name to do water uptake in</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoNitrogenUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Does the Nitrogen uptake.</summary>
            <param name="zonesFromSoilArbitrator">List of zones from soil arbitrator</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.CalculateNitrogenSupply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[]@,System.Double[]@)">
            <summary>Gets the nitrogen supply from the specified zone.</summary>
            <param name="zone">The zone.</param>
            <param name="NO3Supply">The returned NO3 supply</param>
            <param name="NH4Supply">The returned NH4 supply</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.CalculateWaterSupply(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Gets or sets the water supply.</summary>
            <param name="zone">The zone.</param>
        </member>
        <member name="F:Models.PMF.Organs.Root.DltThermalTime">
            <summary>Used to calc maximim diffusion rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.kgha2gsm">
            <summary>The kgha2gsm</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from root layers when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.InitialiseZones">
            <summary>Initialise all zones.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.ClearBiomassFlows">
            <summary>Clears the transferring biomass amounts.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.RecalculateLiveDead">
            <summary>Recalculate live and dead biomass if necessary</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoSupplyCalculations">
            <summary>Computes the DM and N amounts that are made available for new growth</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.TotalExtractableWater">
            <summary>Computes root total water supply.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.Document">
            <summary>Document this model.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.AvailableNReallocation">
            <summary>Computes the N amount available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">Cannot find a soil crop parameterisation for  + Name</exception>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sown</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Organs.ZoneState">
            <summary>The state of each zone that root knows about.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Soil">
            <summary>The soil in this zone</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Physical">
            <summary>The soil in this zone</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.WaterBalance">
            <summary>The water balance in this zone</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.NO3">
            <summary>The NO3 solute.</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.NH4">
            <summary>The NH4 solute.</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.plant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.root">
            <summary>The root organ</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.IsWeirdoPresent">
            <summary>Is the Weirdo model present in the simulation?</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.rootFrontVelocity">
            <summary>The root front velocity function</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.maximumRootDepth">
            <summary>The Maximum Root Depth</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.Name">
            <summary>Zone name</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.WaterUptake">
            <summary>The water uptake</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.DeltaNH4">
            <summary>The delta n h4</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.DeltaNO3">
            <summary>The delta n o3</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.DMAllocated">
            <summary>Holds actual DM allocations to use in allocating N to structural and Non-Structural pools</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.PotentialDMAllocated">
            <summary>Holds potential DM allocations to use in allocating N to structural and Non-Structural pools</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.StructuralNDemand">
            <summary>Demand for structural N, set when Ndemand is called and used again in N allocation</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.StorageNDemand">
            <summary>Demand for Non-structural N, set when Ndemand is called and used again in N allocation</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.MetabolicNDemand">
            <summary>Demand for Metabolic N, set when Ndemand is called and used again in N allocation</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.NitUptake">
            <summary>The Nuptake</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.NuptakeSupply">
            <summary>Gets or sets the nuptake supply.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.LayerLive">
            <summary>Gets or sets the layer live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.LayerDead">
            <summary>Gets or sets the layer dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Length">
            <summary>Gets or sets the length.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Depth">
            <summary>Gets or sets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.RootLength">
            <summary>Gets the RootFront</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.RootFront">
            <summary>Gets the RootFront</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.RootSpread">
            <summary>Gets the RootFront</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.LeftDist">
            <summary>Gets the RootFront</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.RightDist">
            <summary>Gets the RootFront</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.RootProportions">
            <summary>Gets the RootProportions</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.LLModifier">
            <summary>Gets the LLModifier for leaf angles != RootAngleBase</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.RootArea">
            <summary>Soil area occipied by roots</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.AvailableSW">
            <summary>Gets or sets AvailableSW during SW Uptake
            Old Sorghum does actual uptake at end of day
            PMF does actual uptake before N uptake</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.PotentialAvailableSW">
            <summary>Gets or sets PotentialAvailableSW during SW Uptake</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.StartWater">
            <summary>Record the Water level before </summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Supply">
            <summary>Record the Water Supply before </summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.MassFlow">
            <summary>Gets or sets MassFlow during NitrogenUptake Calcs</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Diffusion">
            <summary>Gets or sets Diffusion during NitrogenUptake Calcs</summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.#ctor(Models.PMF.Plant,Models.PMF.Organs.Root,Models.Soils.Soil,System.Double,Models.PMF.BiomassDemand,System.Double,System.Double,Models.Functions.IFunction,Models.Functions.IFunction,Models.Functions.IFunction)">
            <summary>Constructor</summary>
            <param name="Plant">The parant plant</param>
            <param name="Root">The parent root organ</param>
            <param name="soil">The soil in the zone.</param>
            <param name="depth">Root depth (mm)</param>
            <param name="initialDM">Initial dry matter</param>
            <param name="population">plant population</param>
            <param name="maxNConc">maximum n concentration</param>
            <param name="rfv">Root front velocity</param>
            <param name="mrd">Maximum root depth</param>
            <param name="remobCost">Remobilisation cost</param>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.Initialise(System.Double,Models.PMF.BiomassDemand,System.Double,System.Double)">
            <summary>Initialise the zone.</summary>
            <param name="depth">Root depth (mm)</param>
            <param name="initialDM">Initial dry matter</param>
            <param name="population">plant population</param>
            <param name="maxNConc">maximum n concentration</param>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.GrowRootDepth">
            <summary>
            Growth depth of roots in this zone
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.CalculateRootActivityValues">
            <summary>
            Calculate Root Activity Values for water and nitrogen
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.PartitionRootMass(System.Double,Models.PMF.Biomass)">
            <summary>
            Partition root mass into layers
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.SimpleLeaf">
            <summary>
            This organ is simulated using a SimpleLeaf organ type.  It provides the core functions of intercepting radiation, producing biomass
             through photosynthesis, and determining the plant's transpiration demand.  The model also calculates the growth, senescence, and
             detachment of leaves.  SimpleLeaf does not distinguish leaf cohorts by age or position in the canopy.
            
            Radiation interception and transpiration demand are computed by the MicroClimate model.  This model takes into account
             competition between different plants when more than one is present in the simulation.  The values of canopy Cover, LAI, and plant
             Height (as defined below) are passed daily by SimpleLeaf to the MicroClimate model.  MicroClimate uses an implementation of the
             Beer-Lambert equation to compute light interception and the Penman-Monteith equation to calculate potential evapotranspiration.  
             These values are then given back to SimpleLeaf which uses them to calculate photosynthesis and soil water demand.
            </summary>
            <remarks>
            NOTE: the summary above is used in the Apsim's autodoc.
            
            SimpleLeaf has two options to define the canopy: the user can either supply a function describing LAI or a function describing canopy cover directly.  From either of these functions SimpleLeaf can obtain the other property using the Beer-Lambert equation with the specified value of extinction coefficient.
            The effect of growth rate on transpiration is captured by the Fractional Growth Rate (FRGR) function, which is passed to the MicroClimate model.
            </remarks>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.MetData">
            <summary>
            The met data
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.plant">
            <summary>
            The plant
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.surfaceOrganicMatter">
            <summary>
            The surface organic matter model.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.frgr">
            <summary>
            Relative growth rate factor.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.stomatalConductanceCO2Modifier">
            <summary>
            The effect of CO2 on stomatal conductance.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.photosynthesis">
            <summary>
            The photosynthesis function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.tallness">
            <summary>
            The height function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.laiDead">
            <summary>
            The lai dead function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.carbonConcentration">
            <summary>
            Carbon concentration.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.waterDemand">
            <summary>
            Water Demand Function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.cover">
            <summary>
            The cover function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.area">
            <summary>
            The lai function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.extinctionCoefficient">
            <summary>
            The extinction coefficient function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.baseHeight">
            <summary>
            The height of the base of the canopy.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.wideness">
            <summary>
            The with of a single plant.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.biomassRemovalModel">
            <summary>
            Link to biomass removal model.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.senescenceRate">
            <summary>
            The senescence rate function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.detachmentRate">
            <summary>
            The detachment rate function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.nRetranslocationFactor">
            <summary>
            The N retranslocation factor.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.nReallocationFactor">
            <summary>
            The N reallocation factor.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmRetranslocationFactor">
            <summary>
            The DM retranslocation factor.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmReallocationFactor">
            <summary>
            The DM reallocation factor.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmDemands">
            <summary>
            The DM demand function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.nDemands">
            <summary>
            The N demand function.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.initialWt">
            <summary>
            The initial biomass dry matter weight.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.maximumNConc">
            <summary>
            The maximum N concentration.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.minimumNConc">
            <summary>
            The minimum N concentration.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.criticalNConc">
            <summary>
            The critical N concentration.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.maintenanceRespiration">
            <summary>
            The proportion of biomass respired each day.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmConversionEfficiency">
            <summary>
            Dry matter conversion efficiency.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.remobilisationCost">
            <summary>
            The cost for remobilisation.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.biomassToleranceValue">
            <summary>
            Tolerance for biomass comparisons.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.startLive">
            <summary>
            The live biomass state at start of the computation round.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.leafInitialised">
            <summary>
            Is leaf initialised?
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Albedo">
            <summary>
            Albedo.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Gsmax350">
            <summary>
            Maximum stomatal conductance at CO2 concentration of 350 ppm (m/s).
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.R50">
            <summary>
            Radiation level at which stomatal conductance is half the maximum value.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LeafInitialisationStage">
            <summary>
            The Stage that leaves are initialised on.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LAI">
            <summary>
            Leaf area index.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.BaseHeight">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Width">
            <summary>
            The width of an individual plant
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.FRGR">
            <summary>
            Gets or sets the FRGR.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.PotentialEP">
            <summary>
            Sets the potential evapotranspiration. Set by micro cliamte.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LightProfile">
            <summary>
            Sets the light profile. Set by MICROCLIMATE.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.KDead">
            <summary>
            Extinction coefficient (dead).
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LAIDead">
            <summary>
            Gets or sets the lai dead.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.DMSupply">
            <summary>
            The dry matter supply.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.NSupply">
            <summary>
            The nitrogen supply.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.DMDemand">
            <summary>
            The dry matter demand.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.NDemand">
            <summary>
            Structural nitrogen demand.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.potentialDMAllocation">
            <summary>
            The dry matter potentially being allocated.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Live">
            <summary>
            The live biomass.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Dead">
            <summary>
            The dead biomass.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Total">
            <summary>
            Gets the total biomass.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Allocated">
            <summary>
            Gets the biomass allocated (represented actual growth).
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Senesced">
            <summary>
            Gets the biomass senesced (transferred from live to dead material).
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Detached">
            <summary>
            Gets the biomass detached (sent to soil/surface organic matter).
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Removed">
            <summary>
            Gets the biomass removed from the system (harvested, grazed, etc.).
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MaintenanceRespiration">
            <summary>Gets or sets the amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.GrowthRespiration">
            <summary>
            Growth Respiration.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.IsAboveGround">
            <summary>
            Gets a value indicating whether the biomass is above ground or not.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.DMPotentialAllocation">
            <summary>
            Gets the potential DM allocation for this computation round.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.NFixationCost">
            <summary>
            Gets or sets the n fixation cost.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MaxNconc">
            <summary>
            Gets the maximum N concentration.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MinNconc">
            <summary>
            Gets the minimum N concentration.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CritNconc">
            <summary>
            Gets the minimum N concentration.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Wt">
            <summary>
            Gets the total (live + dead) dry matter weight.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.N">
            <summary>
            Gets the total (live + dead) N amount.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Nconc">
            <summary>
            Gets the total (live + dead) N concentration.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Transpiration">
            <summary>
            Gets the transpiration.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Depth">
            <summary>
            Gets the depth.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CanopyType">
            <summary>
            Gets the canopy. Should return null if no canopy present.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LAITotal">
            <summary>
            Gets the LAI live + dead.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Fw">
            <summary>
            Water stress factor.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CoverTotal">
            <summary>
            Gets the cover total.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CoverGreen">
            <summary>
            Gets the cover green.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Fn">
            <summary>
            Gets the nitrogen factor.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.FNmetabolic">
            <summary>
            Gets the metabolic N concentration factor.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CoverDead">
            <summary>
            Gets the cover dead.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.RadiationIntercepted">
            <summary>
            Intercepted radiation value that is passed to the RUE class to calculate DM supply.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.RadiationInterceptedByDead">
            <summary>
            Radiation intercepted by the dead components of the canopy.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Gsmax">
            <summary>
            Daily maximum stomatal conductance.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.WaterAllocation">
            <summary>
            Gets or sets the water allocation.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.ClearBiomassFlows">
            <summary>
            Clears the transferring biomass amounts.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDMSupply(System.Object,System.EventArgs)">
            <summary>
            Calculate and return the dry matter supply (g/m2).
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>
            Called when [phase changed].
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>
            Event from sequencer telling us to do our potential growth.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>
            Calculate and return the nitrogen supply (g/m2).
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>
            Calculate and return the dry matter demand (g/m2).
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>
            Calculate and return the nitrogen demand (g/m2).
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Called when [simulation commencing].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called when [do daily initialisation].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>
            Called when crop is ending.
            </summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>
            Does the nutrient allocations.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>
            Called when crop is ending.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Removes biomass from organs when harvest, graze or cut events are called.
            </summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.CalculateWaterDemand">
            <summary>
            Calculates the water demand.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.AvailableDMRetranslocation">
            <summary>
            Computes the amount of DM available for retranslocation.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.AvailableDMReallocation">
            <summary>
            Computes the amount of DM available for reallocation.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>
            Sets the dry matter potential allocation.
            </summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>
            Sets the dry matter allocation.
            </summary>
            <param name="dryMatter">The actual amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>
            Sets the n allocation.
            </summary>
            <param name="nitrogen">The nitrogen allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Organs.SorghumLeaf">
            <summary>
            This organ is simulated using a SimpleLeaf organ type.  It provides the core functions of intercepting radiation, producing biomass
            through photosynthesis, and determining the plant's transpiration demand.  The model also calculates the growth, senescence, and
            detachment of leaves.  SimpleLeaf does not distinguish leaf cohorts by age or position in the canopy.
            
            Radiation interception and transpiration demand are computed by the MicroClimate model.  This model takes into account
            competition between different plants when more than one is present in the simulation.  The values of canopy Cover, LAI, and plant
            Height (as defined below) are passed daily by SimpleLeaf to the MicroClimate model.  MicroClimate uses an implementation of the
            Beer-Lambert equation to compute light interception and the Penman-Monteith equation to calculate potential evapotranspiration.  
            These values are then given back to SimpleLeaf which uses them to calculate photosynthesis and soil water demand.
            </summary>
            <remarks>
            SimpleLeaf has two options to define the canopy: the user can either supply a function describing LAI or a function describing canopy cover directly.  From either of these functions SimpleLeaf can obtain the other property using the Beer-Lambert equation with the specified value of extinction coefficient.
            The effect of growth rate on transpiration is captured by the Fractional Growth Rate (FRGR) function, which is passed to the MicroClimate model.
            </remarks>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.culms">
            <summary> Culms on the leaf controls tillering</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.phenology">
            <summary>Phenology</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.metData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.surfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.stomatalConductanceCO2Modifier">
            <summary>The effect of CO2 on stomatal conductance</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.extinctionCoefficientFunction">
            <summary>The extinction coefficient function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.heightFunction">
            <summary>The height function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.waterDemandFunction">
            <summary>Water Demand Function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.dMSupplyFixation">
            <summary>DM Fixation Demand Function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.potentialBiomassTEFunction">
            <summary>DM Fixation Demand Function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.targetSLN">
            <summary>Input for TargetSLN</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.minPlantWt">
            <summary>Slope for N Dilutions</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.AgeSenescence">
            <summary>Light Senescence function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.LightSenescence">
            <summary>Light Senescence function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.WaterSenescence">
            <summary>Water Senescence function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.FrostSenescence">
            <summary>Water Senescence function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SorghumLeaf.biomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.CanopyType">
            <summary>Gets the canopy type. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.TilleringMethod">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.InitialDMWeight">
            <summary>The initial biomass dry matter weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.InitialLAI">
            <summary>Initial LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.InitialSLN">
            <summary>The initial SLN value</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NewLeafSLN">
            <summary>Input for NewLeafSLN</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.SenescedLeafSLN">
            <summary>Input for SenescedLeafSLN.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NDilutionIntercept">
            <summary>Intercept for N Dilutions</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NDilutionSlope">
            <summary>Slope for N Dilutions</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.CanopyWidth">
            <summary>Maximum canopy width - used to calcuate cover under skip row configurations</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Gsmax350">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.MicroClimateSetting">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.UseMicroClimate">
            <summary>Gets the MicroClimate setting.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LeafInitialisationStage">
            <summary>The Stage that leaves are initialised on</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.BaseHeight">
            <summary>Gets or sets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Width">
            <summary>The width of an individual plant</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.FRGR">
            <summary>The Fractional Growth Rate (FRGR) function.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltLAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltPotentialLAI">
            <summary>Gets the Potential DltLAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltStressedLAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.SLN">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.SLN0">
            <summary>Used in metabolic ndemand calc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Height">
            <summary>Gets or sets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.MicroClimatePresent">
            <summary> Flag to test if Microclimate is present </summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.BiomassRUE">
            <summary>Potential Biomass via Radiation Use Efficientcy.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.BiomassTE">
            <summary>Potential Biomass via Radiation Use Efficientcy.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.KDead">
            <summary>Gets or sets the Extinction Coefficient (Dead).</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LAIDead">
            <summary>Gets or sets the lai dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.RadiationIntercepted">
            <summary>
            Intercepted radiation value that is passed to the RUE class to calculate DM supply.
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NitrogenPhotoStress">
            <summary>Nitrogen Photosynthesis Stress.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NitrogenPhenoStress">
            <summary>Nitrogen Phenology Stress.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.PhosphorusStress">
            <summary>Phosphorous Stress.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.FinalLeafNo">
            <summary>Final Leaf Number.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LeafNo">
            <summary>Leaf number.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.SowingDensity">
            <summary> /// Sowing Density (Population). /// </summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.StartLive">
            <summary>The live biomass state at start of the computation round</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Detached">
            <summary>Gets the biomass detached (sent to soil/surface organic matter)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Removed">
            <summary>Gets the biomass removed from the system (harvested, grazed, etc.)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.MaintenanceRespiration">
            <summary>Gets or sets the amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.MaxNconc">
            <summary>Gets the maximum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.MinNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.CritNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Wt">
            <summary>Gets the total (live + dead) dry matter weight (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.N">
            <summary>Gets the total (live + dead) N amount (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.LossFromExpansionStress">
            <summary>Only water stress at this stage.</summary>
            Diff between potentialLAI and stressedLAI
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.SenescedLai">
            <summary>Total LAI as a result of senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltRetranslocatedN">
            <summary>Amount of N retranslocated today.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedN">
            <summary>Delta of N removed due to Senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedLaiN">
            <summary>Delta of LAI removed due to N Senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedLai">
            <summary>Delta of LAI removed due to Senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedLaiLight">
            <summary>Delta of LAI removed due to Light Senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedLaiWater">
            <summary>Delta of LAI removed due to Water Senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedLaiFrost">
            <summary>Delta of LAI removed due to Frost Senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SorghumLeaf.DltSenescedLaiAge">
            <summary>Delta of LAI removed due to age senescence.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.CalculateWaterDemand">
            <summary>Calculates the water demand.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.UpdateArea">
            <summary>Update area.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
            <param name="dryMatter">The actual amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
            <param name="nitrogen">The nitrogen allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.CalculateClassicDemandDelta">
            <summary>
            Adjustment function for calculating leaf demand.
            This should always be equal to -1 * structural N Demand.
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.ProvideNRetranslocation(Models.PMF.BiomassArbitrationType,System.Double,System.Boolean)">
            <summary>Calculate the amount of N to retranslocate</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SenesceArea">
            <summary>Senesce the Leaf Area.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.CalcLAI">
            <summary>
            calculates todays LAI values - can change during retranslocation calculations
            </summary>
            this should be private - called from CalcTillerAppearanceDynamic in leafculms which needs to be refactored
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnPlantSowing(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.setDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is being sown</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.DoPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SorghumLeaf.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.CultivarRateParams">
            <summary>
            Vernalisation rate parameter set for specific cultivar
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.BaseDVrn1">
            <summary>Base delta for Upregulation of Vrn1 >20oC</summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.MaxDVrn1">
            <summary>Maximum delta for Upregulation of Vrn1 at 0oC</summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.MaxIpVrn2">
            <summary>potential Vrn2 expression soon after emergence under > 16h</summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.MaxDpVrn2">
            <summary>delta potential Vrn2 expression  under > 16h</summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.BaseDVrn3">
            <summary>Base delta for Upregulation of Vrn3 at Pp below 8h </summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.MaxDVrn3">
            <summary>Maximum delta for Upregulation of Vrn3 at Pp above 16h </summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.MaxDVrnX">
            <summary>Maximum delta for upregulation of Vrn1 due to long Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.IntFLNvsTSHS">
            <summary> Base phyllochron</summary>
        </member>
        <member name="P:Models.PMF.Phen.CultivarRateParams.MaxMethColdVern1">
            <summary>The maximum methalation of cold Vrn 1</summary>
        </member>
        <member name="T:Models.PMF.Phen.CalcCAMPVrnRates">
            <summary>
            Takes FLN and base phyllochron inputs and calculates Vrn expression rate coefficients for CAMP
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.CalcCAMPVrnRates.camp">
            <summary>The parent CAMP model</summary>
        </member>
        <member name="F:Models.PMF.Phen.CalcCAMPVrnRates.basePhyllochron">
            <summary>The ancestor CAMP model and some relations</summary>
        </member>
        <member name="F:Models.PMF.Phen.CalcCAMPVrnRates.pLS">
            <summary>
            The phyllochron leaf stage factor break points
            </summary>
        </member>
        <member name="M:Models.PMF.Phen.CalcCAMPVrnRates.convertHStoTt(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates how much Tt has accumulated from emergence to the specified HaunStage
            </summary>
            <param name="x"></param>
            <param name="Pp"></param>
            <param name="bP"></param>
            <param name="pPpS"></param>
            <param name="invert"></param>
        </member>
        <member name="M:Models.PMF.Phen.CalcCAMPVrnRates.CalcCultivarParams(Models.PMF.Phen.FinalLeafNumberSet,Models.PMF.Phen.FLNParameterEnvironment)">
            <summary>
            Takes observed (or estimated) final leaf numbers and phyllochron for genotype with (V) and without (N) vernalisation in long (L)
            and short (S) photoperiods and works through calculation scheme and assigns values for vrn expresson parameters
            </summary>
            <param name="FLNset">Set of Final leaf number observations (or estimations) for genotype</param>
            <param name="EnvData">Controlled environment conditions used when observing FLN set</param>
            <returns>CultivarRateParams</returns>
        </member>
        <member name="T:Models.PMF.Phen.FinalLeafNumberSet">
            <summary>
            Final Leaf Number observations (or estimates) for genotype from specific environmental conditions
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.FinalLeafNumberSet.LV">
            <summary>Final Leaf Number when fully vernalised before HS1.1 and then grown in >16h Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.FinalLeafNumberSet.SV">
            <summary>Final Leaf Number when fully vernalised before HS1.1 and then grown in 8h Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.FinalLeafNumberSet.LN">
            <summary>Final Leaf Number when grown at >20oC in >16h Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.FinalLeafNumberSet.SN">
            <summary>Final Leaf Number when grown at > 20oC in 8h Pp</summary>
        </member>
        <member name="T:Models.PMF.Phen.FLNParameterEnvironment">
            <summary>
            Controlled environment conditions that FinalLeafNumberSet was observed in.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.FLNParameterEnvironment.VrnTreatTemp">
            <summary>Vernalisation Treatment Temperature</summary>
        </member>
        <member name="P:Models.PMF.Phen.FLNParameterEnvironment.VrnTreatDuration">
            <summary>Final Leaf Number when grown at > 20oC in 8h Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.FLNParameterEnvironment.TreatmentPTQ_L">
            <summary>The PTQ under long Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.FLNParameterEnvironment.TreatmentPTQ_S">
            <summary>The PTQ under short Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.FLNParameterEnvironment.TtEmerge">
            <summary>Observed Thermal time from sowing to emergence</summary>
        </member>
        <member name="T:Models.PMF.Phen.ColdUpRegVrn1">
            <summary>
            Upregulation of Vrn1 from cold.  Is additional to base vrn1.
            BaseDVrn1 in seperate calculation otherwise te same as Brown etal 2013
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.ColdUpRegVrn1.k">
            <summary> The k factor controls the shape of the exponential decline of vernalisation with temperature </summary>
        </member>
        <member name="F:Models.PMF.Phen.ColdUpRegVrn1.DeVernalisationTemp">
            <summary> The temperature above which Vrn1 is down regulated </summary>
        </member>
        <member name="F:Models.PMF.Phen.ColdUpRegVrn1.DeVernalisationRate">
            <summary> The rate (/d) that Vrn1 is down regulated when temp is over DVernalisationTemp </summary>
        </member>
        <member name="M:Models.PMF.Phen.ColdUpRegVrn1.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot call Value on XYPairs function. Must be indexed.</exception>
        </member>
        <member name="M:Models.PMF.Phen.ColdUpRegVrn1.ValueIndexed(System.Double)">
            <summary>Values the indexed.</summary>
            <param name="dX">The d x.</param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Phen.CAMP">
            <summary>
            Development Gene Expression
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.CAMP.summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Phen.CAMP.phenology">
            <summary>The ancestor CAMP model and some relations</summary>
        </member>
        <member name="F:Models.PMF.Phen.CAMP.haunStage">
            <summary>The ancestor CAMP model and some relations</summary>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.CalcdPPVrn(System.Double,System.Double,System.Double)">
            <summary>
            Calculate delta of upregulation for photo period (Pp) sensitive genes
            </summary>
            <param name="baseUR">dVrn/HS below 8h Pp</param>
            <param name="maxUR">dVrn/HS above 16h Pp</param>
            <param name="dTt">delta base phyllochron</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.CalcBaseUpRegVrn1(System.Double,System.Double)">
            <summary>
            Calculate upregulation of base Vrn1
            </summary>
            <param name="dHS">delta haun stage</param>
            <param name="BaseDVrn1">delta Vrn1/BP at non-vernalising temperatures</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.CalcpVrn2(System.Double,System.Double,System.Double)">
            <summary>
            Potential Upregulation of Vrn2 from long photoperiod.  Actual Vrn2 expression will be less than this because it is blocked by Vrn1
            </summary>
            <param name="LPp">Long photoperiod hours</param>
            <param name="IpVrn2"> Initial potential Vrn2 at first experience of Pp > 8 (normally at emergence)</param>
            <param name="DpVrn2">Delta of potential Vrn2 in response to accumulation of LPpHS</param>
            <returns>delta ColdVrn1 representing the additional Vrn1 expression from cold upregulation</returns>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.calcTSHS(System.Double,System.Double)">
            <summary>
            Haun stage timing of terminal spikelet.
            Inverts equation 5 from Brown etal 2013 FLN =  2.85 + 1.1*TSHS and converts it to Base Phyllochrons
            Note the intercept differs, was type on publication
            </summary>
            <param name="FLN">Final leaf number observed</param>
            <param name="IntFLNvsTSHS">Intercept of relationship between FLN and TSHS</param>
            <returns>Estimation of number of HaunStages to terminal spikelet</returns>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.k">
            <summary>Temperature response coefficient for vernalisation</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.baseDVrn2">
            <summary>Base delta upregulation of Vrn2 at short Pp</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.VrnSatThreshold">
            <summary>The amount of methalated Vrn1 needed for vernalisation saturation to occur</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.MethalationThreshold">
            <summary>The amount of cold induced Vrn1 saturation required for methalation of cold Vrn1 to occur</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.BaseDVrnX">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isImbibed">
            <summary>IsImbibed True if seed is sown and moisture in soil sufficient to start germination</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isMethalating">
            <summary>IsMethalating True if Vrn1 expression equals TargetVrn1, the cold response will start methalating</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isEmerged">
            <summary>IsEmerged is True if seed has emerged</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isVernalised">
            <summary>IsVernCompetent True when the plant is large enough to proceed to vrn saturation</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isInduced">
            <summary>IsInduced True when floral initiation occurs, when Vrn3 > 0.3 </summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isReproductive">
            <summary>IsReproductive True when terminal spikelet occurs, when Vrn3 >= 1.0 </summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.isAtFlagLeaf">
            <summary>IsAtFlagLeaf True when flag leaf ligule has emerged</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.IsVernalised">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.LPp">
            <summary>Long photoperiod Haunstage accumulation.</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.BaseVrn1">
            Vrn gene expression state variables
            <summary>The current expression of Vrn1 upregulated at base rate.  
            Is methalated each day so always accumulates.
            Provides mechanism for gradual vernalisation at warm temperatures</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.ColdVrn1">
            <summary>The current expression of Vrn1 upregulated by cold.  
            Is methalated when Vrn1 reaches Vrn1Target, 
            Downregulated to keep Vrn1 at target level
            Downregulated by exposure to temperatures > 20oC.
            Provides mechanism for acellerated vernalisatin under cold temperatures</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.MethColdVrn1">
            <summary>The current expression of Vrn1 that has been methalated
            This is persistant expression than can not be down regulated
            BaseDVrn1 methalated each day
            ColdDVrn1 methalated each day when Vrn1 reaches Vrn1Target.
            Provides mechanism for vernalisation lag.  Vern expression lost if cold exposure not long enough</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.Vrn1">
            <summary>The current expression of all Vrn1
            Sum of MethVrn1 and ColdVrn1</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.Vrn2">
            <summary>The current expression of Vrn2
            Incremented daily by dVrn2 when plant is competent 
            Assumes zero upregulation under short photoperiod,
            upregulation under long photoperiod,
            not down regulated under any conditions</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.Vrn3">
            <summary>The current expression of Vrn3
            Incremented daily by dVrn3 when plant is Ppcompetent 
            Assumes upregulated at BaseDVrn3 under short photoperiod,
            Additional upregulation under long photoperiod,
            not down regulated under any conditions</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.VrnX">
            <summary>The current expression of VrnX
            Incremented daily by dVrnX when plant is Ppcompetent 
            Assumes upregulated at BaseDVrn3 under short photoperiod,
            Additional upregulation under long photoperiod,
            not down regulated under any conditions</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dLPp">
            <summary>Long photoperiod dHS equal dHS at Pp > 16 and is a decreasing proporiton of dHS
            as Pp decreases reaching zero at 8hPp </summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dBaseVrn1">
            <summary>daily delta upregulation of BaseVrn1</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dColdVrn1">
            <summary>daily delta upregulation of ColdVrn1</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dMethColdVrn1">
            <summary>daily delta methalation of ColdVrn1</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.pVrn2">
            <summary>Potential upregulation of Vrn2</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dVrn3">
            <summary>daily delta upregulation of Vrn3</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dVrnX">
            <summary>daily delta upregulation of VrnX</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.dHS">
            <summary>daily delta Haun stage, proxy for tt and should be refactored out</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.VSHS">
            Leaf number variables
            <summary>Haun stage of Vernalisation saturation</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.FIHS">
            <summary>Haun stage of Floral Initiation</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.TSHS">
            <summary>Haun Stage of Terminal Spikelet</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.FLN">
            <summary>Final Leaf Number</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.PropnOfDay">
            <summary>Proportion of emergence day that it not used for emergence</summary>
        </member>
        <member name="P:Models.PMF.Phen.CAMP.Params">
            <summary>Vernalisation rate parameters for current cultivar</summary>
        </member>
        <member name="F:Models.PMF.Phen.CAMP.basePhyllochron">
            <summary>The ancestor CAMP model and some relations</summary>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.ResetVernParams(Models.PMF.Phen.FinalLeafNumberSet)">
            <summary>
            Called externally to recalculate phenology parameters
            </summary>
            <param name="overRideFLNParams"></param>
        </member>
        <member name="M:Models.PMF.Phen.CAMP.Reset">
            <summary>Resets the phase.</summary>
        </member>
        <member name="T:Models.PMF.Phen.IVrn1Expression">
            <summary>Interface for a function</summary>
        </member>
        <member name="P:Models.PMF.Phen.IVrn1Expression.Name">
            <summary>The plases name</summary>
        </member>
        <member name="P:Models.PMF.Phen.IVrn1Expression.MethColdVrn1">
            <summary> Fraction of progress through the phase</summary>
        </member>
        <member name="P:Models.PMF.Phen.IVrn1Expression.VrnSatThreshold">
            <summary>The target for phase completion</summary>
        </member>
        <member name="P:Models.PMF.Phen.IVrn1Expression.IsVernalised">
            <summary>The target for phase completion</summary>
        </member>
        <member name="T:Models.PMF.Phen.LARPTQmodel">
            <summary>
            Calculates the leaf appearance rate from photo thermal quotient
            </summary>
        </member>
        <member name="M:Models.PMF.Phen.LARPTQmodel.CalculateLAR(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            alculate the Leaf Appearance Rate at a given PTQ for a genotype of given minLAR and MaxLAR as formualted by Baumont etal 2019 Journal Expt Botany, Equation 3.
            </summary>
            <param name="PTQ">PhotoThermal Quatent (mmol PAR m-2 oCd-1)</param>
            <param name="maxLAR">Leaf Appearance Rate at PTQ = infinity (oCd-1)</param>
            <param name="minLAR">Leaf Appearance rate at PTQ = 0 (oCd-1)</param>
            <param name="PTQhf">PTQ half, controls the curvature of response</param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Phen.PTQPhyllochron">
            <summary>
            Calculates the leaf appearance rate from photo thermal quotient
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.PTQPhyllochron.ApplyLeafStageFactors">
            <summary>
            Apply leaf stage factors in calculating phyllochron
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.PTQPhyllochron.SetEvent">
            <summary>
            Name of event to swith Vernalisation Factor
            </summary>
        </member>
        <member name="M:Models.PMF.Phen.PTQPhyllochron.Value(System.Int32)">
            <summary>
            The value
            </summary>
            <param name="arrayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Phen.PTQPhyllochron.OnSowing(System.Object,System.EventArgs)">
            <summary>Called when crop is sown</summary>
        </member>
        <member name="M:Models.PMF.Phen.PTQPhyllochron.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="T:Models.PMF.Phen.DAWSPhase">
            <summary>
            It proceeds until the last leaf on the main-stem has fully senessced.  Therefore its duration depends on the number of main-stem leaves that are produced and the rate at which they seness following final leaf appearance.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.DAWSPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.DAWSPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.DAWSPhase.DAWStoProgress">
            <summary>Days after winter solstice to progress from phase</summary>
        </member>
        <member name="P:Models.PMF.Phen.DAWSPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.DAWSPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.DAWSPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.DAWSPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.EmergingPhase">
            <summary>
            This phase goes from a start stage to an end stage and simulates time to 
            emergence as a function of sowing depth.  
            Progress toward emergence is driven by a thermal time accumulation child function.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.ShootLag">
            <summary>Gets or sets the lag for shoot development.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.ShootRate">
            <summary>Gets or sets the shoot growth rate.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.Target">
            <summary>Thermal time target to end this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.TTForTimeStep">
            <summary>Thermal time for this time-step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.ProgressThroughPhase">
            <summary>Accumulated units of thermal time as progress through phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.EmergenceDate">
            <summary>
            Date for emergence to occur.  null by default so model is used
            </summary>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.DoTimeStep(System.Double@)">
            <summary>Computes the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="T:Models.PMF.Phen.EndPhase">
            <summary>It is the end phase in phenology and the crop will sit, unchanging, in this phase until it is harvested or removed by other method</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.Target">
            <summary>Thermal time target.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EndPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.EndPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EndPhase.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Phen.GenericPhase">
            <summary>
            The phase goes from the a start stage to and end stage. The class requires a target and a progression function.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.ProgressionForTimeStep">
            <summary>Units of progress through phase on this time step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.ProgressThroughPhase">
            <summary>Accumulated units of progress through this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.Target">
            <summary>Thermal time target to end this phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.GerminatingPhase">
            <summary>
            This phase goes from a start stage to an end stage and assumes
            germination will be reached on the day after sowing or the first day 
            thereafter when the extractable soil water at sowing depth is greater than zero."
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.GerminatingPhase.waterBalance">
            <summary>Link to the soil water balance.</summary>
        </member>
        <member name="F:Models.PMF.Phen.GerminatingPhase.SowLayer">
            <summary>The soil layer in which the seed is sown.</summary>
        </member>
        <member name="E:Models.PMF.Phen.GerminatingPhase.SeedImbibed">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.GerminationDate">
            <summary>
            Date for germination to occur.  null by default so model is used
            </summary>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Phen.GotoPhase">
            <summary>
            When the specified start phase is reached, phenology is rewound to
            a specified phase.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.End">
            <summary>The end stage name.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.PhaseNameToGoto">
            <summary>The phase name to goto</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.FractionComplete">
            <summary>Gets the fraction complete.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.Target">
            <summary>Thermal time target</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.DoTimeStep(System.Double@)">
            <summary>Should not be called in this class</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.GrazeAndRewind">
            <summary>
            When the specified start phase is reached, phenology is rewound to
            a specified phase.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.GrazeAndRewind.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.GrazeAndRewind.End">
            <summary>The end stage name.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GrazeAndRewind.PhaseNameToGoto">
            <summary>The phase name to goto</summary>
        </member>
        <member name="P:Models.PMF.Phen.GrazeAndRewind.FractionComplete">
            <summary>Gets the fraction complete.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GrazeAndRewind.Target">
            <summary>Thermal time target</summary>
        </member>
        <member name="M:Models.PMF.Phen.GrazeAndRewind.DoTimeStep(System.Double@)">
            <summary>Should not be called in this class</summary>
        </member>
        <member name="M:Models.PMF.Phen.GrazeAndRewind.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GrazeAndRewind.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.IPhase">
            <summary>Interface for a function</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.End">
            <summary>The end</summary>
        </member>
        <member name="M:Models.PMF.Phen.IPhase.DoTimeStep(System.Double@)">
            <summary>This function returns a non-zero value if the phase target is met today </summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.FractionComplete">
            <summary> Fraction of progress through the phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.IPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="T:Models.PMF.Phen.IPhaseWithTarget">
            <summary>Interface for a function</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhaseWithTarget.Target">
            <summary> ThermalTimeTarget</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhaseWithTarget.ProgressThroughPhase">
            <summary>Gets the t tin phase.</summary>
        </member>
        <member name="T:Models.PMF.Phen.LeafAppearancePhase">
            <summary>
            This phase goes from the specified start stage to the specified end stage and 
            it continues until the final main-stem leaf has finished expansion.
            The duration of this phase is determined by leaf appearance rate (Structure.Phyllochron)
            and the number of leaves produced on the mainstem (Structure.FinalLeafNumber). 
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafAppearancePhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafAppearancePhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafAppearancePhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.ResetPhase">
            <summary>Reset phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.LeafDeathPhase">
            <summary>
            This phase goes from the specified start stage to the specified end stage,
            which occurs when all leaves have fully senesced.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafDeathPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafDeathPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafDeathPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.NodeNumberPhase">
            <summary>
            This phase goes from the specified start stage to the specified end stage
            and extends from the end of the previous phase until the CompletionNodeNumber
            is achieved. The duration of this phase is determined by leaf appearance rate
            and the CompletionNodeNumber target
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.NodeNumberPhase.NodeNoAtStart">
            <summary>The cohort no at start</summary>
        </member>
        <member name="F:Models.PMF.Phen.NodeNumberPhase.First">
            <summary>The first</summary>
        </member>
        <member name="F:Models.PMF.Phen.NodeNumberPhase.FractionCompleteYesterday">
            <summary>The fraction complete yesterday</summary>
        </member>
        <member name="P:Models.PMF.Phen.NodeNumberPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.NodeNumberPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.NodeNumberPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.ResetPhase">
            <summary>Reset phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.Document">
            <summary>Document the model.</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.PhaseChangedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.PhaseChangedType.StageName">
            <summary>The stage at phase change</summary>
        </member>
        <member name="T:Models.PMF.Phen.PhotoperiodPhase">
             <summary>
             This phase goes from the specified start stage to the specified end stage and reaches
             the end stage when the photo period passes a user-defined critical value.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.CricialPhotoperiod">
            <summary>Critical photoperiod to move into next phase</summary>
        </member>
        <member name="T:Models.PMF.Phen.PhotoperiodPhase.PPType">
            <summary>
             Photoperiod Type
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.PhotoperiodPhase.PPType.Increasing">
            <summary>
            Increasing Photoperiod
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.PhotoperiodPhase.PPType.Decreasing">
            <summary>
            Decreasing Photoperiod
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.PPDirection">
            <summary>Flag to specify whether photoperiod should be increasing</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.ProgressionForTimeStep">
            <summary>Units of progress through phase on this time step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.ProgressThroughPhase">
            <summary>Accumulated units of progress through this phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.SimpleLeafAppearancePhase">
            <summary>
            This phase goes from the specified start stage to the specified end stage and
            its duration is determined by leaf appearance rate and the number of leaves to
            complete the phase. 
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.SimpleLeafAppearancePhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.SimpleLeafAppearancePhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.SimpleLeafAppearancePhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.SimpleLeafAppearancePhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.SimpleLeafAppearancePhase.ResetPhase">
            <summary>Reset phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.SimpleLeafAppearancePhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.StartPhase">
            <summary>
            The phase goes from the a start stage to and end stage. The class requires a target and a progression function.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.StartPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.StartPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.StartPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.StartPhase.ProgressionForTimeStep">
            <summary>Units of progress through phase on this time step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.StartPhase.ProgressThroughPhase">
            <summary>Accumulated units of progress through this phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.StartPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.StartPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.StartPhase.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="M:Models.PMF.Phen.StartPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.VernalisationPhase">
            <summary>
            This phase goes from the specified start stage to the specified end stage
            and reaches end when vernalisation saturation occurs.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.VernalisationPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.VernalisationPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.VernalisationPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.VernalisationPhase.ProgressThroughPhase">
            <summary>Accumulated units of progress through this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.VernalisationPhase.Target">
            <summary>Thermal time target to end this phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.VernalisationPhase.DoTimeStep(System.Double@)">
            <summary>Summarise gene expression from CAMP into phenological progress</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.VernalisationPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.VernalisationPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.VernalisationPhase.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.Phenology">
            <summary>
            The phenological development is simulated as the progression through a 
            series of developmental phases, each bound by distinct growth stage. 
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.plant">
            1. Links
            ------------------------------------------------------------------------------------------------
        </member>
        <member name="F:Models.PMF.Phen.Phenology.thermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.phases">
            2. Private And Protected Fields
             -------------------------------------------------------------------------------------------------
            <summary>The phases</summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.currentPhaseIndex">
            <summary>The current phase index</summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.stagesPassedToday">
            <summary>This lists all the stages that are pased on this day</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.PhaseChanged">
            4. Public Events And Enums
             -------------------------------------------------------------------------------------------------
            <summary>Occurs when [phase changed].</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.StageWasReset">
            <summary>Occurs when phase is set externally.</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.PlantEmerged">
            <summary>Occurs when emergence phase completed</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.PostPhenology">
            <summary>Occurs when daily phenology timestep completed</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.AccumulatedTT">
            5. Public Properties
             --------------------------------------------------------------------------------------------------
            <summary>The Thermal time accumulated tt</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.AccumulatedEmergedTT">
            <summary>The Thermal time accumulated tt following emergence</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.Emerged">
            <summary>The emerged</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.Stage">
            <summary>A one based stage number.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.CurrentPhaseName">
            <summary>This property is used to retrieve or set the current phase name.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.CurrentStageName">
            <summary>Return current stage name.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.FractionInCurrentPhase">
            <summary>Gets the fraction in current phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.CurrentPhase">
            <summary>A utility property to return the current phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.Zadok">
            <summary>Gets the current zadok stage number. Used in manager scripts.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.IndexFromPhaseName(System.String)">
            6. Public methods
             -----------------------------------------------------------------------------------------------------------
            <summary>Look for a particular phase and return it's index or -1 if not found.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.StartStagePhaseIndex(System.String)">
            <summary>Look for a particular stage and return it's index or -1 if not found.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.EndStagePhaseIndex(System.String)">
            <summary>Look for a particular stage and return it's index or -1 if not found.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.SetToStage(System.Double)">
            <summary>A function that resets phenology to a specified stage</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnStartDayOf(System.String)">
            <summary> A utility function to return true if the simulation is on the first day of the specified stage. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.InPhase(System.String)">
            <summary> A utility function to return true if the simulation is currently in the specified phase. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Between(System.Int32,System.Int32)">
            <summary> A utility function to return true if the simulation is currently between the specified start and end stages. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Between(System.String,System.String)">
            <summary> A utility function to return true if the simulation is currently betweenthe specified start and end stages. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Beyond(System.String)">
            <summary> A utility function to return true if the simulation is at or past the specified startstage.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.BeyondPhase(System.Int32)">
            <summary> A utility function to return true if the simulation is at or past the specified startstage.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.BeforePhase(System.Int32)">
            <summary> A utility function to return true if the simulation is before the specified phaseIndex.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.PhaseStartingWith(System.String)">
            <summary>A utility function to return the phenological phase that starts with the specified start stage name.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.ResetCampVernParams(Models.PMF.Phen.FinalLeafNumberSet)">
            <summary>
            Resets the Vrn expression parameters for the CAMP model
            </summary>
            <param name="overRideFLNParams"></param>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.RefreshPhases">
            <summary>
            Refreshes the list of phases.
            </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnCreated">
            <summary>Called when model has been created.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnDoPhenology(System.Object,System.EventArgs)">
            <summary>Called by sequencer to perform phenology.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnHarvesting(System.Object,System.EventArgs)">
            <summary>Called when crop is being harvested.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnPruning(System.Object,System.EventArgs)">
            <summary>Called when crop is being prunned.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Called at the start of each day</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.PlantIsAlive">
            <summary> /// A helper property that checks the parent plant (old or new) to see if it is alive. /// </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Phen.Vernalisation">
            <summary>
            Vernalisation model
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.Vernalisation.vernalisingRecord">
            <summary>Record of vernalising days during stabilisation period</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.StartStage">
            <summary>The start stage</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.EndStage">
            <summary>The end stage</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.ResetStage">
            <summary>The end stage</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.TodaysVernalisation">
            <summary>Gets the value vernalisation days.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.DaysVernalised">
            <summary>Gets the cummulative number of days vernalised.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.DaysVernalising">
            <summary>Gets the value number of days under temporary vernalisation.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Vernalisation.DoVernalisation">
            <summary>Compute the vernalisation</summary>
        </member>
        <member name="T:Models.PMF.Phen.Age">
            <summary>
            The number of winters a plant has experienced
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.Age.weather">
            <summary>
            The Weather model
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.Age.Years">
            <summary>
            The number of winters the crop has passed
            </summary>
        </member>
        <member name="T:Models.PMF.Phen.BBCH">
             <summary>
             This model calculates a BBCH growth stage value based upon the current phenological growth stage within the model. 
             The model uses information regarding germination, emergence and leaf appearance for early growth stages (BBCH stages 0 to 39).
             
            |BeginStage |Growth Phase     |Description                             |
            |-----------|-----------------|:---------------------------------------|
            |1          |Germinating      |BBCH = 5 x FractionThroughPhase         |
            |2          |Emerging         |BBCH = 5 + 5 x FractionThroughPhase     |
            |3          |Juvenile         |BBCH = 10 + (Leaf.AppearedCohortNo - 1) |
            |4          |PhotoSensitive   |BBCH = 10 + (Leaf.AppearedCohortNo - 1) |
            |5          |LeafAppearance   |BBCH = 30 + LeavesAppearedInPhase       |
            
             BBCHSTages 11-19 assume the dropy leaf method of measuring leaf appearance and to translate this to a model variable we assum droopy leaves are one fewer than the number of tips visiable
             WE assume that the begining of stem extension (BBCH 30) corresponds to the floral initiation stage in the model (Stage 5).  Scores between 31 and 39 depend on the number of nodes visiable.
             The model does not simulate nodes explicitly so we assume that node apparance occurs at the same rate as leaf appearance an add the number of leaves that have appeared in the LeafAppearance Phase to give an estimate of BBCH score
             BBCH stage 50 occurs when the tastle is just visiable.  This is assumed to occur at the same time as the appearance of the tip of the flag leaf.  This occurs toward the end of the leaf appearance phase 
             While still in the leaf apperance phase after flag leaf tip appearance BBCH score is calculated as:
             BBCH = 50 + 5 * FractionFlagLeafExpansion
             This assumes the tassel will be half emerged when the flaf leaf is full expanded   
             The model then uses simulated phenological growth stages for BBCH stages 55 to 99.
             
            |Stage   |APSIM Name              |BBCH translation
            |--------|------------------------|-------------------------------------|
            |6.0     |FlagLeafFullyExpanded   |55 - Mid Tassel Emergence
            |7.0     |Flowering               |65 - Mid flowering
            |8.0     |StartGrainFill          |70 - Begining of Grain development
            |9.0     |EndGrainFill            |87 - Physiological maturity
            |10      |Maturity                |99 - Harvest Product
            
             </summary>
        </member>
        <member name="F:Models.PMF.Phen.BBCH.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Phen.BBCH.leaf">
            <summary>
            The Leaf class
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.BBCH.structure">
            <summary>
            The Structure class
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.BBCH.Stage">
            <summary>Gets the stage.</summary>
            <value>The stage.</value>
        </member>
        <member name="T:Models.PMF.Phen.ZadokPMF">
             <summary>
             This model calculates a Zadok growth stage value based upon the current phenological growth stage within the model. 
             The model uses information regarding germination, emergence, leaf appearance and tiller appearance for early growth stages (Zadok stages 0 to 30).
             The model then uses simulated phenological growth stages for Zadok stages 30 to 100.
             
            |Growth Phase     |Description                                   |
            |-----------------|:---------------------------------------------|
            |Germinating      |ZadokStage = 5 x FractionThroughPhase         |
            |Emerging         |ZadokStage = 5 + 5 x FractionThroughPhase     |
            |Vegetative       |ZadokStage = 10 + Structure.LeafTipsAppeared  |
            |Reproductive     |ZadokStage is interpolated from values of     |
            |                 |stage number using the following table.       |
            
            |   Growth Stage  |   ZadokStage      |
            |-----------------|:------------------|
            |       3.9       |         30        |
            |       4.9       |         33        |
            |       5.0       |         39        |
            |       6.0       |         65        |
            |       7.0       |         71        |
            |       8.0       |         87        |
            |       9.0       |         90        |
            
             </summary>
        </member>
        <member name="F:Models.PMF.Phen.ZadokPMF.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Phen.ZadokPMF.Structure">
            <summary>
            The Structure class
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.ZadokPMF.Stage">
            <summary>Gets the stage.</summary>
            <value>The stage.</value>
        </member>
        <member name="T:Models.PMF.Phen.ZadokPMFWheat">
            <summary>
            This model calculates a Zadok growth stage value based upon the current phenological growth stage within the model. 
            The model uses information regarding germination, emergence, leaf appearance and tiller appearance for early growth stages (Zadok stages 0 to 30).
            The model then uses simulated phenological growth stages for Zadok stages 30 to 100.
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.ZadokPMFWheat.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Phen.ZadokPMFWheat.Structure">
            <summary>
            The Structure class
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.ZadokPMFWheat.Stage">
            <summary>Gets the stage.</summary>
            <value>The stage.</value>
        </member>
        <member name="M:Models.PMF.Phen.ZadokPMFWheat.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Plant">
            <summary>
            The model has been developed using the Plant Modelling Framework (PMF) of [brown_plant_2014]. This
            new framework provides a library of plant organ and process submodels that can be coupled, at runtime, to construct a
            model in much the same way that models can be coupled to construct a simulation.This means that dynamic composition
            of lower level process and organ classes(e.g.photosynthesis, leaf) into larger constructions(e.g.maize, wheat,
            sorghum) can be achieved by the model developer without additional coding.
            </summary>
        </member>
        <member name="F:Models.PMF.Plant.summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Plant.clock">
            <summary> Clock </summary>
        </member>
        <member name="F:Models.PMF.Plant.mortalityRate">
            <summary>The plant mortality rate</summary>
        </member>
        <member name="F:Models.PMF.Plant.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Plant.Arbitrator">
            <summary>The arbitrator</summary>
        </member>
        <member name="F:Models.PMF.Plant.structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Plant.Leaf">
            <summary>The leaf</summary>
        </member>
        <member name="F:Models.PMF.Plant.Root">
            <summary>The root</summary>
        </member>
        <member name="P:Models.PMF.Plant.AboveGround">
            <summary>Above ground weight</summary>
        </member>
        <member name="P:Models.PMF.Plant.AboveGroundHarvestable">
            <summary>Above ground weight</summary>
        </member>
        <member name="P:Models.PMF.Plant.PlantType">
            <summary>Used by several organs to determine the type of crop.</summary>
        </member>
        <member name="P:Models.PMF.Plant.SowingData">
            <summary>The sowing data</summary>
        </member>
        <member name="P:Models.PMF.Plant.Organs">
            <summary>Gets the organs.</summary>
        </member>
        <member name="P:Models.PMF.Plant.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="F:Models.PMF.Plant.plantPopulation">
            <summary>Holds the number of plants.</summary>
        </member>
        <member name="P:Models.PMF.Plant.SowingDate">
            <summary>
            Holds the date of sowing
            </summary>
        </member>
        <member name="P:Models.PMF.Plant.Population">
            <summary>Gets or sets the plant population.</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsAlive">
            <summary>Return true if plant is alive and in the ground.</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsEmerged">
            <summary>Return true if plant has emerged</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsEnding">
            <summary>Returns true if the crop is being ended.</summary>
            <remarks>Used to clean up data the day after an EndCrop, enabling some reporting.</remarks>
        </member>
        <member name="P:Models.PMF.Plant.DaysAfterEnding">
            <summary>Counter for the number of days after corp being ended.</summary>
            <remarks>USed to clean up data the day after an EndCrop, enabling some reporting.</remarks>
        </member>
        <member name="P:Models.PMF.Plant.DaysAfterSowing">
            <summary>
            Number of days after sowing.
            </summary>
        </member>
        <member name="P:Models.PMF.Plant.Models#PMF#Interfaces#IPlantDamage#Organs">
            <summary>A list of organs that can be damaged.</summary>
        </member>
        <member name="P:Models.PMF.Plant.CoverGreen">
            <summary>
            Total plant green cover from all organs
            </summary>
        </member>
        <member name="P:Models.PMF.Plant.CoverTotal">
            <summary>
            Total plant cover from all organs
            </summary>
        </member>
        <member name="P:Models.PMF.Plant.LAI">
            <summary>Leaf area index.</summary>
        </member>
        <member name="P:Models.PMF.Plant.WaterUptake">
            <summary>The sw uptake</summary>
        </member>
        <member name="P:Models.PMF.Plant.NitrogenUptake">
            <summary>The nitrogen uptake</summary>
        </member>
        <member name="P:Models.PMF.Plant.AssimilateAvailable">
            <summary>Amount of assimilate available to be damaged.</summary>
        </member>
        <member name="P:Models.PMF.Plant.Material">
            <summary>A list of material (biomass) that can be damaged.</summary>
        </member>
        <member name="M:Models.PMF.Plant.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="E:Models.PMF.Plant.Sowing">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.Plant.PlantSowing">
            <summary>Occurs when a plant is sown.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Harvesting">
            <summary>Occurs when a plant is about to be harvested.</summary>
        </member>
        <member name="E:Models.PMF.Plant.PlantEnding">
            <summary>Occurs when a plant is ended via EndCrop.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Pruning">
            <summary>Occurs when a plant is about to be winter pruned.</summary>
        </member>
        <member name="E:Models.PMF.Plant.LeafPlucking">
            <summary>Occurs when a plant is about to be leaf plucking.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Cutting">
            <summary>Occurs when a plant is about to be cutted.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Grazing">
            <summary>Occurs when a plant is about to be grazed.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Flowering">
            <summary>Occurs when a plant is about to flower</summary>
        </member>
        <member name="M:Models.PMF.Plant.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Plant.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.PMF.Plant.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Plant.EndOfDay(System.Object,System.EventArgs)">
            <summary>Called at the end of the day.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Plant.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sow the crop with the specified parameters.</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth mm.</param>
            <param name="rowSpacing">The row spacing mm.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <param name="rowConfig">SkipRow configuration.</param>
        </member>
        <member name="M:Models.PMF.Plant.Harvest(Models.PMF.RemovalFractions)">
            <summary>Harvest the crop.</summary>
        </member>
        <member name="M:Models.PMF.Plant.RemoveBiomass(System.String,Models.PMF.RemovalFractions)">
            <summary>Harvest the crop.</summary>
        </member>
        <member name="M:Models.PMF.Plant.EndCrop">
            <summary>End the crop.</summary>
        </member>
        <member name="M:Models.PMF.Plant.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Plant.Document">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="M:Models.PMF.Plant.GetTags">
            <summary>
            Document the model.
            </summary>
        </member>
        <member name="M:Models.PMF.Plant.RemoveBiomass(System.String,System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Remove biomass from an organ.
            </summary>
            <param name="organName">Name of organ.</param>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove.</param>
        </member>
        <member name="M:Models.PMF.Plant.ReduceCanopy(System.Double)">
            <summary>
            Set the plant leaf area index.
            </summary>
            <param name="deltaLAI">Delta LAI.</param>
        </member>
        <member name="M:Models.PMF.Plant.ReduceRootLengthDensity(System.Double)">
            <summary>
            Set the plant root length density.
            </summary>
            <param name="rootLengthModifier">The root length modifier due to root damage (0-1).</param>
        </member>
        <member name="M:Models.PMF.Plant.RemoveAssimilate(System.Double)">
            <summary>
            Remove an amount of assimilate from the plant.
            </summary>
            <param name="deltaAssimilate">The amount of assimilate to remove (g/m2).</param>
        </member>
        <member name="M:Models.PMF.Plant.SetEmergenceDate(System.String)">
            <summary>
            Force emergence on the date called if emergence has not occured already
            </summary>
        </member>
        <member name="M:Models.PMF.Plant.SetGerminationDate(System.String)">
            <summary>
            Force germination on the date called if germination has not occured already
            </summary>
        </member>
        <member name="M:Models.PMF.Plant.ReducePopulation(System.Double)">
            <summary>
            Reduce the plant population.
            </summary>
            <param name="newPlantPopulation">The new plant population.</param>
        </member>
        <member name="T:Models.PMF.ApparingLeafParams">
            <summary>
            Data passed to leaf tip appearance occurs.
            </summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.CohortToAppear">
            <summary>The numeric rank of the cohort appaeraing</summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.TotalStemPopn">
            <summary>The populations of leaves in the appearing cohort</summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.CohortAge">
            <summary>The Tt age of the the cohort appearing</summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.FinalFraction">
            <summary>The proportion of the cohort appearing if final cohort</summary>
        </member>
        <member name="T:Models.PMF.CohortInitParams">
            <summary>
            Data passed to leaf tip appearance occurs.
            </summary>
        </member>
        <member name="P:Models.PMF.CohortInitParams.Rank">
            <summary>The numeric rank of the cohort appaeraing</summary>
        </member>
        <member name="T:Models.PMF.WaterUptakesCalculatedUptakesType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.WaterUptakesCalculatedUptakesType.Name">
            <summary>The name</summary>
        </member>
        <member name="F:Models.PMF.WaterUptakesCalculatedUptakesType.Amount">
            <summary>The amount</summary>
        </member>
        <member name="T:Models.PMF.WaterUptakesCalculatedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.WaterUptakesCalculatedType.Uptakes">
            <summary>The uptakes</summary>
        </member>
        <member name="T:Models.PMF.WaterUptakesCalculatedDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.KillLeafType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.KillLeafType.KillFraction">
            <summary>The kill fraction</summary>
        </member>
        <member name="T:Models.PMF.FOMLayerDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.NullTypeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.PMF.BiomassRemovedDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.BiomassRemovedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.crop_type">
            <summary>The crop_type</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dm_type">
            <summary>The dm_type</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dlt_crop_dm">
            <summary>The dlt_crop_dm</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dlt_dm_n">
            <summary>The DLT_DM_N</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dlt_dm_p">
            <summary>The DLT_DM_P</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.fraction_to_residue">
            <summary>The fraction_to_residue</summary>
        </member>
        <member name="T:Models.PMF.OrganBiomassRemovalType">
            <summary>Data passed to each organ when a biomass remove event occurs.  The proportion of biomass to be removed from each organ is the sum of the FractionToRemove and the FractionToRedidues</summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionLiveToRemove">
            <summary>
            The amount of live biomass taken from each organ and removeed from the zone on harvest, cut, graze or prune.
            </summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionDeadToRemove">
            <summary>
            The amount of dead biomass taken from each organ and removeed from the zone on harvest, cut, graze or prune.
            </summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionLiveToResidue">
            <summary>
            The amount of live biomass to removed from each organ and passed to residue pool on on harvest, cut, graze or prune
            </summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionDeadToResidue">
            <summary>
            The amount of dead biomass to removed from each organ and passed to residue pool on on harvest, cut, graze or prune
            </summary>
        </member>
        <member name="T:Models.PMF.RemovalFractions">
            <summary>Data structure to hold removal and residue returns fractions for all plant organs</summary>
        </member>
        <member name="F:Models.PMF.RemovalFractions.removalValues">
             <summary>
             The list of BiomassRemovalTypes for each organ
            </summary>
        </member>
        <member name="P:Models.PMF.RemovalFractions.SetThinningProportion">
             <summary>
             The Phenological stage that biomass removal resets phenology to.
            </summary>
        </member>
        <member name="P:Models.PMF.RemovalFractions.SetPhenologyStage">
             <summary>
             The Phenological stage that biomass removal resets phenology to.
            </summary>
        </member>
        <member name="P:Models.PMF.RemovalFractions.NodesToRemove">
            <summary>
            The nunber of Main-stem nodes to remove
            </summary>
        </member>
        <member name="M:Models.PMF.RemovalFractions.SetFractionToRemove(System.String,System.Double,System.String)">
             <summary>
             Method to set the FractionToRemove for specified Organ
            </summary>
        </member>
        <member name="M:Models.PMF.RemovalFractions.SetFractionToResidue(System.String,System.Double,System.String)">
             <summary>
             Method to set the FractionToResidue for specified Organ
            </summary>
        </member>
        <member name="M:Models.PMF.RemovalFractions.GetFractionsForOrgan(System.String)">
            <summary>
            Gets the removal fractions for the specified organ or null if not found.
            </summary>
            <param name="organName">The organ name to look for.</param>
        </member>
        <member name="T:Models.PMF.SimpleTree">
            <summary>
            A model of a simple tree
            </summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Height">
            <summary>Gets the height.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Width">
            <summary>Gets the width of the canopy (mm).</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.FRGR">
            <summary>Gets  FRGR.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.PlantType">
            <summary>The plant type.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.Soil">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.waterBalance">
            <summary>The water balance model</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.soilPhysical">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.NO3">
            <summary>NO3 solute.</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.NH4">
            <summary>NH4 solute.</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.soilCrop">
            <summary>Soil crop parameterisation.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.IsAlive">
            <summary>
            Is the plant alive?
            </summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.RootDepth">
            <summary>Rooting Depth</summary>
            <value>The rooting depth.</value>
        </member>
        <member name="P:Models.PMF.SimpleTree.NDemand">
            <summary>The daily N demand</summary>
            <value>The daily N demand.</value>
        </member>
        <member name="P:Models.PMF.SimpleTree.AboveGround">
            <summary>Aboveground mass</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.plant_status">
            <summary>The plant_status</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.WaterUptake">
            <summary>The sw uptake</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.NO3Uptake">
            <summary>The no3 uptake</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.NH4Uptake">
            <summary>The nh4 uptake</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.NitrogenUptake">
            <summary>The nitrogen uptake</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.Uptakes">
            <summary>A list of uptakes generated for the soil arbitrator</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Uptake">
            <summary>The actual uptake of the plant</summary>
            <value>The uptake.</value>
        </member>
        <member name="M:Models.PMF.SimpleTree.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.EP">
            <summary>MicroClimate supplies PotentialEP</summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Simulation start</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Run at start of day</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Calculate the potential sw uptake for today</summary>
            <param name="soilstate"></param>
            <returns>list of uptakes</returns>
            <exception cref="T:Models.Core.ApsimXException">Could not find root zone in Zone  + this.Parent.Name +  for SimpleTree</exception>
        </member>
        <member name="M:Models.PMF.SimpleTree.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Placeholder for SoilArbitrator</summary>
            <param name="soilstate">soil state</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.SimpleTree.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the n uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <param name="rowConfig">The row configuration.</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.BiomassRemovalComplete(System.Double)">
            <summary>
            Biomass has been removed from the plant.
            </summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.RootProportion(System.Int32,System.Double)">
            <summary>Roots the proportion.</summary>
            <param name="layer">The layer.</param>
            <param name="root_depth">The root_depth.</param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.SowingParameters">
            <summary>
            Parameters which control how a plant is sown.
            </summary>
        </member>
        <member name="F:Models.PMF.SowingParameters.Plant">
            <summary>The plant being sown.</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.Cultivar">
            <summary>The cultivar to be sown.</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.Population">
            <summary>The population.</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.Depth">
            <summary>The depth</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.RowSpacing">
            <summary>The row spacing</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.MaxCover">
            <summary>The maximum cover</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.BudNumber">
            <summary>The bud number</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.SkipType">
            <summary>The skip type</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.SkipRow">
            <summary>The skip row</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.SkipPlant">
            <summary>The skip plant</summary>
        </member>
        <member name="P:Models.PMF.SowingParameters.SkipDensityScale">
            <summary>The skip plant seed density adjustment</summary>
        </member>
        <member name="T:Models.PMF.Struct.ApexGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexGroup.apexGroupSize">
            <summary>The number of apex in each age group.</summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexGroup.apexGroupAge">
            <summary>The age of apex in age group.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexGroup.Number">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexGroup.GroupSize">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexGroup.GroupAge">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="T:Models.PMF.Struct.ApexBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexBase.apexGroupSize">
            <summary>The apex group.</summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexBase.apexGroupAge">
            <summary>The age of apex in age group.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.Number">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.SenescenceByAge">
            <value>Senscenced by age.</value>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.GroupSize">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.GroupAge">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.NumByAge(System.Double)">
            <summary>Apex number by age</summary>
            <param name="age">Threshold age</param>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.Appearance(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.Reset">
            <summary>
            Reset the apex instance
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
            <param name="sender">sender of the event.</param>
            <param name="Sow">Sowing data to initialise from.</param>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Struct.ApexStandard">
            <summary>
            Calculate cohort population using stem population.
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexStandard.Appearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexStandard.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf tip appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Struct.ApexTiller">
            <summary>
            Calculate cohort populations using apex number
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexTiller.Appearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexTiller.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf tip appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Struct.BudNumberFunction">
            <summary> 
            Each time the specified event occurs, bud number on each main-stem is set to:
            
            *FractionOfBudBurst* * *BudNumber*
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.BudNumberFunction.SetStage">
            <summary>The stage on which bud number is set</summary>
        </member>
        <member name="M:Models.PMF.Struct.BudNumberFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.PMF.Struct.BudNumberFunction.Document">
            <summary>
            Document the model.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Struct.Culm">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.Culm.LeafNoAtAppearance">
            <summary> Used to allow for offset of number of leaves on the tiller</summary>
        </member>
        <member name="F:Models.PMF.Struct.Culm.dltLeafNo">
            <summary> Potential leaf growth for the day</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.VertAdjValue">
            <summary> Vertical leaf adjustment.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.CulmNo">
            <summary>Culm number.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.Proportion">
            <summary>Leaf proportion?</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.FinalLeafNo">
            <summary>Final leaf number.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.CurrentLeafNo">
            <summary>Current leaf number.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.LeafArea">
            <summary>Leaf area.</summary>
            <remarks>Changes each day - doesn't include proportion of culm.</remarks>
        </member>
        <member name="P:Models.PMF.Struct.Culm.DltLAI">
            <summary>Increase in Leaf area.</summary>
            <remarks>Changes each day - includes proportion effect.</remarks>
        </member>
        <member name="P:Models.PMF.Struct.Culm.DltStressedLAI">
            <summary>Increase in Leaf area reduced by stress effect.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.TotalLAI">
            <summary>Accumulated lai for this culm.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Culm.LeafSizes">
            <summary>Calculated potential sizes for each leaf</summary>
        </member>
        <member name="M:Models.PMF.Struct.Culm.#ctor(System.Double)">
            <summary>Constructor. </summary>
            <param name="leafAppearance"></param>
        </member>
        <member name="M:Models.PMF.Struct.Culm.UpdatePotentialLeafSizes(Models.PMF.ICulmLeafArea)">
            <summary> Potential Leaf sizes can be calculated early and then referenced</summary>
        </member>
        <member name="M:Models.PMF.Struct.Culm.AddNewLeaf(System.Double)">
            <summary>Leaf appearance is calculated in the tillering method</summary>
        </member>
        <member name="M:Models.PMF.Struct.Culm.Initialize">
            <summary>Perform initialisation. </summary>
        </member>
        <member name="T:Models.PMF.Struct.CulmParams">
            <summary>
            Input parameters passed to the Culm constructor.
            This is required because the culms are created ad-hoc, partway
            through a simulation, so we can't use [Link]s to resolve
            dependencies.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.LeafNoCorrection">
            <summary>
            Function which corrects for other growing leaves.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AX0">
            <summary>
            Function which returns Eqn 14 calc x0 - position of largest leaf.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.NoSeed">
            <summary>
            Function which returns seed number?
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.InitRate">
            <summary>
            Function which return culm init rate.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AppearanceRate1">
            <summary>
            Initial appearance rate.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AppearanceRate2">
            <summary>
            Mid appearance rate.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AppearanceRate3">
            <summary>
            Final appearance rate.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.NoRateChange">
            <summary>
            idek
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.NoRateChange2">
            <summary>
            idek
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.LeafNoAtEmergence">
            <summary>
            Leaf number at emergence.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.MinLeafNo">
            <summary>
            Min leaf number.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.MaxLeafNo">
            <summary>
            Max leaf number.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.TTEmergToFI">
            <summary>
            Accumulated TT from emergence to floral init.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AMaxS">
            <summary>
            Largest leaf area slope.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AMaxI">
            <summary>
            Largest leaf area intercept.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.Density">
            <summary>
            Plant sowing density.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.DltTT">
            <summary>
            Daily thermaltime value.
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.A0">
            <summary>
            bellCurveParams[0]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.A1">
            <summary>
            bellCurveParams[1]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.B0">
            <summary>
            bellCurveParams[2]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.B1">
            <summary>
            bellCurveParams[3]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AMaxA">
            <summary>
            largestLeafParams[0]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AMaxB">
            <summary>
            largestLeafParams[1]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.AMaxC">
            <summary>
            largestLeafParams[2]
            </summary>
        </member>
        <member name="P:Models.PMF.Struct.CulmParams.GetTTFI">
            <summary>
            Function which fetches TT target from endjuv to floaral init.
            </summary>
        </member>
        <member name="T:Models.PMF.Struct.HeightFunction">
            <summary>
            Height is used by the MicroClimate model to calculate the aerodynamic resistance used for calculation of potential transpiration.
            Calculates the potential height increment and then multiplies it by the smallest of any childern functions (Child functions represent stress).
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.PotentialHeight">
            <summary>The potential height</summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.PotentialHeightYesterday">
            <summary>The potential height yesterday</summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.Height">
            <summary>The height</summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="P:Models.PMF.Struct.HeightFunction.DeltaHeight">
            <summary>Gets or sets the height of the delta.</summary>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.Clear">
            <summary>Clear all variables</summary>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sowing</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.Document">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Struct.LeafCulms">
            <summary>
            LeafCulms model ported from LeafCulms and LeafCulms_Fixed in
            the apsim classic sorghum model.
            </summary>
            <remarks>
            # TODO:
            - Implement constants as IFunctions.
            - Fix case to match style guidelines.
            </remarks>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.fixedTillering">
            <summary> Tillering Method that uses a fixed number of tillers</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.dynamicTillering">
            <summary> Tillering Method that manages number of tillers dynamically</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.expansionStress">
            <summary> Expansion stress. </summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.noRateChange1">
            <summary> Appearance rate changes when this many leaves are remaining</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.noRateChange2">
            <summary> Appearance rate can change again when this many leaves are remaining</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.appearanceRate1">
            <summary> The Initial Appearance rate for phyllocron.</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.appearanceRate2">
            <summary>The Appearance rate for phyllocron after noRateChange 1 .</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.appearanceRate3">
            <summary>The Appearance rate for phyllocron after noRateChange 2 .</summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.TilleringMethod">
            <summary> Enables Tillering method to be controlled via script</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.VerticalTillerAdjustment">
            <summary> Subsequent tillers are slightly smaller - adjust that size using a percentage</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.MaxVerticalTillerAdjustment">
            <summary> Maximum values that Subsequent tillers can be adjusted</summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.FinalLeafNo">
            <summary>Final leaf number.</summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.LeafNo">
            <summary>Leaf number.</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.dltLeafNo">
            <summary> Amount of Leaf that appears today</summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.dltPotentialLAI">
            <summary> Potential leaf growth for today for all culms</summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.dltStressedLAI">
            <summary> Potential leaf growth after stress for today for all culms</summary>
        </member>
        <member name="F:Models.PMF.Struct.LeafCulms.Culms">
            <summary> Collection of Culms </summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.TTTargetFI">
            <summary>Total TT required to get from emergence to floral init.</summary>
        </member>
        <member name="M:Models.PMF.Struct.LeafCulms.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="P:Models.PMF.Struct.LeafCulms.LeafSizes">
            <summary> Array of Individual leaf sizeson the first culm</summary>
        </member>
        <member name="M:Models.PMF.Struct.LeafCulms.Initialize">
            <summary>
            Remove all then add the first culm (which is the main culm).
            Shouldn't be called once sown.
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.LeafCulms.StartOfSim(System.Object,System.EventArgs)">
            <summary> Reset Culms at start of the simulation </summary>
        </member>
        <member name="M:Models.PMF.Struct.LeafCulms.CalculatePotentialArea">
            <summary>Calculate Potential Leaf Area</summary>
        </member>
        <member name="M:Models.PMF.Struct.LeafCulms.CalculateActualArea">
            <summary>Calculate Actual Area - adjusts potential growth </summary>
        </member>
        <member name="M:Models.PMF.Struct.LeafCulms.getLeafAppearanceRate(System.Double)">
            <summary>Calculate Actual Area - adjusts potential growth </summary>
        </member>
        <member name="T:Models.PMF.Struct.Structure">
            <summary>
            The structure model simulates morphological development of the plant to inform the Leaf class 
            when and how many leaves and branches appear and provides an estimate of height.
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.thermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.finalLeafNumber">
            <summary>The main stem final node number</summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.branchingRate">
            <summary>Branching rate</summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.branchMortality">
            <summary>Branch mortality</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.CohortInitialisationStage">
            <summary>The Stage that cohorts are initialised on</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.LeafInitialisationStage">
            <summary>The Stage that leaves are initialised on</summary>
        </member>
        <member name="E:Models.PMF.Struct.Structure.InitialiseLeafCohorts">
            <summary>Occurs when plant Germinates.</summary>
        </member>
        <member name="E:Models.PMF.Struct.Structure.AddLeafCohort">
            <summary>Occurs when ever an new vegetative leaf cohort is initiated on the stem apex.</summary>
        </member>
        <member name="E:Models.PMF.Struct.Structure.LeafTipAppearance">
            <summary>Occurs when ever an new leaf tip appears.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.InitParams">
            <summary>The Leaf Appearance Data </summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.CohortToInitialise">
            <summary>CohortToInitialise</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TipToAppear">
            <summary>TipToAppear</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TimeForAnotherLeaf">
            <summary>Did another leaf appear today?</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.AllLeavesAppeared">
            <summary>Have all leaves appeared?</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.CohortParams">
            <summary>The Leaf Appearance Data </summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PrimaryBudNo">
            <summary>Gets or sets the primary bud no.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TotalStemPopn">
            <summary>Gets or sets the total stem popn.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PotLeafTipsAppeared">
            <summary>Number of mainstem nodes which have their tips appeared</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.LeafTipsAppeared">
            <summary>"Number of mainstem nodes which have their tips appeared"</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PlantTotalNodeNo">
            <summary>Number of leaves appeared per plant including all main stem and branch leaves</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.ProportionBranchMortality">
            <summary>Gets or sets the proportion branch mortality.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.ProportionPlantMortality">
            <summary>Gets or sets the proportion plant mortality.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.DeltaHaunStage">
            <value>The change in HaunStage each day.</value>
        </member>
        <member name="P:Models.PMF.Struct.Structure.DeltaTipNumber">
            <value>The delta node number.</value>
        </member>
        <member name="P:Models.PMF.Struct.Structure.BranchNumber">
            <summary>The number of branches, used by zadoc class for calcualting zadoc score in the 20's</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.NextLeafProportion">
            <summary>The relative size of the current cohort.  Is always 1.0 apart for the final cohort where it can be less than 1.0 if final leaf number is not an interger value</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.DeltaPlantPopulation">
            <summary> The change in plant population due to plant mortality set in the plant class </summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.MainStemPopn">
            <summary>"Number of mainstems per meter"</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.RemainingNodeNo">
            <summary>Number of leaves yet to appear</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.Height">
            <summary>Gets the height.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PrimaryBudTotalNodeNo">
            <summary>Number of appeared leaves per primary bud unit including all main stem and branch leaves</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.RelativeNodeApperance">
            <summary>Relative progress toward final leaf.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TotalLeavesPerShoot">
            <summary>Total number of leaves per shoot .</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the actual growth.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.DoLeafTipAppearance">
            <summary>Method that calculates parameters for leaf cohort to appear and then calls event so leaf calss can make cohort appear</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.DoLeafInitilisation">
            <summary> Called on the day of emergence to get the initials leaf cohorts to appear </summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.UpdateHeight">
            <summary>Updates the height.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.ResetStemPopn">
            <summary>Resets the stem popn.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.DoThin(System.Double)">
            <summary>Called when crop recieves a remove biomass event from manager</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.DoNodeRemoval(System.Int32)">
            <summary> Removes nodes from main-stem in defoliation event  </summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.Document">
            <summary>Document this model.</summary>
        </member>
        <member name="T:Models.PMF.Struct.DynamicTillering">
            <summary>
            This is a tillering method to control the number of tillers and leaf area
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.plant">
            <summary>The parent Plant</summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.culms">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.phenology">
            <summary>The parent tilering class</summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.leaf">
            <summary>The parent tilering class</summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.metData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.areaCalc">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.tillerSdIntercept">
            <summary> Propoensity to Tiller Intercept </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.tillerSdSlope">
            <summary> Propsenity to Tiller Slope </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.maxLAIForTillerAddition">
            <summary> LAI Value where tillers are no longer added </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.MaxDailyTillerReduction">
            <summary> LAI Value where tillers are no longer added </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.tillerSlaBound">
            <summary> LAI Value where tillers are no longer added </summary>
        </member>
        <member name="F:Models.PMF.Struct.DynamicTillering.slaMax">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="P:Models.PMF.Struct.DynamicTillering.CalculatedTillerNumber">
            <summary>Number of potential Fertile Tillers at harvest</summary>
        </member>
        <member name="P:Models.PMF.Struct.DynamicTillering.FertileTillerNumber">
            <summary>Actual Number of Fertile Tillers</summary>
        </member>
        <member name="P:Models.PMF.Struct.DynamicTillering.SupplyDemandRatio">
            <summary>Supply Demand Ratio used to calculate Tiller No</summary>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.CalcLeafNumber">
            <summary> Calculate number of leaves</summary>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.InitiateTiller(System.Int32,System.Double,System.Double)">
            <summary>
            Add a tiller.
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.AddTillerProportion(System.Double)">
            <summary>
            Add a tiller.
            </summary>
            <param name="fractionToAdd"></param>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.CalcPotentialLeafArea">
            <summary> calculate the potential leaf area</summary>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.CalcActualLeafArea(System.Double)">
            <summary> calculate the actual leaf area</summary>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.calcCurrentSLA(System.Double)">
            <summary>
            Calculate SLA for leafa rea including potential new growth - stressess effect
            </summary>
            <param name="stressedLAI"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.DynamicTillering.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sowed</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Struct.FixedTillering">
            <summary>
            This is a tillering method to control the number of tillers and leaf area
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.plant">
            <summary>The parent Plant</summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.clock">
            <summary>
            Link to clock (used for FTN calculations at time of sowing).
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.weather">
            <summary>
            Link to weather.
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.culms">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.leaf">
            <summary> Leaf organ</summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.areaCalc">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.slaMax">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.Struct.FixedTillering.phenology">
            <summary>The parent tilering class</summary>
        </member>
        <member name="P:Models.PMF.Struct.FixedTillering.FertileTillerNumber">
            <summary>Number of Fertile Tillers at Harvest</summary>
        </member>
        <member name="M:Models.PMF.Struct.FixedTillering.CalcLeafNumber">
            <summary> Calculate number of leaves</summary>
        </member>
        <member name="M:Models.PMF.Struct.FixedTillering.CalcPotentialLeafArea">
            <summary> Calculate the potential leaf area for the tillers</summary>
        </member>
        <member name="M:Models.PMF.Struct.FixedTillering.CalcActualLeafArea(System.Double)">
            <summary> Calculate actual area - which is constrained by the SLA of the leaf</summary>
        </member>
        <member name="M:Models.PMF.Struct.FixedTillering.AddTiller(System.Double,System.Double,System.Double)">
            <summary>
            Add a tiller.
            </summary>
            <param name="leafAtAppearance"></param>
            <param name="Leaves"></param>
            <param name="fractionToAdd"></param>
        </member>
        <member name="M:Models.PMF.Struct.FixedTillering.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sowed</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.C4LeafArea">
            <summary>
            This is the basic organ class that contains biomass structures and transfers
            </summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.plant">
            <summary>The parent Plant</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.culms">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.a0">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.a1">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.b0">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.b1">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.aX0">
            <summary>Largest Leaf Position as a percentage of Final Leaf No</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.aMaxS">
            <summary></summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.aMaxI">
            <summary>Senescence Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.leafNoCorrection">
            <summary>Senescence Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafArea.largestLeafPlateau">
            <summary>Senescence Calculation</summary>
        </member>
        <member name="M:Models.PMF.C4LeafArea.Value(System.Int32)">
            <summary> implement the IFunction interface - code is currently coupled to Leafculms
            Could be refactored to use an interface of Culms
            </summary>
        </member>
        <member name="M:Models.PMF.C4LeafArea.calcPotentialLeafArea(Models.PMF.Struct.LeafCulms)">
            <summary> Calculate the potential area for all culms</summary>
        </member>
        <member name="M:Models.PMF.C4LeafArea.CalculateIndividualLeafArea(System.Double,System.Double,System.Double)">
            <summary>Calculate potential LeafArea</summary>
        </member>
        <member name="M:Models.PMF.C4LeafArea.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sowed</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.C4LeafAreaM">
            <summary>
            This is the basic organ class that contains biomass structures and transfers
            </summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.plant">
            <summary>The parent Plant</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.culms">
            <summary> Culms on the leaf </summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.a0">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.a1">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.b0">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.b1">
            <summary>The Potential Area Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.aX0">
            <summary>Largest Leaf Position as a percentage of Final Leaf No</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.aMaxA">
            <summary></summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.aMaxB">
            <summary>Senescence Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.aMaxC">
            <summary>Senescence Calculation</summary>
        </member>
        <member name="F:Models.PMF.C4LeafAreaM.leafNoCorrection">
            <summary>Senescence Calculation</summary>
        </member>
        <member name="M:Models.PMF.C4LeafAreaM.Value(System.Int32)">
            <summary> implement the IFunction interface - code is currently coupled to Leafculms
            Could be refactored to use an interface of Culms
            </summary>
        </member>
        <member name="M:Models.PMF.C4LeafAreaM.calcPotentialLeafArea(Models.PMF.Struct.LeafCulms)">
            <summary> Calculate the potential area for all culms</summary>
        </member>
        <member name="M:Models.PMF.C4LeafAreaM.CalculateIndividualLeafArea(System.Double,System.Double,System.Double)">
            <summary>Calculate potential LeafArea</summary>
        </member>
        <member name="M:Models.PMF.C4LeafAreaM.OnPlantSowing(System.Object,Models.PMF.SowingParameters)">
            <summary>Called when crop is sowed</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PostSimulationTools.ExcelInput">
            <summary>
            Reads the contents of a specific sheet from an EXCEL file and stores into the DataStore. 
            </summary>
        </member>
        <member name="F:Models.PostSimulationTools.ExcelInput.storage">
            <summary>
            The DataStore.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.FileNames">
            <summary>
            Gets or sets the file name to read from.
            </summary>
        </member>
        <member name="F:Models.PostSimulationTools.ExcelInput.sheetNames">
            <summary>
            List of Excel sheet names to read from.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.SheetNames">
            <summary>
            Gets or sets the list of EXCEL sheet names to read from.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.GetReferencedFileNames">
            <summary>Return our input filenames</summary>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.RemovePathsFromReferencedFileNames">
            <summary>Remove all paths from referenced filenames.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.Run">
            <summary>
            Main run method for performing our calculations and storing data.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.TruncateDates(System.Data.DataTable)">
            <summary>
            If the data table contains DateTime fields, convert them to hold
            only the "Date" portion, and not the "Time" within the day.
            We do this because in estatablishing PredictedObserved connections,
            we commonly use the DateTime fields, but are (currently) only 
            interested in the Date.
            WARNING: This could potentially cause issues in the future, especially
            if we begin to make use of sub-day model steps.
            </summary>
            <param name="table">Table to be adjusted</param>
        </member>
        <member name="T:Models.PostSimulationTools.Filter">
            <summary>
            This is a post simulation tool that lets the user filter the rows of a source data table.
            </summary>
        </member>
        <member name="F:Models.PostSimulationTools.Filter.dataStore">
            <summary>Link to datastore</summary>
        </member>
        <member name="P:Models.PostSimulationTools.Filter.SourceTableName">
            <summary>The name of the source table name.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.Filter.FilterString">
            <summary>The row filter.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.Filter.ColumnFilter">
            <summary>The row filter.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.Filter.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="T:Models.PostSimulationTools.Input">
            <summary>
            Reads the contents of a file (in apsim format) and stores into the DataStore. 
            If the file has a column name of 'SimulationName' then this model will only input data for those rows
            where the data in column 'SimulationName' matches the name of the simulation under which
            this input model sits. 
            
            If the file does NOT have a 'SimulationName' column then all data will be input.
            </summary>
        </member>
        <member name="F:Models.PostSimulationTools.Input.storage">
            <summary>
            The DataStore.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Input.FileNames">
            <summary>
            Gets or sets the file name to read from.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Input.FullFileNames">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.GetReferencedFileNames">
            <summary>Return our input filenames</summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.RemovePathsFromReferencedFileNames">
            <summary>Remove all paths from referenced filenames.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.Run">
            <summary>
            Main run method for performing our calculations and storing data.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.GetTable(System.String)">
            <summary>
            Return a datatable for this input file. Returns null if no data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.PostSimulationTools.ParallelPostSimulationTool">
            <summary>
            This is a post-simulation tool which will run all child post-simulation
            tools in parallel.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.ParallelPostSimulationTool.Run">
            <summary>
            Run the post-simulation tool.
            </summary>
        </member>
        <member name="T:Models.PostSimulationTools.PredictedObserved">
            <summary>
            Reads the contents of a file (in apsim format) and stores into the DataStore.
            If the file has a column name of 'SimulationName' then this model will only input data for those rows
            where the data in column 'SimulationName' matches the name of the simulation under which
            this input model sits.
            If the file does NOT have a 'SimulationName' column then all data will be input.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.PredictedTableName">
            <summary>Gets or sets the name of the predicted table.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.ObservedTableName">
            <summary>Gets or sets the name of the observed table.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.FieldNameUsedForMatch">
            <summary>Gets or sets the field name used for match.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.FieldName2UsedForMatch">
            <summary>Gets or sets the second field name used for match.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.FieldName3UsedForMatch">
            <summary>Gets or sets the third field name used for match.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.AllColumns">
            <summary>
            Normally, the only columns added to the PredictedObserved table are
            those which exist in both predicted and observed tables. If this is
            checked, all columns from both tables will be added to the
            PredictedObserved table.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.PredictedObserved.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.PredictedObserved.CommonColumns">
            <summary>
            Returns all columns which exist in both predicted and observed tables.
            </summary>
        </member>
        <member name="T:Models.PostSimulationTools.Probability">
            <summary>
            A post processing model that creates a probability table.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Probability.TableName">
            <summary>
            Gets or sets the name of the predicted/observed table name.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Probability.Exceedence">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Models.PostSimulationTools.Probability"/> is exceedence.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Probability.FieldToSplitOn">
            <summary>
            The field name the probability function should split series on.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.Probability.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="T:Models.PostSimulationTools.SerialPostSimulationTool">
            <summary>
            This is a post-simulation tool which will run all child post-simulation
            tools serially.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.SerialPostSimulationTool.Run">
            <summary>
            Run the post-simulation tool.
            </summary>
        </member>
        <member name="T:Models.PostSimulationTools.SimulationStats">
            <summary>
            A post processing model that produces simulation stats.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.TableName">
            <summary>Source table name.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.FieldNamesToSplitOn">
            <summary>The fields to split on.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcCount">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcTotal">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcMean">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcMedian">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcMin">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcMax">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcStdDev">
            <summary>.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.SimulationStats.CalcPercentiles">
            <summary>.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.SimulationStats.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.SimulationStats.GetRowFilters(System.Data.DataTable)">
            <summary>
            Get a list of row filters that define the blocks of data that we have 
            to calculate stats for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.PostSimulationTools.SimulationStats.CreateRowFilter(System.Collections.Generic.List{System.String},System.Data.DataTable)">
            <summary>
            Create a row filter for the specified set of values for the split fields
            </summary>
            <param name="permutation"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PostSimulationTools.SimulationStats.CalculateStatsForDataView(System.Data.DataRow,System.Collections.Generic.List{System.String},System.Data.DataView)">
            <summary>
            Calculate stats for a given data view and store them in a data row.
            </summary>
            <param name="row">The row to store the stats in.</param>
            <param name="columnNames">The column names to calculate stats for.</param>
            <param name="view">The data view to use.</param>
        </member>
        <member name="T:Models.PostSimulationTools.TableExpression">
            <summary>
            This is a post simulation tool that lets the user write an expression using 
            simulation names from a source datatable to produce a new dataset to store in the datastore.
            </summary>
            <remarks>
            For example There are two simulations (ambient and elevated co2) in a table.
            Calculate a new table that shows the difference in growth between the two situations
            expressed as a percentage (ELEV-AMB)/AMB is XX%
            The expression string for this would be:
                (ElevatedCO2-AmbientCO2)/AmbientCO2*100
            where ElevatedCO2 and AmbientCO2 are the names of the simulations in the
            source data table.
            This model matches dates so it assumes that there is a Clock.Today field.
            </remarks>
        </member>
        <member name="F:Models.PostSimulationTools.TableExpression.dataStore">
            <summary>Link to datastore</summary>
        </member>
        <member name="P:Models.PostSimulationTools.TableExpression.SourceTableName">
            <summary>The name of the source table name.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.TableExpression.Expression">
            <summary>The expression.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.TableExpression.FieldNameToMatchOn">
            <summary>The field name to match on.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.TableExpression.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.TableExpression.FillVariableNamesInExpression(APSIM.Shared.Utilities.ExpressionEvaluator,System.Data.DataTable)">
            <summary>
            Give values from the source data for all variable names in the expression.
            </summary>
            <param name="expression">The expression evaluator.</param>
            <param name="sourceData">The source data.</param>
        </member>
        <member name="F:Models.PostSimulationTools.TableExpression.Data.filter">
            <summary>Data filter.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.TableExpression.Data.#ctor(System.Data.DataTable,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceData">The source data.</param>
            <param name="simulationName">The simulation name.</param>
        </member>
        <member name="M:Models.PostSimulationTools.TableExpression.Data.GetValues(System.String)">
            <summary>Get a list of values for a field.</summary>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:Models.PostSimulationTools.TableExpression.Data.GetDoubleValues(System.String)">
            <summary>Get a list of values for a field.</summary>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="T:Models.PostSimulationTools.TimeSeriesStats">
            <summary>
            A post processing model that produces time series stats.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.TimeSeriesStats.TableName">
            <summary>
            Gets or sets the name of the predicted/observed table name.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.TimeSeriesStats.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.TimeSeriesStats.CalcStatsRow(System.Data.DataView,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Calculate stats on the 'view' passed in and add a DataRow to 'statsData'
            </summary>
            <param name="view">The data view to calculate stats on</param>
            <param name="observedColumnName">The observed column name to use</param>
            <param name="predictedColumnName">The predicted column name to use</param>
            <param name="seriesName">The name of the series</param>
            <param name="statsData">The stats data table to add rows to</param>
        </member>
        <member name="T:Models.PostSimulationTools.WriteTableToSqlServer">
            <summary>
            A post processing model that send one or more tables from the DataStore to 
            a SQLServer database.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.WriteTableToSqlServer.ConnectionString">
            <summary>Connection string.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.WriteTableToSqlServer.TableNames">
            <summary>The name(s) of the tables to write to an SQLServer database.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.WriteTableToSqlServer.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.WriteTableToSqlServer.CreateTableIfNotExists(System.Data.SqlClient.SqlConnection,System.Data.DataTable)">
            <summary>Create a new table if it doesn't already exist.</summary>
            <param name="connection">Database connection.</param>
            <param name="table">The table.</param>
        </member>
        <member name="M:Models.PostSimulationTools.WriteTableToSqlServer.GetTableNames(System.Data.SqlClient.SqlConnection)">
            <summary>Return a list of table names</summary>
            <param name="connection">Database connection.</param>
        </member>
        <member name="M:Models.PostSimulationTools.WriteTableToSqlServer.GetDBDataTypeName(System.Type)">
            <summary>Convert .NET type into an SQLServer type</summary>
            <param name="type">The .NET type</param>
        </member>
        <member name="M:Models.PostSimulationTools.WriteTableToSqlServer.CreateInsertSQL(System.String,System.Collections.Generic.List{System.String})">
            <summary>Create an SQL insert statement with parameters.</summary>
            <param name="tableName">The name of the table.</param>
            <param name="columnNames">The column names</param>
        </member>
        <member name="M:Models.PostSimulationTools.WriteTableToSqlServer.BindParametersAndRunQuery(System.Data.SqlClient.SqlCommand,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Bind all parameters values to the specified command and execute it.</summary>
            <param name="command">The SQL command.</param>
            <param name="columnNames">The column names.</param>
            <param name="values">The row values.</param>
        </member>
        <member name="M:Models.DateReportFrequency.TryParse(System.String,Models.Report,Models.Core.IEvent)">
            <summary>
            Try and parse a frequency line and return an instance of a IReportFrequency.
            </summary>
            <param name="line">The line to parse.</param>
            <param name="report">An instance of a report model.</param>
            <param name="events">An instance of an events publish/subcribe interface.</param>
            <returns>true if line was able to be parsed.</returns>
        </member>
        <member name="M:Models.DateReportFrequency.#ctor(Models.Report,Models.Core.IEvent,System.String)">
            <summary>
            Private constructor.
            </summary>
            <param name="report">An instance of the report model.</param>
            <param name="events">An instance of an event publish/subscribe engine.</param>
            <param name="dateString">A string representation of a date.</param>
        </member>
        <member name="M:Models.DateReportFrequency.OnDoReport(System.Object,System.EventArgs)">
            <summary>An event handler called at the end of each day.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.DateReportFrequency.OnEndOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Disconnect event handlers when the simulation finishes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Models.EventReportFrequency.TryParse(System.String,Models.Report,Models.Core.IEvent)">
            <summary>
            Try and parse a frequency line and return an instance of a IReportFrequency.
            </summary>
            <param name="line">The line to parse.</param>
            <param name="report">An instance of a report model.</param>
            <param name="events">An instance of an events publish/subcribe interface.</param>
            <returns>true if line was able to be parsed.</returns>
        </member>
        <member name="M:Models.EventReportFrequency.#ctor(Models.Report,Models.Core.IEvent,System.String)">
            <summary>
            Private constructor.
            </summary>
            <param name="report">An instance of the report model.</param>
            <param name="events">An instance of an event publish/subscribe engine.</param>
            <param name="eventName">The name of the event to subscribe to.</param>
        </member>
        <member name="M:Models.EventReportFrequency.OnEvent(System.Object,System.EventArgs)">
            <summary>Called when the event is published.</summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Models.EventReportFrequency.OnEndOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Disconnect event handlers when the simulation finishes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Models.ExpressionReportFrequency.TryParse(System.String,Models.Report,Models.Core.IEvent,Models.Core.ScriptCompiler)">
            <summary>
            Try and parse a frequency line and return an instance of a IReportFrequency.
            </summary>
            <param name="line">The line to parse.</param>
            <param name="report">An instance of a report model.</param>
            <param name="events">An instance of an events publish/subcribe interface.</param>
            <param name="compiler">An instance of a c# compiler.</param>
            <returns>true if line was able to be parsed.</returns>
        </member>
        <member name="M:Models.ExpressionReportFrequency.#ctor(Models.Report,Models.Core.IEvent,Models.Functions.IBooleanFunction)">
            <summary>
            Private constructor.
            </summary>
            <param name="report">An instance of the report model.</param>
            <param name="events">An instance of an event publish/subscribe engine.</param>
            <param name="expressionFunction">The expression to evaluate</param>
        </member>
        <member name="M:Models.ExpressionReportFrequency.OnDoReport(System.Object,System.EventArgs)">
            <summary>An event handler called at the end of each day.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.ExpressionReportFrequency.OnEndOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Disconnect event handlers when the simulation finishes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:Models.IReportColumn">
            <summary>An interface for a column in a report table.</summary>
        </member>
        <member name="P:Models.IReportColumn.Name">
            <summary>Name of column.</summary>
        </member>
        <member name="P:Models.IReportColumn.Units">
            <summary>Units of measurement</summary>
        </member>
        <member name="M:Models.IReportColumn.GetValue(System.Int32)">
            <summary>Retrieve the current value.</summary>
            <param name="groupNumber">The group number to retrieve the value for.</param>
        </member>
        <member name="P:Models.IReportColumn.NumberOfGroups">
            <summary>Gets the number of groups.</summary>
        </member>
        <member name="T:Models.Report">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="F:Models.Report.compiler">
            <summary>Link to script compiler.</summary>
        </member>
        <member name="P:Models.Report.Columns">
            <summary>The columns to write to the data store.</summary>
        </member>
        <member name="F:Models.Report.dataToWriteToDb">
            <summary>The data to write to the data store.</summary>
        </member>
        <member name="F:Models.Report.simulation">
            <summary>Link to a simulation</summary>
        </member>
        <member name="F:Models.Report.clock">
            <summary>Link to a clock model.</summary>
        </member>
        <member name="F:Models.Report.storage">
            <summary>Link to a storage service.</summary>
        </member>
        <member name="F:Models.Report.locator">
            <summary>Link to a locator service.</summary>
        </member>
        <member name="F:Models.Report.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="F:Models.Report.ActiveTabIndex">
            <summary>
            Temporarily stores which tab is currently displayed.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="P:Models.Report.VariableNames">
            <summary>
            Gets or sets variable names for outputting
            </summary>
        </member>
        <member name="P:Models.Report.EventNames">
            <summary>
            Gets or sets event names for outputting
            </summary>
        </member>
        <member name="P:Models.Report.DayAfterLastOutput">
            <summary>
            Date of the day after last time report did write to storage.
            </summary>
        </member>
        <member name="P:Models.Report.GroupByVariableName">
            <summary>Group by variable name.</summary>
        </member>
        <member name="M:Models.Report.OnFinalInitialise(System.Object,System.EventArgs)">
            <summary>
            Connect event handlers.
            </summary>
            <param name="sender">Sender object..</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.Report.OnConnectToEvents(System.Object,System.EventArgs)">
            <summary>
            Connect event handlers.
            </summary>
            <param name="sender">Sender object..</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Models.Report.SubscribeToEvents">
            <summary>
            Subscribe to events provided
            </summary>
        </member>
        <member name="M:Models.Report.TidyUpEventNames">
            <summary>
            Sanitises the event names and removes duplicates/comments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Report.TidyUpVariableNames">
            <summary>
            Sanitises the variable names and removes duplicates/comments.
            </summary>
        </member>
        <member name="M:Models.Report.OnCompleted(System.Object,System.EventArgs)">
            <summary>Invoked when a simulation is completed.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Report.DoOutput">
            <summary>A method that can be called by other models to perform a line of output.</summary>
        </member>
        <member name="M:Models.Report.WriteAllTables(Models.Storage.IDataStore,System.String)">
            <summary>Create a text report from tables in this data store.</summary>
            <param name="storage">The data store.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Models.Report.SortColumnsOfDataTable(System.Data.DataTable)">
            <summary>Sort the columns alphabetically</summary>
            <param name="table">The table to sort</param>
        </member>
        <member name="M:Models.Report.DoOutputEvent(System.Object,System.EventArgs)">
            <summary>Called when one of our 'EventNames' events are invoked</summary>
        </member>
        <member name="M:Models.Report.FindVariableMembers">
            <summary>
            Fill the Members list with VariableMember objects for each variable.
            </summary>
        </member>
        <member name="M:Models.Report.FindFromTo(System.String@,System.String@)">
            <summary>
            Find and return a from and to clause in a variable.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Models.Report.AddExperimentFactorLevels">
            <summary>Add the experiment factor levels as columns.</summary>
        </member>
        <member name="M:Models.Report.StoreFactorsInDataStore">
            <summary>Store descriptors in DataStore.</summary>
        </member>
        <member name="T:Models.ReportColumn">
            <summary>
            A class for looking after a column of output. A column will store a value 
            each time it is told to do so (by calling StoreValue method). This value
            can be a scalar, an array of scalars, a structure, or an array of structures.
            It can handle array sizes changing through a simulation. 
            It "flattens" arrays and structures
            e.g. if the variable is sw_dep and has 3 elements then
                 Names -> sw_dep(1), sw_dep(2), sw_dep(3)
                 Types ->    double,    double,    double
            e.g. if the variable is a struct {double A; double B; double C;}
                 Names -> struct.A, struct.B, struct.C
                 
            # Features
            - 
            
            ## Aggregation
            
            Syntax:
            
            *function* of *variable* from *date* to *date*
            
            *function* can be any of the following:
            
            - sum
            - mean
            - min
            - max
            - first
            - last
            - diff
            
            *variable* is any valid reporting variable.
            
            There are three ways to specify aggregation dates:
            
            1. Fixed/static date
            
            Description
            
            e.g. 1-Jan, 1/1/2012, etc.
            
            2. Apsim variable
            
            The date can point to any Apsim variable which is of type DateTime.
            
            e.g. [Clock].StartDate, [Clock].Today, [Report].LastReportDate, etc.
            
            3. Apsim event
            
            The date can point to any Apsim event.
            
            e.g. [Clock].StartOfYear, [Wheat].Harvesting, etc.
            
            </summary>
            <remarks>
            Need tests for:
            
            1. All permutations of date specification types with all types of aggregation.
            
            </remarks>
        </member>
        <member name="F:Models.ReportColumn.locator">
            <summary>An instance of a locator service.</summary>
        </member>
        <member name="F:Models.ReportColumn.inCaptureWindow">
            <summary>Are we in the capture window?</summary>
        </member>
        <member name="F:Models.ReportColumn.fromHasNoYear">
            <summary>True when from field has no year specified.</summary>
        </member>
        <member name="F:Models.ReportColumn.toHasNoYear">
            <summary>The to field has no year specified.</summary>
        </member>
        <member name="F:Models.ReportColumn.clock">
            <summary>Reference to the clock model.</summary>
        </member>
        <member name="F:Models.ReportColumn.events">
            <summary>Reference to the events model.</summary>
        </member>
        <member name="F:Models.ReportColumn.variableName">
            <summary>The full name of the variable we are retrieving from APSIM.</summary>
        </member>
        <member name="F:Models.ReportColumn.aggregationFunction">
            <summary>The aggregation function.</summary>
        </member>
        <member name="F:Models.ReportColumn.groupByName">
            <summary>The full name of the group by variable.</summary>
        </member>
        <member name="F:Models.ReportColumn.fromString">
            <summary>From string.</summary>
        </member>
        <member name="F:Models.ReportColumn.toString">
            <summary>To string.</summary>
        </member>
        <member name="F:Models.ReportColumn.fromVariable">
            <summary>Variable containing a reference to the aggregation start date.</summary>
        </member>
        <member name="F:Models.ReportColumn.toVariable">
            <summary>Variable containing a reference to the aggregation end date.</summary>
        </member>
        <member name="F:Models.ReportColumn.groups">
            <summary>The variable groups containing the variable values.</summary>
        </member>
        <member name="M:Models.ReportColumn.#ctor(System.String,Models.IClock,Models.Core.ILocator,Models.Core.IEvent,System.String,System.String,System.String)">
            <summary>
            Constructor for an aggregated column.
            </summary>
            <param name="reportLine">The entire line directory from report.</param>
            <param name="clock">An instance of a clock model</param>
            <param name="locator">An instance of a locator service</param>
            <param name="events">An instance of an events service</param>
            <param name="groupByVariableName">Group by variable name.</param>
            <param name="from">From clause to use.</param>
            <param name="to">To clause to use.</param>
            <returns>The newly created ReportColumn</returns>
        </member>
        <member name="P:Models.ReportColumn.Units">
            <summary>
            Units as specified in the descriptor.
            </summary>
        </member>
        <member name="P:Models.ReportColumn.Name">
            <summary>
            The column heading.
            </summary>
        </member>
        <member name="P:Models.ReportColumn.NumberOfGroups">
            <summary>Retrieve the current value for the specified group number to be stored in the report.</summary>
        </member>
        <member name="M:Models.ReportColumn.GetValue(System.Int32)">
            <summary>
            Retrieve the current value to be stored in the report.
            </summary>
        </member>
        <member name="M:Models.ReportColumn.StoreValue">
            <summary>Store a value.</summary>
        </member>
        <member name="M:Models.ReportColumn.ParseReportLine(System.String)">
            <summary>
            Parse a report variable line.
            </summary>
            <remarks>
            A descriptor is passed in that describes what the column represents.
            The syntax of this descriptor is:
            Evaluate TypeOfAggregation of APSIMVariable/Expression [from Event/Date to Event/Date] as OutputLabel [Units]
            -    TypeOfAggregation – Sum, Mean, Min, Max, First, Last, Diff, (others?) (see below)
            -    APSIMVariable/Expression – APSIM output variable or an expression (see below)
            -    Event/Date – optional, an events or dates to begin and end the aggregation 
            -    OutputLabel – the label to use in the output file
            -    Units – optional, the label to use in the output file
            TypeOfAggregation
            -    Sum – arithmetic summation over  the aggregation period
            -    Mean – arithmetic average over  the aggregation period
            -    Min – minimum value during the aggregation period
            -    Max – maximum value during the aggregation period
            -    First – first or earliest value during the aggregation period
            -    Last – last or latest value during the aggregation period
            -    Diff – difference in the value of the variable or expression from the beginning to the end
            -    StdDev - sample standard deviation
            APSIMVariable
            -    Any output variable or single array element (e.g. sw_dep(1)) from any APSIM module
            Expression
            -    Needs lots of explanation so see more below
            Event or Date
            -    Any APSIM event (e.g. ‘sowing’) or date (e.g. ‘31-Dec’, ’15-Jan-2001’)
            -    Events are acted on immediately that they are triggered
            -    A ‘from’ date is assumed to be at the beginning of the day and a ‘to’ date is assumed to be at the end of the day
            -    These are optional.  If omitted then the aggregation is assumed to coincide with the reporting interval
            OutputLabel
            -    The label to use in the output file
            Units
            -    The units (e.g. ‘mm’) to use in the output file
            -    This is optional.  If omitted then the units will appear are ‘()’
            </remarks>
            <param name="descriptor">A column descriptor</param>
            <returns>The successful RegEx match instance.</returns>
        </member>
        <member name="M:Models.ReportColumn.Initialise(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialise the column instance.
            </summary>
            <param name="aggFunction">The aggregation function.</param>
            <param name="varName">The name of the variable to get from APSIM.</param>
            <param name="on">The collection event.</param>
            <param name="alias">The alias.</param>
            <param name="from">The from variable.</param>
            <param name="to">The to variable.</param>
        </member>
        <member name="M:Models.ReportColumn.OnEndOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Disconnect event handlers when the simulation finishes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Models.ReportColumn.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>
            Invoked at the start of day.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.ReportColumn.OnFromEvent(System.Object,System.EventArgs)">
            <summary>
            Invoked when the from event is invoked or when today is the from date.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.ReportColumn.OnToEvent(System.Object,System.EventArgs)">
            <summary>Invoked when the to event is invoked or when today is the to date.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.ReportColumn.OnDoReportCalculations(System.Object,System.EventArgs)">
            <summary>
            Called once per day. Stores values for aggregation.
            Note: this could be called before or after reporting occurs.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Models.ReportColumnConstantValue">
            <summary>A class for outputting a constant value in a report column.</summary>
        </member>
        <member name="P:Models.ReportColumnConstantValue.Name">
            <summary>The column name for the constant</summary>
        </member>
        <member name="P:Models.ReportColumnConstantValue.Units">
            <summary>The column name for the constant</summary>
        </member>
        <member name="F:Models.ReportColumnConstantValue.value">
            <summary>The constant value</summary>
        </member>
        <member name="M:Models.ReportColumnConstantValue.#ctor(System.String,System.Object,System.String)">
            <summary>
            Constructor for a plain report variable.
            </summary>
            <param name="columnName">The column name to write to the output</param>
            <param name="units">Units of measurement</param>
            <param name="constantValue">The constant value</param>
        </member>
        <member name="M:Models.ReportColumnConstantValue.GetValue(System.Int32)">
            <summary>Retrieve the current value</summary>
        </member>
        <member name="P:Models.ReportColumnConstantValue.NumberOfGroups">
            <summary>Retrieve the current value for the specified group number to be stored in the report.</summary>
        </member>
        <member name="T:Models.VariableGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.VariableGroup.locator">
            <summary>An instance of a locator service.</summary>
        </member>
        <member name="F:Models.VariableGroup.valuesToAggregate">
            <summary>The values for each report event (e.g. daily) for a group.</summary>
        </member>
        <member name="F:Models.VariableGroup.variableName">
            <summary>The full name of the variable we are retrieving from APSIM.</summary>
        </member>
        <member name="F:Models.VariableGroup.aggregationFunction">
            <summary>The aggregation (e.g. sum) to apply to the values in each group.</summary>
        </member>
        <member name="M:Models.VariableGroup.#ctor(Models.Core.ILocator,System.Object,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="locatorInstance">An instance of a locator service</param>
            <param name="valueOfGroupBy">The full name of the group by variable.</param>
            <param name="varName">The full name of the variable we are retrieving from APSIM.</param>
            <param name="aggFunction">The aggregation (e.g. sum) to apply to the values in each group.</param>
        </member>
        <member name="P:Models.VariableGroup.GroupByValue">
            <summary>The value full name of the group by variable.</summary>
        </member>
        <member name="M:Models.VariableGroup.StoreValue">
            <summary>Stores a value into the values array.</summary>
        </member>
        <member name="M:Models.VariableGroup.GetValue">
            <summary>Retrieve the current value to be stored in the report.</summary>
        </member>
        <member name="M:Models.VariableGroup.Clear">
            <summary>Clear the values.</summary>
        </member>
        <member name="M:Models.VariableGroup.ApplyAggregation">
            <summary>Apply the aggregation function if necessary to the list of values we have stored.</summary>
        </member>
        <member name="T:Models.FactorialAnova">
            <summary>
            Encapsulates a factorial ANOVA parameter sensitivity analysis.
            </summary>
        </member>
        <member name="P:Models.FactorialAnova.Outputs">
            <summary>
            List of analysis outputs
            </summary>
        </member>
        <member name="P:Models.FactorialAnova.Inputs">
            <summary>
            List of analysis inputs
            </summary>
        </member>
        <member name="F:Models.FactorialAnova.id">
            <summary>
            This ID is used to identify temp files used by this Factorial ANOVA method.
            </summary>
            <remarks>
            Without this, analyses run in paralel could overwrite each other's
            temp files, as the temp files would have the same name.
            </remarks>
        </member>
        <member name="M:Models.FactorialAnova.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.FactorialAnova.Tables">
            <summary>
            Gets or sets the table of values.
            </summary>
        </member>
        <member name="M:Models.FactorialAnova.Run">
            <summary>Main run method for performing our post simulation calculations</summary>
        </member>
        <member name="M:Models.FactorialAnova.RunR(System.String)">
            <summary>
            Runs the R script.
            </summary>
        </member>
        <member name="M:Models.FactorialAnova.GetTempFileName(System.String,System.String)">
            <summary>
            Returns a unique temporary filename.
            </summary>
            <param name="name">Base name of the file. The returned filename will contain this name.</param>
            <param name="extension">File extension to be used.</param>
            <returns>Unique temporary filename.</returns>
        </member>
        <member name="T:Models.Morris">
            <summary>
            Encapsulates a Morris analysis.
            </summary>
        </member>
        <member name="F:Models.Morris.allCombinations">
            <summary>A list of factors that we are to run</summary>
        </member>
        <member name="P:Models.Morris.ParameterValues">
            <summary>Parameter values coming back from R</summary>
        </member>
        <member name="P:Models.Morris.NumPaths">
            <summary>The number of paths to run</summary>
        </member>
        <member name="P:Models.Morris.NumIntervals">
            <summary>The number of intervals</summary>
        </member>
        <member name="P:Models.Morris.Jump">
            <summary>The jump parameter</summary>
        </member>
        <member name="P:Models.Morris.TableName">
            <summary>Name of table in DataStore to read from.</summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Morris.AggregationVariableName">
            <summary>The name of the variable to use to aggregiate each Morris analysis.</summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Morris.Parameters">
            <summary>
            List of parameters
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Morris.AggregationValues">
            <summary>
            List of aggregation values
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="F:Models.Morris.id">
            <summary>
            This ID is used to identify temp files used by this Morris method.
            </summary>
            <remarks>
            Without this, Morri run in paralel could overwrite each other's
            temp files, as the temp files would have the same name.
            </remarks>
        </member>
        <member name="M:Models.Morris.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.Morris.Tables">
            <summary>
            Gets or sets the table of values.
            </summary>
        </member>
        <member name="P:Models.Morris.ParametersHaveChanged">
            <summary>Have the values of the parameters changed?</summary>
        </member>
        <member name="M:Models.Morris.GenerateSimulationDescriptions">
            <summary>Gets a list of simulation descriptions.</summary>
        </member>
        <member name="M:Models.Morris.OnBeginRun(System.Object,System.EventArgs)">
            <summary>
            Invoked when a run is beginning.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Morris.CalculateFactors">
            <summary>
            Calculate factors that we need to run. Put combinations into allCombinations
            </summary>
        </member>
        <member name="P:Models.Morris.BaseSimulation">
            <summary>
            Gets the base simulation
            </summary>
        </member>
        <member name="M:Models.Morris.Run">
            <summary>Main run method for performing our post simulation calculations</summary>
        </member>
        <member name="M:Models.Morris.RunRToGetParameterValues">
            <summary>
            Get a list of parameter values that we are to run. Call R to do this.
            </summary>
        </member>
        <member name="M:Models.Morris.RunRPostSimulation(System.Data.DataTable,System.Data.DataTable@,System.Data.DataTable@)">
            <summary>
            Get a list of parameter values that we are to run. Call R to do this.
            </summary>
        </member>
        <member name="M:Models.Morris.GetMorrisRScript">
            <summary>
            Return the base R script for running morris.
            </summary>
        </member>
        <member name="M:Models.Morris.GetTempFileName(System.String,System.String)">
            <summary>
            Returns a unique temporary filename.
            </summary>
            <param name="name">Base name of the file. The returned filename will contain this name.</param>
            <param name="extension">File extension to be used.</param>
            <returns>Unique temporary filename.</returns>
        </member>
        <member name="T:Models.Sensitivity.Parameter">
            <summary>A encapsulation of a parameter to analyse</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.Name">
            <summary>Name of parameter</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.Path">
            <summary>Model path of parameter</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.LowerBound">
            <summary>Lower bound of parameter</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.UpperBound">
            <summary>Upper bound of parameter</summary>
        </member>
        <member name="T:Models.Sobol">
            <summary>
            Encapsulates a SOBOL parameter sensitivity analysis.
            </summary>
        </member>
        <member name="F:Models.Sobol.allCombinations">
            <summary>A list of factors that we are to run</summary>
        </member>
        <member name="P:Models.Sobol.ParameterValues">
            <summary>Parameter values coming back from R</summary>
        </member>
        <member name="P:Models.Sobol.X1">
            <summary>X1 values coming back from R</summary>
        </member>
        <member name="P:Models.Sobol.X2">
            <summary>X2 values coming back from R</summary>
        </member>
        <member name="P:Models.Sobol.NumPaths">
            <summary>The number of paths to run</summary>
        </member>
        <member name="P:Models.Sobol.TableName">
            <summary>Name of the table containing predicted data.</summary>
        </member>
        <member name="P:Models.Sobol.AggregationVariableName">
            <summary>The name of the variable to use to aggregiate each Morris analysis.</summary>
        </member>
        <member name="P:Models.Sobol.Parameters">
            <summary>
            List of parameters
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="F:Models.Sobol.id">
            <summary>
            This ID is used to identify temp files used by this Sobol model.
            </summary>
            <remarks>
            Without this, Sobols run in paralel could overwrite each other's
            temp files, as the temp files would have the same name.
            </remarks>
        </member>
        <member name="M:Models.Sobol.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.Sobol.Tables">
            <summary>
            Gets or sets the table of values.
            </summary>
        </member>
        <member name="P:Models.Sobol.ParametersHaveChanged">
            <summary>Have the values of the parameters changed?</summary>
        </member>
        <member name="M:Models.Sobol.GenerateSimulationDescriptions">
            <summary>Gets a list of simulation descriptions.</summary>
        </member>
        <member name="M:Models.Sobol.OnBeginRun(System.Object,System.EventArgs)">
            <summary>
            Invoked when a run is beginning.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Sobol.CalculateFactors">
            <summary>
            Calculate factors that we need to run. Put combinations into allCombinations
            </summary>
        </member>
        <member name="P:Models.Sobol.BaseSimulation">
            <summary>
            Gets the base simulation
            </summary>
        </member>
        <member name="M:Models.Sobol.Run">
            <summary>Main run method for performing our calculations and storing data.</summary>
        </member>
        <member name="M:Models.Sobol.RunR(System.String)">
            <summary>
            Get a list of parameter values that we are to run. Call R to do this.
            </summary>
        </member>
        <member name="M:Models.Sobol.GetSobolRScript">
            <summary>
            Return the base R script for running morris.
            </summary>
        </member>
        <member name="M:Models.Sobol.GetTempFileName(System.String,System.String)">
            <summary>
            Returns a unique temporary filename.
            </summary>
            <param name="name">Base name of the file. The returned filename will contain this name.</param>
            <param name="extension">File extension to be used.</param>
            <returns>Unique temporary filename.</returns>
        </member>
        <member name="T:Models.WaterModel.CNReductionForCover">
            <summary>Implements the curve number reduction caused by cover.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForCover.EffectiveCoverMultiplier">
            <summary>A multiplier to CoverTot to get effective cover for runoff.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForCover.canopies">
            <summary>A list of all canopies.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForCover.surfaceOrganicMatter">
            <summary>A link to SurfaceOrganicMatter</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForCover.CanopyHeights">
            <summary>Canopy heights. Used by EffectiveCoverMultipler.</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.Value(System.Int32)">
            <summary>Returns the value to subtract from curve number due to cover.</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.CalcCoverForRunoff">
            <summary>Calculate an effective cover that is used for runoff.</summary>
            <returns>The effective cover to use in the runoff calculations.</returns>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.addCover(System.Double,System.Double)">
            <summary>Combines two cover values.</summary>
            <param name="cover1">First cover (0-1).</param>
            <param name="cover2">Second cover (0-1).</param>
            <returns></returns>
        </member>
        <member name="T:Models.WaterModel.CNReductionForTillage">
            <summary>
            Implements the curve number reduction caused by tillage.
            Mark Littleboy's tillage effect on runoff (used in PERFECT v2.0)
            Littleboy, Cogle, Smith, Yule and Rao(1996).  Soil management and production
            of alfisols in the SAT's I. Modelling the effects of soil management on runoff
            and erosion.Aust.J.Soil Res. 34: 91-102.
            </summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForTillage.weather">
            <summary>Link to the weather component.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForTillage.cumWaterSinceTillage">
            <summary>The cumulated amount of rainfall since the tillage date.</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForTillage.tillageCnCumWater">
            <summary>The amount of rain required to cease curve number reduction.</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForTillage.tillageCnRed">
            <summary>The amount to reduce curve number by the day after tillage (0-100).</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForTillage.Value(System.Int32)">
            <summary>Returns the value to subtract from curve number due to tillage.</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForTillage.OnTillageCompleted(System.Object,Models.Soils.TillageType)">
            <summary>
            Called when a tillage event has occurred.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="tillageType">The type of tillage performed.</param>
        </member>
        <member name="M:Models.WaterModel.CNReductionForTillage.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called at the start of every day.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Models.WaterModel.UnitConversion">
            <summary>
            Handy unit conversions.
            </summary>
        </member>
        <member name="F:Models.WaterModel.UnitConversion.mm2m">
            <summary>mm to m</summary>
        </member>
        <member name="F:Models.WaterModel.UnitConversion.sm2smm">
            <summary>m2 to mm2</summary>
        </member>
        <member name="T:Models.WaterModel.EvaporationModel">
             <summary>
            Soil evaporation is assumed to take place in two stages: the constant and the falling rate stages. 
            
             In the first stage the soil is sufficiently wet for water to be transported to the surface at a rate 
             at least equal to the potential evaporation rate. Potential evapotranspiration is calculated using an 
             equilibrium evaporation concept as modified by Priestly and Taylor(1972).
            
             Once the water content of the soil has decreased below a threshold value the rate of supply from the soil 
             will be less than potential evaporation (second stage evaporation). These behaviors are described in SoilWater 
             through the use of two parameters: U and CONA.
            
             The parameter U (as from CERES) represents the amount of cumulative evaporation before soil supply decreases 
             below atmospheric demand. The rate of soil evaporation during the second stage is specified as a function of 
             time since the end of first stage evaporation. The parameter CONA (from PERFECT) specifies the change in 
             cumulative second stage evaporation against the square root of time.
             
                i.e. Es = CONA t^1/2^ 
            
             Water lost by evaporation is removed from the surface layer of the soil profile thus this layer can dry 
             below the wilting point or lower limit (LL) to a specified air-dry water content (air_dry). 
             
             ![Cumulative Soil Evaporation through time for U = 6 mm and CONA = 3.5.](CurveNumberCover.png) 
            
             For t &lt;=  t~1~
                Es = Eos
             For t &gt; t~1~
                Es = U x t + CONA x Sqrt(t-t~1~)
             </summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.waterBalance">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.sumes1">
            <summary>cumulative soil evaporation in stage 1 (mm)</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.sumes2">
            <summary>cumulative soil evaporation in stage 2 (mm)</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.t">
            <summary>time after 2nd-stage soil evaporation begins (d)</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.Eo">
            <summary>Atmospheric potential evaporation (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.Eos">
            <summary>Eo reduced due to shading (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.Es">
            <summary>Es - actual evaporation (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.CONA">
            <summary>CONA that was used.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.U">
            <summary>U that was used.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.Initialise">
            <summary>Reset the evaporation model.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.Calculate">
            <summary>Calculate soil evaporation.</summary>
            <returns></returns>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.IsSummer">
            <summary>Return true if simulation is in summer.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.CalcEo">
            <summary>Calculate the Eo (atmospheric potential)</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.soilwat2_eeq_fac">
            <summary>Calculate the Equilibrium Evaporation Rate</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.CalcEoReducedDueToShading">
            <summary>Calculate potential soil evap after modification for crop cover and residue weight.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.CalcEs">
            <summary>calculate actual evaporation from soil surface (es)</summary>
        </member>
        <member name="T:Models.WaterModel.LateralFlowModel">
             <summary>
             Lateral movement of water is calculated from a user specified lateral inflow ('InFlow'). 
             
             Lateral Outflow is the flow that occurs as a result of the soil water going above DUL and the soil being on a slope. So if there is no slope and the water goes above DUL there is no lateral outflow. KLAT is just the lateral resistance of the soil to this flow. It is a soil water conductivity.
            
             The calculation of lateral outflow on a layer basis is now performed using the equation: 
             Lateral flow for a layer = KLAT * d * s / (1 + s^2^)^0.5^ * L / A * unit conversions.
             Where: 
                 KLAT = lateral conductivity (mm/day)
                 d = depth of saturation in the layer(mm) = Thickness * (SW - DUL) / (SAT - DUL) if SW > DUL.
                 (Note this allows lateral flow in any "saturated" layer, not just those inside a water table.)
                 s = slope(m / m)
                 L = catchment discharge width. Basically, it's the width of the downslope boundary of the catchment. (m)
                 A = catchment area. (m^2^)
             
             NB. with Lateral Inflow it is assumed that ALL the water goes straight into the layer. 
             Irrespective of the layers ability to hold it. It is like an irrigation. 
             KLAT has no effect and does not alter the amount of water coming into the layer. 
             KLAT only alters the amount of water flowing out of the layer
             </summary>
        </member>
        <member name="F:Models.WaterModel.LateralFlowModel.soilWater">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.LateralFlowModel.field">
            <summary> The field. </summary>
        </member>
        <member name="F:Models.WaterModel.LateralFlowModel.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.InFlow">
            <summary>The amount of incoming water (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.OutFlow">
            <summary>The amount of outgoing water (mm).</summary>
        </member>
        <member name="M:Models.WaterModel.LateralFlowModel.Calculate">
            <summary>Perform the movement of water.</summary>
        </member>
        <member name="T:Models.WaterModel.RunoffModel">
             <summary>
             Runoff from rainfall is calculated using the USDA-Soil Conservation Service procedure known as the curve number technique. 
             The procedure uses total precipitation from one or more storms occurring on a given day to estimate runoff.
             The relation excludes duration of rainfall as an explicit variable, and so rainfall intensity is ignored.
             When irrigation is applied it can optionally be included in the runoff calculation. This flag (willRunoff) can be set
             when applying irrigation.
             
             ![Runoff response curves (ie runoff as a function of total daily rainfall) are specified by numbers from 0 (no runoff) to 100 (all runoff). Response curves for three runoff curve numbers for rainfall varying between 0 and 100 mm per day.](RunoffRainfallCurves.png)
             
             The user supplies a curve number for average antecedent rainfall conditions (CN2Bare). 
             From this value the wet (high runoff potential) response curve and the dry (low runoff potential) 
             response curve are calculated. The SoilWater module will then use the family of curves between these 
             two extremes for calculation of runoff depending on the daily moisture status of the soil. 
             The effect of soil moisture on runoff is confined to the effective hydraulic depth as specified in the 
             module's ini file and is calculated to give extra weighting to layers closer to the soil surface.
             ![Runoff response curves (ie runoff as a function of total daily rainfall) are specified by numbers from 0 (no runoff) to 100 (all runoff).](RunoffResponseCurve.png)
            
             ![Residue cover effect on runoff curve number where bare soil curve number is 75 and total reduction in curve number is 20 at 80% cover.](CurveNumberCover.png)
             
             Surface residues inhibit the transport of water across the soil surface during runoff events and so different 
             families of response curves are used according to the amount of crop and residue cover.The extent of the effect 
             on runoff is specified by a threshold surface cover (CNCov), above which there is no effect, and the corresponding 
             curve number reduction (CNRed). 
            
             Tillage of the soil surface also reduces runoff potential, and a similar modification of Curve Number is used to 
             represent this process. A tillage event is directed to the module, specifying cn_red, the CN reduction, and cn_rain, 
             the rainfall amount required to remove the tillage roughness. CN2 is immediately reduced and increases linearly with 
             cumulative rain, ie.roughness is smoothed out by rain. 
             </summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.summary">
            <summary>The summary file model.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.cnReductionForCover">
            <summary>A function for reducing CN due to cover.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.cnReductionForTillage">
            <summary>A function for reducing CN due to tillage.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.hydrolEffectiveDepth">
            <summary>Effective hydraulic depth (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.RunoffModel.TillageCnCumWater">
            <summary>Cumulative rainfall below which tillage reduces CN (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.RunoffModel.TillageCnRed">
            <summary>Reduction in CN due to tillage()</summary>
        </member>
        <member name="P:Models.WaterModel.RunoffModel.CumWaterSinceTillage">
            <summary>Running total of cumulative rainfall since last tillage event. Used for tillage CN reduction (mm).</summary>
        </member>
        <member name="M:Models.WaterModel.RunoffModel.Clear(System.Object,System.EventArgs)">
            <summary>
            Clear the model's state at the start of a simulation.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Models.WaterModel.RunoffModel.Value(System.Int32)">
            <summary>Calculate and return the runoff (mm).</summary>
        </member>
        <member name="M:Models.WaterModel.RunoffModel.RunoffWeightingFactor">
            <summary>
            Calculate the weighting factor hydraulic effectiveness used
            to weight the effect of soil moisture on runoff.
            </summary>
            <returns>Weighting factor for runoff</returns>
        </member>
        <member name="M:Models.WaterModel.RunoffModel.ShouldIStopTillageCNReduction">
            <summary>
            Accumulate rainfall for tillage cn reduction.
            The reduction in the runoff as a result of doing a tillage (tillage_cn_red) ceases after a set amount of rainfall (tillage_cn_rain).
            This function works out the accumulated rainfall since last tillage event, and turns off the reduction if it is over the amount of rain specified.
            </summary>
        </member>
        <member name="T:Models.WaterModel.SaturatedFlowModel">
            <summary>
            When water content in any layer is below SAT but above DUL, a fraction of the water drains to the next 
            deepest layer each day. 
            
            Flux = SWCON x (SW - DUL)
            
            Infiltration or water movement into any layer that exceeds the saturation capacity of the layer automatically 
            cascades to the next layer.
            </summary>
        </member>
        <member name="F:Models.WaterModel.SaturatedFlowModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.SaturatedFlowModel.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.WaterModel.SaturatedFlowModel.backedUpSurface">
            <summary>Amount of water (mm) backed up.</summary>
        </member>
        <member name="P:Models.WaterModel.SaturatedFlowModel.Values">
            <summary>Perform the movement of water.</summary>
        </member>
        <member name="T:Models.WaterModel.UnsaturatedFlowModel">
             <summary>
             For water contents below DUL, movement depends upon the water content gradient between adjacent layers and the diffusivity,
             which is a function of the average water contents of the two layers.
            
             Unsaturated flow may occur both towards the surface and downwards, but cannot move water out of the bottom of 
             the deepest layer in the profile. Flow between adjacent layers ceases at a soil water gradient (gravity_gradient) 
             specified in the SoilWater ini file.
            
             The diffusivity is defined by two parameters set by the user (diffus_const, diffus_slope) in the SoilWater 
             parameter set (Default values, from CERES, are 88 and 35.4, but 40 and 16 have been found to be more appropriate 
             for describing water movement in cracking clay soils). 
            
             Diffusivity = diffus_const x exp(diffus_slope x thet_av)
            
             where
                thet_av is the average of SW - LL15 across the two layers.
                Flow = Diffusivity x Volumetric Soil Water Gradient
             </summary>
        </member>
        <member name="F:Models.WaterModel.UnsaturatedFlowModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.UnsaturatedFlowModel.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.WaterModel.UnsaturatedFlowModel.Values">
            <summary>Calculate unsaturated flow below drained upper limit.</summary>
        </member>
        <member name="T:Models.WaterModel.WaterBalance">
             <summary>
             The SoilWater module is a cascading water balance model that owes much to its precursors in 
             CERES (Jones and Kiniry, 1986) and PERFECT(Littleboy et al, 1992). 
             The algorithms for redistribution of water throughout the soil profile have been inherited from 
             the CERES family of models.
            
             The water characteristics of the soil are specified in terms of the lower limit (ll15), 
             drained upper limit(dul) and saturated(sat) volumetric water contents. Water movement is 
             described using separate algorithms for saturated or unsaturated flow. It is notable that 
             redistribution of solutes, such as nitrate- and urea-N, is carried out in this module.
            
             Modifications adopted from PERFECT include:
             * the effects of surface residues and crop cover on modifying runoff and reducing potential soil evaporation,
             * small rainfall events are lost as first stage evaporation rather than by the slower process of second stage evaporation, and
             * specification of the second stage evaporation coefficient(cona) as an input parameter, providing more flexibility for describing differences in long term soil drying due to soil texture and environmental effects.
            
             The module is interfaced with SurfaceOrganicMatter and crop modules so that simulation of the soil water balance 
             responds to change in the status of surface residues and crop cover(via tillage, decomposition and crop growth).
            
             Enhancements beyond CERES and PERFECT include:
             * the specification of swcon for each layer, being the proportion of soil water above dul that drains in one day
             * isolation from the code of the coefficients determining diffusivity as a function of soil water
               (used in calculating unsaturated flow).Choice of diffusivity coefficients more appropriate for soil type have been found to improve model performance.
             * unsaturated flow is permitted to move water between adjacent soil layers until some nominated gradient in 
               soil water content is achieved, thereby accounting for the effect of gravity on the fully drained soil water profile.
            
             SoilWater is called by APSIM on a daily basis, and typical of such models, the various processes are calculated consecutively. 
             This contrasts with models such as SWIM that solve simultaneously a set of differential equations that describe the flow processes.
             </summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.soil">
            <summary>Link to the soil properties.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.lateralFlowModel">
            <summary>Link to the lateral flow model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.runoffModel">
            <summary>Link to the runoff model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.saturatedFlow">
            <summary>Link to the saturated flow model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.unsaturatedFlow">
            <summary>Link to the unsaturated flow model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.evaporationModel">
            <summary>Link to the evaporation model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.waterTableModel">
            <summary>Link to the water table model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.irrigations">
            <summary>Irrigation information.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.waterMM">
            <summary>Water content (mm).</summary>
        </member>
        <member name="F:Models.WaterModel.WaterBalance.waterVolumetric">
            <summary>Water content (mm/mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SummerDate">
            <summary>Start date for switch to summer parameters for soil water evaporation (dd-mmm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SummerU">
            <summary>Cummulative soil water evaporation to reach the end of stage 1 soil water evaporation in summer (a.k.a. U)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SummerCona">
            <summary>Drying coefficient for stage 2 soil water evaporation in summer (a.k.a. ConA)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.WinterDate">
            <summary>Start date for switch to winter parameters for soil water evaporation (dd-mmm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.WinterU">
            <summary>Cummulative soil water evaporation to reach the end of stage 1 soil water evaporation in winter (a.k.a. U).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.WinterCona">
            <summary>Drying coefficient for stage 2 soil water evaporation in winter (a.k.a. ConA)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.DiffusConst">
            <summary>Constant in the soil water diffusivity calculation (mm2/day)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.DiffusSlope">
            <summary>Effect of soil water storage above the lower limit on soil water diffusivity (/mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Salb">
            <summary>Fraction of incoming radiation reflected from bare soil</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.CN2Bare">
            <summary>Runoff Curve Number (CN) for bare soil with average moisture</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.CNRed">
            <summary>Gets or sets the cn red.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.CNCov">
            <summary>Gets or sets the cn cov.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.DischargeWidth">
            <summary>Basal width of the downslope boundary of the catchment for lateral flow calculations (m).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.CatchmentArea">
            <summary>Catchment area for later flow calculations (m2).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Depth">
            <summary>Depth strings. Wrapper around Thickness.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Thickness">
            <summary>Soil layer thickness for each layer (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Water">
            <summary>Amount of water in the soil (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SW">
            <summary>Amount of water in the soil (mm/mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Runon">
            <summary>Runon (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SoluteFluxEfficiency">
            <summary>The efficiency (0-1) that solutes move down with water.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SoluteFlowEfficiency">
            <summary>The efficiency (0-1) that solutes move up with water.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.PotentialInfiltration">
            <summary> This is set by Microclimate and is rainfall less that intercepted by the canopy and residue components </summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.LateralFlow">
            <summary>Lateral flow (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.LateralOutflow">
            <summary>Amount of water moving laterally out of the profile (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Runoff">
            <summary>Runoff (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Infiltration">
            <summary>Infiltration (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Drainage">
            <summary>Drainage (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SubsurfaceDrain">
            <summary>Subsurface drain (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Evaporation">
            <summary>Evaporation (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.WaterTable">
            <summary>Water table.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Flux">
            <summary>Flux. Water moving down (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Flow">
            <summary>Flow. Water moving up (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.PotentialRunoff">
            <summary>Gets todays potential runoff (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Properties">
            <summary>Provides access to the soil properties.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SWmm">
            <summary>Gets soil water content (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.ESW">
            <summary>Gets extractable soil water relative to LL15(mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Eos">
            <summary>Gets potential evaporation from soil surface (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Es">
            <summary>Gets the actual (realised) soil water evaporation (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.T">
            <summary>Time since start of second stage evaporation (days).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Eo">
            <summary>Gets potential evapotranspiration of the whole soil-plant system (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.SWCON">
            <summary>Fractional amount of water above DUL that can drain under gravity per day.</summary>
            <remarks>
            Between (SAT and DUL) soil water conductivity constant for each soil layer.
            At thicknesses specified in "SoilWater" node of GUI.
            Use Soil.SWCON for SWCON in standard thickness
            </remarks>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.KLAT">
            <summary>Lateral saturated hydraulic conductivity (KLAT).</summary>
            <remarks>
            Lateral flow soil water conductivity constant for each soil layer.
            At thicknesses specified in "SoilWater" node of GUI.
            Use Soil.KLAT for KLAT in standard thickness
            </remarks>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.LeachNO3">
            <summary>Amount of N leaching as NO3-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.LeachNH4">
            <summary>Amount of N leaching as NH4-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.LeachUrea">
            <summary>Amount of N leaching as urea-N  from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.LeachCl">
            <summary>Amount of Cl leaching from the deepest soil layer (kg /ha). Note that SoilWater does not currently handle chlorid at all!</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.FlowNO3">
            <summary>Amount of N leaching as NO3 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.FlowNH4">
            <summary>Amount of N leaching as NH4 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.FlowUrea">
            <summary>Amount of N leaching as urea from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.PrecipitationInterception">
            <summary> This is set by Microclimate and is rainfall less that intercepted by the canopy and residue components </summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.Pond">
            <summary>Pond.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.PAW">
            <summary>Plant available water SW-LL15 (mm/mm).</summary>
        </member>
        <member name="P:Models.WaterModel.WaterBalance.PAWmm">
            <summary>Plant available water SW-LL15 (mm).</summary>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Called when a simulation commences.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called on start of day.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>Called when an irrigation occurs.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>Called by CLOCK to let this model do its water movement.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.MoveDown(System.Double[],System.Double[])">
            <summary>Move water down the profile</summary>
            <param name="water">The water values</param>
            <param name="flux">The amount to move down</param>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.MoveUp(System.Double[],System.Double[])">
            <summary>Move water up the profile.</summary>
            <param name="water">The water values.</param>
            <param name="flow">The amount to move up.</param>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.CalculateSoluteMovementDown(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Calculate the solute movement DOWN based on flux.</summary>
            <param name="solute"></param>
            <param name="water"></param>
            <param name="flux"></param>
            <param name="efficiency"></param>
            <returns></returns>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.CalculateNetSoluteMovement(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Calculate the solute movement UP and DOWN based on flow.</summary>
            <param name="solute"></param>
            <param name="water"></param>
            <param name="flux"></param>
            <param name="efficiency"></param>
            <returns></returns>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.CalculateSoluteMovementUp(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Calculate the solute movement UP based on flow.</summary>
            <param name="solute"></param>
            <param name="water"></param>
            <param name="flow"></param>
            <param name="efficiency"></param>
            <returns></returns>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.CheckForErrors">
            <summary>Checks for soil for errors.</summary>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.RemoveWater(System.Double[])">
            <summary>Remove water from the profile</summary>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.SetWaterTable(System.Double)">
            <summary>Sets the water table.</summary>
            <param name="InitialDepth">The initial depth.</param> 
        </member>
        <member name="M:Models.WaterModel.WaterBalance.Reset">
            <summary>Perform a reset</summary>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.Initialise">
            <summary>Initialise the model.</summary>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.Tillage(Models.Soils.TillageType)">
            <summary>Perform tillage</summary>
        </member>
        <member name="M:Models.WaterModel.WaterBalance.Tillage(System.String)">
            <summary>Perform tillage</summary>
        </member>
        <member name="T:Models.WaterModel.WaterTableModel">
            <summary>
            Water table is the depth (in mm) below the ground surface of the first layer which is above saturation.
            </summary>
        </member>
        <member name="F:Models.WaterModel.WaterTableModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.WaterTableModel.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterTableModel.Depth">
            <summary>Depth of water table (mm)</summary>
        </member>
        <member name="M:Models.WaterModel.WaterTableModel.Calculate">
            <summary>Calculate water table depth.</summary>
        </member>
        <member name="M:Models.WaterModel.WaterTableModel.Set(System.Double)">
            <summary>
            Sets the water table.
            </summary>
            <param name="initialDepth">The initial depth.</param>
        </member>
        <member name="M:Models.WaterModel.WaterTableModel.SaturatedFraction(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>Calculate the saturated fraction for the specified layer index.</summary>
            <param name="layerIndex">The layer number</param>
            <param name="Water">The water values.</param>
            <param name="DUL">The drained upper limit values.</param>
            <param name="SAT">The saturation values.</param>
            <returns></returns>
        </member>
        <member name="T:Models.StockManagement.Draft">
            <summary>
            An instance of this class creates a genotype cross and adds it to the list of 
            available crosses.
            </summary>
        </member>
        <member name="T:Models.StockManagement.Draft.DraftType">
            <summary>The different types of grazing.</summary>
        </member>
        <member name="F:Models.StockManagement.Draft.DraftType.Fixed">
            <summary>Fixed grazing.</summary>
        </member>
        <member name="F:Models.StockManagement.Draft.DraftType.Flexible">
            <summary>Flexible grazing.</summary>
        </member>
        <member name="F:Models.StockManagement.Draft.StartDate">
            <summary>Start date of grazing.</summary>
        </member>
        <member name="F:Models.StockManagement.Draft.EndDate">
            <summary>End date of grazing.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.PaddockNames">
            <summary>The paddock names where the tagged animals move to.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TypeOfDraft">
            <summary>Type of grazing.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TagNumbers">
            <summary>The tag numbers of the animals to move.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TagNumberPriority1">
            <summary>The tag numbers of the highest priority animals.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TagNumberPriority2">
            <summary>The tag numbers of the second highest priority animals.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TagNumberPriority3">
            <summary>The tag numbers of the third priority animals.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.CheckEvery">
            <summary>How often should the flexible draft be conducted (days)</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TypeIsFixed">
            <summary>Returns true if the grazing type is fixed.</summary>
        </member>
        <member name="P:Models.StockManagement.Draft.TypeIsFlexible">
            <summary>Returns true if the grazing type is flexible.</summary>
        </member>
        <member name="M:Models.StockManagement.Draft.OnDoManagement(System.Object,System.EventArgs)">
            <summary>
            Invoked every day to do management.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.StockManagement.Draft.MoveAnimals">
            <summary>
            Perform a draft (move animals) into the specified paddocks. Only move those animals
            that have the specified tag numbers. Tags are assumed to be in priority order - the 
            first tag is the highest priority, the second tag is the 2nd highest etc. The highest
            priority tag gets the best paddock (the one with the most forage), the second highest
            priority tag gets the second best paddock etc.
            </summary>
        </member>
        <member name="T:Models.StockManagement.Draft.FieldWithForage">
            <summary>A private class to encapsulate the forages in a field.</summary>
        </member>
        <member name="M:Models.StockManagement.Draft.FieldWithForage.#ctor(Models.Core.Zone,Models.GrazPlan.Stock)">
            <summary>Constructor</summary>
            <param name="zone">The zone object representing the field.</param>
            <param name="stockModel">The stock model.</param>
        </member>
        <member name="P:Models.StockManagement.Draft.FieldWithForage.AmountForage">
            <summary>The amount for forage of all above ground organs (g/m2)</summary>
        </member>
        <member name="M:Models.StockManagement.Draft.FieldWithForage.MoveAnimals(System.Int32[])">
            <summary>Move animals withe the specified tag numbers</summary>
            <param name="tagNumbers">Tag numbers of animal groups to move.</param>
        </member>
        <member name="T:Models.Storage.AddCheckpointCommand">
            <summary>Encapsulates a command to empty the database as much as possible.</summary>
        </member>
        <member name="P:Models.Storage.AddCheckpointCommand.Name">
            <summary>
            Name of the job.
            </summary>
        </member>
        <member name="P:Models.Storage.AddCheckpointCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.AddCheckpointCommand.#ctor(Models.Storage.DataStoreWriter,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Constructor</summary>
            <param name="dataStoreWriter">The datastore writer that called this constructor.</param>
            <param name="checkpointName">The new checkpoint name to create.</param>
            <param name="fileNamesToStore">Names of files to store in checkpoint.</param>
        </member>
        <member name="M:Models.Storage.AddCheckpointCommand.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Storage.AddCheckpointCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:Models.Storage.Checkpoint">
            <summary>
            Encapsulates a checkpoint from the db
            </summary>
        </member>
        <member name="F:Models.Storage.Checkpoint.ID">
            <summary>The ID of the checkpoint.</summary>
        </member>
        <member name="F:Models.Storage.Checkpoint.ShowOnGraphs">
            <summary>Show the checkpoint on graphs?</summary>
        </member>
        <member name="P:Models.Storage.CleanCommand.Name">
            <summary>
            Name of the job.
            </summary>
        </member>
        <member name="P:Models.Storage.CleanCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.CleanCommand.Prepare">
            <summary>
            Prepare the IRunnable instance to be run.
            </summary>
        </member>
        <member name="M:Models.Storage.CleanCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="M:Models.Storage.CleanCommand.CleanTable(System.String,System.String,System.String,System.Int32)">
            <summary>
            Clean all existing data in the given table for the specified simulation names.
            </summary>
            <param name="tableName">Name of the table to clean.</param>
            <param name="simulationIDs">Comma-separated list of simulation IDs for the simulations to be cleaned.</param>
            <param name="simulationNames">Comma-separated list of simulation names for the simulations to be cleaned.</param>
            <param name="currentID">ID of the "Current" checkpoint.</param>
        </member>
        <member name="F:Models.Storage.DatabaseTableDetails.connection">
            <summary>The datastore connection.</summary>
        </member>
        <member name="F:Models.Storage.DatabaseTableDetails.columnNamesInDb">
            <summary>A list of column names in the table?</summary>
        </member>
        <member name="M:Models.Storage.DatabaseTableDetails.#ctor(APSIM.Shared.Utilities.IDatabaseConnection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="databaseConnection">The datastore connection.</param>
            <param name="tableName">Name of table.</param>
        </member>
        <member name="P:Models.Storage.DatabaseTableDetails.Name">
            <summary>Name of table.</summary>
        </member>
        <member name="P:Models.Storage.DatabaseTableDetails.TableExistsInDb">
            <summary>Does the table exist in the .db file?</summary>
        </member>
        <member name="M:Models.Storage.DatabaseTableDetails.EnsureTableExistsAndHasRequiredColumns(System.Data.DataTable)">
            <summary>Ensure the specified table matches our columns and row values.</summary>
            <param name="table">The table definition to write to the database.</param>
        </member>
        <member name="M:Models.Storage.DatabaseTableDetails.CreateTable(System.Data.DataTable)">
            <summary>Create a table that matches the specified table.</summary>
            <param name="table">The table definition to write to the database.</param>
        </member>
        <member name="M:Models.Storage.DatabaseTableDetails.AlterTable(System.Data.DataTable)">
            <summary>Alter an existing table ensuring all columns exist.</summary>
            <param name="table">The table definition to write to the database.</param>
        </member>
        <member name="T:Models.Storage.DataStore">
            <summary>
            A storage service for reading and writing to/from a database.
            </summary>
        </member>
        <member name="F:Models.Storage.DataStore.connection">
            <summary>A database connection</summary>
        </member>
        <member name="P:Models.Storage.DataStore.UseInMemoryDB">
            <summary>
            Controls whether the database connection is an in-memory DB.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStore.useFirebird">
            <summary>
            Selector for the database type. Set in the constructors.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStore.FileName">
            <summary>
            Returns the file name of the .db file.
            Returns CustomFileName if it has been given; will fallback to
            fileName otherwise.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStore.CustomFileName">
            <summary>
            Allows the user to override the .db file location.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStore.Reader">
            <summary>Get a reader to perform read operations on the datastore.</summary>
        </member>
        <member name="P:Models.Storage.DataStore.Writer">
            <summary>Get a writer to perform write operations on the datastore.</summary>
        </member>
        <member name="P:Models.Storage.DataStore.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Storage.DataStore.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Storage.DataStore.#ctor(System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Storage.DataStore.#ctor(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="F:Models.Storage.DataStore.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:Models.Storage.DataStore.Dispose">
            <summary>Dispose method</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Models.Storage.DataStore.OnCreated">
            <summary>Object has been created.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.UpdateFileName">
            <summary>
            Updates the file name of the database file, based on the file name
            of the parent Simulations object.
            </summary>
        </member>
        <member name="M:Models.Storage.DataStore.Open">
            <summary>Open the database.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Close">
            <summary>Close the database.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.AddView(System.String,System.String)">
            <summary>
            Add a select based view to the SQLite datastore
            </summary>
            <param name="name">name of the view</param>
            <param name="selectSQL">select SQL statement</param>
        </member>
        <member name="M:Models.Storage.DataStore.Document">
            <summary>
            Override the Document() function but do nothing.
            This model does not show any documentation.
            </summary>
        </member>
        <member name="T:Models.Storage.DataStoreReader">
            <summary>
            A class for reading from a database connection.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStoreReader.Connection">
            <summary>A database connection</summary>
        </member>
        <member name="F:Models.Storage.DataStoreReader.tables">
            <summary>A list of field names for each table.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreReader.simulationIDs">
            <summary>The IDS for all simulations</summary>
        </member>
        <member name="F:Models.Storage.DataStoreReader.checkpointIDs">
            <summary>The IDs for all checkpoints</summary>
        </member>
        <member name="F:Models.Storage.DataStoreReader.units">
            <summary>
            A copy of the units table.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStoreReader.SimulationNames">
            <summary>Return a list of simulation names or empty string[]. Never returns null.</summary>
        </member>
        <member name="P:Models.Storage.DataStoreReader.CheckpointNames">
            <summary>Return a list of checkpoint names or empty string[]. Never returns null.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreReader.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreReader.#ctor(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>
            Constructor
            </summary>
            <param name="database">The database to read from.</param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.SetConnection(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>
            Set the database connection.
            </summary>
            <param name="database">The database connection to read from.</param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.Units(System.String,System.String)">
            <summary>
            Obtain the units for a column of data
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnHeading">Name of the data column</param>
            <returns>The units (with surrounding parentheses), or null if not available</returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.ColumnNames(System.String)">
            <summary>Return a list of column names for a table. Never returns null.</summary>
            <param name="tableName">The table name to return column names for.</param>
            <returns>Can return an empty list but never null.</returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.GetColumns(System.String)">
            <summary>Return a list of column names/column type tuples for a table. Never returns null.</summary>
            <param name="tableName">The table name to return column names for.</param>
            <returns>Can return an empty list but never null.</returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.BriefColumnName(System.String,System.String)">
            <summary>
            Gets a "brief" column name for a column
            </summary>
            <param name="tablename"></param>
            <param name="fullColumnName">The "full" name of the column</param>
            <returns>The "brief" name of the column</returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.FullColumnName(System.String,System.String)">
            <summary>
            Gets the "full" column name for a column
            </summary>
            <param name="tablename"></param>
            <param name="queryColumnName"></param>
            <returns>The "full" name of the column</returns>
        </member>
        <member name="P:Models.Storage.DataStoreReader.TableNames">
            <summary>Returns a list of table names</summary>
        </member>
        <member name="P:Models.Storage.DataStoreReader.ViewNames">
            <summary>Returns a list of table names</summary>
        </member>
        <member name="P:Models.Storage.DataStoreReader.TableAndViewNames">
            <summary>Returns a list of table and view names</summary>
        </member>
        <member name="M:Models.Storage.DataStoreReader.Refresh">
            <summary>Refresh this instance to reflect the database connection.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreReader.GetData(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Return all data from the specified simulation and table name. If simulationName = "*"
            the all simulation data will be returned.
            </summary>
            <param name="checkpointName">Name of the checkpoint.</param>
            <param name="simulationNames">Name of the simulations.</param>
            <param name="tableName">Name of the table.</param>
            <param name="fieldNames">Optional column names to retrieve from storage</param>
            <param name="filter">Optional filter</param>
            <param name="from">Optional start index. Only used when 'count' specified. The record number to offset.</param>
            <param name="count">Optional number of records to return or all if 0.</param>
            <param name="orderByFieldNames">Optional column name to order by</param>
            <param name="distinct">Only return distinct values for field?</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.RemoveSimulationNameFromFilter(System.String)">
            <summary>
            Remove 'Simulation = xxxx' from filter and replace with 'SimulationiD=xx'
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.AddToFilter(System.String,System.String)">
            <summary>Add a clause to the filter.</summary>
            <param name="filter">The filter to add to.</param>
            <param name="filterClause">The clause to add e.g. Exp = 'Exp1'.</param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.ConvertFieldNameToFirebird(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>Convert field names to Firebird format.</summary>
            <param name="fieldNames">The field names.</param>
            <param name="tableName">The table name.</param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.GetDataUsingSql(System.String)">
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.ExecuteSql(System.String)">
            <summary>Execute sql.</summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.GetCheckpointID(System.String)">
            <summary>
            Return a checkpoint ID for the specified checkpoint name.
            </summary>
            <param name="checkpointName">The checkpoint name to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.GetCheckpointShowOnGraphs(System.String)">
            <summary>
            Return true if checkpoint is to be shown on graphs.
            </summary>
            <param name="checkpointName">The checkpoint name to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStoreReader.TryGetSimulationID(System.String,System.Int32@)">
            <summary>
            Return a simulation ID for the specified name.
            </summary>
            <param name="simulationName">The simulation name to look for.</param>
            <param name="simulationID">The simulation ID (if it exists).</param>
        </member>
        <member name="M:Models.Storage.DataStoreReader.ToSimulationIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert a collection of simulation names to ids.
            </summary>
            <param name="simulationNames">The simulation names to convert to Ids.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Storage.DataStoreWriter">
            <summary>
            This class encapsulates all writing to a DataStore
            </summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.lockObject">
            <summary>Lock object.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.commands">
            <summary>A list of all write commands.</summary>
            <remarks>NEVER modify this without first acquiring a lock on <see cref="F:Models.Storage.DataStoreWriter.lockObject" />.</remarks>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.sleepJob">
            <summary>A sleep job to stop the job runner from exiting.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.commandRunner">
            <summary>The runner used to run commands on a worker thread.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.idle">
            <summary>Are we idle i.e. not writing to database?</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.somethingHasBeenWriten">
            <summary>Has something been written to the db?</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.simulationIDs">
            <summary>The IDS for all simulations</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.checkpointIDs">
            <summary>The IDs for all checkpoints</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.simulationNamesThatHaveBeenCleanedUp">
            <summary>A list of simulation names that have been cleaned up for each table.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.units">
            <summary>A list of units for each table.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.tablesNotNeedingIndexColumns">
            <summary>A list of names of tables that don't have checkpointid or simulatoinid columns.</summary>
        </member>
        <member name="F:Models.Storage.DataStoreWriter.stopping">
            <summary>Are we stopping writing to the db?</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.#ctor(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="dbConnection">Data database connection to write to.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.SetConnection(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Set the database connection.Constructor</summary>
            <param name="dbConnection">The database connection to write to.</param>
        </member>
        <member name="P:Models.Storage.DataStoreWriter.Connection">
            <summary>The database connection to write to.</summary>
        </member>
        <member name="P:Models.Storage.DataStoreWriter.SomethingBeenWritten">
            <summary>Has something been written to the database since the last call to this property?</summary>
        </member>
        <member name="P:Models.Storage.DataStoreWriter.TablesModified">
            <summary>
            A list of table names which have been modified in the most recent simulations run.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStoreWriter.NumJobs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.WriteTable(Models.Storage.ReportData)">
            <summary>
            Add rows to a table in the db file. Note that the data isn't written immediately.
            </summary>
            <param name="data">Name of simulation the values correspond to.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.WriteTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Write a table of data. Uses the TableName property of the specified DataTable.
            </summary>
            <param name="table">The data to write.</param>
            <param name="deleteAllData">Delete all existing data from this table in the DB before writing the table to the DB?</param>
            <remarks>
            Before simulations are run, all tables whose names don't start with an underscore
            (ie any table generated by Report,ExcelInput, etc) will be cleaned; that is, all
            data associated with the simulation(s) about to be run will be removed from these
            tables. Additionally, the messages and initial conditions tables will also be cleaned.
            
            That being said, any model which can be run *without* running simulations (e.g.
            any post-simulation tool) should always set the second argument to true, to ensure
            that data is deleted. This is necessary because if the user only wants to run
            post simulation-tools, we cannot clean the datastore on a per-simulation basis,
            so no automatic cleaning occurs at all.
            
            Seting the second argument to true when no data exists is not an error.
            </remarks>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.DeleteTable(System.String)">
            <summary>
            Deletes a table from the database.
            </summary>
            <param name="tableName">Name of the table to be deleted.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.WaitForIdle">
            <summary>Wait for all records to be written.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.Stop">
            <summary>Stop all writing to database.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.AllCompleted">
            <summary>Called by the job runner when all jobs completed</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.GetJobs">
            <summary>Return an enumeration of jobs that need running.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.Empty">
            <summary>Delete all data in datastore, except for checkpointed data.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.AddCheckpoint(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Save the current data to a checkpoint.</summary>
            <param name="name">Name of checkpoint.</param>
            <param name="filesToStore">Files to store the contents of.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.DeleteCheckpoint(System.String)">
            <summary>Delete a checkpoint.</summary>
            <param name="name">Name of checkpoint to delete.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.RevertCheckpoint(System.String)">
            <summary>Revert a checkpoint.</summary>
            <param name="name">Name of checkpoint to revert to.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.SetCheckpointShowGraphs(System.String,System.Boolean)">
            <summary>Set a checkpoint show on graphs flag.</summary>
            <param name="name">Name of checkpoint.</param>
            <param name="showGraphs">Show graphs?</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.AddUnits(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a list of column units for the specified table.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="columnNames">A collection of column names.</param>
            <param name="columnUnits">A corresponding collection of column units.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.GetSimulationID(System.String,System.String)">
            <summary>
            Get a simulation ID for the specified simulation name. Will
            create an ID if the simulationName is unknown.
            </summary>
            <param name="simulationName">The name of the simulation to look for.</param>
            <param name="folderName">The name of the folder the simulation belongs in.</param>
            <returns>Always returns a number.</returns>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.GetCheckpointID(System.String)">
            <summary>
            Get a checkpoint ID for the specified name. Will
            create an ID if the Name is unknown.
            </summary>
            <param name="checkpointName">The name of the checkpoint to look for.</param>
            <returns>Always returns a number.</returns>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.ReadExistingDatabase(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>
            Read the database connection for simulation and checkpoint ids.
            </summary>
            <param name="dbConnection">The database connection to read from.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.Clean(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a db clean command.
            </summary>
            <param name="names">A list of simulation names that are about to run.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.Clean(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initiate a clean of the database.
            </summary>
            <param name="names">Simulation names to be cleaned.</param>
            <param name="wait">Wait for the clean operation to finish?</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.Start">
            <summary>Create a command runner one hasn't already been created.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.AddIndexColumns(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Add in checkpoint and simulation ID columns.
            </summary>
            <param name="table">The table to add the columns to.</param>
            <param name="checkpointName">The name of the checkpoint.</param>
            <param name="simulationName">The simulation name.</param>
            <param name="folderName">The name of the folder the simulation sits in.</param>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.WriteAllUnits">
            <summary>
            Write all units to our list of units for later writing to the database.
            </summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.WriteSimulationIDs">
            <summary>Write the simulations table.</summary>
        </member>
        <member name="M:Models.Storage.DataStoreWriter.WriteCheckpointIDs">
            <summary>Write the checkpoints table.</summary>
        </member>
        <member name="T:Models.Storage.DataStoreWriter.ColumnUnits">
            <summary>
            A class for encapsulating column units.
            </summary>
        </member>
        <member name="P:Models.Storage.DataStoreWriter.ColumnUnits.Name">
            <summary>Name of column.</summary>
        </member>
        <member name="P:Models.Storage.DataStoreWriter.ColumnUnits.Units">
            <summary>Units of column.</summary>
        </member>
        <member name="T:Models.Storage.DeleteCheckpointCommand">
            <summary>Encapsulates a command to delete a checkpoint.</summary>
        </member>
        <member name="P:Models.Storage.DeleteCheckpointCommand.Name">
            <summary>
            Name of the job.
            </summary>
        </member>
        <member name="P:Models.Storage.DeleteCheckpointCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.DeleteCheckpointCommand.#ctor(Models.Storage.DataStoreWriter,System.Int32)">
            <summary>Constructor</summary>
            <param name="dataStoreWriter">The datastore writer that called this constructor.</param>
            <param name="checkpointID">The new checkpoint name to create.</param>
        </member>
        <member name="M:Models.Storage.DeleteCheckpointCommand.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Storage.DeleteCheckpointCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:Models.Storage.DeleteRowsCommand">
            <summary>Encapsulates a command to delete rows from a table for a given checkpoint / simulation.</summary>
        </member>
        <member name="P:Models.Storage.DeleteRowsCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.DeleteRowsCommand.#ctor(APSIM.Shared.Utilities.IDatabaseConnection,System.String,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>Constructor</summary>
            <param name="databaseConnection">The database to cleanup.</param>
            <param name="tableName">The table to cleanup.</param>
            <param name="checkpointId">The checkpoint ID to use to match rows to remove.</param>
            <param name="simulationIds">The simulation IDs to use to match rows to remove.</param>
        </member>
        <member name="M:Models.Storage.DeleteRowsCommand.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Storage.DeleteRowsCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:Models.Storage.EmptyCommand">
            <summary>Encapsulates a command to empty the database as much as possible.</summary>
        </member>
        <member name="P:Models.Storage.EmptyCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.EmptyCommand.#ctor(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Constructor</summary>
            <param name="databaseConnection">The database to cleanup.</param>
        </member>
        <member name="M:Models.Storage.EmptyCommand.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Storage.EmptyCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:Models.Storage.IDataStore">
            <summary>An interface  for reading and writing to/from a database.</summary>
        </member>
        <member name="P:Models.Storage.IDataStore.FileName">
            <summary>Gets or sets the file name of the file to write to.</summary>
        </member>
        <member name="P:Models.Storage.IDataStore.Reader">
            <summary>Get a reader to perform read operations on the datastore.</summary>
        </member>
        <member name="P:Models.Storage.IDataStore.Writer">
            <summary>Get a writer to perform write operations on the datastore.</summary>
        </member>
        <member name="M:Models.Storage.IDataStore.Open">
            <summary>Opens the database connection.</summary>
        </member>
        <member name="M:Models.Storage.IDataStore.Close">
            <summary>Closes the database connection.</summary>
        </member>
        <member name="M:Models.Storage.IDataStore.AddView(System.String,System.String)">
            <summary>
            Add a view to the datastore where available (SQLite)
            </summary>
            <param name="name">Name of the view to create</param>
            <param name="selectSQL">Select sql statement for the view</param>
        </member>
        <member name="T:Models.Storage.InsertQuery">
            <summary>Encapsulates an insert query for a table.</summary>
        </member>
        <member name="F:Models.Storage.InsertQuery.queryCache">
            <summary>Cache of queries.</summary>
        </member>
        <member name="F:Models.Storage.InsertQuery.dataTable">
            <summary>
            The datatable associated with this query.
            </summary>
        </member>
        <member name="M:Models.Storage.InsertQuery.#ctor(System.Data.DataTable)">
            <summary>
            Constructor
            </summary>
            <param name="table">A DataTable object.</param>
        </member>
        <member name="M:Models.Storage.InsertQuery.ExecuteQuery(APSIM.Shared.Utilities.IDatabaseConnection,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Execute the query.
            </summary>
            <param name="database">The database to write to.</param>
            <param name="columnNames">The column names relating to the values.</param>
            <param name="rowValues">The values making up the row to write.</param>
        </member>
        <member name="M:Models.Storage.InsertQuery.GetPreparedQuery(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Get a prepared query for the specified column names.</summary>
            <param name="database">The database to write to.</param>
        </member>
        <member name="T:Models.Storage.IStorageReader">
            <summary>
            Interface for reading and writing data to/from permanent storage.
            </summary>
        </member>
        <member name="P:Models.Storage.IStorageReader.CheckpointNames">
            <summary>Return a list of checkpoint names or empty string[]. Never returns null.</summary>
        </member>
        <member name="M:Models.Storage.IStorageReader.GetData(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Return all data from the specified simulation and table name. If simulationName = "*"
            the all simulation data will be returned.
            </summary>
            <param name="checkpointName">Name of the checkpoint.</param>
            <param name="simulationNames">Name of the simulation.</param>
            <param name="tableName">Name of the table.</param>
            <param name="fieldNames">Optional column names to retrieve from storage</param>
            <param name="filter">Optional filter</param>
            <param name="from">Optional start index. Only used when 'count' specified. The record number to offset.</param>
            <param name="count">Optional number of records to return or all if 0.</param>
            <param name="orderByFieldNames">Optional column names to order by</param>
            <param name="distinct">Only return distinct values for field?</param>
        </member>
        <member name="M:Models.Storage.IStorageReader.GetDataUsingSql(System.String)">
            <summary>Return all data from the specified simulation and table name.</summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.ExecuteSql(System.String)">
            <summary>Execute sql.</summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:Models.Storage.IStorageReader.Units(System.String,System.String)">
            <summary>
            Obtain the units for a column of data
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnHeading">Name of the data column</param>
            <returns>The units (with surrounding parentheses), or null if not available</returns>
        </member>
        <member name="P:Models.Storage.IStorageReader.SimulationNames">
            <summary>Return a list of simulations names or empty string[]. Never returns null.</summary>
        </member>
        <member name="P:Models.Storage.IStorageReader.TableNames">
            <summary>Returns a list of table names</summary>
        </member>
        <member name="P:Models.Storage.IStorageReader.ViewNames">
            <summary>Returns a list of view names</summary>
        </member>
        <member name="P:Models.Storage.IStorageReader.TableAndViewNames">
            <summary>Returns a list of table and view names</summary>
        </member>
        <member name="M:Models.Storage.IStorageReader.ColumnNames(System.String)">
            <summary>Return a list of column names for a table. Never returns null.</summary>
            <param name="tableName">The table name to return column names for.</param>
            <returns>Can return an empty list but never null.</returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.GetColumns(System.String)">
            <summary>Return a list of column names/column type tuples for a table. Never returns null.</summary>
            <param name="tableName">The table name to return column names for.</param>
            <returns>Can return an empty list but never null.</returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.BriefColumnName(System.String,System.String)">
            <summary>
            Gets a "brief" column name for a column
            </summary>
            <param name="tablename"></param>
            <param name="fullColumnName">The "full" name of the column</param>
            <returns>The "brief" name of the column</returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.FullColumnName(System.String,System.String)">
            <summary>
            Gets the "full" column name for a column
            </summary>
            <param name="tablename"></param>
            <param name="queryColumnName"></param>
            <returns>The "full" name of the column</returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.GetCheckpointID(System.String)">
            <summary>
            Return a checkpoint ID for the specified checkpoint name.
            </summary>
            <param name="checkpointName">The checkpoint name to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.GetCheckpointShowOnGraphs(System.String)">
            <summary>
            Return true if checkpoint is to be shown on graphs.
            </summary>
            <param name="checkpointName">The checkpoint name to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.TryGetSimulationID(System.String,System.Int32@)">
            <summary>
            Return a simulation ID for the specified name.
            </summary>
            <param name="simulationName">The simulation name to look for.</param>
            <param name="simulationID">The simulation ID (if it exists).</param>
        </member>
        <member name="M:Models.Storage.IStorageReader.ToSimulationIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert a collection of simulation names to ids.
            </summary>
            <param name="simulationNames">The simulation names to convert to Ids.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.IStorageReader.Refresh">
            <summary>Refresh this instance to reflect the database connection.</summary>
        </member>
        <member name="T:Models.Storage.IStorageWriter">
            <summary>
            Interface for reading and writing data to/from permanent storage.
            </summary>
        </member>
        <member name="P:Models.Storage.IStorageWriter.TablesModified">
            <summary>
            A list of table names which have been modified in the most recent simulations run.
            </summary>
            <remarks>
            This is currently used to determine which post-simulation tools to run.
            </remarks>
        </member>
        <member name="M:Models.Storage.IStorageWriter.WriteTable(Models.Storage.ReportData)">
            <summary>
            Add rows to a table in the db file. Note that the data isn't written immediately.
            </summary>
            <param name="data">Name of simulation the values correspond to.</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.WriteTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Write a table of data. Uses the TableName property of the specified DataTable.
            </summary>
            <param name="data">The data to write.</param>
            <param name="deleteAllData">Delete all data before writing table?</param>
            <remarks>
            Before simulations are run, all tables whose names don't start with an underscore
            (ie any table generated by Report,ExcelInput, etc) will be cleaned; that is, all
            data associated with the simulation(s) about to be run will be removed from these
            tables. Additionally, the messages and initial conditions tables will also be cleaned.
            
            That being said, any model which can be run *without* running simulations (e.g.
            any post-simulation tool) should always set the second argument to true, to ensure
            that data is deleted. This is necessary because if the user only wants to run
            post simulation-tools, we cannot clean the datastore on a per-simulation basis,
            so no automatic cleaning occurs at all.
            
            Seting the second argument to true when no data exists is not an error.
            </remarks>
        </member>
        <member name="M:Models.Storage.IStorageWriter.DeleteTable(System.String)">
            <summary>
            Deletes a table from the database.
            </summary>
            <param name="tableName">Name of the table to be deleted.</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.Empty">
            <summary>Delete all data in datastore, except for checkpointed data.</summary>
        </member>
        <member name="M:Models.Storage.IStorageWriter.AddCheckpoint(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Save the current data to a checkpoint.</summary>
            <param name="name">Name of checkpoint.</param>
            <param name="filesToStore">Files to store the contents of.</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.DeleteCheckpoint(System.String)">
            <summary>Delete a checkpoint.</summary>
            <param name="name">Name of checkpoint to delete.</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.RevertCheckpoint(System.String)">
            <summary>Revert a checkpoint.</summary>
            <param name="name">Name of checkpoint to revert to.</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.SetCheckpointShowGraphs(System.String,System.Boolean)">
            <summary>Set a checkpoint show on graphs flag.</summary>
            <param name="name">Name of checkpoint.</param>
            <param name="showGraphs">Show graphs?</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.WaitForIdle">
            <summary>Wait for all records to be written.</summary>
        </member>
        <member name="M:Models.Storage.IStorageWriter.Stop">
            <summary>Stop all writing to database.</summary>
        </member>
        <member name="M:Models.Storage.IStorageWriter.AddUnits(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a list of column units for the specified table.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="columnNames">A collection of column names.</param>
            <param name="columnUnits">A corresponding collection of column units.</param>
        </member>
        <member name="M:Models.Storage.IStorageWriter.GetCheckpointID(System.String)">
            <summary>
            Get a checkpoint ID for the specified name. Will
            create an ID if the Name is unknown.
            </summary>
            <param name="checkpointName">The name of the checkpoint to look for.</param>
            <returns>Always returns a number.</returns>
        </member>
        <member name="M:Models.Storage.IStorageWriter.GetSimulationID(System.String,System.String)">
            <summary>
            Get a simulation ID for the specified simulation name. Will
            create an ID if the simulationName is unknown.
            </summary>
            <param name="simulationName">The name of the simulation to look for.</param>
            <param name="folderName">The name of the folder the simulation belongs in.</param>
            <returns>Always returns a number.</returns>
        </member>
        <member name="M:Models.Storage.IStorageWriter.Clean(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a db clean command.
            </summary>
            <param name="names">A list of simulation names that are about to run.</param>
            <param name="wait">Wait for the clean operation to finish?</param>
        </member>
        <member name="T:Models.Storage.ReportData">
            <summary>Encapsulates a table that needs writing to the database.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.CheckpointName">
            <summary>The name of the checkpoint the data belongs to.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.SimulationName">
            <summary>The name of the simulation the data belongs to.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.FolderName">
            <summary>The name of the folder the simulation belongs in.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.TableName">
            <summary>The name of the table to write the data to.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.ColumnNames">
            <summary>The table column names to write the data to.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.ColumnUnits">
            <summary>The units for each of the columns.</summary>
        </member>
        <member name="P:Models.Storage.ReportData.Rows">
            <summary>The rows of data to write.</summary>
        </member>
        <member name="M:Models.Storage.ReportData.ToTable">
            <summary>Create and return a datatable containing all rows and columns.</summary>
        </member>
        <member name="M:Models.Storage.ReportData.FlattenValueIntoRow(System.String,System.String,System.Object,System.Data.DataRow)">
            <summary>
            'Flatten' a value (if it is an array or structure) into something that can be
            stored in a flat database table.
            </summary>
            <param name="name">The column name.</param>
            <param name="units">The units of the value.</param>
            <param name="value">The value to store.</param>
            <param name="row">Row to store value into to.</param>
        </member>
        <member name="M:Models.Storage.ReportData.AddColumnToTable(System.Data.DataTable,System.String,System.Type)">
            <summary>
            Add a new column to the table if it doesn't exist.
            </summary>
            <param name="table">The table to add the column to.</param>
            <param name="columnName">The name of the column.</param>
            <param name="dataType">The data type of the column.</param>
            <returns>The new column name.</returns>
        </member>
        <member name="T:Models.Storage.RevertCheckpointCommand">
            <summary>Encapsulates a command to revert from a checkpoint.</summary>
        </member>
        <member name="P:Models.Storage.RevertCheckpointCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.RevertCheckpointCommand.#ctor(Models.Storage.DataStoreWriter,System.Int32)">
            <summary>Constructor</summary>
            <param name="dataStoreWriter">The datastore writer that called this constructor.</param>
            <param name="checkpointID">The new checkpoint name to create.</param>
        </member>
        <member name="M:Models.Storage.RevertCheckpointCommand.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Storage.RevertCheckpointCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:Models.Storage.Row">
            <summary>Encapsulates a row that needs writing to the database.</summary>
        </member>
        <member name="P:Models.Storage.Row.SimulationName">
            <summary>Simulation name for this row</summary>
        </member>
        <member name="P:Models.Storage.Row.ColumnNames">
            <summary>A collection of column names for this row</summary>
        </member>
        <member name="P:Models.Storage.Row.ColumnUnits">
            <summary>A collection of column units for this row</summary>
        </member>
        <member name="P:Models.Storage.Row.Values">
            <summary>A collection of column values for this row</summary>
        </member>
        <member name="M:Models.Storage.Row.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="simulationName">Simulation name</param>
            <param name="columnNames">Column names</param>
            <param name="columnUnits">Column units</param>
            <param name="valuesToWrite">A row of values to write</param>
        </member>
        <member name="M:Models.Storage.Row.GetValues(System.Collections.Generic.List{System.String},System.Object[]@,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>Write row to .db</summary>
            <param name="returnColumnNames">Column names for each value</param>
            <param name="returnValues">An write to store our values in</param>
            <param name="simulationIDs">A dictionary of simulation IDs</param>
        </member>
        <member name="M:Models.Storage.Row.Flatten">
            <summary>
            'Flatten' the row passed in, into a list of columns ready to be added
            to a data table.
            </summary>
        </member>
        <member name="M:Models.Storage.Row.FlattenValue(System.String,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            'Flatten' a value (if it is an array or structure) into something that can be
            stored in a flat database table.
            </summary>
            <param name="name"></param>
            <param name="units"></param>
            <param name="value"></param>
            <param name="newColumnNames"></param>
            <param name="newColumnUnits"></param>
            <param name="newValues"></param>
        </member>
        <member name="T:Models.Storage.WriteTableCommand">
            <summary>Encapsulates a row to write to an SQL database.</summary>
        </member>
        <member name="F:Models.Storage.WriteTableCommand.connection">
            <summary>The datastore connection.</summary>
        </member>
        <member name="F:Models.Storage.WriteTableCommand.dataToWrite">
            <summary>The data to write to the database.</summary>
        </member>
        <member name="F:Models.Storage.WriteTableCommand.tables">
            <summary>The details of tables in the database.</summary>
        </member>
        <member name="F:Models.Storage.WriteTableCommand.deleteExistingRows">
            <summary>Delete the existing rows first?</summary>
        </member>
        <member name="P:Models.Storage.WriteTableCommand.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="M:Models.Storage.WriteTableCommand.#ctor(APSIM.Shared.Utilities.IDatabaseConnection,System.Data.DataTable,System.Boolean)">
            <summary>Constructor</summary>
            <param name="databaseConnection">The database connection to write to.</param>
            <param name="dataToWrite">Data to write to table.</param>
            <param name="deleteOldData">Delete the existing rows first?</param>
        </member>
        <member name="M:Models.Storage.WriteTableCommand.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:Models.Storage.WriteTableCommand.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to run the command. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:Models.Sugarcane">
             <summary>
             # The APSIM Sugarcane Model
             </summary>
             <remarks>
            ## Model Components Overview
            
             Crop dry weight accumulation is driven by the conversion of intercepted radiation to biomass, via a radiation-use efficiency (RUE). 
            
             RUE is reduced whenever extremes of temperature, soil water shortage or excess, or plant nitrogen deficit limit photosynthesis. 
            
             The crop leaf canopy, which intercepts radiation, expands its area as a function of temperature, and can also be limited by extremes of temperature, soil water shortage or excess, or plant nitrogen deficit.
            
             Biomass is partitioned among the various plant components (leaf, cabbage, structural stem, roots and sucrose) as determined by crop phenological stage.
            
             Nitrogen uptake is simulated, as is the return of carbon and nitrogen to the soil in trash and roots. 
            
             In many sugarcane production systems, commercial yield is measured as the fresh weight of sugarcane stems and their sucrose concentration. Hence, the water content in addition to the dry weight of the stem is simulated. 
            
             Since sugarcane is grown both as a plant and ratoon crop, the model also needs to be able to simulate differences between crop classes based on any known physiological differences between these classes.
            
             
             ## Crop growth in the absence of nitrogen or water limitation
            
             ### Thermal time
            
             Thermal time is used in the model to drive phenological development and canopy expansion. 
            
             In APSIM-Sugarcane, thermal time is calculated using a base temperature of 9 oC, optimum temperature of 32 oC, and maximum temperature of 45 oC.
            
             The optimum and maximum temperatures were taken from those used for maize [jones_ceres-maize:_1986]. 
            
             Base temperatures for sugarcane have been variously reported between 8 oC and 15 oC [inman-bamber_temperature_1994][robertson_simulating_1998]. 
             The base of 9 oC used in APSIM sugarcane was chosen to be consistent with those studies which sampled the greatest temperature range, namely [inman-bamber_temperature_1994][robertson_simulating_1998] who identified base temperatures of 10 oC and 8 oC respectively. 
            
             For thermal time calculations in the model, temperature is estimated every three hours from a sine function fitted to daily maximum and minimum temperatures, using the method described by [jones_ceres-maize:_1986]. 
            
             ### Phenology
            
             The sugar model uses six different stages to define crop growth and status. 
            
             
             |Stage     |Description                                   
             |----------|:---------------------------------------------
             |sowing    |From sowing to sprouting                      
             |sprouting |From sprouting to emergence                   
             |emergence |From emergence to the beginning of cane growth
             |begin_cane|From the beginning of cane growth to flowering
             |flowering |From flowering to the end of the crop         
             |end_crop  |Crop is not currently in the simulated system.
             
             Sprouting occurs after a lag period, set to 350 oCdays for plant crops and 100 oCdays for ratoon crops. 
            
             Provided the soil water content of the layer is adequate, shoots will elongate towards the soil surface at a rate of 0.8 mm per oCday. 
            
             The thermal duration between emergence and beginning of stalk growth is a genotype coefficient in the range 1200 to 1800 oCdays. 
            
             Although, sugarcane does produce flowers, the number of stalks producing flowers in a field is highly variable, and its physiological basis is not fully understood.
            
             While the model structure has been developed to include flowering as a phenological stage, it has been deactivated until a better physiological basis for prediction is available. 
            
            
             ### Canopy expansion
            
             The experimental basis for the canopy expansion model is described by [robertson_simulation_2016].
            
             Briefly, green leaf area index is the product of ***green leaf area per stalk*** and the ***number of stalks per unit ground area***. 
            
             ***Green leaf area per stalk*** is simulated by summing the fully-expanded area of successive leaves that appear on each stalk, and adding a correction factor for the area of expanding leaves (set to 1.6 leaves per stalk).
             Profiles of leaf area per leaf are input as genotype coefficients. 
             [robertson_simulation_2016] found leaf appearance rates declined as a continuous function of cumulative thermal time, so that at emergence leaves took 80 oCd to appear while leaf 40 required 150 oCd.
             These responses are reproduced in the model (via a series of linear interpolations) in both plant and ratoon crops.
            
             ***Stalk number*** rises rapidly to a peak during the first 1400 oCdays from emergence, thereafter declining to reach a stable stalk number (e.g. [inman-bamber_temperature_1994]). 
             Ratoon crops commonly reach an earlier peak stalk number than plant crops, with consequently faster early canopy expansion in ratoons [robertson_growth_1996].
             In the model, the complexity of simulating the dynamics of tillering in order to predict LAI during early growth is avoided. 
             Instead, the crop is conceived to have a notional constant stalk number throughout growth, usually set at 10 stalks m-2 , although this value can be varied as an input. 
             The additional leaf area associated with tillers that appear and subsequently die, is captured via a calibrated tillering factor, that effectively increases the area of the leaves that are produced over the early tillering period.
            
             The known faster early expansion of LAI in ratoon crops is simulated via two effects. 
             * Firstly, the lag time for regrowth of shoots after harvest is shorter in a ratoon crop than is the equivalent thermal time for a plant crop to initiate stalk elongation.
             * Secondly, tillering is recognised in the model coefficients as making a larger contribution to leaf area development in a ratoon crop than a plant crop.
            
             The daily rate of senescence of green leaf area is calculated as the maximum of four rates determined by the factors of ageing, light competition, water stress and frost.
            
             In the model, ageing causes senescence by not allowing at any time more than 13 fully-expanded green leaves per stalk.
            
             Light competition is simulated to induce senescence once fractional radiation interception reaches 0.85.
            
             Water stress induces senescence once the soil water deficit factor for photosynthesis declines below 1.0.
            
             Frosting removes 10% of the LAI per day if the minimum temperature reaches 0 oC, and 100% if it reaches -5 oC. 
            
            
             ### Root growth and development
            
             Root biomass is produced independently from the shoot, so that a proportion of daily above-ground biomass production is added to the root system. 
             The proportion decreases from a maximum of 0.30 at emergence and asymptotes to 0.20 at flowering. 
            
             Root biomass is converted to root length via a specific root length of 18000 mm g-1 . 
             The depth of the root front in plant crops increases by 1.5 cm day-1 [_glover_proceedings_nodate] from emergence, with the maximum depth of rooting set by the user.
            
             At harvest, 17% of roots in all the occupied soil layer die [ball-coelho_root_1992]. 
            
            
            
             ### Biomass accumulation and partitioning
            
             The sugar model partitions dry matter to **five different plant pools**. These are as follows: 
            
             |Plant Part |Description                              
             |-----------|:----------------------------------------
             |Root       |Below-ground biomass                     
             |Leaf       |Leaf                                     
             |Sstem      |Structural component of millable stalk   
             |Cabbage    |Leaf sheath and tip of growing stalks etc
             |Sucrose    |Sucrose content of millable stalk        
            
             In addition to the five live biomass pools outlined above, senescent leaf and cabbage is maintained as trash on the plant or progressively detached to become residues on the soil surface. 
             In APSIM, the RESIDUE module [probert_apsim_1996] takes on the role of decomposition of crop residues. 
            
             LAI is used in the model to intercept incident solar radiation following Beer's Law, using a radiation extinction coefficient of 0.38, determined by [muchow_radiation_1994][robertson_growth_1996].
             Intercepted radiation is used to produce daily biomass production using a radiation-use efficiency (RUE) of 1.80 g MJ-1 for plant crops and 1.65 g MJ-1 for ratoon crops. 
             The values of RUE used in the model are those adjusted upwards from field-measured values [muchow_radiation_1994][robertson_growth_1996] due to the underestimate of biomass production caused by incomplete recovery of senesced leaf material [robertson_growth_1996]. 
             In the model, RUE is reduced if the mean daily temperature falls below 15 oC or exceeds 35 oC, and becomes zero if the mean temperature reaches 5 or 50 oC, respectively. 
             These effects are similar to those used in other models of C4 crop species [hammer_assessing_1994]. 
            
             Four above-ground biomass pools are modelled: **leaf**, **cabbage**, **structural stem**, **stem sucrose**, 
             (and an additional pool for **roots** that is simulated separately from above-ground production). 
            
             Between emergence and the beginning of stalk growth, above-ground biomass is partitioned between leaf and cabbage in the ratio 1.7:1 [robertson_growth_1996].
            
             After the beginning of stem growth 0.7 of above-ground biomass is partitioned to the stem robertson_growth_1996, with the remainder partitioned between leaf and cabbage in the ratio 1.7:1. 
             After a minimum amount of stem biomass has accumulated, the daily biomass partitioned to stem is divided between structural and sucrose pools, following the framework developed by [muchow_effect_1996] and [robertson_growth_1996]. Thereafter, the stem biomass is equal to the sum of structural and sucrose pools.
            
             If biomass partitioned to leaf is insufficient for growth of the leaf area, as determined by a maximum specific leaf area, then daily leaf area expansion is reduced. 
             If biomass partitioned to leaf is in excess of that required to grow the leaf area on that day, then specific leaf area is permitted to decrease to a lower limit, beyond which the “excess” biomass is partitioned to sucrose and structural stem. 
            
             A stalk growth stress factor is calculated as the most limiting of the water, nitrogen and temperature limitations on photosynthesis. 
             This stress factor influences both the onset and rate of assimilate partitioning to sucrose at the expense of structural stem. 
            
             ### Stem water content
            
             A stem water pool is simulated for the purposes of calculating cane fresh weight and CCS%. 
            
             For every gram of structural stem grown, a weight of water is considered to have been accumulated by the cane stems. 
            
             This relationship varies with thermal time, ranging from 9 g g-1 initially, to 5 g g-1 late in the crop life cycle. 
            
             The former represents the water content of young stem (eg. cabbage) while the latter represents a combination of young stem growth and thickening of older stem. 
            
             Sucrose deposition in the stem removes water content at the rate of 1 g water g-1 sucrose. 
            
             ### Varietal effects
            
             Currently varieties differ in only two respects in the model. 
            
             * Firstly, Inman-Bamber (1991) found that varieties in South Africa differed in the fully-expanded area of individual leaves. 
             The distributions for NCo376 and N14 were taken from Inman-Bamber and Thompson (1989), while that for Q117 and Q96 was those assigned values that gave best fit to the time-course of LAI during the model calibration stage. 
             * Secondly, [robertson_growth_1996] found that varieties from South Africa and Australia differed in terms of partitioning of biomass to sucrose in the stem. 
             There is scope for incorporating other varietal differences as new knowledge becomes available.
            
             ## Water deficit limitation
            
             Soil water infiltration and redistribution, evaporation and drainage is simulated by other modules in the APSIM framework [probert_apsim_1996] and (Verburg et al, 1997). 
            
             Water stress in the model reduces the rate of leaf area expansion and radiation-use efficiency, via two soil water deficit factors, which vary from zero to 1.0, following the concepts embodied in the CERES models (Ritchie, 1986). 
             Soil water deficit factor 1 (SWDEF1), which is less sensitive to soil drying, reduces the radiation-use efficiency (i.e. net photosynthesis) and hence transpiration, below its maximum. 
             Soil water deficit factor 2 (SWDEF2), which is more sensitive to soil drying, reduces the rate of processes governed primarily by cell expansion, i.e. daily leaf expansion rate. 
            
             SWDEF1 and 2 are calculated as a function of the ratio of (potential soil water supply from the root system) and the (transpiration demand). 
             Following [sinclair_water_1986 and Monteith (1986), transpiration demand is modelled as a function of the (current day's crop growth rate), divided by the transpiration-use efficiency.
             When soil water supply exceeds transpiration demand, assimilate fixation is a function of radiation interception and radiation use efficiency. 
             When soil water supply is less than transpiration demand, assimilate fixation is a function of water supply and transpiration efficiency and the vapour pressure deficit (VPD). 
            
             Transpiration-use efficiency has not been directly measured for sugarcane, but calibration of the current model on datasets exhibiting water deficits (Robertson et al, unpubl. data) resulted in the use of a transpiration-use efficiency of 8 g kg-1 at a VPD of 1 kPa.
             This efficiency declines linearly as a function of VPD (Tanner and Sinclair, 1983). 
             This compares with reported values of 9 g kg-1 kPa-1 for other C 4 species (Tanner and Sinclair 1983), a value that has been used in the models of sorghum (Hammer and Muchow, 1994) and maize [muchow_tailoring_1991]. 
            
             Potential soil water uptake is calculated using the approach first advocated by Monteith (1986) and subsequently tested for sunflower [meinke_sunflower_1993] and grain sorghum (Robertson et al., 1994). 
             It is the sum of root water uptake from each profile layer occupied by roots. 
             The potential rate of extraction in a layer is calculated using a rate constant, which defines the fraction of available water able to be extracted per day. 
             The actual rate of water extraction is the lesser of the potential extraction rate and the transpiration demand. 
             If the computed potential extraction rate from the profile exceeds demand, then the extracted water is removed from the occupied layers in proportion to the values of potential root water uptake in each layer.
             If the computed potential extraction from the profile is less than the demand then SWDEF2 declines in proportion, and the actual root water uptake from a layer is equal to the computed potential uptake. 
            
             In addition to the effects on canopy expansion and biomass accumulation, water stress influence biomass partitioning in the stem in two ways.
             Firstly, the minimum amount of stem biomass required to initiate sucrose accumulation declines with accumulated stress.
             Secondly, the daily dry weight increment between structural stem and sucrose shifts in favour of sucrose as water deficits develop. 
            
             ## Water excess limitation
             The proportion of the root system exposed to saturated or near saturated soil water conditions is calculated and used to calculate a water logging stress factor. 
             This factor reduces photosynthetic activity via an effect on RUE.
            
             ## Nitrogen limitation
             N supply from the soil is simulated in other modules in the APSIM framework [probert_apsim_1996]. 
            
             Crop nitrogen demand is simulated using an approach similar to that used in the CERES models [godwin_simulation_1985]. 
             Crop N demand is calculated as the product of maximum tissue N concentration and the increment in tissue weight. 
            
             Separate N pools are described for green leaf, cabbage, millable stalk and dead leaf. The sucrose pool is assumed to have no nitrogen associated with it. 
             Only the leaf N concentrations influence crop growth processes. Growth is unaffected until leaf N concentrations fall below a critical concentration. 
             Sugarcane has been shown to exhibit luxury N uptake [muchow_radiation_1994](Catchpoole and Keating 1995) and the difference between the maximum and critical N concentrations is intended to simulate this phenomenon. 
             Nitrogen stress is proportional to the extent to which leaf N falls between the critical and the minimum N concentration. 
            
             Senescing leaves (and the associated leaf sheaths contained in the cabbage pool) are assumed to die at their minimum N concentrations and the balance of the N in these tissues is retranslocated to the green leaf and cabbage pools. 
            
             Maximum, critical and minimum N concentrations are all functions of thermal time, and were chosen on the basis of the findings of Catchpoole and Keating (1995) and [muchow_radiation_1994] and subsequently refined during the model calibration.
             Critical green leaf concentrations used in the model differ between photosynthetic, leaf expansion and stem growth processes. 
             For photosynthesis they begin at 1.2% N at emergence or ratooning and asymptote towards 0.5%N at flowering. 
             For leaf area expansion they are 1.3 and 0.5% N 
             and stem growth, 1.5 and 0.5%N. 
            
             N uptake cannot exceed N demand by the crop and is simulated to take place by mass flow in the water that is used for transpiration. 
             Should mass flow not meet crop demand and nitrate be available in soil layers, the approach of [van_keulen_simulation_1987] is used to simulate the uptake of nitrate over and above that which can be accounted for by mass flow. 
             While van Keulen and Seligman (1987) referred to this approach as “diffusion”, the routine more realistically serves as a surrogate for a number of sources of uncertainty in nitrate uptake. 
            
             Nitrogen stress also influences biomass partitioning in the stem, in a similar fashion to that described above for water stress.
            
            
             ## Other features of the sugar module
             APSIM-Sugarcane includes a number of features relevant to sugarcane production systems.
            
             Either plant or ratoon crops can be simulated at the outset or a plant crop will regenerate as a ratoon crop if a crop cycle is being simulated. 
             Production systems of plant - multiple ratoon - fallow can be simulated or alternatively other APSIM crop or pasture modules can be included in rotation with sugarcane. 
            
             Trash can be burnt or retained at harvest time. 
            
             Insect or other biological or mechanical damage to the canopy can be simulated via “graze” actions. 
            
             Many sugarcane crops are “hilled-up” early in canopy development, an operation that involves the movement of soil from the interrow to the crop row. 
             This operation facilitates irrigation operations and improves the crop's ability to stand upright. 
             APSIM-Sugarcane responds to a management event of hilling-up by removal of lower leaf area and stem from the biomass pools. 
            
             Lodging is a widespread phenomenon in high-yielding sugarcane crops. 
             The APSIM-MANAGER [mccown_apsim:_1996] can initiate a lodging event in response to any aspect of the system state (eg crop size, time of year and weather). 
             APSIM SUGARCANE responds to lodging via four effects:
            
             A low rate of stalk death which has been widely observed in heavily lodged crops (Muchow et al., 1995; Robertson et al., 1996)[singh_lodging_2002];
            
             A reduction in radiation use efficiency (Singh et al., 1999)[singh_lodging_2002]
            
             A reduction in the proportion of daily biomass that is partitioned as sucrose [singh_lodging_2002]; and
            
             A reduction in the maximum number of green leaves, to capture the reported reduction in leaf appearance rate and increase in leaf senescence [singh_lodging_2002]
            
             
             ##Parameterisation
            
             **(Structure of the xml in the .apsimx file)**
            
             There are **4** separate categories of variables in the Sugarcane modules xml. 
            
             They are listed below with some examples of the type of parameters included in each.
                
             1. **Constants**
                 * Upper and lower bounds for met and soil variables
             2. **Plant_crop**
                 * Growth and partitioning parameters
                 * Water Use Parameters and Water and temperature Stress Factors
                 * Frosting Factors
                 * Nitrogen Contents and Nitrogen Stress Factors
             3. **Ratoon_crop**
                 * Same as Plant crop section but there is the ability to change the parameters between plant and ratoon crops.
             4. **Cultivar (Plant Crop and Ratoon Crop)**
                  * **Plant Crop Cultivar**
                     * Leaf Development Parameters
                     * Phenology
                     * Sucrose and Cane Stalk  (Partitioning Parameters)
                  * **Ratoon Crop Cultivar**
                     * Same as for the Plant Crop Cultivar
                     * ***By creating a completely new cultivar with the same name as the plant crop cultivar but appending "_ratoon" to the end of the name, 
                  the Sugarcane module will then automatically use this ratoon crop cultivar rather then the plant crop cultivar 
                  when the crop changes from a Plant Crop to a Ratoon Crop.***
             
             
             
             **Sugar Module Outputs**
            
            
             |Variable Name  | Units      | Description                                                               
             |---------------|:-----------|:-------------------------------------------------------------------------- 
             |Stage_name     |            | Name of the current crop growth stage                                     
             |Stage          |            | Current growth stage number                                               
             |Crop_status    |            | Status of the current crop (alive,dead,out)                               
             |ratoon_no      |            | Ratoon number (0 for plant crop, 1 for 1st ratoon, 2 for 2nd ratoon, …etc)
             |das            | Days       | Days after sowing (ie. crop duration)                                     
             |Ep             | mm         | Crop evapotranspiration (extraction) for each soil layer                  
             |cep            | mm         | Cumulative plant evapotranspiration                                       
             |rlv            | mm/mm^3    | root length per volume of soil in each soil layer                         
             |esw            | mm         | Extractable Soil water in each soil layer                                 
             |root_depth     | mm         | Root depth                                                                
             |sw_demand      | mm         | Daily demand for soil water                                               
             |biomass        | g/m^2      | Total crop above-ground biomass (Green + Trash)                           
             |green_biomass  | g/m^2      | Total green crop above-ground biomass                                     
             |biomass_n      | g/m^2      | Total Nitrogen in above-ground biomass (Green + Trash)                    
             |green_biomass_n| g/m^2      | Amount of Nitrogen in green above-ground biomass                          
             |dlt_dm         | g/m^2      | Daily increase in plant dry matter (photosynthesis)                       
             |dm_senesced    | g/m^2      | Senesced dry matter in each plant pool                                    
             |n_senesced     | g/m^2      | Amount of Nitrogen in senesced material for each plant pool               
             |Canefw         | t/ha       | Fresh Cane weight                                                         
             |ccs            | %          | Commercial Cane Sugar                                                     
             |Cane_wt        | g/m^2      | Weight of cane dry matter                                                 
             |leaf_wt        | g/m^2      | Weight of plant green leaf                                                
             |root_wt        | g/m^2      | Weight of plant roots                                                     
             |sstem_wt       | g/m^2      | Weight of plant structural stem                                           
             |sucrose_wt     | g/m^2      | Weight of plant sucrose                                                   
             |cabbage_wt     | g/m^2      | Weight of plant cabbage                                                   
             |n_conc_cane    | g/g        | Nitrogen concentration in cane                                            
             |n_conc_leaf    | g/g        | Nitrogen concentration in green leaf                                      
             |n_conc_cabbage | g/g        | Nitrogen concentration in green cabbage                                   
             |n_demand       | g/m^2      | Daily demand for Nitrogen                                                 
             |cover_green    | 0-1        | Fractional cover by green plant material                                  
             |cover_tot      | 0-1        | Fractional cover by total plant material (Green + Trash)                  
             |lai            | mm^2/mm^2  | Leaf area index of green leaves                                           
             |tlai           | mm^2/mm^2  | Total plant leaf area index (green + senesced)                            
             |slai           | mm^2/mm^2  | Senesced leaf area index                                                  
             |n_leaf_crit    | g/m^2      | Critical Nitrogen level for the current crop                              
             |n_leaf_min     | g/m^2      | Minimum Nitrogen level for the current crop                               
             |nfact_photo    | 0-1        | Nitrogen stress factor for photosynthesis                                 
             |nfact_expan    | 0-1        | Nitrogen stress factor for cell expansion                                 
             |swdef_photo    | 0-1        | Soil water stress factor for photosynthesis                               
             |swdef_expan    | 0-1        | Soil water stress factor for cell expansion                               
             |swdef_phen     | 0-1        | Soil water stress factor for phenology                                    
            
             </remarks>
        </member>
        <member name="P:Models.Sugarcane.CanopyType">
            <summary>
            Canopy type
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.Sugarcane.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.Sugarcane.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.Sugarcane.LAI">
            <summary>
            Gets the LAI (m^2/m^2)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.LAITotal">
            <summary>
            Gets the maximum LAI (m^2/m^2)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.CoverGreen">
            <summary>
            Gets the cover green (0-1)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.CoverTotal">
            <summary>
            Gets the cover total (0-1)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Height">
            <summary>
            Gets the canopy height (mm)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Depth">
            <summary>
            Gets the canopy depth (mm)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Width">
            <summary>Gets the width of the canopy (mm).</summary>
        </member>
        <member name="P:Models.Sugarcane.FRGR">
            <summary>
            Gets  FRGR.
            </summary>
        </member>
        <member name="P:Models.Sugarcane.PotentialEP">
            <summary>
            Sets the potential evapotranspiration.
            </summary>
        </member>
        <member name="P:Models.Sugarcane.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.Sugarcane.LightProfile">
            <summary>
            MicroClimate calculates a layered canopy energy balance and sets
            this property in the crop.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Weather">
            <summary>
            The weather
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Soil">
            <summary>
            The soil
            </summary>
        </member>
        <member name="F:Models.Sugarcane.waterBalance">
            <summary>The water balance model</summary>
        </member>
        <member name="F:Models.Sugarcane.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.Sugarcane.Summary">
            <summary>
            The summary
            </summary>
        </member>
        <member name="F:Models.Sugarcane.NO3">
            <summary>Link to NO3 solute.</summary>
        </member>
        <member name="F:Models.Sugarcane.NH4">
            <summary>Link to NH4 solute.</summary>
        </member>
        <member name="P:Models.Sugarcane.PlantType">
            <summary>The plant type.</summary>
        </member>
        <member name="P:Models.Sugarcane.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.Sugarcane.AboveGround">
            <summary>Aboveground mass</summary>
        </member>
        <member name="F:Models.Sugarcane.max_leaf">
            <summary>
            The max_leaf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_layer">
            <summary>
            The max_layer
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_table">
            <summary>
            The max_table
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_alive">
            <summary>
            The crop_alive
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_dead">
            <summary>
            The crop_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_out">
            <summary>
            The crop_out
            </summary>
        </member>
        <member name="F:Models.Sugarcane.photo">
            <summary>
            The photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.expansion">
            <summary>
            The expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.pheno">
            <summary>
            The pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.root">
            <summary>
            The root
            </summary>
        </member>
        <member name="F:Models.Sugarcane.leaf">
            <summary>
            The leaf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sstem">
            <summary>
            The sstem
            </summary>
        </member>
        <member name="F:Models.Sugarcane.cabbage">
            <summary>
            The cabbage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sucrose">
            <summary>
            The sucrose
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_part">
            <summary>
            The max_part
            </summary>
        </member>
        <member name="F:Models.Sugarcane.part_name">
            <summary>
            The part_name
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_stage">
            <summary>
            The max_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.now">
            <summary>
            The now
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_end">
            <summary>
            The crop_end
            </summary>
        </member>
        <member name="F:Models.Sugarcane.fallow">
            <summary>
            The fallow
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sowing">
            <summary>
            The sowing
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sow_to_sprouting">
            <summary>
            The sow_to_sprouting
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sprouting">
            <summary>
            The sprouting
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sprouting_to_emerg">
            <summary>
            The sprouting_to_emerg
            </summary>
        </member>
        <member name="F:Models.Sugarcane.emerg">
            <summary>
            The emerg
            </summary>
        </member>
        <member name="F:Models.Sugarcane.emerg_to_begcane">
            <summary>
            The emerg_to_begcane
            </summary>
        </member>
        <member name="F:Models.Sugarcane.begcane">
            <summary>
            The begcane
            </summary>
        </member>
        <member name="F:Models.Sugarcane.begcane_to_flowering">
            <summary>
            The begcane_to_flowering
            </summary>
        </member>
        <member name="F:Models.Sugarcane.flowering">
            <summary>
            The flowering
            </summary>
        </member>
        <member name="F:Models.Sugarcane.flowering_to_crop_end">
            <summary>
            The flowering_to_crop_end
            </summary>
        </member>
        <member name="P:Models.Sugarcane.crop_type">
            <summary>
            Gets or sets the crop_type.
            </summary>
            <value>
            The crop_type.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_emerg_to_begcane_ub">
            <summary>
            Gets or sets the tt_emerg_to_begcane_ub.
            </summary>
            <value>
            The tt_emerg_to_begcane_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_begcane_to_flowering_ub">
            <summary>
            Gets or sets the tt_begcane_to_flowering_ub.
            </summary>
            <value>
            The tt_begcane_to_flowering_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_flowering_to_crop_end_ub">
            <summary>
            Gets or sets the tt_flowering_to_crop_end_ub.
            </summary>
            <value>
            The tt_flowering_to_crop_end_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_uptake_option">
            <summary>
            Gets or sets the n_uptake_option.
            </summary>
            <value>
            The n_uptake_option.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_diffn_const">
            <summary>
            Gets or sets the n o3_diffn_const.
            </summary>
            <value>
            The n o3_diffn_const.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_supply_preference">
            <summary>
            Gets or sets the n_supply_preference.
            </summary>
            <value>
            The n_supply_preference.
            </value>
        </member>
        <member name="P:Models.Sugarcane.kno3">
            <summary>
            Gets or sets the kno3.
            </summary>
            <value>
            The kno3.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3ppm_min">
            <summary>
            Gets or sets the no3ppm_min.
            </summary>
            <value>
            The no3ppm_min.
            </value>
        </member>
        <member name="P:Models.Sugarcane.knh4">
            <summary>
            Gets or sets the KNH4.
            </summary>
            <value>
            The KNH4.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nh4ppm_min">
            <summary>
            Gets or sets the nh4ppm_min.
            </summary>
            <value>
            The nh4ppm_min.
            </value>
        </member>
        <member name="P:Models.Sugarcane.total_n_uptake_max">
            <summary>
            Gets or sets the total_n_uptake_max.
            </summary>
            <value>
            The total_n_uptake_max.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ll_ub">
            <summary>
            Gets or sets the ll_ub.
            </summary>
            <value>
            The ll_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.kl_ub">
            <summary>
            Gets or sets the kl_ub.
            </summary>
            <value>
            The kl_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.minsw">
            <summary>
            Gets or sets the minsw.
            </summary>
            <value>
            The minsw.
            </value>
        </member>
        <member name="P:Models.Sugarcane.latitude_ub">
            <summary>
            Gets or sets the latitude_ub.
            </summary>
            <value>
            The latitude_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.latitude_lb">
            <summary>
            Gets or sets the latitude_lb.
            </summary>
            <value>
            The latitude_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.maxt_ub">
            <summary>
            Gets or sets the maxt_ub.
            </summary>
            <value>
            The maxt_ub.
            </value>
        </member>
        <member name="F:Models.Sugarcane.maxt_lb">
            <summary>
            The maxt_lb
            </summary>
        </member>
        <member name="P:Models.Sugarcane.mint_ub">
            <summary>
            Gets or sets the mint_ub.
            </summary>
            <value>
            The mint_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.mint_lb">
            <summary>
            Gets or sets the mint_lb.
            </summary>
            <value>
            The mint_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.radn_ub">
            <summary>
            Gets or sets the radn_ub.
            </summary>
            <value>
            The radn_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.radn_lb">
            <summary>
            Gets or sets the radn_lb.
            </summary>
            <value>
            The radn_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlayer_ub">
            <summary>
            Gets or sets the dlayer_ub.
            </summary>
            <value>
            The dlayer_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlayer_lb">
            <summary>
            Gets or sets the dlayer_lb.
            </summary>
            <value>
            The dlayer_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dul_dep_ub">
            <summary>
            Gets or sets the dul_dep_ub.
            </summary>
            <value>
            The dul_dep_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dul_dep_lb">
            <summary>
            Gets or sets the dul_dep_lb.
            </summary>
            <value>
            The dul_dep_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_dep_ub">
            <summary>
            Gets or sets the sw_dep_ub.
            </summary>
            <value>
            The sw_dep_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_dep_lb">
            <summary>
            Gets or sets the sw_dep_lb.
            </summary>
            <value>
            The sw_dep_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_ub">
            <summary>
            Gets or sets the n o3_ub.
            </summary>
            <value>
            The n o3_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_lb">
            <summary>
            Gets or sets the n o3_lb.
            </summary>
            <value>
            The n o3_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_min_ub">
            <summary>
            Gets or sets the n o3_min_ub.
            </summary>
            <value>
            The n o3_min_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_min_lb">
            <summary>
            Gets or sets the n o3_min_lb.
            </summary>
            <value>
            The n o3_min_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_ub">
            <summary>
            Gets or sets the n h4_ub.
            </summary>
            <value>
            The n h4_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_lb">
            <summary>
            Gets or sets the n H4_LB.
            </summary>
            <value>
            The n H4_LB.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_min_ub">
            <summary>
            Gets or sets the n h4_min_ub.
            </summary>
            <value>
            The n h4_min_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_min_lb">
            <summary>
            Gets or sets the n h4_min_lb.
            </summary>
            <value>
            The n h4_min_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.plant">
            <summary>
            Gets or sets the plant.
            </summary>
            <value>
            The plant.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ratoon">
            <summary>
            Gets or sets the ratoon.
            </summary>
            <value>
            The ratoon.
            </value>
        </member>
        <member name="F:Models.Sugarcane.crop">
            <summary>
            The crop
            </summary>
        </member>
        <member name="P:Models.Sugarcane.cultivars">
            <summary>
            Gets or sets the cultivars.
            </summary>
            <value>
            The cultivars.
            </value>
        </member>
        <member name="F:Models.Sugarcane.cult">
            <summary>
            The cult
            </summary>
        </member>
        <member name="P:Models.Sugarcane.eo_crop_factor">
            <summary>
            Gets or sets the eo_crop_factor.
            </summary>
            <value>
            The eo_crop_factor.
            </value>
        </member>
        <member name="P:Models.Sugarcane.uptake_source">
            <summary>
            Gets or sets the uptake_source.
            </summary>
            <value>
            The uptake_source.
            </value>
        </member>
        <member name="F:Models.Sugarcane.xf">
            <summary>
            The xf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.ll">
            <summary>
            The ll
            </summary>
        </member>
        <member name="F:Models.Sugarcane.kl">
            <summary>
            The kl
            </summary>
        </member>
        <member name="P:Models.Sugarcane.rlv_init">
            <summary>
            Gets or sets the rlv_init.
            </summary>
            <value>
            The rlv_init.
            </value>
        </member>
        <member name="M:Models.Sugarcane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Sugarcane"/> class.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.fr_intc_radn_">
            <summary>
            The fr_intc_radn_
            </summary>
        </member>
        <member name="F:Models.Sugarcane.swim3">
            <summary>
            The swim3
            </summary>
        </member>
        <member name="F:Models.Sugarcane.dlayer">
            <summary>
            The dlayer
            </summary>
        </member>
        <member name="P:Models.Sugarcane.num_layers">
            <summary>
            Gets the num_layers.
            </summary>
            <value>
            The num_layers.
            </value>
        </member>
        <member name="F:Models.Sugarcane.bd">
            <summary>
            The bd
            </summary>
        </member>
        <member name="F:Models.Sugarcane.dul_dep">
            <summary>
            The dul_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sw_dep">
            <summary>
            The sw_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sat_dep">
            <summary>
            The sat_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.ll15_dep">
            <summary>
            The ll15_dep
            </summary>
        </member>
        <member name="P:Models.Sugarcane.plants">
            <summary>
            Gets or sets the plants.
            </summary>
            <value>
            The plants.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lodge_redn_photo">
            <summary>
            Gets or sets the lodge_redn_photo.
            </summary>
            <value>
            The lodge_redn_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lodge_redn_sucrose">
            <summary>
            Gets or sets the lodge_redn_sucrose.
            </summary>
            <value>
            The lodge_redn_sucrose.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lodge_redn_green_leaf">
            <summary>
            Gets or sets the lodge_redn_green_leaf.
            </summary>
            <value>
            The lodge_redn_green_leaf.
            </value>
        </member>
        <member name="F:Models.Sugarcane.g_ll_dep">
            <summary>
            The g_ll_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_root_length">
            <summary>
            The g_root_length
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_crop_status">
            <summary>
            The g_crop_status
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_crop_cultivar">
            <summary>
            The g_crop_cultivar
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_plant_status_out_today">
            <summary>
            The g_plant_status_out_today
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sowing_depth">
            <summary>
            The g_sowing_depth
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_year">
            <summary>
            The g_year
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_day_of_year">
            <summary>
            The g_day_of_year
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_temp_stress_photo">
            <summary>
            The g_temp_stress_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_temp_stress_stalk">
            <summary>
            The g_temp_stress_stalk
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_expansion">
            <summary>
            The g_swdef_expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_stalk">
            <summary>
            The g_swdef_stalk
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_photo">
            <summary>
            The g_swdef_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_pheno">
            <summary>
            The g_swdef_pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_fixation">
            <summary>
            The g_swdef_fixation
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_expansion">
            <summary>
            The g_nfact_expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_stalk">
            <summary>
            The g_nfact_stalk
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_photo">
            <summary>
            The g_nfact_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_pheno">
            <summary>
            The g_nfact_pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_redn_photo">
            <summary>
            The g_lodge_redn_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_redn_sucrose">
            <summary>
            The g_lodge_redn_sucrose
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_redn_green_leaf">
            <summary>
            The g_lodge_redn_green_leaf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sucrose_fraction">
            <summary>
            The g_sucrose_fraction
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_oxdef_photo">
            <summary>
            The g_oxdef_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cnd_photo">
            <summary>
            The g_cnd_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cswd_photo">
            <summary>
            The g_cswd_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cswd_expansion">
            <summary>
            The g_cswd_expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cswd_pheno">
            <summary>
            The g_cswd_pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_tt">
            <summary>
            The G_DLT_TT
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_tt_tot">
            <summary>
            The g_tt_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_phase_tt">
            <summary>
            The g_phase_tt
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_stage">
            <summary>
            The g_dlt_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_current_stage">
            <summary>
            The g_current_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_previous_stage">
            <summary>
            The g_previous_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_days_tot">
            <summary>
            The g_days_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_canopy_height">
            <summary>
            The g_dlt_canopy_height
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_canopy_height">
            <summary>
            The g_canopy_height
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_phase_devel">
            <summary>
            The g_phase_devel
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_ratoon_no">
            <summary>
            The g_ratoon_no
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_plants">
            <summary>
            The g_plants
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants">
            <summary>
            The g_dlt_plants
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_initial_plant_density">
            <summary>
            The g_initial_plant_density
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_root_depth">
            <summary>
            The g_dlt_root_depth
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_root_depth">
            <summary>
            The g_root_depth
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_flag">
            <summary>
            The g_lodge_flag
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_transpiration_tot">
            <summary>
            The g_transpiration_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_demand_tot">
            <summary>
            The g_n_demand_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_conc_act_stover_tot">
            <summary>
            The g_n_conc_act_stover_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lai_max">
            <summary>
            The g_lai_max
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_isdate">
            <summary>
            The g_isdate
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_plant_wc">
            <summary>
            The g_plant_wc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plant_wc">
            <summary>
            The g_dlt_plant_wc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_sw_dep">
            <summary>
            The g_dlt_sw_dep
            </summary>
        </member>
        <member name="P:Models.Sugarcane.WaterUptake">
            <summary>
            Soil water uptake - positive values.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_demand">
            <summary>
            The g_sw_demand
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_demand_te">
            <summary>
            The g_sw_demand_te
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_avail_pot">
            <summary>
            The g_sw_avail_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_avail">
            <summary>
            The g_sw_avail
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_supply">
            <summary>
            The g_sw_supply
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_root_length">
            <summary>
            The g_dlt_root_length
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_root_length_senesced">
            <summary>
            The g_dlt_root_length_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_death_drought">
            <summary>
            The g_dlt_plants_death_drought
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_failure_leaf_sen">
            <summary>
            The g_dlt_plants_failure_leaf_sen
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_failure_emergence">
            <summary>
            The g_dlt_plants_failure_emergence
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_failure_germ">
            <summary>
            The g_dlt_plants_failure_germ
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_death_lodging">
            <summary>
            The g_dlt_plants_death_lodging
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm">
            <summary>
            The G_DLT_DM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_green">
            <summary>
            The g_dlt_dm_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_senesced">
            <summary>
            The g_dlt_dm_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_realloc">
            <summary>
            The g_dlt_dm_realloc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_detached">
            <summary>
            The g_dlt_dm_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_dead_detached">
            <summary>
            The g_dlt_dm_dead_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_green_retrans">
            <summary>
            The g_dlt_dm_green_retrans
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_dead">
            <summary>
            The g_dm_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_green">
            <summary>
            The g_dm_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_senesced">
            <summary>
            The g_dm_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_plant_top_tot">
            <summary>
            The g_dm_plant_top_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_partition_xs">
            <summary>
            The g_partition_xs
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_pot_rue">
            <summary>
            The g_dlt_dm_pot_rue
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_pot_te">
            <summary>
            The g_dlt_dm_pot_te
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_pot_rue_pot">
            <summary>
            The g_dlt_dm_pot_rue_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_radn_int">
            <summary>
            The g_radn_int
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_transp_eff">
            <summary>
            The g_transp_eff
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_min_sstem_sucrose">
            <summary>
            The g_min_sstem_sucrose
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_slai">
            <summary>
            The g_slai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai">
            <summary>
            The g_dlt_slai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_lai">
            <summary>
            The g_dlt_lai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_lai_pot">
            <summary>
            The g_dlt_lai_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_lai_stressed">
            <summary>
            The g_dlt_lai_stressed
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lai">
            <summary>
            The g_lai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_tlai_dead">
            <summary>
            The g_tlai_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_detached">
            <summary>
            The g_dlt_slai_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_tlai_dead_detached">
            <summary>
            The g_dlt_tlai_dead_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_age">
            <summary>
            The g_dlt_slai_age
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_light">
            <summary>
            The g_dlt_slai_light
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_water">
            <summary>
            The g_dlt_slai_water
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_frost">
            <summary>
            The g_dlt_slai_frost
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sla_min">
            <summary>
            The g_sla_min
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_leaf_no_zb">
            <summary>
            The g_leaf_no_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_node_no_zb">
            <summary>
            The g_node_no_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_node_no_dead_zb">
            <summary>
            The g_node_no_dead_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_leaf_no">
            <summary>
            The g_dlt_leaf_no
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_node_no">
            <summary>
            The g_dlt_node_no
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_node_no_dead">
            <summary>
            The g_dlt_node_no_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_leaf_area_zb">
            <summary>
            The g_leaf_area_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_leaf_dm_zb">
            <summary>
            The g_leaf_dm_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_node_no_detached_ob">
            <summary>
            The g_node_no_detached_ob
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_demand">
            <summary>
            The g_n_demand
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_green">
            <summary>
            The g_dlt_n_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_senesced">
            <summary>
            The g_dlt_n_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_realloc">
            <summary>
            The g_dlt_n_realloc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_detached">
            <summary>
            The g_dlt_n_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_dead_detached">
            <summary>
            The g_dlt_n_dead_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_dead">
            <summary>
            The g_n_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_green">
            <summary>
            The g_n_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_senesced">
            <summary>
            The g_n_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_retrans">
            <summary>
            The g_dlt_n_retrans
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_no3gsm">
            <summary>
            The g_dlt_no3gsm
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_nh4gsm">
            <summary>
            The G_DLT_NH4GSM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm">
            <summary>
            The g_no3gsm
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nh4gsm">
            <summary>
            The G_NH4GSM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_min">
            <summary>
            The g_no3gsm_min
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nh4gsm_min">
            <summary>
            The g_nh4gsm_min
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_diffn_pot">
            <summary>
            The g_no3gsm_diffn_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_mflow_avail">
            <summary>
            The g_no3gsm_mflow_avail
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_uptake_pot">
            <summary>
            The g_no3gsm_uptake_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nh4gsm_uptake_pot">
            <summary>
            The g_nh4gsm_uptake_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_fix_pot">
            <summary>
            The g_n_fix_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_conc_crit">
            <summary>
            The g_n_conc_crit
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_conc_min">
            <summary>
            The g_n_conc_min
            </summary>
        </member>
        <member name="M:Models.Sugarcane.ZeroArray(System.Double[]@)">
            <summary>
            Zeroes the array.
            </summary>
            <param name="A">a.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_zero_globals">
            <summary>
            Sugar_zero_globalses this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_zero_daily_variables">
            <summary>
            Sugar_zero_daily_variableses this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_zero_variables">
            <summary>
            Sugar_zero_variableses this instance.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.smm2m">
            <summary>
            The SMM2M
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sm2smm">
            <summary>
            The SM2SMM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.smm2sm">
            <summary>
            The SMM2SM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.kg2gm">
            <summary>
            The KG2GM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.ha2sm">
            <summary>
            The ha2sm
            </summary>
        </member>
        <member name="F:Models.Sugarcane.fract2pcnt">
            <summary>
            The fract2pcnt
            </summary>
        </member>
        <member name="F:Models.Sugarcane.gm2kg">
            <summary>
            The GM2KG
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sm2ha">
            <summary>
            The sm2ha
            </summary>
        </member>
        <member name="F:Models.Sugarcane.t2g">
            <summary>
            The T2G
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g2t">
            <summary>
            The G2T
            </summary>
        </member>
        <member name="M:Models.Sugarcane.root_proportion(System.Int32,System.Double[],System.Double)">
            <summary>
            Root_proportions the specified layer_ob.
            </summary>
            <param name="Layer_ob">The layer_ob.</param>
            <param name="Dlayer">The dlayer.</param>
            <param name="RootDepth">The root depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.on_day_of(System.Int32,System.Double)">
            <summary>
            On_day_ofs the specified stage_no.
            </summary>
            <param name="stage_no">The stage_no.</param>
            <param name="current_stage">The current_stage.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.stage_is_between(System.Int32,System.Int32,System.Double)">
            <summary>
            Stage_is_betweens the specified start_ob.
            </summary>
            <param name="start_ob">The start_ob.</param>
            <param name="finish_ob">The finish_ob.</param>
            <param name="current_stage">The current_stage.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.linint_3hrly_temp(System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Linint_3hrly_temps the specified i_tmax.
            </summary>
            <param name="i_tmax">The i_tmax.</param>
            <param name="i_tmin">The i_tmin.</param>
            <param name="i_temps">The i_temps.</param>
            <param name="i_y">The i_y.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.temp_3hr(System.Double,System.Double,System.Int32)">
            <summary>
            Temp_3hrs the specified i_tmax.
            </summary>
            <param name="i_tmax">The i_tmax.</param>
            <param name="i_tmin">The i_tmin.</param>
            <param name="i_period">The i_period.</param>
            <returns></returns>
            <exception cref="T:Models.Core.ApsimXException">
             3 hr. number + i_period +  is below 1
            or
             3 hr. number + i_period +  is above 8
            </exception>
        </member>
        <member name="M:Models.Sugarcane.accumulate_ob(System.Double,System.Double[]@,System.Double,System.Double)">
            <summary>
            Accumulate_obs the specified i_value.
            </summary>
            <param name="i_value">The i_value.</param>
            <param name="i_array_zb">The i_array_zb.</param>
            <param name="i_index_ob">The i_index_ob.</param>
            <param name="i_dlt_index">The i_dlt_index.</param>
        </member>
        <member name="M:Models.Sugarcane.accumulate_zb(System.Double,System.Double[]@,System.Double,System.Double)">
            <summary>
            Accumulate_zbs the specified i_value.
            </summary>
            <param name="i_value">The i_value.</param>
            <param name="io_array_zb">The io_array_zb.</param>
            <param name="i_index_zb">The i_index_zb.</param>
            <param name="i_dlt_index">The i_dlt_index.</param>
        </member>
        <member name="M:Models.Sugarcane.error_margin(System.Double)">
            <summary>
            Error_margins the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.get_cumulative_index_real(System.Double,System.Double[])">
            <summary>
            Get_cumulative_index_reals the specified cum_sum.
            </summary>
            <param name="cum_sum">The cum_sum.</param>
            <param name="A">a.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.count_of_real_vals(System.Double[],System.Int32)">
            <summary>
            Count_of_real_valses the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="StopLayer_ob">The stop layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.AddArray(System.Double[],System.Double[]@,System.Int32)">
            <summary>
            Adds the array.
            </summary>
            <param name="AddThis_zb">The add this_zb.</param>
            <param name="ToThis_zb">To this_zb.</param>
            <param name="NumElemToAdd_ob">The number elem to add_ob.</param>
        </member>
        <member name="M:Models.Sugarcane.SubtractArray(System.Double[],System.Double[]@,System.Int32)">
            <summary>
            Subtracts the array.
            </summary>
            <param name="SubThis_zb">The sub this_zb.</param>
            <param name="FromThis_zb">From this_zb.</param>
            <param name="NumElemToSub_ob">The number elem to sub_ob.</param>
        </member>
        <member name="M:Models.Sugarcane.SumArray(System.Double[],System.Int32)">
            <summary>
            Sums the array.
            </summary>
            <param name="A">a.</param>
            <param name="StopLayer_ob">The stop layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sum_between(System.Int32,System.Int32,System.Double[])">
            <summary>
            Sum_betweens the specified start_ob.
            </summary>
            <param name="start_ob">The start_ob.</param>
            <param name="finish_ob">The finish_ob.</param>
            <param name="array_zb">The array_zb.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sum_between_zb(System.Int32,System.Int32,System.Double[])">
            <summary>
            Sum_between_zbs the specified start_zb.
            </summary>
            <param name="start_zb">The start_zb.</param>
            <param name="finish_zb">The finish_zb.</param>
            <param name="array_zb">The array_zb.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.fill_real_array(System.Double[]@,System.Double,System.Int32)">
            <summary>
            Fill_real_arrays the specified a_zb.
            </summary>
            <param name="A_zb">The a_zb.</param>
            <param name="Value">The value.</param>
            <param name="StopLayer_ob">The stop layer_ob.</param>
        </member>
        <member name="M:Models.Sugarcane.l_bound(System.Double,System.Double)">
            <summary>
            L_bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="MinVal">The minimum value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.u_bound(System.Double,System.Double)">
            <summary>
            U_bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="MaxVal">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.bound(System.Double,System.Double,System.Double)">
            <summary>
            Bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="MinVal">The minimum value.</param>
            <param name="MaxVal">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.max(System.Double[])">
            <summary>
            Allows any number of parameters (unlike Math.Max())
            </summary>
            <param name="A">a.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.min(System.Double[])">
            <summary>
            Allows any number of parameters (unlike Math.Min())
            </summary>
            <param name="A">a.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.bound_check_real_array(System.Double[],System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Bound_check_real_arrays the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="lower_bound">The lower_bound.</param>
            <param name="upper_bound">The upper_bound.</param>
            <param name="array_name">The array_name.</param>
            <param name="array_size">The array_size.</param>
        </member>
        <member name="M:Models.Sugarcane.bound_check_integer_var(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Bound_check_integer_vars the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <param name="vname">The vname.</param>
        </member>
        <member name="M:Models.Sugarcane.bound_check_real_var(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Bound_check_real_vars the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <param name="LowerBound">The lower bound.</param>
            <param name="UpperBound">The upper bound.</param>
            <param name="VariableName">Name of the variable.</param>
        </member>
        <member name="M:Models.Sugarcane.zb(System.Int32)">
            <summary>
            Returns Zero Based Index from One Based Index
            </summary>
            <param name="OneBased">The one based.</param>
            <returns>
            Zero Based Index
            </returns>
        </member>
        <member name="M:Models.Sugarcane.ob(System.Int32)">
            <summary>
            Returns One Based Index from Zero Based Index
            </summary>
            <param name="ZeroBased">The zero based.</param>
            <returns>
            One Based Index
            </returns>
        </member>
        <member name="M:Models.Sugarcane.zb_d(System.Double)">
            <summary>
            ZB_Ds the specified one based.
            </summary>
            <param name="OneBased">The one based.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_nfact(System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_nfacts the specified i_dm_green.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_N_conc_crit">The i_ n_conc_crit.</param>
            <param name="i_N_conc_min">The i_ n_conc_min.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="c_k_nfact">The c_k_nfact.</param>
            <param name="o_nfact">The o_nfact.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_temperature_stress(System.Int32,System.Double[],System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Sugar_temperature_stresses the specified c_num_ave_temp.
            </summary>
            <param name="c_num_ave_temp">The c_num_ave_temp.</param>
            <param name="c_x_ave_temp">The c_x_ave_temp.</param>
            <param name="c_y_stress_photo">The c_y_stress_photo.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <param name="o_tfac">The o_tfac.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_radn_int(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_radn_ints the specified c_extinction_coef.
            </summary>
            <param name="c_extinction_coef">The c_extinction_coef.</param>
            <param name="i_fr_intc_radn">The i_fr_intc_radn.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_radn">The i_radn.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_transp_eff1(System.Double,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Cproc_transp_eff1s the specified c_svp_fract.
            </summary>
            <param name="c_svp_fract">The c_svp_fract.</param>
            <param name="c_transp_eff_cf">The c_transp_eff_cf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.vapour_pressure_deficit(System.Double,System.Double,System.Double)">
            <summary>
            Vapour_pressure_deficits the specified c_svp_fract.
            </summary>
            <param name="c_svp_fract">The c_svp_fract.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.svp(System.Double)">
            <summary>
            SVPs the specified temp_arg.
            </summary>
            <param name="temp_arg">The temp_arg.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_water_demand(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_water_demands the specified i_dlt_dm_pot_rue.
            </summary>
            <param name="i_dlt_dm_pot_rue">The i_dlt_dm_pot_rue.</param>
            <param name="i_transp_eff">The i_transp_eff.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_eo">The i_eo.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_sw_demand_bound(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cproc_sw_demand_bounds the specified i_sw_demand_unbounded.
            </summary>
            <param name="i_sw_demand_unbounded">The i_sw_demand_unbounded.</param>
            <param name="i_eo_crop_factor">The i_eo_crop_factor.</param>
            <param name="i_eo">The i_eo.</param>
            <param name="i_cover_green">The i_cover_green.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_nit_demand_est(System.Double[],System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_nit_demand_ests the specified i_dm_green.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dlt_dm_pot_rue_pot">The i_dlt_dm_pot_rue_pot.</param>
            <param name="i_N_conc_crit">The i_ n_conc_crit.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="o_N_demand">The o_ n_demand.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_demand(System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_demand.
            </summary>
            <param name="i_dlt_dm_green_pot">The i_dlt_dm_green_pot.</param>
            <param name="i_dlt_dm_pot_rue_pot">The i_dlt_dm_pot_rue_pot.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_N_conc_crit">The i_ n_conc_crit.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="o_N_demand">The o_ n_demand.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_root_depth_growth(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double@,System.Double)">
            <summary>
            Sugar_root_depth_growthes the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="c_x_sw_ratio">The c_x_sw_ratio.</param>
            <param name="c_y_sw_fac_root">The c_y_sw_fac_root.</param>
            <param name="c_x_afps">The c_x_afps.</param>
            <param name="c_y_afps_fac">The c_y_afps_fac.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="c_root_depth_rate">The c_root_depth_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_xf">The i_xf.</param>
            <param name="o_dlt_root_depth">The o_dlt_root_depth.</param>
            <param name="i_root_depth">The i_root_depth.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_avail_fac(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Crop_sw_avail_facs the specified c_x_sw_ratio.
            </summary>
            <param name="c_x_sw_ratio">The c_x_sw_ratio.</param>
            <param name="c_y_sw_fac_root">The c_y_sw_fac_root.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_layer_ob">The i_layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_afps_fac(System.Int32)">
            <summary>
            Sugar_afps_facs the specified i_layer_ob.
            </summary>
            <param name="i_layer_ob">The i_layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_root_depth_increase(System.Double[],System.Double,System.Double[],System.Double,System.Double,System.Double[])">
            <summary>
            Crop_root_depth_increases the specified c_root_depth_rate.
            </summary>
            <param name="c_root_depth_rate">The c_root_depth_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_avail_fac_deepest_layer_ob">The i_sw_avail_fac_deepest_layer_ob.</param>
            <param name="i_xf">The i_xf.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_init_root_depth(System.Double[],System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_init_root_depthes the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_root_depth">The o_dlt_root_depth.</param>
        </member>
        <member name="M:Models.Sugarcane.GetSupplyFromSWIM">
            <summary>
            Gets the supply from swim.
            </summary>
            <exception cref="T:Models.Core.ApsimXException"> Sugar can't get 'supply' from  SWIM yet</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_sw_supply1(System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Cproc_sw_supply1s the specified C_SW_LB.
            </summary>
            <param name="c_sw_lb">The C_SW_LB.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_kl">The i_kl.</param>
            <param name="o_sw_avail">The o_sw_avail.</param>
            <param name="o_sw_avail_pot">The o_sw_avail_pot.</param>
            <param name="o_sw_supply">The o_sw_supply.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_check_sw(System.Double,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Crop_check_sws the specified c_minsw.
            </summary>
            <param name="c_minsw">The c_minsw.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_avail_pot(System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@)">
            <summary>
            Crop_sw_avail_pots the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="o_sw_avail_pot">The o_sw_avail_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_avail(System.Double[],System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_sw_avails the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="o_sw_avail">The o_sw_avail.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_supply(System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_sw_supplies the specified idlayer.
            </summary>
            <param name="idlayer">The idlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_kl">The i_kl.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="o_sw_supply">The o_sw_supply.</param>
        </member>
        <member name="M:Models.Sugarcane.GetUptakeFromSWIM">
            <summary>
            Gets the uptake from swim.
            </summary>
            <exception cref="T:Models.Core.ApsimXException"> Sugar can't get 'uptake' from SWIM yet</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_sw_uptake1(System.Double[],System.Double,System.Double,System.Double[],System.Double[]@)">
            <summary>
            Cproc_sw_uptake1s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_dlt_sw_dep">The o_dlt_sw_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_swdef_expansion(System.Double[],System.Double[],System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Crop_swdef_expansions the specified c_x_sw_demand_ratio.
            </summary>
            <param name="c_x_sw_demand_ratio">The c_x_sw_demand_ratio.</param>
            <param name="c_y_swdef_leaf">The c_y_swdef_leaf.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_swdef_demand_ratio(System.Double[],System.Double[],System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Sugar_swdef_demand_ratioes the specified c_x_sw_demand_ratio.
            </summary>
            <param name="c_x_sw_demand_ratio">The c_x_sw_demand_ratio.</param>
            <param name="c_y_swdef_leaf">The c_y_swdef_leaf.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_swdef_pheno(System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double@)">
            <summary>
            Crop_swdef_phenoes the specified c_x_sw_avail_ratio.
            </summary>
            <param name="c_x_sw_avail_ratio">The c_x_sw_avail_ratio.</param>
            <param name="c_y_swdef_pheno">The c_y_swdef_pheno.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_swdef_photo(System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Crop_swdef_photoes the specified i_root_depth.
            </summary>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_min_sstem_sucrose(System.Double@)">
            <summary>
            Sugar_min_sstem_sucroses the specified io_min_sstem_sucrose.
            </summary>
            <param name="io_min_sstem_sucrose">The io_min_sstem_sucrose.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_phen_init(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[]@)">
            <summary>
            Sugar_phen_inits the specified c_shoot_lag.
            </summary>
            <param name="c_shoot_lag">The c_shoot_lag.</param>
            <param name="c_shoot_rate">The c_shoot_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_ratoon_no">The i_ratoon_no.</param>
            <param name="c_tt_begcane_to_flowering">The c_tt_begcane_to_flowering.</param>
            <param name="c_tt_emerg_to_begcane">The c_tt_emerg_to_begcane.</param>
            <param name="c_tt_flowering_to_crop_end">The c_tt_flowering_to_crop_end.</param>
            <param name="io_phase_tt">The io_phase_tt.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_thermal_time(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Crop_thermal_times the specified c_x_temp.
            </summary>
            <param name="c_x_temp">The c_x_temp.</param>
            <param name="c_y_tt">The c_y_tt.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <param name="i_start_stress_stage">The i_start_stress_stage.</param>
            <param name="i_end_stress_stage">The i_end_stress_stage.</param>
            <param name="i_nfact_pheno">The i_nfact_pheno.</param>
            <param name="i_swdef_pheno">The i_swdef_pheno.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_phase_devel(System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double@,System.Double[],System.Double[])">
            <summary>
            Crop_phase_devels the specified i_sowing_stage.
            </summary>
            <param name="i_sowing_stage">The i_sowing_stage.</param>
            <param name="i_germ_stage">The i_germ_stage.</param>
            <param name="i_end_development_stage">The i_end_development_stage.</param>
            <param name="c_pesw_germ">The c_pesw_germ.</param>
            <param name="c_fasw_emerg">The c_fasw_emerg.</param>
            <param name="c_rel_emerg_rate">The c_rel_emerg_rate.</param>
            <param name="c_num_fasw_emerg">The c_num_fasw_emerg.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="io_dlt_tt">The io_dlt_tt.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_germination(System.Int32,System.Int32,System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Crop_germinations the specified i_sowing_stage.
            </summary>
            <param name="i_sowing_stage">The i_sowing_stage.</param>
            <param name="i_germ_stage">The i_germ_stage.</param>
            <param name="c_pesw_germ">The c_pesw_germ.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_germ_dlt_tt(System.Double[],System.Double[],System.Double,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double@)">
            <summary>
            Crop_germ_dlt_tts the specified c_fasw_emerg.
            </summary>
            <param name="c_fasw_emerg">The c_fasw_emerg.</param>
            <param name="c_rel_emerg_rate">The c_rel_emerg_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_germ_phase">The i_germ_phase.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="io_dlt_tt">The io_dlt_tt.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_phase_tt(System.Double,System.Double[],System.Double[],System.Double)">
            <summary>
            Crop_phase_tts the specified i_dlt_tt.
            </summary>
            <param name="i_dlt_tt">The i_dlt_tt.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="i_stage_no">The i_stage_no.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_devel(System.Double,System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
            Crop_devels the specified i_current_stage.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_max_stage">The i_max_stage.</param>
            <param name="i_phase_devel">The i_phase_devel.</param>
            <param name="o_dlt_stage">The o_dlt_stage.</param>
            <param name="io_current_stage">The io_current_stage.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_canopy_height(System.Double,System.Double[],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
            Cproc_canopy_heights the specified i_canopy_height.
            </summary>
            <param name="i_canopy_height">The i_canopy_height.</param>
            <param name="i_x_stem_wt">The i_x_stem_wt.</param>
            <param name="i_y_height">The i_y_height.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_stem">The i_stem.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_leaf_no_init1(System.Double,System.Double,System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Cproc_leaf_no_init1s the specified c_leaf_no_at_emerg.
            </summary>
            <param name="c_leaf_no_at_emerg">The c_leaf_no_at_emerg.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_emerg">The i_emerg.</param>
            <param name="o_leaf_no_zb">The o_leaf_no_zb.</param>
            <param name="o_node_no_zb">The o_node_no_zb.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_leaf_no_pot1(System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double@,System.Double@)">
            <summary>
            Cproc_leaf_no_pot1s the specified c_x_node_no_app.
            </summary>
            <param name="c_x_node_no_app">The c_x_node_no_app.</param>
            <param name="c_y_node_app_rate">The c_y_node_app_rate.</param>
            <param name="c_x_node_no_leaf">The c_x_node_no_leaf.</param>
            <param name="c_y_leaves_per_node">The c_y_leaves_per_node.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_start_node_app">The i_start_node_app.</param>
            <param name="i_end_node_app">The i_end_node_app.</param>
            <param name="i_emerg">The i_emerg.</param>
            <param name="i_dlt_tt">The i_dlt_tt.</param>
            <param name="i_node_no_zb">The i_node_no_zb.</param>
            <param name="o_dlt_leaf_no_pot">The o_dlt_leaf_no_pot.</param>
            <param name="o_dlt_node_no_pot">The o_dlt_node_no_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_area_devel(System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_leaf_area_devels the specified c_leaf_no_correction.
            </summary>
            <param name="c_leaf_no_correction">The c_leaf_no_correction.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_leaf_no_zb">The i_leaf_no_zb.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="c_leaf_size">The c_leaf_size.</param>
            <param name="c_leaf_size_no">The c_leaf_size_no.</param>
            <param name="c_tillerf_leaf_size">The c_tillerf_leaf_size.</param>
            <param name="c_tillerf_leaf_size_no">The c_tillerf_leaf_size_no.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_size(System.Double[],System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Sugar_leaf_sizes the specified c_leaf_size.
            </summary>
            <param name="c_leaf_size">The c_leaf_size.</param>
            <param name="c_leaf_size_no">The c_leaf_size_no.</param>
            <param name="c_tillerf_leaf_size">The c_tillerf_leaf_size.</param>
            <param name="c_tillerf_leaf_size_no">The c_tillerf_leaf_size_no.</param>
            <param name="i_leaf_no_ob">The i_leaf_no_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_bio_water1(System.Double,System.Double[],System.Double)">
            <summary>
            Cproc_bio_water1s the specified i_root_depth.
            </summary>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="i_transp_eff">The i_transp_eff.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_oxdef_photo1(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Crop_oxdef_photo1s the specified c_oxdef_photo.
            </summary>
            <param name="c_oxdef_photo">The c_oxdef_photo.</param>
            <param name="c_oxdef_photo_rtfr">The c_oxdef_photo_rtfr.</param>
            <param name="i_ll15_dep">The i_ll15_dep.</param>
            <param name="i_sat_dep">The i_sat_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_root_dist(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double)">
            <summary>
            Crop_root_dists the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_root_array">The o_root_array.</param>
            <param name="i_root_sum">The i_root_sum.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_pot_rue(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_dm_pot_rues the specified c_rue.
            </summary>
            <param name="c_rue">The c_rue.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_radn_int">The i_radn_int.</param>
            <param name="i_nfact_photo">The i_nfact_photo.</param>
            <param name="i_temp_stress_photo">The i_temp_stress_photo.</param>
            <param name="i_oxdef_photo">The i_oxdef_photo.</param>
            <param name="i_lodge_redn_photo">The i_lodge_redn_photo.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_rue_reduction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_rue_reductions the specified i_nfact_photo.
            </summary>
            <param name="i_nfact_photo">The i_nfact_photo.</param>
            <param name="i_temp_stress_photo">The i_temp_stress_photo.</param>
            <param name="i_oxdef_photo">The i_oxdef_photo.</param>
            <param name="i_lodge_redn_photo">The i_lodge_redn_photo.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_pot_rue_pot(System.Double[],System.Double,System.Double)">
            <summary>
            Sugar_dm_pot_rue_pots the specified c_rue.
            </summary>
            <param name="c_rue">The c_rue.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_radn_int">The i_radn_int.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_init(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_dm_inits the specified c_dm_cabbage_init.
            </summary>
            <param name="c_dm_cabbage_init">The c_dm_cabbage_init.</param>
            <param name="c_dm_leaf_init">The c_dm_leaf_init.</param>
            <param name="c_dm_sstem_init">The c_dm_sstem_init.</param>
            <param name="c_dm_sucrose_init">The c_dm_sucrose_init.</param>
            <param name="c_specific_root_length">The c_specific_root_length.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="io_dm_green">The io_dm_green.</param>
            <param name="o_leaf_dm">The o_leaf_dm.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_sucrose_fraction(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_sucrose_fractions the specified c_stress_factor_stalk.
            </summary>
            <param name="c_stress_factor_stalk">The c_stress_factor_stalk.</param>
            <param name="c_sucrose_fraction_stalk">The c_sucrose_fraction_stalk.</param>
            <param name="i_swdef_stalk">The i_swdef_stalk.</param>
            <param name="i_nfact_stalk">The i_nfact_stalk.</param>
            <param name="i_temp_stress_stalk">The i_temp_stress_stalk.</param>
            <param name="i_lodge_redn_sucrose">The i_lodge_redn_sucrose.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_partition_rules(System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[]@,System.Double@)">
            <summary>
            Sugar_dm_partition_ruleses the specified c_cane_fraction.
            </summary>
            <param name="c_cane_fraction">The c_cane_fraction.</param>
            <param name="c_leaf_cabbage_ratio">The c_leaf_cabbage_ratio.</param>
            <param name="i_min_sstem_sucrose">The i_min_sstem_sucrose.</param>
            <param name="c_ratio_root_shoot">The c_ratio_root_shoot.</param>
            <param name="c_sucrose_delay">The c_sucrose_delay.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_sla_min">The i_sla_min.</param>
            <param name="i_sucrose_fraction">The i_sucrose_fraction.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="i_dlt_dm">The i_dlt_dm.</param>
            <param name="i_dlt_lai_pot">The i_dlt_lai_pot.</param>
            <param name="o_dlt_dm_green">The o_dlt_dm_green.</param>
            <param name="o_partition_xs">The o_partition_xs.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_area(System.Double[],System.Double,System.Double,System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_leaf_areas the specified i_dlt_dm_green.
            </summary>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dlt_lai_stressed">The i_dlt_lai_stressed.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_leaf_no_zb">The i_leaf_no_zb.</param>
            <param name="c_sla_lfno">The c_sla_lfno.</param>
            <param name="c_sla_max">The c_sla_max.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_root_length_growth1(System.Double[]@,System.Double,System.Double[],System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Cproc_root_length_growth1s the specified o_dlt_root_length.
            </summary>
            <param name="o_dlt_root_length">The o_dlt_root_length.</param>
            <param name="c_specific_root_length">The c_specific_root_length.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_root_wt">The i_dlt_root_wt.</param>
            <param name="i_dlt_root_depth">The i_dlt_root_depth.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_xf">The i_xf.</param>
            <param name="c_x_sw_ratio">The c_x_sw_ratio.</param>
            <param name="c_y_sw_fac_root">The c_y_sw_fac_root.</param>
            <param name="c_x_plant_rld">The c_x_plant_rld.</param>
            <param name="c_y_rel_root_rate">The c_y_rel_root_rate.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <exception cref="T:Models.Core.ApsimXException">Too many layers for crop routines</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_death_grass(System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Sugar_leaf_death_grasses the specified c_green_leaf_no.
            </summary>
            <param name="c_green_leaf_no">The c_green_leaf_no.</param>
            <param name="i_lodge_redn_green_leaf">The i_lodge_redn_green_leaf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_leaf_no">The i_leaf_no.</param>
            <param name="i_node_no_dead">The i_node_no_dead.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_area_sen_age0(System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_leaf_area_sen_age0s the specified i_dlt_node_no_dead.
            </summary>
            <param name="i_dlt_node_no_dead">The i_dlt_node_no_dead.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_leaf_area_zb">The i_leaf_area_zb.</param>
            <param name="i_node_no_dead_zb">The i_node_no_dead_zb.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_slai">The i_slai.</param>
            <param name="i_node_no_detached_ob">The i_node_no_detached_ob.</param>
            <param name="c_leaf_no_at_emerg">The c_leaf_no_at_emerg.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_leaf_area_sen_water1(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Crop_leaf_area_sen_water1s the specified i_sen_rate_water.
            </summary>
            <param name="i_sen_rate_water">The i_sen_rate_water.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_min_tpla">The i_min_tpla.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_leaf_area_sen_light1(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Crop_leaf_area_sen_light1s the specified i_lai_sen_light.
            </summary>
            <param name="i_lai_sen_light">The i_lai_sen_light.</param>
            <param name="i_sen_light_slope">The i_sen_light_slope.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_min_tpla">The i_min_tpla.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_leaf_area_sen_frost1(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Crop_leaf_area_sen_frost1s the specified i_frost_temp.
            </summary>
            <param name="i_frost_temp">The i_frost_temp.</param>
            <param name="i_frost_fraction">The i_frost_fraction.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_mint">The i_mint.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_min_tpla">The i_min_tpla.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_senescence(System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double[]@)">
            <summary>
            Sugar_dm_senescences the specified c_dm_root_sen_frac.
            </summary>
            <param name="c_dm_root_sen_frac">The c_dm_root_sen_frac.</param>
            <param name="c_leaf_cabbage_ratio">The c_leaf_cabbage_ratio.</param>
            <param name="c_cabbage_sheath_fr">The c_cabbage_sheath_fr.</param>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dlt_lai">The i_dlt_lai.</param>
            <param name="i_dlt_slai">The i_dlt_slai.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_leaf_dm">The i_leaf_dm.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_slai">The i_slai.</param>
            <param name="i_leaf_area">The i_leaf_area.</param>
            <param name="o_dlt_dm_senesced">The o_dlt_dm_senesced.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_no_from_lai(System.Double[],System.Double,System.Double)">
            <summary>
            Sugar_leaf_no_from_lais the specified i_leaf_area.
            </summary>
            <param name="i_leaf_area">The i_leaf_area.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_lai">The i_lai.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_root_length_senescence1(System.Double,System.Double[],System.Double,System.Double[],System.Double,System.Double[]@)">
            <summary>
            Cproc_root_length_senescence1s the specified c_specific_root_length.
            </summary>
            <param name="c_specific_root_length">The c_specific_root_length.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_root_dm_senesced">The i_dlt_root_dm_senesced.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_root_length_senesced">The o_dlt_root_length_senesced.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_retranslocate(System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_retranslocate.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_n_conc_min">The i_n_conc_min.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="o_dlt_N_retrans">The o_dlt_ n_retrans.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_retrans_avail(System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_retrans_avail.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_N_conc_min">The i_ n_conc_min.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="o_N_avail">The o_ n_avail.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_nit_supply(System.Int32)">
            <summary>
            Sugar_nit_supplies the specified i_option.
            </summary>
            <param name="i_option">The i_option.</param>
            <exception cref="T:Models.Core.ApsimXException">Invalid template option</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_supply2(System.Double[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@,System.Double,System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Cproc_n_supply2s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="o_NO3gsm_mflow_avail">The o_ n o3gsm_mflow_avail.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="o_no3gsm_diffn_pot">The o_no3gsm_diffn_pot.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_n_fix_rate">The c_n_fix_rate.</param>
            <param name="i_fixation_determinant">The i_fixation_determinant.</param>
            <param name="i_swdef_fixation">The i_swdef_fixation.</param>
            <param name="o_n_fix_pot">The o_n_fix_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_N_mass_flow1(System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@)">
            <summary>
            Crop_s the n_mass_flow1.
            </summary>
            <param name="i_num_layer">The i_num_layer.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="o_no3gsm_mflow_pot">The o_no3gsm_mflow_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_N_diffusion1(System.Int32,System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_s the n_diffusion1.
            </summary>
            <param name="i_num_layer">The i_num_layer.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="o_no3gsm_diffn_pot">The o_no3gsm_diffn_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_N_fixation_pot1(System.Double,System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Crop_s the n_fixation_pot1.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_n_fix_rate">The c_n_fix_rate.</param>
            <param name="i_fixation_determinant">The i_fixation_determinant.</param>
            <param name="i_swdef_fixation">The i_swdef_fixation.</param>
            <param name="o_n_fix_pot">The o_n_fix_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_supply4(System.Double[],System.Double[],System.Int32,System.Double[],System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Cproc_n_supply4s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_bd">The i_bd.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="o_no3gsm_uptake_pot">The o_no3gsm_uptake_pot.</param>
            <param name="i_nh4gsm">The i_nh4gsm.</param>
            <param name="i_nh4gsm_min">The i_nh4gsm_min.</param>
            <param name="o_nh4gsm_uptake_pot">The o_nh4gsm_uptake_pot.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="c_n_stress_start_stage">The c_n_stress_start_stage.</param>
            <param name="c_kno3">The c_kno3.</param>
            <param name="c_no3ppm_min">The c_no3ppm_min.</param>
            <param name="c_knh4">The C_KNH4.</param>
            <param name="c_nh4ppm_min">The c_nh4ppm_min.</param>
            <param name="c_total_n_uptake_max">The c_total_n_uptake_max.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_n_fix_rate">The c_n_fix_rate.</param>
            <param name="i_fixation_determinant">The i_fixation_determinant.</param>
            <param name="i_swdef_fixation">The i_swdef_fixation.</param>
            <param name="o_n_fix_pot">The o_n_fix_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_init(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_init.
            </summary>
            <param name="c_N_cabbage_init_conc">The c_ n_cabbage_init_conc.</param>
            <param name="c_N_leaf_init_conc">The c_ n_leaf_init_conc.</param>
            <param name="c_N_root_init_conc">The c_ n_root_init_conc.</param>
            <param name="c_N_sstem_init_conc">The c_ n_sstem_init_conc.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="o_N_green">The o_ n_green.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_nit_uptake(System.Int32)">
            <summary>
            Sugar_nit_uptakes the specified i_option.
            </summary>
            <param name="i_option">The i_option.</param>
            <exception cref="T:Models.Core.ApsimXException">Invalid template option</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_N_uptake1(System.Double,System.Double[],System.Int32,System.Double[],System.Double[],System.Double,System.String,System.Double[],System.Double[],System.Int32,System.Double,System.Double[]@)">
            <summary>
            Cproc_s the n_uptake1.
            </summary>
            <param name="c_no3_diffn_const">The c_no3_diffn_const.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_no3gsm_diffn_pot">The i_no3gsm_diffn_pot.</param>
            <param name="i_no3gsm_mflow_avail">The i_no3gsm_mflow_avail.</param>
            <param name="i_n_fix_pot">The i_n_fix_pot.</param>
            <param name="c_n_supply_preference">The c_n_supply_preference.</param>
            <param name="i_n_demand">The i_n_demand.</param>
            <param name="i_n_max">The i_n_max.</param>
            <param name="i_max_part">The i_max_part.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_NO3gsm">The o_dlt_ n o3gsm.</param>
            <exception cref="T:Models.Core.ApsimXException">bad n supply preference</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_uptake3(System.Double[],System.Int32,System.Double[],System.Double[],System.Double,System.String,System.Double[],System.Double[],System.Int32,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Cproc_n_uptake3s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_no3gsm_uptake_pot">The i_no3gsm_uptake_pot.</param>
            <param name="i_nh4gsm_uptake_pot">The i_nh4gsm_uptake_pot.</param>
            <param name="i_n_fix_pot">The i_n_fix_pot.</param>
            <param name="c_n_supply_preference">The c_n_supply_preference.</param>
            <param name="i_soil_n_demand">The i_soil_n_demand.</param>
            <param name="i_n_max">The i_n_max.</param>
            <param name="i_max_part">The i_max_part.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_no3gsm">The o_dlt_no3gsm.</param>
            <param name="o_dlt_nh4gsm">The o_dlt_nh4gsm.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_partition(System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[]@)">
            <summary>
            Sugar_s the n_partition.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_NO3gsm">The i_dlt_ n o3gsm.</param>
            <param name="i_dlt_NH4gsm">The i_dlt_ n H4GSM.</param>
            <param name="i_N_demand">The i_ n_demand.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_N_green">The o_dlt_ n_green.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_water_content(System.Double[],System.Double[],System.Double[],System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[])">
            <summary>
            Sugar_water_contents the specified c_cane_dmf_tt.
            </summary>
            <param name="c_cane_dmf_tt">The c_cane_dmf_tt.</param>
            <param name="c_cane_dmf_min">The c_cane_dmf_min.</param>
            <param name="c_cane_dmf_max">The c_cane_dmf_max.</param>
            <param name="c_num_cane_dmf">The c_num_cane_dmf.</param>
            <param name="c_cane_dmf_rate">The c_cane_dmf_rate.</param>
            <param name="i_swdef_stalk">The i_swdef_stalk.</param>
            <param name="i_nfact_stalk">The i_nfact_stalk.</param>
            <param name="i_temp_stress_stalk">The i_temp_stress_stalk.</param>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dlt_plant_wc">The i_dlt_plant_wc.</param>
            <param name="o_plant_wc">The o_plant_wc.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_plant_death">
            <summary>
            Sugar_plant_deathes this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_failure_germination(System.Double,System.Double,System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_failure_germinations the specified c_days_germ_limit.
            </summary>
            <param name="c_days_germ_limit">The c_days_germ_limit.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_failure_emergence(System.Double,System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Sugar_failure_emergences the specified c_tt_emerg_limit.
            </summary>
            <param name="c_tt_emerg_limit">The c_tt_emerg_limit.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_failure_leaf_sen(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Sugar_failure_leaf_sens the specified i_current_stage.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_death_drought(System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Sugar_death_droughts the specified c_leaf_no_crit.
            </summary>
            <param name="c_leaf_no_crit">The c_leaf_no_crit.</param>
            <param name="c_swdf_photo_limit">The c_swdf_photo_limit.</param>
            <param name="c_swdf_photo_rate">The c_swdf_photo_rate.</param>
            <param name="i_cswd_photo">The i_cswd_photo.</param>
            <param name="i_leaf_no">The i_leaf_no.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_death_lodging(System.Boolean,System.Double,System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double@)">
            <summary>
            Sugar_death_lodgings the specified i_lodge_flag.
            </summary>
            <param name="i_lodge_flag">if set to <c>true</c> [i_lodge_flag].</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="i_oxdef_photo">The i_oxdef_photo.</param>
            <param name="c_stress_lodge">The c_stress_lodge.</param>
            <param name="c_death_fr_lodge">The c_death_fr_lodge.</param>
            <param name="c_num_stress_lodge">The c_num_stress_lodge.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="o_dlt_plants_death_lodging">The o_dlt_plants_death_lodging.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_realloc_cabbage(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_realloc_cabbages the specified i_leaf.
            </summary>
            <param name="i_leaf">The i_leaf.</param>
            <param name="i_cabbage">The i_cabbage.</param>
            <param name="i_sstem">The i_sstem.</param>
            <param name="i_max_part">The i_max_part.</param>
            <param name="c_cabbage_sheath_fr">The c_cabbage_sheath_fr.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dlt_dm_senesced">The i_dlt_dm_senesced.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="o_dlt_dm_realloc">The o_dlt_dm_realloc.</param>
            <param name="o_dlt_n_realloc">The o_dlt_n_realloc.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_dm_detachment1(System.Int32,System.Double[],System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Cproc_dm_detachment1s the specified i_max_part.
            </summary>
            <param name="i_max_part">The i_max_part.</param>
            <param name="c_sen_detach_frac">The c_sen_detach_frac.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
            <param name="o_dlt_dm_detached">The o_dlt_dm_detached.</param>
            <param name="c_dead_detach_frac">The c_dead_detach_frac.</param>
            <param name="i_dm_dead">The i_dm_dead.</param>
            <param name="o_dlt_dm_dead_detached">The o_dlt_dm_dead_detached.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_detachment1(System.Int32,System.Double[],System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Cproc_n_detachment1s the specified i_max_part.
            </summary>
            <param name="i_max_part">The i_max_part.</param>
            <param name="c_sen_detach_frac">The c_sen_detach_frac.</param>
            <param name="i_n_senesced">The i_n_senesced.</param>
            <param name="o_dlt_n_detached">The o_dlt_n_detached.</param>
            <param name="c_dead_detach_frac">The c_dead_detach_frac.</param>
            <param name="i_n_dead">The i_n_dead.</param>
            <param name="o_dlt_n_dead_detached">The o_dlt_n_dead_detached.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_pool_fraction_delta(System.Int32,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_pool_fraction_deltas the specified i_num_part_ob.
            </summary>
            <param name="i_num_part_ob">The i_num_part_ob.</param>
            <param name="i_fraction_zb">The i_fraction_zb.</param>
            <param name="i_pool_zb">The i_pool_zb.</param>
            <param name="o_dlt_pool_zb">The o_dlt_pool_zb.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_lai_detachment1(System.Int32,System.Double[],System.Double,System.Double@,System.Double[],System.Double,System.Double@)">
            <summary>
            Cproc_lai_detachment1s the specified i_leaf_zb.
            </summary>
            <param name="i_leaf_zb">The i_leaf_zb.</param>
            <param name="c_sen_detach_frac">The c_sen_detach_frac.</param>
            <param name="i_slai">The i_slai.</param>
            <param name="o_dlt_slai_detached">The o_dlt_slai_detached.</param>
            <param name="c_dead_detach_frac">The c_dead_detach_frac.</param>
            <param name="i_tlai_dead">The i_tlai_dead.</param>
            <param name="o_dlt_tlai_dead_detached">The o_dlt_tlai_dead_detached.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_part_fraction_delta(System.Int32,System.Double[],System.Double,System.Double@)">
            <summary>
            Crop_part_fraction_deltas the specified i_part_no_zb.
            </summary>
            <param name="i_part_no_zb">The i_part_no_zb.</param>
            <param name="i_fraction_zb">The i_fraction_zb.</param>
            <param name="i_part">The i_part.</param>
            <param name="o_dlt_part">The o_dlt_part.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_update(System.Double@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@,System.Double[]@,System.Double,System.Double[]@,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double@,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double@,System.Double)">
            <summary>
            Sugar_updates the specified io_canopy_height.
            </summary>
            <param name="io_canopy_height">The io_canopy_height.</param>
            <param name="io_cnd_photo">The io_cnd_photo.</param>
            <param name="io_cswd_expansion">The io_cswd_expansion.</param>
            <param name="io_cswd_pheno">The io_cswd_pheno.</param>
            <param name="io_cswd_photo">The io_cswd_photo.</param>
            <param name="i_dlt_canopy_height">The i_dlt_canopy_height.</param>
            <param name="i_dlt_dm">The i_dlt_dm.</param>
            <param name="i_dlt_dm_dead_detached">The i_dlt_dm_dead_detached.</param>
            <param name="i_dlt_dm_detached">The i_dlt_dm_detached.</param>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dlt_dm_green_retrans">The i_dlt_dm_green_retrans.</param>
            <param name="i_dlt_dm_senesced">The i_dlt_dm_senesced.</param>
            <param name="i_dlt_dm_realloc">The i_dlt_dm_realloc.</param>
            <param name="i_dlt_lai">The i_dlt_lai.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_dlt_node_no">The i_dlt_node_no.</param>
            <param name="i_dlt_node_no_dead">The i_dlt_node_no_dead.</param>
            <param name="i_dlt_n_dead_detached">The i_dlt_n_dead_detached.</param>
            <param name="i_dlt_n_detached">The i_dlt_n_detached.</param>
            <param name="i_dlt_n_green">The i_dlt_n_green.</param>
            <param name="i_dlt_n_retrans">The i_dlt_n_retrans.</param>
            <param name="i_dlt_n_senesced">The i_dlt_n_senesced.</param>
            <param name="i_dlt_n_realloc">The i_dlt_n_realloc.</param>
            <param name="i_dlt_plants">The i_dlt_plants.</param>
            <param name="i_dlt_plant_wc">The i_dlt_plant_wc.</param>
            <param name="i_dlt_root_length">The i_dlt_root_length.</param>
            <param name="i_dlt_root_length_senesced">The i_dlt_root_length_senesced.</param>
            <param name="i_dlt_root_depth">The i_dlt_root_depth.</param>
            <param name="i_dlt_slai">The i_dlt_slai.</param>
            <param name="i_dlt_slai_detached">The i_dlt_slai_detached.</param>
            <param name="i_dlt_stage">The i_dlt_stage.</param>
            <param name="i_dlt_tlai_dead_detached">The i_dlt_tlai_dead_detached.</param>
            <param name="io_dm_dead">The io_dm_dead.</param>
            <param name="io_dm_green">The io_dm_green.</param>
            <param name="io_dm_plant_top_tot">The io_dm_plant_top_tot.</param>
            <param name="io_dm_senesced">The io_dm_senesced.</param>
            <param name="io_lai">The io_lai.</param>
            <param name="io_leaf_area">The io_leaf_area.</param>
            <param name="io_leaf_dm">The io_leaf_dm.</param>
            <param name="io_leaf_no_zb">The io_leaf_no_zb.</param>
            <param name="io_node_no_zb">The io_node_no_zb.</param>
            <param name="io_node_no_dead_zb">The io_node_no_dead_zb.</param>
            <param name="i_nfact_photo">The i_nfact_photo.</param>
            <param name="io_n_conc_crit">The io_n_conc_crit.</param>
            <param name="io_n_conc_min">The io_n_conc_min.</param>
            <param name="io_n_dead">The io_n_dead.</param>
            <param name="io_n_green">The io_n_green.</param>
            <param name="io_n_senesced">The io_n_senesced.</param>
            <param name="io_plants">The io_plants.</param>
            <param name="io_plant_wc">The io_plant_wc.</param>
            <param name="i_previous_stage">The i_previous_stage.</param>
            <param name="io_root_length">The io_root_length.</param>
            <param name="io_root_depth">The io_root_depth.</param>
            <param name="io_slai">The io_slai.</param>
            <param name="i_swdef_expansion">The i_swdef_expansion.</param>
            <param name="i_swdef_pheno">The i_swdef_pheno.</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="io_tlai_dead">The io_tlai_dead.</param>
            <param name="c_n_conc_crit_root">The c_n_conc_crit_root.</param>
            <param name="c_n_conc_min_root">The c_n_conc_min_root.</param>
            <param name="c_x_stage_code">The c_x_stage_code.</param>
            <param name="c_y_n_conc_crit_cabbage">The c_y_n_conc_crit_cabbage.</param>
            <param name="c_y_n_conc_crit_cane">The c_y_n_conc_crit_cane.</param>
            <param name="c_y_n_conc_crit_leaf">The c_y_n_conc_crit_leaf.</param>
            <param name="c_y_n_conc_min_cabbage">The c_y_n_conc_min_cabbage.</param>
            <param name="c_y_n_conc_min_cane">The c_y_n_conc_min_cane.</param>
            <param name="c_y_n_conc_min_leaf">The c_y_n_conc_min_leaf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="io_node_no_detached_ob">The io_node_no_detached_ob.</param>
            <param name="c_leaf_no_at_emerg">The c_leaf_no_at_emerg.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_conc_limits(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_s the n_conc_limits.
            </summary>
            <param name="c_n_conc_crit_root">The c_n_conc_crit_root.</param>
            <param name="c_n_conc_min_root">The c_n_conc_min_root.</param>
            <param name="c_x_stage_code">The c_x_stage_code.</param>
            <param name="c_y_n_conc_crit_cabbage">The c_y_n_conc_crit_cabbage.</param>
            <param name="c_y_n_conc_crit_cane">The c_y_n_conc_crit_cane.</param>
            <param name="c_y_n_conc_crit_leaf">The c_y_n_conc_crit_leaf.</param>
            <param name="c_y_n_conc_min_cabbage">The c_y_n_conc_min_cabbage.</param>
            <param name="c_y_n_conc_min_cane">The c_y_n_conc_min_cane.</param>
            <param name="c_y_n_conc_min_leaf">The c_y_n_conc_min_leaf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="o_n_conc_crit">The o_n_conc_crit.</param>
            <param name="o_n_conc_min">The o_n_conc_min.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_stage_code(System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Int32)">
            <summary>
            Sugar_stage_codes the specified c_stage_code_list.
            </summary>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="i_stage_no">The i_stage_no.</param>
            <param name="i_stage_table">The i_stage_table.</param>
            <param name="i_numvals">The i_numvals.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.stage_no_of_ob(System.Double,System.Double[],System.Int32)">
            <summary>
            Stage_no_of_obs the specified i_stage_code.
            </summary>
            <param name="i_stage_code">The i_stage_code.</param>
            <param name="i_stage_code_list">The i_stage_code_list.</param>
            <param name="i_list_size">The i_list_size.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.position_in_real_array_zb(System.Double,System.Double[])">
            <summary>
            Position_in_real_array_zbs the specified i_ number.
            </summary>
            <param name="i_Number">The i_ number.</param>
            <param name="i_Array">The i_ array.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_totals(System.Double,System.Double[],System.Int32,System.Double[],System.Double[],System.Double[],System.Int32@,System.Double,System.Double@,System.Double@,System.Double[],System.Double@,System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_totalses the specified i_current_stage.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_day_of_year">The i_day_of_year.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="o_isdate">The o_isdate.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="io_lai_max">The io_lai_max.</param>
            <param name="o_n_conc_act_stover_tot">The o_n_conc_act_stover_tot.</param>
            <param name="i_n_demand">The i_n_demand.</param>
            <param name="io_n_demand_tot">The io_n_demand_tot.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="io_transpiration_tot">The io_transpiration_tot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_event(System.Double[],System.String[],System.Double,System.Double[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double,System.Double[],System.Int32,System.Double[])">
            <summary>
            Sugar_events the specified c_stage_code_list.
            </summary>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="c_stage_names">The c_stage_names.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_day_of_year">The i_day_of_year.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dm_dead">The i_dm_dead.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_year">The i_year.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_profile_fasw">
            <summary>
            Sugar_profile_fasws this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.Sugarcane.DaysAfterSowing">
            <summary>
            Gets the days after sowing.
            </summary>
            <value>
            The days after sowing.
            </value>
        </member>
        <member name="P:Models.Sugarcane.crop_status">
            <summary>
            Gets the crop_status.
            </summary>
            <value>
            The crop_status.
            </value>
        </member>
        <member name="P:Models.Sugarcane.stage">
            <summary>
            Gets the stage.
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:Models.Sugarcane.stage_code">
            <summary>
            Gets the stage_code.
            </summary>
            <value>
            The stage_code.
            </value>
        </member>
        <member name="P:Models.Sugarcane.stagename">
            <summary>
            Gets the stagename.
            </summary>
            <value>
            The stagename.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ratoon_no">
            <summary>
            Gets the ratoon_no.
            </summary>
            <value>
            The ratoon_no.
            </value>
        </member>
        <member name="P:Models.Sugarcane.phase_tt">
            <summary>
            Gets the phase_tt.
            </summary>
            <value>
            The phase_tt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_tot">
            <summary>
            Gets the tt_tot.
            </summary>
            <value>
            The tt_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_no">
            <summary>
            Gets the leaf_no.
            </summary>
            <value>
            The leaf_no.
            </value>
        </member>
        <member name="P:Models.Sugarcane.node_no_dead">
            <summary>
            Gets the node_no_dead.
            </summary>
            <value>
            The node_no_dead.
            </value>
        </member>
        <member name="P:Models.Sugarcane.node_no_detached">
            <summary>
            Gets the node_no_detached.
            </summary>
            <value>
            The node_no_detached.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaves">
            <summary>
            Gets the leaves.
            </summary>
            <value>
            The leaves.
            </value>
        </member>
        <member name="P:Models.Sugarcane.green_leaves">
            <summary>
            Gets the green_leaves.
            </summary>
            <value>
            The green_leaves.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dead_leaves">
            <summary>
            Gets the dead_leaves.
            </summary>
            <value>
            The dead_leaves.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_area">
            <summary>
            Gets the leaf_area.
            </summary>
            <value>
            The leaf_area.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_dm">
            <summary>
            Gets the leaf_dm.
            </summary>
            <value>
            The leaf_dm.
            </value>
        </member>
        <member name="P:Models.Sugarcane.height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Models.Sugarcane.root_depth">
            <summary>
            Gets the root_depth.
            </summary>
            <value>
            The root_depth.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cover_green">
            <summary>
            Gets the cover_green.
            </summary>
            <value>
            The cover_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.radn_int">
            <summary>
            Gets the radn_int.
            </summary>
            <value>
            The radn_int.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cover_tot">
            <summary>
            Gets the cover_tot.
            </summary>
            <value>
            The cover_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lai_sum">
            <summary>
            Gets the lai_sum.
            </summary>
            <value>
            The lai_sum.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tlai">
            <summary>
            Gets the tlai.
            </summary>
            <value>
            The tlai.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tla">
            <summary>
            Gets the tla.
            </summary>
            <value>
            The tla.
            </value>
        </member>
        <member name="P:Models.Sugarcane.slai">
            <summary>
            Gets the slai.
            </summary>
            <value>
            The slai.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lai">
            <summary>
            Gets the lai.
            </summary>
            <value>
            The lai.
            </value>
        </member>
        <member name="P:Models.Sugarcane.RootLengthDensity">
            <summary>
            Gets the RLV.
            </summary>
            <value>
            The RLV.
            </value>
        </member>
        <member name="P:Models.Sugarcane.rlv_tot">
            <summary>
            Gets the rlv_tot.
            </summary>
            <value>
            The rlv_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ll_dep">
            <summary>
            Gets the ll_dep.
            </summary>
            <value>
            The ll_dep.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lai2">
            <summary>
            Gets the lai2.
            </summary>
            <value>
            The lai2.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_wt2">
            <summary>
            Gets the leaf_wt2.
            </summary>
            <value>
            The leaf_wt2.
            </value>
        </member>
        <member name="P:Models.Sugarcane.rootgreenwt">
            <summary>
            Gets the rootgreenwt.
            </summary>
            <value>
            The rootgreenwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leafgreenwt">
            <summary>
            Gets the leafgreenwt.
            </summary>
            <value>
            The leafgreenwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sstem_wt">
            <summary>
            Gets the sstem_wt.
            Structural Stem Weight
            Just the Stem (without the Sucrose) of green and dead stalks.
            </summary>
            <value>
            The sstem_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cane_dmf">
            <summary>
            Gets the cane_dmf.
            Cane Dry Matter Fraction.
            The Millable Stalk divided by the Millable Stalk (FRESH). 
            nb. Millable Stalk is only the green "structual stem" and "sucrose".
            nb. Fresh refers to when the Cane has just been cut and still has high water content
                hence we add some extra water to the weight.
            </summary>
            <value>
            The cane_dmf.
            </value>
        </member>
        <member name="P:Models.Sugarcane.canefw">
            <summary>
            Gets the canefw.
            Cane Fresh Weight.
            nb. Cane refers to the "structual stem" and "sucrose" in green and dead stalks.
            nb. Fresh refers to when the Cane has just been cut and still has high water content
                hence we add some extra water to the weight.
            </summary>
            <value>
            The canefw.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ccs">
            <summary>
            Gets the CCS.
            Commercial Cane Sugar.
            </summary>
            <value>
            The CCS.
            </value>
        </member>
        <member name="P:Models.Sugarcane.scmstf">
            <summary>
            Gets the SCMSTF.
            Sucrose Concentration in Millable Stalk (FRESH)
            nb. Millable Stalk is only the green "structual stem" and "sucrose".
            nb. Fresh refers to when the Cane has just been cut and still has high water content
                hence we add some extra water to the weight.
            </summary>
            <value>
            The SCMSTF.
            </value>
        </member>
        <member name="P:Models.Sugarcane.scmst">
            <summary>
            Gets the SCMST.
            Sucrose Concentration in Millable Stalk.
            nb. Millable Stalk is only the green "structual stem" and "sucrose".
            </summary>
            <value>
            The SCMST.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sucrose_wt">
            <summary>
            Gets the sucrose_wt.
            Sucrose in the green and dead stalks.
            </summary>
            <value>
            The sucrose_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cabbage_wt">
            <summary>
            Gets the cabbage_wt.
            </summary>
            <value>
            The cabbage_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cane_wt">
            <summary>
            Gets the cane_wt.
            nb. Cane refers to the "structual stem" and "sucrose" in green and dead stalks.
            </summary>
            <value>
            The cane_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.biomass">
            <summary>
            Gets the biomass.
            </summary>
            <value>
            The biomass.
            </value>
        </member>
        <member name="P:Models.Sugarcane.green_biomass">
            <summary>
            Gets the green_biomass.
            </summary>
            <value>
            The green_biomass.
            </value>
        </member>
        <member name="P:Models.Sugarcane.greenwt">
            <summary>
            Gets the greenwt.
            </summary>
            <value>
            The greenwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.senescedwt">
            <summary>
            Gets the senescedwt.
            </summary>
            <value>
            The senescedwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dm_dead">
            <summary>
            Gets the dm_dead.
            </summary>
            <value>
            The dm_dead.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_dm">
            <summary>
            Gets the DLT_DM.
            Delta Dry Matter.
            Todays change in biomass.
            </summary>
            <value>
            The DLT_DM.
            </value>
        </member>
        <member name="P:Models.Sugarcane.partition_xs">
            <summary>
            Gets the partition_xs.
            Todays excess biomass. 
            Not needed after partitioning todays biomass to plant organs.
            </summary>
            <value>
            The partition_xs.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_dm_green">
            <summary>
            Gets the dlt_dm_green.
            Delta Dry Matter Green.
            Todays change in green biomass.
            </summary>
            <value>
            The dlt_dm_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_dm_detached">
            <summary>
            Gets the dlt_dm_detached.
            Delta Dry Matter Detached.
            Todays dry matter that got detached from each plant part.
            Elements of this array are the plant parts,
            1 root
            2 leaf
            3 structural stem
            4 cabbage
            5 sucrose
            </summary>
            <value>
            The dlt_dm_detached.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_critical">
            <summary>
            Gets the n_critical.
            </summary>
            <value>
            The n_critical.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_minimum">
            <summary>
            Gets the n_minimum.
            </summary>
            <value>
            The n_minimum.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_conc_leaf">
            <summary>
            Gets the n_conc_leaf.
            </summary>
            <value>
            The n_conc_leaf.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_conc_cab">
            <summary>
            Gets the n_conc_cab.
            </summary>
            <value>
            The n_conc_cab.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_conc_cane">
            <summary>
            Gets the n_conc_cane.
            </summary>
            <value>
            The n_conc_cane.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_leaf_crit">
            <summary>
            Gets the n_leaf_crit.
            </summary>
            <value>
            The n_leaf_crit.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_leaf_min">
            <summary>
            Gets the n_leaf_min.
            </summary>
            <value>
            The n_leaf_min.
            </value>
        </member>
        <member name="P:Models.Sugarcane.biomass_n">
            <summary>
            Gets the biomass_n.
            </summary>
            <value>
            The biomass_n.
            </value>
        </member>
        <member name="P:Models.Sugarcane.plant_n_tot">
            <summary>
            Gets the plant_n_tot.
            </summary>
            <value>
            The plant_n_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.green_biomass_n">
            <summary>
            Gets the green_biomass_n.
            </summary>
            <value>
            The green_biomass_n.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_green">
            <summary>
            Gets the n_green.
            </summary>
            <value>
            The n_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.greenn">
            <summary>
            Gets the greenn.
            </summary>
            <value>
            The greenn.
            </value>
        </member>
        <member name="P:Models.Sugarcane.senescedn">
            <summary>
            Gets the senescedn.
            </summary>
            <value>
            The senescedn.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_n_green">
            <summary>
            Gets the dlt_n_green.
            </summary>
            <value>
            The dlt_n_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_pheno">
            <summary>
            Gets the swdef_pheno.
            </summary>
            <value>
            The swdef_pheno.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_photo">
            <summary>
            Gets the swdef_photo.
            </summary>
            <value>
            The swdef_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_expan">
            <summary>
            Gets the swdef_expan.
            </summary>
            <value>
            The swdef_expan.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_stalk">
            <summary>
            Gets the swdef_stalk.
            </summary>
            <value>
            The swdef_stalk.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nfact_photo">
            <summary>
            Gets the nfact_photo.
            </summary>
            <value>
            The nfact_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nfact_expan">
            <summary>
            Gets the nfact_expan.
            </summary>
            <value>
            The nfact_expan.
            </value>
        </member>
        <member name="P:Models.Sugarcane.oxdef_photo">
            <summary>
            Gets the oxdef_photo.
            </summary>
            <value>
            The oxdef_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ep">
            <summary>
            Gets the ep.
            </summary>
            <value>
            The ep.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cep">
            <summary>
            Gets the cep.
            </summary>
            <value>
            The cep.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_uptake">
            <summary>
            Gets the sw_uptake.
            </summary>
            <value>
            The sw_uptake.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_demand">
            <summary>
            Gets the sw_demand.
            </summary>
            <value>
            The sw_demand.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_demand_te">
            <summary>
            Gets the sw_demand_te.
            </summary>
            <value>
            The sw_demand_te.
            </value>
        </member>
        <member name="P:Models.Sugarcane.fasw">
            <summary>
            Gets the fasw.
            </summary>
            <value>
            The fasw.
            </value>
        </member>
        <member name="P:Models.Sugarcane.esw_layr">
            <summary>
            Gets the esw_layr.
            </summary>
            <value>
            The esw_layr.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_tot">
            <summary>
            Gets the no3_tot.
            </summary>
            <value>
            The no3_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_demand">
            <summary>
            Gets the n_demand.
            </summary>
            <value>
            The n_demand.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_demand">
            <summary>
            Gets the no3_demand.
            </summary>
            <value>
            The no3_demand.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_supply">
            <summary>
            Gets the n_supply.
            </summary>
            <value>
            The n_supply.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NitrogenUptake">
            <summary>
            Gets the no3_uptake.
            </summary>
            <value>
            The no3_uptake.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nh4_uptake">
            <summary>
            Gets the nh4_uptake.
            </summary>
            <value>
            The nh4_uptake.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_uptake_pot">
            <summary>
            Gets the no3_uptake_pot.
            </summary>
            <value>
            The no3_uptake_pot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nh4_uptake_pot">
            <summary>
            Gets the nh4_uptake_pot.
            </summary>
            <value>
            The nh4_uptake_pot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.CropType">
            <summary>
            MicroClimate will get 'CropType' and use it to look up
            canopy properties for this crop.
            </summary>
            <value>
            The type of the crop.
            </value>
        </member>
        <member name="P:Models.Sugarcane.IsAlive">
            <summary>
            Is the plant alive?
            </summary>
        </member>
        <member name="P:Models.Sugarcane.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.Sugarcane.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="P:Models.Sugarcane.CultivarNames">
            <summary>
            Gets a list of cultivar names
            </summary>
        </member>
        <member name="M:Models.Sugarcane.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Placeholder for SoilArbitrator
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Models.Sugarcane.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Placeholder for SoilArbitrator
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Models.Sugarcane.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Models.Sugarcane.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the n uptake for today
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Models.Sugarcane.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sows the plant
            </summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <param name="rowConfig">The row configuration.</param>
        </member>
        <member name="M:Models.Sugarcane.CheckAllNUptakeOptionalsReadIn">
            <summary>
            Checks all n uptake optionals read in.
            </summary>
            <exception cref="T:Models.Core.ApsimXException">
            Using n_uptake_option == 1 and missing either 'NO3_diffn_const' or 'n_supply_preference' from ini file
            or
            Using n_uptake_option == 2 and missing either 'kno3', 'no3ppm_min', 'knh4', 'nh4ppm_min' or 'total_n_uptake_max' from ini file
            </exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_get_soil_variables(System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_get_soil_variableses the specified o_no3gsm.
            </summary>
            <param name="o_no3gsm">The o_no3gsm.</param>
            <param name="o_no3gsm_min">The o_no3gsm_min.</param>
            <param name="o_nh4gsm">The o_nh4gsm.</param>
            <param name="o_nh4gsm_min">The o_nh4gsm_min.</param>
        </member>
        <member name="M:Models.Sugarcane.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Called when [start of simulation].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Sugarcane.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called when DoDailyInitialisation invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Sugarcane.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>
            Called when [start of day].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Sugarcane.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>
            Called when [do actual plant growth].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">Invalid detachment for leaf and cabbage ratio.</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_start_crop(System.Double,System.Int32,System.Double,System.String)">
            <summary>
            Sugar_start_crops the specified plants.
            </summary>
            <param name="plants">The plants.</param>
            <param name="Ratoon">The ratoon.</param>
            <param name="sowing_depth">The sowing_depth.</param>
            <param name="Cultivar">The cultivar.</param>
            <exception cref="T:Models.Core.ApsimXException">
            \Sugarcane\ was taken out today by \end_crop\ action -
                                        + \n
                                        +  Unable to accept sow action until the next day.
            or
            \Sugarcane\  is still in the ground - unable to sow until it is taken out by \end_crop\ action.
            </exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_read_crop_constants(System.String)">
            <summary>
            Sugar_read_crop_constantses the specified crop type.
            </summary>
            <param name="CropType">Type of the crop.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_read_cultivar_params(System.String)">
            <summary>
            Sugar_read_cultivar_paramses the specified name.
            </summary>
            <param name="Name">The name.</param>
            <returns></returns>
            <exception cref="T:Models.Core.ApsimXException">Could not find in the Sugarcane ini file a cultivar called:  + Name</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_read_root_params">
            <summary>
            Sugar_read_root_paramses this instance.
            </summary>
            <exception cref="T:Models.Core.ApsimXException">
            No Crop Lower Limit found
            or
            Bad value for uptake_source
            </exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_harvest">
            <summary>
            Sugar_harvests this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_kill_crop(System.String@,System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_kill_crops the specified i_crop_status.
            </summary>
            <param name="i_crop_status">The i_crop_status.</param>
            <param name="i_dm_dead">The i_dm_dead.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_end_crop">
            <summary>
            Sugar_end_crops this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.SowNewPlant(System.Double,System.Double,System.String)">
            <summary>
            Sow a Newly Planted Sugarcane Crop. (crop_status is set to "crop_alive")
            Sugarcane will keep ratooning indefinitely until it is stopped by using an EndCrop or KillCrop.
            NB. All Ratoons are treated the same. No difference between first ratoon and second, third etc.
            </summary>
            <param name="PlantingDensity">Plant density (plants/m^2)</param>
            <param name="Depth">Sowing Depth (mm)</param>
            <param name="CultivarName">Name of the Cultivar.</param>
        </member>
        <member name="M:Models.Sugarcane.SowRatoon(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Sow a Sugarcane Crop BUT starting with a Ratoon instead of Newly Planted Crop. (crop_status is set to "crop_alive")
            However can still sow a Newly Planted Crop by setting StartingRatoonNo = 0.
            Sugarcane will keep ratooning indefinitely until it is stopped by using an EndCrop or KillCrop.
            NB. All Ratoons are treated the same. No difference between first ratoon and second, third etc.
            </summary>
            <param name="PlantingDensity">Plant density (plants/m^2)</param>
            <param name="Depth">Sowing Depth (mm)</param>
            <param name="CultivarName">Name of the Cultivar.
            NB. When sowing a ratoon, you don't need to add "_ratoon" to the cultivar name. It will be added automatically.</param>
            <param name="StartingRatoonNo">0 is a Newly Planted Crop, 1 is First Ratoon, 2 is Second Ratoon, etc.</param>
        </member>
        <member name="M:Models.Sugarcane.HarvestCrop">
            <summary>
            HarvestCrop is the same as EndCrop (in that it gets rid of the biomass)
            only unlike EndCrop it can still ratoon again (crop_status is NOT set to "crop_out". It remains "crop_alive")
            </summary>
        </member>
        <member name="M:Models.Sugarcane.KillCrop">
            <summary>
            KillCrop kills just this plant or ratoon (crop_status is set to "crop_dead") but the biomass is left there standing.
            You need to do a Tillage to get rid of the above ground biomass.
            It will not grow or ratoon again. It just sits there dead with an above ground biomass.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.EndCrop">
            <summary>
            EndCrop gets rid of the biomass and requires a replant to start growing again.  (crop_status is set to "crop_out")
            </summary>
        </member>
        <member name="M:Models.Sugarcane.LodgeTheCane">
            <summary>
            Lodge the Sugarcane Today.
            The arguments for how to modify the Sugarcane due to lodging are specified in the ini file.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.HillUpTheSoil(System.Double,System.Double)">
            <summary>
            Mound soil around base of crop and bury some plant material.
            Burying the plant material incorporates it as fresh organic matter into the Soil.
            This applies no matter the state of the plant material: Green, Senesced and Dead
            Can only do a HillUp during the Emergence phase (Sprouting to BeginCane).
            </summary>
            <param name="CaneFr">Fraction of Structural Stem and Stem Sucrose that is buried</param>
            <param name="TopsFr">Fraction of Leaves and Cabbage that is buried</param>
        </member>
        <member name="E:Models.Sugarcane.Sowing">
            <summary>
            Occurs when the Sugarcane crop is sown.
            </summary>
        </member>
        <member name="E:Models.Sugarcane.Harvesting">
            <summary>
            Occurs when the Sugarcane crop is harvested.
            </summary>
        </member>
        <member name="E:Models.Sugarcane.Killing">
            <summary>
            Occurs when the Sugarcane crop is killed.
            </summary>
        </member>
        <member name="E:Models.Sugarcane.BiomassRemoved">
            <summary>
            Occurs when [biomass removed].
            </summary>
        </member>
        <member name="E:Models.Sugarcane.IncorpFOM">
            <summary>
            Occurs when [incorp fom].
            </summary>
        </member>
        <member name="M:Models.Sugarcane.ToFloatArray(System.Double[])">
            <summary>
            To the float array.
            </summary>
            <param name="D">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_set_other_variables(System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_set_other_variableses the specified i_dlt_no3gsm.
            </summary>
            <param name="i_dlt_no3gsm">The i_dlt_no3gsm.</param>
            <param name="i_dlt_nh4gsm">The i_dlt_nh4gsm.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_update_other_variables(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Sugar_update_other_variableses the specified i_dlt_dm_detached.
            </summary>
            <param name="i_dlt_dm_detached">The i_dlt_dm_detached.</param>
            <param name="i_dlt_dm_dead_detached">The i_dlt_dm_dead_detached.</param>
            <param name="i_dlt_n_detached">The i_dlt_n_detached.</param>
            <param name="i_dlt_n_dead_detached">The i_dlt_n_dead_detached.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_Send_Crop_Chopped_Event(System.String,System.String[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_s the send_ crop_ chopped_ event.
            </summary>
            <param name="i_crop_type">The i_crop_type.</param>
            <param name="i_dm_type">The i_dm_type.</param>
            <param name="i_dlt_crop_dm">The i_dlt_crop_dm.</param>
            <param name="i_dlt_dm_n">The i_dlt_dm_n.</param>
            <param name="i_fraction_to_Residue">The i_fraction_to_ residue.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_root_incorp(System.Double,System.Double,System.Double[],System.Double[],System.Double,System.String,System.Int32)">
            <summary>
            Crop_root_incorps the specified i_dlt_dm_root.
            </summary>
            <param name="i_dlt_dm_root">The i_dlt_dm_root.</param>
            <param name="i_dlt_n_root">The i_dlt_n_root.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="c_crop_type">The c_crop_type.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <exception cref="T:Models.Core.ApsimXException">Too many layers for crop routines</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_hill_up(System.Double,System.Double)">
            <summary>
            Sugar_hill_ups the specified canefr.
            </summary>
            <param name="canefr">The canefr.</param>
            <param name="topsfr">The topsfr.</param>
            <exception cref="T:Models.Core.ApsimXException">Can only hill up during emergence phase</exception>
        </member>
        <member name="M:Models.Sugarcane.BiomassRemovalComplete(System.Double)">
            <summary>
            Biomass has been removed from the plant.
            </summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="T:Models.Summary">
            <summary>
            This model collects the simulation initial conditions and stores into the DataStore.
            It also provides an API for writing messages to the DataStore.
            </summary>
        </member>
        <member name="M:Models.Summary.Messages">
            <summary>
            The current messages during simulation before saving to db
            </summary>
            <returns>Messages</returns>
        </member>
        <member name="F:Models.Summary.storage">
            <summary>A link to a storage service</summary>
        </member>
        <member name="F:Models.Summary.clock">
            <summary>A link to the clock in the simulation</summary>
        </member>
        <member name="F:Models.Summary.simulation">
            <summary>A link to the parent simulation</summary>
        </member>
        <member name="T:Models.Summary.OutputType">
            <summary>
            Enumeration used to indicate the format of the output string
            </summary>
        </member>
        <member name="F:Models.Summary.OutputType.plain">
            <summary>
            Plain ASCII text
            </summary>
        </member>
        <member name="F:Models.Summary.OutputType.html">
            <summary>
            HTML format
            </summary>
        </member>
        <member name="F:Models.Summary.OutputType.Markdown">
            <summary>
            Markdown format
            </summary>
        </member>
        <member name="P:Models.Summary.Verbosity">
            <summary>This setting controls what type of messages will be captured by the summary.</summary>
        </member>
        <member name="M:Models.Summary.OnDoInitialSummary(System.Object,System.EventArgs)">
            <summary>Event handler to create initialise</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Summary.Initialise">
            <summary>Initialise the summary messages table.</summary>
        </member>
        <member name="M:Models.Summary.WriteMessage(Models.Core.IModel,System.String,Models.Core.MessageType)">
            <summary>Write a message to the summary</summary>
            <param name="author">The model writing the message</param>
            <param name="message">The message to write</param>
            <param name="messageType">Message output/verbosity level.</param>
        </member>
        <member name="M:Models.Summary.CreateInitialConditionsTable">
            <summary>
            Create an initial conditions table in the DataStore.
            </summary>
        </member>
        <member name="M:Models.Summary.WriteSummaryToTextFiles(Models.Storage.IDataStore,System.String,System.Boolean)">
            <summary>
            Write a single sumary file for all simulations.
            </summary>
            <param name="storage">The storage where the summary data is stored</param>
            <param name="fileName">The file name to write</param>           
            <param name="darkTheme">Whether or not the dark theme should be used.</param>
        </member>
        <member name="M:Models.Summary.GetMessages(System.String)">
            <summary>
            
            </summary>
            <param name="simulationName"></param>
        </member>
        <member name="M:Models.Summary.GetInitialConditions(System.String)">
            <summary>
            
            </summary>
            <param name="simulationName"></param>
        </member>
        <member name="M:Models.Summary.WriteReport(Models.Storage.IDataStore,System.String,System.IO.TextWriter,System.String,Models.Summary.OutputType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Write the summary report to the specified writer.
            </summary>
            <param name="storage">The data store to query</param>
            <param name="simulationName">The simulation name to produce a summary report for</param>
            <param name="writer">Text writer to write to</param>
            <param name="apsimSummaryImageFileName">The file name for the logo. Can be null</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="darkTheme">Whether or not the dark theme should be used.</param>
            <param name="showInfo"></param>
            <param name="showWarnings"></param>
            <param name="showErrors"></param>
            <param name="showInitialConditions"></param>
        </member>
        <member name="M:Models.Summary.GetMessageTable(Models.Storage.IDataStore,System.String)">
            <summary>
            Create a message table ready for writing.
            </summary>
            <param name="storage">The data store</param>
            <param name="simulationName">The simulation name to get messages for</param>
            <returns>The filled message table</returns>
        </member>
        <member name="M:Models.Summary.WriteHeading(System.IO.TextWriter,System.String,Models.Summary.OutputType,System.String)">
            <summary>
            Write the specified heading to the TextWriter.
            </summary>
            <param name="writer">Text writer to write to</param>
            <param name="heading">The heading to write</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="id">Provides an id tag for the heading (html only; optional)</param>
        </member>
        <member name="M:Models.Summary.WriteScript(System.IO.TextWriter,System.Data.DataRow,Models.Summary.OutputType)">
            <summary>
            Write out manager script
            </summary>
            <param name="writer">Text writer to write to</param>
            <param name="row">The data table row containing the script</param>
            <param name="outtype">Indicates the format to be produced</param>
        </member>
        <member name="M:Models.Summary.WriteTable(System.IO.TextWriter,System.Data.DataTable,Models.Summary.OutputType,System.String)">
            <summary>
            Write the specified table to the TextWriter.
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="table">The table to write</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="className">The class name of the generated html table</param>
        </member>
        <member name="M:Models.Summary.WriteMessageTable(System.IO.TextWriter,System.Data.DataTable,Models.Summary.OutputType,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Write the specified table to the TextWriter.
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="table">The table to write</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="includeHeadings">Include headings in the html table produced?</param>
            <param name="className">The class name of the generated html table</param>
            <param name="showInfo"></param>
            <param name="showWarnings"></param>
            <param name="showErrors"></param>
        </member>
        <member name="M:Models.Summary.FindAllProperties(Models.Core.Model,System.Collections.Generic.List{System.Tuple{System.String,Models.Core.VariableProperty}})">
            <summary>
            Find all properties from the model and fill this.properties.
            </summary>
            <param name="model">The model to search for properties</param>
            <param name="properties">The list of properties to fill</param>
        </member>
        <member name="M:Models.Summary.ConvertInitialConditionsToTables(System.Data.DataTable,System.Collections.Generic.List{System.Data.DataTable})">
            <summary>
            Converts a flat 'InitialConditions' table (from the data store) to a series of data tables.
            </summary>
            <param name="initialConditionsTable">The table to read the rows from</param>
            <param name="tables">The list of tables to create</param>
        </member>
        <member name="M:Models.Summary.AddArrayToTable(System.String,System.String,System.String,System.Boolean,System.Object,System.Data.DataTable)">
            <summary>
            Add a column to the specified table based on values in the 'value'
            </summary>
            <param name="heading">The new column heading</param>
            <param name="dataTypeName">The data type of the value</param>
            <param name="displayFormat">The display format to use when writing the column</param>
            <param name="showTotal">A value indicating whether a total should be added.</param>
            <param name="value">The values containing the array</param>
            <param name="table">The table where a column should be added to</param>
        </member>
        <member name="M:Models.Summary.FormatPropertyValue(System.String,System.Object,System.String)">
            <summary>
            Format the specified value into a string and return the string.
            </summary>
            <param name="dataTypeName">The name of the data type</param>
            <param name="value">The value to format</param>
            <param name="format">The format to use for the value</param>
            <returns>The formatted value as a string</returns>
        </member>
        <member name="T:Models.Surface.AddFaecesType">
            <summary>
            An AddFaeces type that is used for comms between stock and surface organic matter.
            </summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.Defaecations">
            <summary>The defaecations</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.VolumePerDefaecation">
            <summary>The volume per defaecation</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.AreaPerDefaecation">
            <summary>The area per defaecation</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.Eccentricity">
            <summary>The eccentricity</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMWeight">
            <summary>The om weight</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMN">
            <summary>The omn</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMP">
            <summary>The omp</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMS">
            <summary>The oms</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMAshAlk">
            <summary>The om ash alk</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.NO3N">
            <summary>The n o3 n</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.NH4N">
            <summary>The n h4 n</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.POXP">
            <summary>The poxp</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.SO4S">
            <summary>The s o4 s</summary>
        </member>
        <member name="T:Models.Surface.OMFractionType">
            <summary>Type carrying information about the CNP composition of an organic matter fraction</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.amount">
            <summary>The amount</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.P">
            <summary>The p</summary>
        </member>
        <member name="M:Models.Surface.OMFractionType.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.OMFractionType"/> class.</summary>
        </member>
        <member name="T:Models.Surface.ResidueType">
            <summary>
            Encapsulates a residue type for SurfaceOrganicMatter model
            </summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fom_type">
            <summary>Gets or sets the fom_type.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.derived_from">
            <summary>Gets or sets the derived_from.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fraction_C">
            <summary>Gets or sets the fraction_ c.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.po4ppm">
            <summary>Gets or sets the po4ppm.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.nh4ppm">
            <summary>Gets or sets the NH4PPM.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.no3ppm">
            <summary>Gets or sets the no3ppm.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.specific_area">
            <summary>Gets or sets the specific_area.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.cf_contrib">
            <summary>Gets or sets the cf_contrib.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.pot_decomp_rate">
            <summary>Gets or sets the pot_decomp_rate.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fr_c">
            <summary>Gets or sets the FR_C.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fr_n">
            <summary>Gets or sets the FR_N.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fr_p">
            <summary>Gets or sets the FR_P.</summary>
        </member>
        <member name="T:Models.Surface.ResidueTypes">
            <summary>
            Encapsulates a list of residue types for SurfaceOrganicMatter model
            </summary>
        </member>
        <member name="P:Models.Surface.ResidueTypes.ResidueType">
            <summary>Gets or sets the residues.</summary>
        </member>
        <member name="P:Models.Surface.ResidueTypes.Names">
            <summary>Return a list of fom type names</summary>
        </member>
        <member name="M:Models.Surface.ResidueTypes.GetResidueType(System.String)">
            <summary>Gets a specific residue type. Throws if not found.</summary>
            <param name="name">The name of the residue type to find</param>
        </member>
        <member name="M:Models.Surface.ResidueTypes.FillDerived(Models.Surface.ResidueType)">
            <summary>Looks at a residue type and copies properties from the base type if one was specified.</summary>
            <param name="residueType">The residue to examine and change</param>
        </member>
        <member name="T:Models.Surface.SurfaceOrganicMatter">
            <summary>
            The surface organic matter model.
            </summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.waterBalance">
            <summary>The water balance model</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.soilPhysical">
            <summary>Access the soil physical properties.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.summary">
            <summary>Link to the summary component</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.weather">
            <summary>Link to the weather component</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.NO3Solute">
            <summary>Link to NO3 solute.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.NH4Solute">
            <summary>Link to NH4 solute.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.SoilNitrogen">
            <summary>Link to the soil N model</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.ResidueTypes">
            <summary>Gets or sets the residue types.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.SurfOM">
            <summary>The surf om</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.Canopies">
            <summary>List of canopies that MicroClimate will use.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.numSurfom">
            <summary>The number surfom</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.irrig">
            <summary>The irrig</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cumeos">
            <summary>The cumeos</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.potentialDecomposition">
            <summary>The potential decomposition</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.calculatedPotentialDecomposition">
            <summary>Has potential decomposition been calculated?</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cf_contrib">
            <summary>The determinant of whether a residue type contributes to the calculation of contact factor (1 or 0)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.C_fract">
            <summary>Fraction of Carbon in plant material (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.frPoolC">
            <summary>The carbohydrate fraction in fom C pool (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.frPoolN">
            <summary>The carbohydrate fraction in fom N pool (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.frPoolP">
            <summary>The carbohydrate fraction in fom P pool (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.nh4ppm">
            <summary>Ammonium component of residue (ppm)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.no3ppm">
            <summary>Nitrate component of residue (ppm)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.po4ppm">
            <summary>Phosphate component of residue (ppm)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.specific_area">
            <summary>Specific area of residue (ha/kg)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.criticalResidueWeight">
            <summary>critical residue weight below which Thorburn"s cover factor equals one</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.optimumDecompTemp">
            <summary>temperature at which decomp reaches optimum (oC)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.maxCumulativeEOS">
            <summary>cumeos at which decomp rate becomes zero. (mm H2O)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cnRatioDecompCoeff">
            <summary>Coefficient to determine the magnitude of C:N effects on decomposition of residue</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cnRatioDecompThreshold">
            <summary>C:N above which decomposition rate of residue declines</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.totalLeachRain">
            <summary>total amount of "leaching" rain to remove all soluble N from surfom</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.minRainToLeach">
            <summary>threshold rainfall amount for leaching to occur</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.criticalMinimumOrganicC">
            <summary>critical minimum org C below which potential decomposition rate is 100% (to avoid numerical imprecision)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.DefaultCPRatio">
            <summary>Default C:P ratio</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.standingExtinctCoeff">
            <summary>extinction coefficient for standing residues</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.fractionFaecesAdded">
            <summary>fraction of incoming faeces to add</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.actualSOMDecomp">
            <summary>Actual surface organic matter decomposition. Calculated by SoilNitrogen.</summary>
        </member>
        <member name="T:Models.Surface.SurfaceOrganicMatter.FOMPoolDelegate">
            <summary>Delegate for a IncorpFOMPool</summary>
        </member>
        <member name="E:Models.Surface.SurfaceOrganicMatter.IncorpFOMPool">
            <summary>This event is invoked to signal soil nitrogen to incorporate FOM</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.maxFr">
            <summary>
            Number of pools into which carbon is grouped.
            Currently there are three, indexed as follows:
            0 = carbohydrate
            1 = cellulose
            2 = lignin.
            </summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialResidueName">
            <summary>Gets or sets the name of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialResidueType">
            <summary>Gets or sets the type of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialResidueMass">
            <summary>Gets or sets the mass of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialStandingFraction">
            <summary>Gets or sets the standing fraction of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialCPR">
            <summary>Gets or sets the Carbon:Phosphorus ratio.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialCNR">
            <summary>Gets or sets the initial Carbon:Nitrogen ratio.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.Wt">
            <summary>Total mass of all surface organic materials</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.C">
            <summary>Total carbon of all surface organic carbon</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.N">
            <summary>Total mass of all surface organic nitrogen</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.P">
            <summary>Total mass of all surface organic phosphor</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.NO3">
            <summary>Total mass of nitrate</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.NH4">
            <summary>Total mass of ammonium</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.LabileP">
            <summary>Total mass of labile phosphorus</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.Cover">
            <summary>Fraction of ground covered by all surface OMs</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.tf">
            <summary>Temperature factor for decomposition</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.cf">
            <summary>Contact factor for decomposition</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.wf">
            <summary>Gets the wf.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.FractionFaecesAdded">
            <summary>
            Fraction of incoming faeces to add.
            </summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.Material">
            <summary>A list of material (biomass) that can be damaged.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.RemoveBiomass(System.String,System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Biomass removal logic for this organ.
            </summary>
            <param name="materialName">Name of organ.</param>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Reset">
            <summary>Called when [reset].</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ResidueTypeNames">
            <summary>Return a list of known residue types names</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Incorporate(System.Double,System.Double)">
            <summary>Incorporates the specified fraction.</summary>
            <param name="fraction">The fraction.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.PotentialDecomposition">
            <summary>Return the potential residue decomposition for today.</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.AddFaeces(Models.Surface.AddFaecesType)">
            <summary>
            Adds excreta in response to an AddFaeces event
            This is a still the minimalist version, providing
            an alternative to using add_surfaceom directly
            </summary>
            <param name="data">structure holding description of the added faeces</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.AddCover(System.Double,System.Double)">
            <summary>
            "cover1" and "cover2" are numbers between 0 and 1 which
            indicate what fraction of sunlight is intercepted by the
            foliage of plants.  This function returns a number between
            0 and 1 indicating the fraction of sunlight intercepted
            when "cover1" is combined with "cover2", i.e. both sets of
            plants are present.
            </summary>
            <param name="cover1">The cover1.</param>
            <param name="cover2">The cover2.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.GetWeightFromPool(System.String)">
            <summary>Get the weight of the given SOM pool</summary>
            <param name="pool">Name of the pool to get the weight from.</param>
            <returns>The weight of the given pool</returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumSurfOMStandingLying(System.Collections.Generic.List{Models.Surface.SurfOrganicMatterType},System.Func{Models.Surface.OMFractionType,System.Double})">
            <summary>Sums the surf om standing lying.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumSurfOMStandingLying(Models.Surface.SurfOrganicMatterType,System.Func{Models.Surface.OMFractionType,System.Double})">
            <summary>Sums the surf om standing lying.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumSurfOM(System.Collections.Generic.List{Models.Surface.SurfOrganicMatterType},System.Func{Models.Surface.SurfOrganicMatterType,System.Double})">
            <summary>Sums the surf om.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumOMFractionType(Models.Surface.OMFractionType[],System.Func{Models.Surface.OMFractionType,System.Double})">
            <summary>Sums the type of the om fraction.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when a simulation commences.</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called at start of each day.</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>Get irrigation information from an Irrigated event.</summary>
            <param name="sender">The sender.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnBiomassRemoved(Models.PMF.BiomassRemovedType)">
            <summary>Called when a plant drops biomass to the soil surface</summary>
            <param name="BiomassRemoved">The biomass removed.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnDoSurfaceOrganicMatterDecomposition(System.Object,System.EventArgs)">
            <summary>Do the daily residue decomposition for today.</summary>
            <param name="sender">The event sender</param>
            <param name="args">The event data</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ReadParam">
            <summary>
            Read in all parameters from parameter file
            </summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.GetResidueNumber(System.String)">
            <summary>Get the solutes number</summary>
            <param name="surfomname">The surfomname.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.PotDecomp(System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Performs manure decomposition taking into account environmental;
            and manure factors (independant to soil N but N balance can modify;
            actual decomposition rates if desired by N model - this is possible;
            because pools are not updated until end of time step - see post routine)
            </summary>
            <param name="c_pot_decomp">The c_pot_decomp.</param>
            <param name="n_pot_decomp">The n_pot_decomp.</param>
            <param name="p_pot_decomp">The p_pot_decomp.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.TemperatureFactor">
            <summary>
            Calculate temperature factor for manure decomposition (0-1).
            <para>
            Notes;
            The temperature factor is a simple function of the square of daily
            average temperature.  The user only needs to give an optimum temperature
            and the code will back calculate the necessary coefficient at compile time.
            </para>
            </summary>
            <returns>temperature factor</returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ContactFactor">
            <summary>Calculate manure/soil contact factor for manure decomposition (0-1).</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.CNRatioFactor(System.Int32)">
            <summary>Calculate C:N factor for decomposition (0-1).</summary>
            <param name="residue">residue number</param>
            <returns>C:N factor for decomposition(0-1)</returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.MoistureFactor">
            <summary>Calculate moisture factor for manure decomposition (0-1).</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.CoverTotal">
            <summary>Calculate total cover</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Leach(System.Double)">
            <summary>
            Remove mineral N and P from surfom with leaching rainfall and;
            pass to Soil N and Soil P modules.
            </summary>
            <param name="leachRain">The leach rain.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SendPotDecompEvent">
            <summary>Notify other modules of the potential to decompose.</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.DecomposeSurfom(Models.Soils.SurfaceOrganicMatterDecompType)">
            <summary>Decomposes the surfom.</summary>
            <param name="SOMDecomp">The som decomp.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Decomp(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Performs updating of pools due to surfom decomposition</summary>
            <param name="C_decomp">C to be decomposed</param>
            <param name="N_decomp">N to be decomposed</param>
            <param name="P_decomp">P to be decomposed</param>
            <param name="residue">residue number being dealt with</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Incorp(System.Double,System.Double)">
            <summary>
            Calculate surfom incorporation as a result of tillage and update;
            residue and N pools.
            </summary>
            <param name="fIncorp">The f incorp.</param>
            <param name="tillageDepth">The tillage depth.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.AddNewSurfOM(System.String,System.String)">
            <summary>Adds the new surf om.</summary>
            <param name="newName">The new name.</param>
            <param name="newType">The new type.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ReadTypeSpecificConstants(System.String,System.Int32,System.Double@)">
            <summary>
            Reads type-specific residue constants from ini-file and places them in c. constants;
            </summary>
            <param name="surfom_type">The surfom_type.</param>
            <param name="i">The i.</param>
            <param name="pot_decomp_rate">The pot_decomp_rate.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.CoverOfSOM(System.Int32)">
            <summary>
            This function returns the fraction of the soil surface covered by;
            residue according to the relationship from Gregory (1982).
            <para>Notes;</para>
            <para>Gregory"s equation is of the form;</para>
            <para>        Fc = 1.0 - exp (- Am * M)   where Fc = Fraction covered;</para>
            <para>                                          Am = Specific Area (ha/kg)</para>
            <para>                                           M = Mulching rate (kg/ha)</para>
            <para>This residue model keeps track of the total residue area and so we can
            substitute this value (area residue/unit area) for the product_of Am * M.</para>
            </summary>
            <param name="SOMindex">The so mindex.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Add(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>Adds material to the surface organic matter pool.</summary>
            <param name="mass">The amount of biomass added (kg/ha).</param>
            <param name="N">The amount of N added (ppm).</param>
            <param name="P">The amount of P added (ppm).</param>
            <param name="type">Type of the biomass.</param>
            <param name="name">Name of the biomass written to summary file</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.IncreasePoolArray(System.Double[0:,0:])">
            <summary>Resize2s the d array.</summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Surface.SurfOrganicMatterType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.name">
            <summary>The name</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.OrganicMatterType">
            <summary>The organic matter type</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.PotDecompRate">
            <summary>The pot decomp rate</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.no3">
            <summary>The no3</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.nh4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.po4">
            <summary>The po4</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.Standing">
            <summary>The standing</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.Lying">
            <summary>The lying</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.CanopyStanding">
            <summary>The canopy of the standing</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.CanopyLying">
            <summary>The canopy of the lying</summary>
        </member>
        <member name="M:Models.Surface.SurfOrganicMatterType.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.SurfOrganicMatterType"/> class.</summary>
        </member>
        <member name="M:Models.Surface.SurfOrganicMatterType.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.SurfOrganicMatterType"/> class.</summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:Models.Surface.ResidueCanopy">
            <summary>
            Class that holds Icanopy interface members
            </summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.LAI">
            <summary>Gets the LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.LAITotal">
            <summary>Gets the maximum LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.CoverGreen">
            <summary>Gets the cover green (0-1)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.CoverTotal">
            <summary>Gets the cover total (0-1)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.Height">
            <summary>Gets the canopy height (mm)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.Depth">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.Width">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.PotentialEP">
            <summary>Sets the potential evapotranspiration.</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.Surface.ResidueCanopy.LightProfile">
            <summary>Sets the light profile.</summary>
        </member>
        <member name="M:Models.Surface.ResidueCanopy.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.OMFractionType"/> class.</summary>
        </member>
        <member name="T:Models.Tests">
            <summary>
            Test interface.
            </summary>
        </member>
        <member name="P:Models.Tests.Table">
            <summary>
            data table
            </summary>
        </member>
        <member name="P:Models.Tests.AcceptedStats">
            <summary>
            A collection of validated stats.
            </summary>
        </member>
        <member name="P:Models.Tests.AcceptedStatsName">
            <summary>
            A string containing the names of stats in the accepted values.
            Used for checking if the stats class has changed.
            </summary>
        </member>
        <member name="P:Models.Tests.POName">
            <summary>
            The name of the associated Predicted Observed node.
            </summary>
        </member>
        <member name="P:Models.Tests.Tables">
            <summary>
            Implementation of IModelAsTable - required for UI to work properly.
            </summary>
        </member>
        <member name="M:Models.Tests.Test(System.Boolean,System.Boolean)">
            <summary>
            Run tests
            </summary>
            <param name="accept">If true, the stats from this run will be written to file as the accepted stats.</param>
            <param name="GUIrun">If true, do not raise an exception on test failure.</param>
        </member>
        <member name="M:Models.Tests.Document">
            <summary>Document the stats.</summary>
        </member>
        <member name="T:Models.Utilities.Accumulator">
            <summary>
            This class accumulats values of variables
            </summary>
        </member>
        <member name="M:Models.Utilities.Accumulator.#ctor(Models.Core.IModel,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="model"></param>
            <param name="variableName"></param>
            <param name="numberOfDays">Number of days to accumulate</param>
        </member>
        <member name="M:Models.Utilities.Accumulator.Update">
            <summary>
            Perform update
            </summary>
        </member>
        <member name="P:Models.Utilities.Accumulator.Sum">
            <summary>
            Return the sum 
            </summary>
        </member>
        <member name="T:Models.Utilities.DebugLogger">
            <summary>
            A class used when trying to compare two models. It allows the caller to write objects
            to a text file that can then be easily diffed.
            </summary>
            <remarks>
            Use case: I am moving the patching code from SoilNitrogen to a PatchManager. I then want
            to compare two different simulations, one that uses the patching in SoilNitrogen and
            another that uses a PatchManager with the Nutrient model. This class lets me write
            variables to a text file in both simulations that I can then quickly diff using an
            external diff tool.
            </remarks>
        </member>
        <member name="M:Models.Utilities.DebugLogger.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation set up LifeCyclePhases</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Utilities.DebugLogger.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>At the start of the simulation set up LifeCyclePhases</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Utilities.DebugLogger.WriteObject(System.String,System.Object,System.Boolean)">
            <summary>Write an object to a file.</summary>
            <param name="name">The name of the object.</param>
            <param name="o">The object to write.</param>
            <param name="includePrivates">Include privates when writing an object?</param>
        </member>
        <member name="T:Models.Utilities.R">
            <summary>
            Class for executing arbitrary R code through APSIM.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.windowsDownloadUrl">
            <summary>
            Stable link which always points to the latest Windows release.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.workingDirectory">
            <summary>
            Path to a temporary working directory for the script.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.proc">
            <summary>
            Takes care of initialising and starting the process, reading output, etc.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.rScript">
            <summary>
            Holds the path to the Rscript executable.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.startupFile">
            <summary>
            Holds the path to an .RProfile file which is used to
            attempt to load and install packages from a special
            APSIM-specific directory, so as not to interfere with
            other user/system packages.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.cancelToken">
            <summary>
            Allows the caller to cancel the R process(es) started by this component.
            </summary>
        </member>
        <member name="P:Models.Utilities.R.PackagesDirectory">
            <summary>
            Directory to which packages will be installed.
            On Windows, this is %appdata%\ApsimInitiative\ApsimX\rpackages.
            On Linux, this is ~/.config/ApsimInitiative/ApsimX/rpackages.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.#ctor(System.Threading.CancellationToken)">
            <summary>
            Default constructor. Checks if R is installed.
            On Windows, prompts user to install if necessasry.
            Will throw on 'Nix systems if R is not installed.
            </summary>
            <param name="cancelToken">Allows the caller to cancel the R process(es) started by this component.</param>
        </member>
        <member name="M:Models.Utilities.R.Finalize">
            <summary>
            Destructor - deletes working directory.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.Finished">
            <summary>
            Invoked when the R script is finished.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.OnDownload">
            <summary>
            Method to be run before downloading R and installing R.
            R will not be downloaded if this returns false.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.OnDownloadCompleted">
            <summary>
            Method to run once R has finished downloading.
            </summary>
        </member>
        <member name="E:Models.Utilities.R.OutputReceived">
            <summary>
            Invoked whenever the R process writes to standard output.
            </summary>
        </member>
        <member name="E:Models.Utilities.R.ErrorReceived">
            <summary>
            Invoked whenever the R process writes to standard error.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.RunAsync(System.String,System.String[])">
            <summary>
            Starts the execution of an R script.
            </summary>
            <param name="fileName">Path to an R script. May be a file on disk, or an embedded resource.</param>
            <param name="arguments">Command line arguments to pass to the script.</param>
        </member>
        <member name="M:Models.Utilities.R.Run(System.String,System.Boolean,System.String[])">
            <summary>
            Runs an R script and blocks the current thread until the script finishes its execution.
            </summary>
            <param name="fileName">Path to an R script. May be a file on disk, or an embedded resource.</param>
            <param name="arguments">Command line arguments to pass to the script.</param>
            <param name="throwOnError">Throw on error from R?</param>
            <returns>Standard output generated by the R script.</returns>
        </member>
        <member name="M:Models.Utilities.R.RunToTable(System.String,System.String[])">
            <summary>
            Runs an R script (synchronously) and returns the stdout as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="fileName">Path to an R script. May be a file on disk, or an embedded resource.</param>
            <param name="arguments">Command line arguments to pass to the script.</param>
            <returns>Output formatted as a <see cref="T:System.Data.DataTable"/>.</returns>
            <remarks>Not sure that this method really belongs in this class, but it can stay here for now.</remarks>
        </member>
        <member name="M:Models.Utilities.R.Kill">
            <summary>
            Kills the process running the R script.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.InstallPackage(System.String)">
            <summary>
            Installs an R package if it is not already installed.
            </summary>
            <param name="package">List of packages to be installed.</param>
            <returns>Path to the library's install location.</returns>
        </member>
        <member name="M:Models.Utilities.R.InstallPackageFromGithub(System.String)">
            <summary>
            Installs an R package if it is not already installed.
            </summary>
            <param name="package">Name of the package to be installed.</param>
        </member>
        <member name="M:Models.Utilities.R.InstallFromGithub(System.String[])">
            <summary>
            Install multiple packages from github.
            </summary>
            <param name="packages">Packages to be installed.</param>
        </member>
        <member name="M:Models.Utilities.R.InstallPackages(System.String[])">
            <summary>
            Install multiple packages.
            </summary>
            <param name="packages">Packages to be installed.</param>
        </member>
        <member name="M:Models.Utilities.R.OnExited(System.Object,System.EventArgs)">
            <summary>
            Runs when the script has finished running.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Utilities.R.GetRExePath">
            <summary>
            Get path to RScript.exe
            By default we try to use the 64-bit version.
            </summary>
            <returns>Path to RScript.exe</returns>
        </member>
        <member name="M:Models.Utilities.R.GetRInstallDirectoryFromRegistry">
            <summary>
            Gets the directory that the latest version of R is installed to.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.GetSubKeys(System.String)">
            <summary>
            Gets all sub keys of a given key name in the registry.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Utilities.R.DownloadR">
            <summary>
            Downloads R to the user's machine.
            </summary>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.Net.WebException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.Exception" />
        </member>
        <member name="M:Models.Utilities.R.InstallR(System.String)">
            <summary>
            Runs the R installer.
            </summary>
            <param name="installerPath">Path to the installer.</param>
        </member>
        <member name="M:Models.Utilities.R.GetPathToPackage(System.String)">
            <summary>
            Gets the path to an executable (uses the Unix which utility). 
            Throws if the package does not exist. Obviously this will not
            work on Windows.
            </summary>
        </member>
        <member name="T:Models.Utilities.RegressionUtilities">
            <summary>
            A collection of Regression utilities.
            </summary>
        </member>
        <member name="M:Models.Utilities.RegressionUtilities.ExponentialFit(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Performs an exponential regression.
            </summary>
            <param name="x">x data</param>
            <param name="y">y data</param>
            <param name="method">Regression method to use.</param>
        </member>
        <member name="M:Models.Utilities.RegressionUtilities.ExponentialFitStats(System.Double[],System.Double[])">
            <summary>
            Gets stats for an exponential regression.
            </summary>
            <param name="x">x data</param>
            <param name="y">y data</param>
        </member>
        <member name="M:Models.Utilities.RegressionUtilities.PolyFit(System.Double[],System.Double[],System.Int32)">
            <summary>
            Performs a polynomial regression.
            </summary>
            <param name="x">x data</param>
            <param name="y">y data</param>
            <param name="n">Degree of polynomial.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Utilities.RegressionUtilities.PolyFitStats(System.Double[],System.Double[],System.Int32)">
            <summary>
            Gets stats for a polynomial regression.
            </summary>
            <param name="x">x data</param>
            <param name="y">y data</param>
            <param name="n">Degree of polynomial.</param>
        </member>
        <member name="T:Models.Utilities.UnitsConverter">
            <summary>
            Collection of units conversion extension functions
            Doubles conversion only - no checking if the calc is a legitimate one
            </summary>
        </member>
        <member name="M:Models.Utilities.UnitsConverter.ConvertSqM2SqMM(System.Double)">
            <summary>Convert Millimetres Squared to Metres Squared </summary>
        </member>
        <member name="T:Models.Zones.CircularZone">
            <summary>A circular zone.</summary>
        </member>
        <member name="P:Models.Zones.CircularZone.Radius">
            <summary>Radius of the zone.</summary>
            <value>The radius.</value>
        </member>
        <member name="P:Models.Zones.CircularZone.Width">
            <summary>Width of the zone.</summary>
            <value>The width.</value>
        </member>
        <member name="P:Models.Zones.CircularZone.Distance">
            <summary>
            Returns the distance from edge of system
            </summary>
        </member>
        <member name="P:Models.Zones.CircularZone.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="T:Models.Zones.RectangularZone">
            <summary>A rectangular zone.</summary>
        </member>
        <member name="P:Models.Zones.RectangularZone.Length">
            <summary>Length of the zone.</summary>
            <value>The length.</value>
        </member>
        <member name="P:Models.Zones.RectangularZone.Width">
            <summary>Width of the zone.</summary>
            <value>The width.</value>
        </member>
        <member name="P:Models.Zones.RectangularZone.Distance">
            <summary>
            Returns the distance from edge of system
            </summary>
        </member>
        <member name="P:Models.Zones.RectangularZone.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="T:StdUnits.StdDate">
            <summary>
            GrazPlan date utilities
            </summary>
        </member>
        <member name="F:StdUnits.StdDate.CumulDays">
            <summary>
            No. of days up to the last day of previous month. 29 Feb not included   [months 1..12]
            </summary>
        </member>
        <member name="F:StdUnits.StdDate.LastDay">
            <summary>
            Last day of each month   [1..12]
            </summary>
        </member>
        <member name="F:StdUnits.StdDate.MonthText">
            <summary>
            Short text name of the month
            </summary>
        </member>
        <member name="M:StdUnits.StdDate.DateVal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the date value for specified dmy
            </summary>
            <param name="day">Day number</param>
            <param name="month">Month number</param>
            <param name="year">Year number</param>
            <returns>The date value integer</returns>
        </member>
        <member name="M:StdUnits.StdDate.DayOf(System.Int32)">
            <summary>
            Get the day of month from the date value
            </summary>
            <param name="dateVal">Date value</param>
            <returns>Day of month</returns>
        </member>
        <member name="M:StdUnits.StdDate.MonthOf(System.Int32)">
            <summary>
            Get the month of the year from the date value
            </summary>
            <param name="dateVal">Date value</param>
            <returns>Month of year</returns>
        </member>
        <member name="M:StdUnits.StdDate.YearOf(System.Int32)">
            <summary>
            Get the year number from the date value
            </summary>
            <param name="dateVal">The date value</param>
            <returns>Year number</returns>
        </member>
        <member name="M:StdUnits.StdDate.DateValid(System.Int32)">
            <summary>
            Test that this is a real date
            </summary>
            <param name="dateVal">Date value</param>
            <returns>True if this is a valid date</returns>
        </member>
        <member name="M:StdUnits.StdDate.LeapYear(System.Int32)">
            <summary>
            Is a year a leap year?  N.B. returns TRUE for Y=0                         }
            </summary>
            <param name="yr">Year number</param>
            <returns>True if leap year</returns>
        </member>
        <member name="M:StdUnits.StdDate.Num2Str(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Format a number with or without zeros
            </summary>
            <param name="number">The input number</param>
            <param name="len">Picture length</param>
            <param name="zeroFill">Fill with zeros?</param>
            <returns>Formatted number</returns>
        </member>
        <member name="M:StdUnits.StdDate.DateStrFmt(System.Int32,System.String)">
            <summary>
            Format a date value
            </summary>
            <param name="dateVal">Date value</param>
            <param name="format">Format string YYYY, yy, YY, mmm, MM, mm, M, DD, dd, D</param>
            <returns>Formatted date string</returns>
        </member>
        <member name="M:StdUnits.StdDate.MonthLength(System.Int32,System.Int32)">
            <summary>
            Get the length of the month in days
            </summary>
            <param name="month">Month number</param>
            <param name="yr">Year number</param>
            <returns>Days in the month</returns>
        </member>
        <member name="M:StdUnits.StdDate.MonthShift(StdUnits.DMY@,System.Int32)">
            <summary>
             Shift a date by a given number of months                              
            </summary>
            <param name="dateInYear">Original date value</param>
            <param name="months">Months to increment by</param>
        </member>
        <member name="M:StdUnits.StdDate.DateShift(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Change a date by a given number of days, months and/or years, forward or back.                                                                     
            </summary>
            <param name="dateVal">Starting date value</param>
            <param name="shiftDays">Number of days</param>
            <param name="shiftMonths">Number of months</param>
            <param name="shiftYears">Number of years</param>
            <returns>Date moved</returns>
        </member>
        <member name="M:StdUnits.StdDate.Interval(System.Int32,System.Int32)">
            <summary>
             Interval between two dates.  Note that Interval(D,D) = 0.                 
            </summary>
            <param name="date1">First date</param>
            <param name="date2">End date</param>
            <returns>The interval in days</returns>
        </member>
        <member name="M:StdUnits.StdDate.DOY(System.Int32,System.Boolean)">
            <summary>
            Day of year function.                                                     
            </summary>
            <param name="dateVal">Date to convert to day-of-year</param>
            <param name="useYr">If TRUE, Feb 29 is counted if YearOf(D) is zero or a leap year.  
                     If FALSE, Feb 29 is counted regardless of the year.</param>
            <returns>Day of year</returns>
        </member>
        <member name="T:StdUnits.DMY">
            <summary>
            Split the long integer into three       
            parts: day and month get a byte each,  
            year gets two. Note that this arrangement allows relational                   
            operators to be used on date values
            </summary>
        </member>
        <member name="F:StdUnits.DMY.D">
            <summary>
            Day value
            </summary>
        </member>
        <member name="F:StdUnits.DMY.M">
            <summary>
            Month value
            </summary>
        </member>
        <member name="F:StdUnits.DMY.Y">
            <summary>
            Year value
            </summary>
        </member>
        <member name="T:StdUnits.StdMath">
            <summary>
            Math utilities
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.MISSING">
            <summary>
            Missing float value
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.DMISSING">
            <summary>
            missing double value
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.Root2Pi">
            <summary>
            Square root of 2 * pi
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.EPS">
            <summary>
            Small value 1E-7
            </summary>
        </member>
        <member name="M:StdUnits.StdMath.Sqr(System.Double)">
            <summary>
            Square the value
            </summary>
            <param name="value"></param>
            <returns>Value squared</returns>
        </member>
        <member name="M:StdUnits.StdMath.DIM(System.Double,System.Double)">
            <summary>
            Mimics FORTRAN DIM function              
            </summary>
            <param name="X">X value</param>
            <param name="Y">Y value</param>
            <returns>The difference if X >= Y</returns>
        </member>
        <member name="M:StdUnits.StdMath.IDIM(System.Int32,System.Int32)">
            <summary>
            Integer DIM function
            </summary>
            <param name="X">X value</param>
            <param name="Y">Y value</param>
            <returns>The difference if X >= Y</returns>
        </member>
        <member name="M:StdUnits.StdMath.RAMP(System.Double,System.Double,System.Double)">
            <summary>
            RAMP function
            </summary>
            <param name="X">X value</param>
            <param name="Z1">Z1 value</param>
            <param name="Z2">Z2 value</param>
            <returns>The result</returns>
        </member>
        <member name="M:StdUnits.StdMath.Divide(System.Double,System.Double,System.Double)">
            <summary>
            Divide value1 by value2. On error, the value errVal will be returned.
            </summary>
            <param name="value1">Value 1</param>
            <param name="value2">Value 2</param>
            <param name="errVal">Error value</param>
            <returns>The result of the division if the denominator is > 0</returns>
        </member>
        <member name="M:StdUnits.StdMath.XDiv(System.Double,System.Double)">
            <summary>
            Division operation. If numerator is close to zero then return 0.0
            </summary>
            <param name="X">X value</param>
            <param name="Y">Y value</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:StdUnits.StdMath.Pow(System.Double,System.Double)">
            <summary>
            Raise a number to a power. Throws exception when X is -ve.
            </summary>
            <param name="X">X Value</param>
            <param name="Y">Indice Y</param>
            <returns>Zero if X is close to zero. Otherwise X^Y</returns>
        </member>
        <member name="M:StdUnits.StdMath.CumNormal(System.Double)">
            <summary>
            CumNormal function
            </summary>
            <param name="x">x value</param>
            <returns>The result</returns>
        </member>
        <member name="M:StdUnits.StdMath.SIG(System.Double,System.Double[])">
            <summary>
            SIG function
            </summary>
            <param name="X">X value</param>
            <param name="C">C array</param>
            <returns>The result</returns>
        </member>
        <member name="T:StdUnits.StdMath.TSigConsts">
            <summary>
            Constants class
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.TSigConsts.values">
            <summary>
            Array of values
            </summary>
        </member>
        <member name="T:StdUnits.MyRandom">
            <summary>
            The random number class
            </summary>
        </member>
        <member name="F:StdUnits.MyRandom.SysRandom">
            <summary>
            The system random object
            </summary>
        </member>
        <member name="F:StdUnits.MyRandom.FNextRandom">
            <summary>
            Next random number
            </summary>
        </member>
        <member name="F:StdUnits.MyRandom.FRandomBuffer">
            <summary>
            Array of random numbers
            </summary>
        </member>
        <member name="F:StdUnits.MyRandom.FRandNo">
            <summary>
            
            </summary>
        </member>
        <member name="F:StdUnits.MyRandom.FSeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:StdUnits.MyRandom.MyRandomize">
            <summary>
            Fill the array buffer with random numbers
            </summary>
        </member>
        <member name="M:StdUnits.MyRandom.Random">
            <summary>
            Generate a random number 0 - 1
            </summary>
            <returns>The random number</returns>
        </member>
        <member name="M:StdUnits.MyRandom.#ctor(System.Int32)">
            <summary>
            Container class for a random number generator. This means that it becomes
            thread safe and won't be trampled my another thread generating random
            numbers. Code moved from global implementation in StdMATH.pas and System.pas.
            </summary>
            <param name="seedVal">The seed value</param>
        </member>
        <member name="M:StdUnits.MyRandom.Initialise(System.Int32)">
            <summary>
            Uses the SeedVal if it is > 0 otherwise it uses the system seed generated
            </summary>
            <param name="seedVal">The seed value</param>
        </member>
        <member name="M:StdUnits.MyRandom.RandomValue">
            <summary>
            Calculate a random number to insert into the buffer
            </summary>
            <returns>The random number</returns>
        </member>
        <member name="M:StdUnits.MyRandom.RndRound(System.Double)">
            <summary>
            Get an integer random number
            </summary>
            <param name="x">x value</param>
            <returns>Random value</returns>
        </member>
        <member name="M:StdUnits.MyRandom.RndPropn(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="N"></param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="P:StdUnits.MyRandom.RandNo">
            <summary>
            Gets the random number
            </summary>
        </member>
        <member name="P:StdUnits.MyRandom.Seed">
            <summary>
            Gets the seed value
            </summary>
        </member>
        <member name="T:StdUnits.StdStrng">
            <summary>
            String utility functions
            </summary>
        </member>
        <member name="F:StdUnits.StdStrng.whitespace">
            <summary>
            Whitespace characters
            </summary>
        </member>
        <member name="F:StdUnits.StdStrng.punctuation">
            <summary>
            Punctuation marks
            </summary>
        </member>
        <member name="M:StdUnits.StdStrng.TextToken(System.String@,System.String@,System.Boolean)">
            <summary>
            TextToken strips the first token from a string.
            </summary>
            <param name="inSt">String from which a token is to be taken.  It is returned as the
            remaining part of the input value (including any leading whitespace).
            </param>
            <param name="token">Returned as the token which has been taken from InSt.  If InSt is
            null or entirely whitespace, then Token will be the null string.
            </param>
            <param name="retainCase">If true, case is unchanged, otherwise the "returned" token is converted
            to uppercase.</param>
        </member>
        <member name="M:StdUnits.StdStrng.MatchToken(System.String@,System.String)">
            <summary>
            Function which returns TRUE i.f.f. the first token in a string matches
            an input token.  The match is case-insensitive. 
            </summary>
            <param name="inSt">
            String in which to look for Match.  If Match is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace) on return. If not, inSt is returned unchanged. 
            </param>
            <param name="match">
            Token to be sought.  If Match is not a token, its first token is used instead. 
            </param>
            <returns>
            TRUE i.f.f. the first token in a string match
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenInt(System.String@,System.Int32@)">
            <summary>
            Take an integer from the front of a string.
            </summary>
            <param name="inSt">
            String from which to take an integer.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="n">
            Returns the integer value.  If no integer is found in the string, 
            N is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. an integer was found.
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenFloat(System.String@,System.Single@)">
            <summary>
            Take a floating-point value from the front of a string.
             Rules are analogous to Token_Int. Exponential notation is dealt with.
            </summary>
            <param name="inSt">
            String from which to take a value.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="x">
            Returns the value.  If no value is found in the string, 
            x is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. a value was found.
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenDouble(System.String@,System.Double@)">
            <summary>
            Take a double value from the front of a string.
             Rules are analogous to Token_Int. Exponential notation is dealt with.
            </summary>
            <param name="inSt">
            String from which to take a value.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="x">
            Returns the value.  If no value is found in the string, 
            x is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. a value was found.
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenDate(System.String@,System.Int32@)">
            <summary>
            Token_Date follows the same rules for its parameters as Token_Int.  It    
            expects day to precede months, and months to precede years, but it can    
            cope with D-M-Y and D-M-0 kinds of date.  Token_Date is implemented as a  
            state-based parser:                                                       
            -----                                                                           
            State                     Next token  Token means  Go to state            
            -----                     ----------  -----------  -----------            
            -1   Error                                                              
            0   Start of parsing   Number       Day of month    1                  
                                     else                      -1                  
            1   Past day           '/' or '-'   Delimiter       2                  
                                   JAN-DEC      Month           3                  
                                     else                       2                  
            2   Numeric month      1-12         Month           3                  
                                     else                      -1                  
            3   Past month         '/' or '-'   Delimiter       3                  
                                   Number       Year            4                  
                                     else       Year=0          4                  
            </summary>
            <param name="inputStr">Input date string</param>
            <param name="dateValue">Returned date</param>
            <returns>True is parsed ok</returns>
        </member>
        <member name="T:CropConstants">
            <summary>
            Sugar constants
            </summary>
        </member>
        <member name="F:CropConstants.max_table">
            <summary>
            The max_table
            </summary>
        </member>
        <member name="F:CropConstants.max_stage">
            <summary>
            The max_stage
            </summary>
        </member>
        <member name="F:CropConstants.max_part">
            <summary>
            The max_part
            </summary>
        </member>
        <member name="P:CropConstants.stage_names">
            <summary>
            Gets or sets the stage_names.
            </summary>
            <value>
            The stage_names.
            </value>
        </member>
        <member name="P:CropConstants.stage_code_list">
            <summary>
            Gets or sets the stage_code_list.
            </summary>
            <value>
            The stage_code_list.
            </value>
        </member>
        <member name="P:CropConstants.rue">
            <summary>
            Gets or sets the rue.
            </summary>
            <value>
            The rue.
            </value>
        </member>
        <member name="P:CropConstants.root_depth_rate">
            <summary>
            Gets or sets the root_depth_rate.
            </summary>
            <value>
            The root_depth_rate.
            </value>
        </member>
        <member name="P:CropConstants.ratio_root_shoot">
            <summary>
            Gets or sets the ratio_root_shoot.
            </summary>
            <value>
            The ratio_root_shoot.
            </value>
        </member>
        <member name="P:CropConstants.transp_eff_cf">
            <summary>
            Gets or sets the transp_eff_cf.
            </summary>
            <value>
            The transp_eff_cf.
            </value>
        </member>
        <member name="P:CropConstants.n_fix_rate">
            <summary>
            Gets or sets the n_fix_rate.
            </summary>
            <value>
            The n_fix_rate.
            </value>
        </member>
        <member name="P:CropConstants.extinction_coef">
            <summary>
            Gets or sets the extinction_coef.
            </summary>
            <value>
            The extinction_coef.
            </value>
        </member>
        <member name="P:CropConstants.extinction_coef_dead">
            <summary>
            Gets or sets the extinction_coef_dead.
            </summary>
            <value>
            The extinction_coef_dead.
            </value>
        </member>
        <member name="P:CropConstants.leaf_no_crit">
            <summary>
            Gets or sets the leaf_no_crit.
            </summary>
            <value>
            The leaf_no_crit.
            </value>
        </member>
        <member name="P:CropConstants.tt_emerg_limit">
            <summary>
            Gets or sets the tt_emerg_limit.
            </summary>
            <value>
            The tt_emerg_limit.
            </value>
        </member>
        <member name="P:CropConstants.days_germ_limit">
            <summary>
            Gets or sets the days_germ_limit.
            </summary>
            <value>
            The days_germ_limit.
            </value>
        </member>
        <member name="P:CropConstants.swdf_pheno_limit">
            <summary>
            Gets or sets the swdf_pheno_limit.
            </summary>
            <value>
            The swdf_pheno_limit.
            </value>
        </member>
        <member name="P:CropConstants.swdf_photo_limit">
            <summary>
            Gets or sets the swdf_photo_limit.
            </summary>
            <value>
            The swdf_photo_limit.
            </value>
        </member>
        <member name="P:CropConstants.swdf_photo_rate">
            <summary>
            Gets or sets the swdf_photo_rate.
            </summary>
            <value>
            The swdf_photo_rate.
            </value>
        </member>
        <member name="P:CropConstants.initial_root_depth">
            <summary>
            Gets or sets the initial_root_depth.
            </summary>
            <value>
            The initial_root_depth.
            </value>
        </member>
        <member name="P:CropConstants.specific_root_length">
            <summary>
            Gets or sets the specific_root_length.
            </summary>
            <value>
            The specific_root_length.
            </value>
        </member>
        <member name="P:CropConstants.x_plant_rld">
            <summary>
            Gets or sets the x_plant_rld.
            </summary>
            <value>
            The x_plant_rld.
            </value>
        </member>
        <member name="P:CropConstants.y_rel_root_rate">
            <summary>
            Gets or sets the y_rel_root_rate.
            </summary>
            <value>
            The y_rel_root_rate.
            </value>
        </member>
        <member name="P:CropConstants.root_die_back_fr">
            <summary>
            Gets or sets the root_die_back_fr.
            </summary>
            <value>
            The root_die_back_fr.
            </value>
        </member>
        <member name="P:CropConstants.initial_tpla">
            <summary>
            Gets or sets the initial_tpla.
            </summary>
            <value>
            The initial_tpla.
            </value>
        </member>
        <member name="P:CropConstants.sla_lfno">
            <summary>
            Gets or sets the sla_lfno.
            </summary>
            <value>
            The sla_lfno.
            </value>
        </member>
        <member name="P:CropConstants.sla_max">
            <summary>
            Gets or sets the sla_max.
            </summary>
            <value>
            The sla_max.
            </value>
        </member>
        <member name="P:CropConstants.sla_min">
            <summary>
            Gets or sets the sla_min.
            </summary>
            <value>
            The sla_min.
            </value>
        </member>
        <member name="P:CropConstants.x_stem_wt">
            <summary>
            Gets or sets the x_stem_wt.
            </summary>
            <value>
            The x_stem_wt.
            </value>
        </member>
        <member name="P:CropConstants.y_height">
            <summary>
            Gets or sets the y_height.
            </summary>
            <value>
            The y_height.
            </value>
        </member>
        <member name="P:CropConstants.svp_fract">
            <summary>
            Gets or sets the svp_fract.
            </summary>
            <value>
            The svp_fract.
            </value>
        </member>
        <member name="P:CropConstants.eo_crop_factor_default">
            <summary>
            Gets or sets the eo_crop_factor_default.
            </summary>
            <value>
            The eo_crop_factor_default.
            </value>
        </member>
        <member name="P:CropConstants.pesw_germ">
            <summary>
            Gets or sets the pesw_germ.
            </summary>
            <value>
            The pesw_germ.
            </value>
        </member>
        <member name="P:CropConstants.fasw_emerg">
            <summary>
            Gets or sets the fasw_emerg.
            </summary>
            <value>
            The fasw_emerg.
            </value>
        </member>
        <member name="P:CropConstants.rel_emerg_rate">
            <summary>
            Gets or sets the rel_emerg_rate.
            </summary>
            <value>
            The rel_emerg_rate.
            </value>
        </member>
        <member name="P:CropConstants.leaf_no_at_emerg">
            <summary>
            Gets or sets the leaf_no_at_emerg.
            </summary>
            <value>
            The leaf_no_at_emerg.
            </value>
        </member>
        <member name="P:CropConstants.shoot_lag">
            <summary>
            Gets or sets the shoot_lag.
            </summary>
            <value>
            The shoot_lag.
            </value>
        </member>
        <member name="P:CropConstants.shoot_rate">
            <summary>
            Gets or sets the shoot_rate.
            </summary>
            <value>
            The shoot_rate.
            </value>
        </member>
        <member name="P:CropConstants.x_node_no_app">
            <summary>
            Gets or sets the x_node_no_app.
            </summary>
            <value>
            The x_node_no_app.
            </value>
        </member>
        <member name="P:CropConstants.y_node_app_rate">
            <summary>
            Gets or sets the y_node_app_rate.
            </summary>
            <value>
            The y_node_app_rate.
            </value>
        </member>
        <member name="P:CropConstants.x_node_no_leaf">
            <summary>
            Gets or sets the x_node_no_leaf.
            </summary>
            <value>
            The x_node_no_leaf.
            </value>
        </member>
        <member name="P:CropConstants.y_leaves_per_node">
            <summary>
            Gets or sets the y_leaves_per_node.
            </summary>
            <value>
            The y_leaves_per_node.
            </value>
        </member>
        <member name="P:CropConstants.dm_root_init">
            <summary>
            Gets or sets the dm_root_init.
            </summary>
            <value>
            The dm_root_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_sstem_init">
            <summary>
            Gets or sets the dm_sstem_init.
            </summary>
            <value>
            The dm_sstem_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_leaf_init">
            <summary>
            Gets or sets the dm_leaf_init.
            </summary>
            <value>
            The dm_leaf_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_cabbage_init">
            <summary>
            Gets or sets the dm_cabbage_init.
            </summary>
            <value>
            The dm_cabbage_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_sucrose_init">
            <summary>
            Gets or sets the dm_sucrose_init.
            </summary>
            <value>
            The dm_sucrose_init.
            </value>
        </member>
        <member name="P:CropConstants.leaf_cabbage_ratio">
            <summary>
            Gets or sets the leaf_cabbage_ratio.
            </summary>
            <value>
            The leaf_cabbage_ratio.
            </value>
        </member>
        <member name="P:CropConstants.cabbage_sheath_fr">
            <summary>
            Gets or sets the cabbage_sheath_fr.
            </summary>
            <value>
            The cabbage_sheath_fr.
            </value>
        </member>
        <member name="P:CropConstants.dm_root_sen_frac">
            <summary>
            Gets or sets the dm_root_sen_frac.
            </summary>
            <value>
            The dm_root_sen_frac.
            </value>
        </member>
        <member name="P:CropConstants.dead_detach_frac">
            <summary>
            Gets or sets the dead_detach_frac.
            </summary>
            <value>
            The dead_detach_frac.
            </value>
        </member>
        <member name="P:CropConstants.sen_detach_frac">
            <summary>
            Gets or sets the sen_detach_frac.
            </summary>
            <value>
            The sen_detach_frac.
            </value>
        </member>
        <member name="P:CropConstants.leaf_no_correction">
            <summary>
            Gets or sets the leaf_no_correction.
            </summary>
            <value>
            The leaf_no_correction.
            </value>
        </member>
        <member name="P:CropConstants.lai_sen_light">
            <summary>
            Gets or sets the lai_sen_light.
            </summary>
            <value>
            The lai_sen_light.
            </value>
        </member>
        <member name="P:CropConstants.sen_light_slope">
            <summary>
            Gets or sets the sen_light_slope.
            </summary>
            <value>
            The sen_light_slope.
            </value>
        </member>
        <member name="P:CropConstants.frost_temp">
            <summary>
            Gets or sets the frost_temp.
            </summary>
            <value>
            The frost_temp.
            </value>
        </member>
        <member name="P:CropConstants.frost_fraction">
            <summary>
            Gets or sets the frost_fraction.
            </summary>
            <value>
            The frost_fraction.
            </value>
        </member>
        <member name="P:CropConstants.sen_rate_water">
            <summary>
            Gets or sets the sen_rate_water.
            </summary>
            <value>
            The sen_rate_water.
            </value>
        </member>
        <member name="P:CropConstants.twilight">
            <summary>
            Gets or sets the twilight.
            </summary>
            <value>
            The twilight.
            </value>
        </member>
        <member name="P:CropConstants.x_stage_code">
            <summary>
            Gets or sets the x_stage_code.
            </summary>
            <value>
            The x_stage_code.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_crit_leaf">
            <summary>
            critical N concentration of leaf (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_crit_leaf.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_min_leaf">
            <summary>
            minimum N concentration of leaf (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_min_leaf.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_crit_cane">
            <summary>
            critical N concentration of stem (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_crit_cane.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_min_cane">
            <summary>
            minimum N concentration of stem (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_min_cane.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_crit_cabbage">
            <summary>
            critical N concentration of flower(g N/g biomass)
            </summary>
            <value>
            The y_n_conc_crit_cabbage.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_min_cabbage">
            <summary>
            minimum N concentration of flower (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_min_cabbage.
            </value>
        </member>
        <member name="P:CropConstants.n_conc_crit_root">
            <summary>
            Gets or sets the n_conc_crit_root.
            </summary>
            <value>
            The n_conc_crit_root.
            </value>
        </member>
        <member name="P:CropConstants.n_conc_min_root">
            <summary>
            Gets or sets the n_conc_min_root.
            </summary>
            <value>
            The n_conc_min_root.
            </value>
        </member>
        <member name="P:CropConstants.n_root_init_conc">
            <summary>
            Gets or sets the n_root_init_conc.
            </summary>
            <value>
            The n_root_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_sstem_init_conc">
            <summary>
            Gets or sets the n_sstem_init_conc.
            </summary>
            <value>
            The n_sstem_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_leaf_init_conc">
            <summary>
            Gets or sets the n_leaf_init_conc.
            </summary>
            <value>
            The n_leaf_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_cabbage_init_conc">
            <summary>
            Gets or sets the n_cabbage_init_conc.
            </summary>
            <value>
            The n_cabbage_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_root_sen_conc">
            <summary>
            Gets or sets the n_root_sen_conc.
            </summary>
            <value>
            The n_root_sen_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_leaf_sen_conc">
            <summary>
            Gets or sets the n_leaf_sen_conc.
            </summary>
            <value>
            The n_leaf_sen_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_cabbage_sen_conc">
            <summary>
            Gets or sets the n_cabbage_sen_conc.
            </summary>
            <value>
            The n_cabbage_sen_conc.
            </value>
        </member>
        <member name="P:CropConstants.x_ave_temp">
            <summary>
            Gets or sets the x_ave_temp.
            </summary>
            <value>
            The x_ave_temp.
            </value>
        </member>
        <member name="P:CropConstants.y_stress_photo">
            <summary>
            Gets or sets the y_stress_photo.
            </summary>
            <value>
            The y_stress_photo.
            </value>
        </member>
        <member name="P:CropConstants.x_ave_temp_stalk">
            <summary>
            Gets or sets the x_ave_temp_stalk.
            </summary>
            <value>
            The x_ave_temp_stalk.
            </value>
        </member>
        <member name="P:CropConstants.y_stress_stalk">
            <summary>
            Gets or sets the y_stress_stalk.
            </summary>
            <value>
            The y_stress_stalk.
            </value>
        </member>
        <member name="P:CropConstants.x_temp">
            <summary>
            Gets or sets the x_temp.
            </summary>
            <value>
            The x_temp.
            </value>
        </member>
        <member name="P:CropConstants.y_tt">
            <summary>
            Gets or sets the y_tt.
            </summary>
            <value>
            The y_tt.
            </value>
        </member>
        <member name="P:CropConstants.x_sw_demand_ratio">
            <summary>
            Gets or sets the x_sw_demand_ratio.
            </summary>
            <value>
            The x_sw_demand_ratio.
            </value>
        </member>
        <member name="P:CropConstants.y_swdef_leaf">
            <summary>
            Gets or sets the y_swdef_leaf.
            </summary>
            <value>
            The y_swdef_leaf.
            </value>
        </member>
        <member name="P:CropConstants.x_demand_ratio_stalk">
            <summary>
            Gets or sets the x_demand_ratio_stalk.
            </summary>
            <value>
            The x_demand_ratio_stalk.
            </value>
        </member>
        <member name="P:CropConstants.y_swdef_stalk">
            <summary>
            Gets or sets the y_swdef_stalk.
            </summary>
            <value>
            The y_swdef_stalk.
            </value>
        </member>
        <member name="P:CropConstants.x_sw_avail_ratio">
            <summary>
            Gets or sets the x_sw_avail_ratio.
            </summary>
            <value>
            The x_sw_avail_ratio.
            </value>
        </member>
        <member name="P:CropConstants.y_swdef_pheno">
            <summary>
            Gets or sets the y_swdef_pheno.
            </summary>
            <value>
            The y_swdef_pheno.
            </value>
        </member>
        <member name="P:CropConstants.x_sw_ratio">
            <summary>
            Gets or sets the x_sw_ratio.
            </summary>
            <value>
            The x_sw_ratio.
            </value>
        </member>
        <member name="P:CropConstants.y_sw_fac_root">
            <summary>
            Gets or sets the y_sw_fac_root.
            </summary>
            <value>
            The y_sw_fac_root.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_photo">
            <summary>
            Gets or sets the k_nfact_photo.
            </summary>
            <value>
            The k_nfact_photo.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_expansion">
            <summary>
            Gets or sets the k_nfact_expansion.
            </summary>
            <value>
            The k_nfact_expansion.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_stalk">
            <summary>
            Gets or sets the k_nfact_stalk.
            </summary>
            <value>
            The k_nfact_stalk.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_pheno">
            <summary>
            Gets or sets the k_nfact_pheno.
            </summary>
            <value>
            The k_nfact_pheno.
            </value>
        </member>
        <member name="P:CropConstants.oxdef_photo_rtfr">
            <summary>
            Gets or sets the oxdef_photo_rtfr.
            </summary>
            <value>
            The oxdef_photo_rtfr.
            </value>
        </member>
        <member name="P:CropConstants.oxdef_photo">
            <summary>
            Gets or sets the oxdef_photo.
            </summary>
            <value>
            The oxdef_photo.
            </value>
        </member>
        <member name="P:CropConstants.x_afps">
            <summary>
            Gets or sets the x_afps.
            </summary>
            <value>
            The x_afps.
            </value>
        </member>
        <member name="P:CropConstants.y_afps_fac">
            <summary>
            Gets or sets the y_afps_fac.
            </summary>
            <value>
            The y_afps_fac.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_max">
            <summary>
            Gets or sets the cane_dmf_max.
            </summary>
            <value>
            The cane_dmf_max.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_min">
            <summary>
            Gets or sets the cane_dmf_min.
            </summary>
            <value>
            The cane_dmf_min.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_tt">
            <summary>
            Gets or sets the cane_dmf_tt.
            </summary>
            <value>
            The cane_dmf_tt.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_rate">
            <summary>
            Gets or sets the cane_dmf_rate.
            </summary>
            <value>
            The cane_dmf_rate.
            </value>
        </member>
        <member name="P:CropConstants.stress_lodge">
            <summary>
            Gets or sets the stress_lodge.
            </summary>
            <value>
            The stress_lodge.
            </value>
        </member>
        <member name="P:CropConstants.death_fr_lodge">
            <summary>
            Gets or sets the death_fr_lodge.
            </summary>
            <value>
            The death_fr_lodge.
            </value>
        </member>
        <member name="P:CropConstants.lodge_redn_photo">
            <summary>
            Gets or sets the lodge_redn_photo.
            </summary>
            <value>
            The lodge_redn_photo.
            </value>
        </member>
        <member name="P:CropConstants.lodge_redn_sucrose">
            <summary>
            Gets or sets the lodge_redn_sucrose.
            </summary>
            <value>
            The lodge_redn_sucrose.
            </value>
        </member>
        <member name="P:CropConstants.lodge_redn_green_leaf">
            <summary>
            Gets or sets the lodge_redn_green_leaf.
            </summary>
            <value>
            The lodge_redn_green_leaf.
            </value>
        </member>
        <member name="P:CropConstants.num_plant_rld">
            <summary>
            Gets the num_plant_rld.
            </summary>
            <value>
            The num_plant_rld.
            </value>
        </member>
        <member name="P:CropConstants.num_sla_lfno">
            <summary>
            Gets the num_sla_lfno.
            </summary>
            <value>
            The num_sla_lfno.
            </value>
        </member>
        <member name="P:CropConstants.num_stem_wt">
            <summary>
            Gets the num_stem_wt.
            </summary>
            <value>
            The num_stem_wt.
            </value>
        </member>
        <member name="P:CropConstants.num_fasw_emerg">
            <summary>
            Gets the num_fasw_emerg.
            </summary>
            <value>
            The num_fasw_emerg.
            </value>
        </member>
        <member name="P:CropConstants.num_node_no_app">
            <summary>
            Gets the num_node_no_app.
            </summary>
            <value>
            The num_node_no_app.
            </value>
        </member>
        <member name="P:CropConstants.num_node_no_leaf">
            <summary>
            Gets the num_node_no_leaf.
            </summary>
            <value>
            The num_node_no_leaf.
            </value>
        </member>
        <member name="P:CropConstants.num_frost_temp">
            <summary>
            Gets the num_frost_temp.
            </summary>
            <value>
            The num_frost_temp.
            </value>
        </member>
        <member name="P:CropConstants.num_N_conc_stage">
            <summary>
            Gets the num_ n_conc_stage.
            </summary>
            <value>
            The num_ n_conc_stage.
            </value>
        </member>
        <member name="P:CropConstants.num_ave_temp">
            <summary>
            Gets the num_ave_temp.
            </summary>
            <value>
            The num_ave_temp.
            </value>
        </member>
        <member name="P:CropConstants.num_ave_temp_stalk">
            <summary>
            Gets the num_ave_temp_stalk.
            </summary>
            <value>
            The num_ave_temp_stalk.
            </value>
        </member>
        <member name="P:CropConstants.num_temp">
            <summary>
            Gets the num_temp.
            </summary>
            <value>
            The num_temp.
            </value>
        </member>
        <member name="P:CropConstants.num_sw_demand_ratio">
            <summary>
            Gets the num_sw_demand_ratio.
            </summary>
            <value>
            The num_sw_demand_ratio.
            </value>
        </member>
        <member name="P:CropConstants.num_demand_ratio_stalk">
            <summary>
            Gets the num_demand_ratio_stalk.
            </summary>
            <value>
            The num_demand_ratio_stalk.
            </value>
        </member>
        <member name="P:CropConstants.num_sw_avail_ratio">
            <summary>
            Gets the num_sw_avail_ratio.
            </summary>
            <value>
            The num_sw_avail_ratio.
            </value>
        </member>
        <member name="P:CropConstants.num_sw_ratio">
            <summary>
            Gets the num_sw_ratio.
            </summary>
            <value>
            The num_sw_ratio.
            </value>
        </member>
        <member name="P:CropConstants.num_oxdef_photo">
            <summary>
            Gets the num_oxdef_photo.
            </summary>
            <value>
            The num_oxdef_photo.
            </value>
        </member>
        <member name="P:CropConstants.num_afps">
            <summary>
            Gets the num_afps.
            </summary>
            <value>
            The num_afps.
            </value>
        </member>
        <member name="P:CropConstants.num_cane_dmf">
            <summary>
            Gets the num_cane_dmf.
            </summary>
            <value>
            The num_cane_dmf.
            </value>
        </member>
        <member name="P:CropConstants.num_stress_lodge">
            <summary>
            Gets the num_stress_lodge.
            </summary>
            <value>
            The num_stress_lodge.
            </value>
        </member>
        <member name="T:CultivarConstants">
            <summary>
            Cultivar constants class.
            </summary>
        </member>
        <member name="F:CultivarConstants.max_table">
            <summary>
            The max_table
            </summary>
        </member>
        <member name="F:CultivarConstants.max_leaf">
            <summary>
            The max_leaf
            </summary>
        </member>
        <member name="P:CultivarConstants.cultivar_name">
            <summary>
            Gets or sets the cultivar_name.
            </summary>
            <value>
            The cultivar_name.
            </value>
        </member>
        <member name="P:CultivarConstants.leaf_size">
            <summary>
            Gets or sets the leaf_size.
            </summary>
            <value>
            The leaf_size.
            </value>
        </member>
        <member name="P:CultivarConstants.leaf_size_no">
            <summary>
            Gets or sets the leaf_size_no.
            </summary>
            <value>
            The leaf_size_no.
            </value>
        </member>
        <member name="P:CultivarConstants.cane_fraction">
            <summary>
            Gets or sets the cane_fraction.
            </summary>
            <value>
            The cane_fraction.
            </value>
        </member>
        <member name="P:CultivarConstants.sucrose_fraction_stalk">
            <summary>
            Gets or sets the sucrose_fraction_stalk.
            </summary>
            <value>
            The sucrose_fraction_stalk.
            </value>
        </member>
        <member name="P:CultivarConstants.stress_factor_stalk">
            <summary>
            Gets or sets the stress_factor_stalk.
            </summary>
            <value>
            The stress_factor_stalk.
            </value>
        </member>
        <member name="P:CultivarConstants.sucrose_delay">
            <summary>
            Gets or sets the sucrose_delay.
            </summary>
            <value>
            The sucrose_delay.
            </value>
        </member>
        <member name="P:CultivarConstants.min_sstem_sucrose">
            <summary>
            Gets or sets the min_sstem_sucrose.
            </summary>
            <value>
            The min_sstem_sucrose.
            </value>
        </member>
        <member name="P:CultivarConstants.min_sstem_sucrose_redn">
            <summary>
            Gets or sets the min_sstem_sucrose_redn.
            </summary>
            <value>
            The min_sstem_sucrose_redn.
            </value>
        </member>
        <member name="P:CultivarConstants.tt_emerg_to_begcane">
            <summary>
            Gets or sets the tt_emerg_to_begcane.
            </summary>
            <value>
            The tt_emerg_to_begcane.
            </value>
        </member>
        <member name="P:CultivarConstants.tt_begcane_to_flowering">
            <summary>
            Gets or sets the tt_begcane_to_flowering.
            </summary>
            <value>
            The tt_begcane_to_flowering.
            </value>
        </member>
        <member name="P:CultivarConstants.tt_flowering_to_crop_end">
            <summary>
            Gets or sets the tt_flowering_to_crop_end.
            </summary>
            <value>
            The tt_flowering_to_crop_end.
            </value>
        </member>
        <member name="P:CultivarConstants.green_leaf_no">
            <summary>
            Gets or sets the green_leaf_no.
            </summary>
            <value>
            The green_leaf_no.
            </value>
        </member>
        <member name="P:CultivarConstants.tillerf_leaf_size">
            <summary>
            Gets or sets the tillerf_leaf_size.
            </summary>
            <value>
            The tillerf_leaf_size.
            </value>
        </member>
        <member name="P:CultivarConstants.tillerf_leaf_size_no">
            <summary>
            Gets or sets the tillerf_leaf_size_no.
            </summary>
            <value>
            The tillerf_leaf_size_no.
            </value>
        </member>
        <member name="P:CultivarConstants.num_leaf_size">
            <summary>
            Gets the num_leaf_size.
            </summary>
            <value>
            The num_leaf_size.
            </value>
        </member>
        <member name="P:CultivarConstants.num_stress_factor_stalk">
            <summary>
            Gets the num_stress_factor_stalk.
            </summary>
            <value>
            The num_stress_factor_stalk.
            </value>
        </member>
        <member name="P:CultivarConstants.num_tillerf_leaf_size">
            <summary>
            Gets the num_tillerf_leaf_size.
            </summary>
            <value>
            The num_tillerf_leaf_size.
            </value>
        </member>
        <member name="T:mu">
            <summary>
            Temporary class for math utilities.
            </summary>
        </member>
        <member name="M:mu.error_margin(System.Double)">
            <summary>
            Error_margins the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:mu.reals_are_equal(System.Double,System.Double)">
            <summary>
            Reals_are_equals the specified first.
            </summary>
            <param name="First">The first.</param>
            <param name="Second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:mu.reals_are_equal(System.Double,System.Double,System.Double)">
            <summary>
            Reals_are_equals the specified first.
            </summary>
            <param name="First">The first.</param>
            <param name="Second">The second.</param>
            <param name="Tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:mu.dim(System.Double,System.Double)">
            <summary>
            Dims the specified x.
            </summary>
            <param name="X">The x.</param>
            <param name="Y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:mu.RoundArray(System.Double[],System.Int32)">
            <summary>
            Rounds the array.
            </summary>
            <param name="InputArray">The input array.</param>
            <param name="DecimalPlaces">The decimal places.</param>
            <returns></returns>
        </member>
    </members>
</doc>
